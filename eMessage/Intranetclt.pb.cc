// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Intranetclt.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace isafetec {

namespace {

const ::google::protobuf::Descriptor* CltProcessFilterPolicy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CltProcessFilterPolicy_reflection_ = NULL;
const ::google::protobuf::Descriptor* CltProcessFilterPolicy_FilterNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CltProcessFilterPolicy_FilterNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* CltProcessFilterPolicyList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CltProcessFilterPolicyList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CltUrlFilterPolicy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CltUrlFilterPolicy_reflection_ = NULL;
const ::google::protobuf::Descriptor* CltUrlFilterPolicy_FilterNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CltUrlFilterPolicy_FilterNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* CltUrlFilterPolicyList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CltUrlFilterPolicyList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CltIPAndPortFilterPolicy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CltIPAndPortFilterPolicy_reflection_ = NULL;
const ::google::protobuf::Descriptor* CltIPAndPortFilterPolicy_FilterNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CltIPAndPortFilterPolicy_FilterNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* CltIPAndPortFilterPolicyList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CltIPAndPortFilterPolicyList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CltDeviceControlPolicy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CltDeviceControlPolicy_reflection_ = NULL;
const ::google::protobuf::Descriptor* CltDeviceControlPolicy_FilterNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CltDeviceControlPolicy_FilterNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* CltDeviceControlPolicyList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CltDeviceControlPolicyList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CltPrintControlPolicy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CltPrintControlPolicy_reflection_ = NULL;
const ::google::protobuf::Descriptor* CltPrintControlPolicy_FilterNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CltPrintControlPolicy_FilterNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* CltPrintControlPolicyList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CltPrintControlPolicyList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CltFileControlPolicy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CltFileControlPolicy_reflection_ = NULL;
const ::google::protobuf::Descriptor* CltFileControlPolicy_FilterNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CltFileControlPolicy_FilterNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* CltFileControlPolicyList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CltFileControlPolicyList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CltSystemControlPolicy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CltSystemControlPolicy_reflection_ = NULL;
const ::google::protobuf::Descriptor* CltSystemControlPolicy_FilterNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CltSystemControlPolicy_FilterNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* CltSystemControlPolicyList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CltSystemControlPolicyList_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileParamList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileParamList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CltLogPolcicy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CltLogPolcicy_reflection_ = NULL;
const ::google::protobuf::Descriptor* CltLogPolcicy_ScreenParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CltLogPolcicy_ScreenParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CltLogPolcicyList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CltLogPolcicyList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CltStreamControlPolicy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CltStreamControlPolicy_reflection_ = NULL;
const ::google::protobuf::Descriptor* CltStreamControlPolicy_FilterNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CltStreamControlPolicy_FilterNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* CltStreamControlPolicyList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CltStreamControlPolicyList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CltCommonPolicy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CltCommonPolicy_reflection_ = NULL;
const ::google::protobuf::Descriptor* CltCommonPolicy_ResScan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CltCommonPolicy_ResScan_reflection_ = NULL;
const ::google::protobuf::Descriptor* CltCommonPolicyList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CltCommonPolicyList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CltCheckPCIdlePolicy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CltCheckPCIdlePolicy_reflection_ = NULL;
const ::google::protobuf::Descriptor* CltAlarmPolicy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CltAlarmPolicy_reflection_ = NULL;
const ::google::protobuf::Descriptor* CltAlarmPolicyList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CltAlarmPolicyList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CltQQFilterPolicy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CltQQFilterPolicy_reflection_ = NULL;
const ::google::protobuf::Descriptor* CltQQFilterPolicy_FilterNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CltQQFilterPolicy_FilterNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* CltQQFilterPolicyList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CltQQFilterPolicyList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PRINT_FLT_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FILE_FLT_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MODE_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Intranetclt_2eproto() {
  protobuf_AddDesc_Intranetclt_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Intranetclt.proto");
  GOOGLE_CHECK(file != NULL);
  CltProcessFilterPolicy_descriptor_ = file->message_type(0);
  static const int CltProcessFilterPolicy_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltProcessFilterPolicy, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltProcessFilterPolicy, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltProcessFilterPolicy, last_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltProcessFilterPolicy, inuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltProcessFilterPolicy, filter_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltProcessFilterPolicy, filterlist_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltProcessFilterPolicy, filterlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltProcessFilterPolicy, timelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltProcessFilterPolicy, filter_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltProcessFilterPolicy, usetimef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltProcessFilterPolicy, usetimee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltProcessFilterPolicy, hints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltProcessFilterPolicy, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltProcessFilterPolicy, week_day_mask_),
  };
  CltProcessFilterPolicy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CltProcessFilterPolicy_descriptor_,
      CltProcessFilterPolicy::default_instance_,
      CltProcessFilterPolicy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltProcessFilterPolicy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltProcessFilterPolicy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CltProcessFilterPolicy));
  CltProcessFilterPolicy_FilterNode_descriptor_ = CltProcessFilterPolicy_descriptor_->nested_type(0);
  static const int CltProcessFilterPolicy_FilterNode_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltProcessFilterPolicy_FilterNode, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltProcessFilterPolicy_FilterNode, orgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltProcessFilterPolicy_FilterNode, product_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltProcessFilterPolicy_FilterNode, exttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltProcessFilterPolicy_FilterNode, hash_),
  };
  CltProcessFilterPolicy_FilterNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CltProcessFilterPolicy_FilterNode_descriptor_,
      CltProcessFilterPolicy_FilterNode::default_instance_,
      CltProcessFilterPolicy_FilterNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltProcessFilterPolicy_FilterNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltProcessFilterPolicy_FilterNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CltProcessFilterPolicy_FilterNode));
  CltProcessFilterPolicyList_descriptor_ = file->message_type(1);
  static const int CltProcessFilterPolicyList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltProcessFilterPolicyList, list_),
  };
  CltProcessFilterPolicyList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CltProcessFilterPolicyList_descriptor_,
      CltProcessFilterPolicyList::default_instance_,
      CltProcessFilterPolicyList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltProcessFilterPolicyList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltProcessFilterPolicyList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CltProcessFilterPolicyList));
  CltUrlFilterPolicy_descriptor_ = file->message_type(2);
  static const int CltUrlFilterPolicy_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltUrlFilterPolicy, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltUrlFilterPolicy, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltUrlFilterPolicy, last_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltUrlFilterPolicy, inuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltUrlFilterPolicy, filter_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltUrlFilterPolicy, filterlist_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltUrlFilterPolicy, filterlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltUrlFilterPolicy, timelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltUrlFilterPolicy, filter_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltUrlFilterPolicy, usetimef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltUrlFilterPolicy, usetimee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltUrlFilterPolicy, hints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltUrlFilterPolicy, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltUrlFilterPolicy, week_day_mask_),
  };
  CltUrlFilterPolicy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CltUrlFilterPolicy_descriptor_,
      CltUrlFilterPolicy::default_instance_,
      CltUrlFilterPolicy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltUrlFilterPolicy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltUrlFilterPolicy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CltUrlFilterPolicy));
  CltUrlFilterPolicy_FilterNode_descriptor_ = CltUrlFilterPolicy_descriptor_->nested_type(0);
  static const int CltUrlFilterPolicy_FilterNode_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltUrlFilterPolicy_FilterNode, url_),
  };
  CltUrlFilterPolicy_FilterNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CltUrlFilterPolicy_FilterNode_descriptor_,
      CltUrlFilterPolicy_FilterNode::default_instance_,
      CltUrlFilterPolicy_FilterNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltUrlFilterPolicy_FilterNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltUrlFilterPolicy_FilterNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CltUrlFilterPolicy_FilterNode));
  CltUrlFilterPolicyList_descriptor_ = file->message_type(3);
  static const int CltUrlFilterPolicyList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltUrlFilterPolicyList, list_),
  };
  CltUrlFilterPolicyList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CltUrlFilterPolicyList_descriptor_,
      CltUrlFilterPolicyList::default_instance_,
      CltUrlFilterPolicyList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltUrlFilterPolicyList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltUrlFilterPolicyList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CltUrlFilterPolicyList));
  CltIPAndPortFilterPolicy_descriptor_ = file->message_type(4);
  static const int CltIPAndPortFilterPolicy_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltIPAndPortFilterPolicy, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltIPAndPortFilterPolicy, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltIPAndPortFilterPolicy, last_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltIPAndPortFilterPolicy, inuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltIPAndPortFilterPolicy, filter_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltIPAndPortFilterPolicy, filterlist_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltIPAndPortFilterPolicy, filterlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltIPAndPortFilterPolicy, timelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltIPAndPortFilterPolicy, filter_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltIPAndPortFilterPolicy, directtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltIPAndPortFilterPolicy, protocoltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltIPAndPortFilterPolicy, usetimef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltIPAndPortFilterPolicy, usetimee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltIPAndPortFilterPolicy, hints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltIPAndPortFilterPolicy, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltIPAndPortFilterPolicy, week_day_mask_),
  };
  CltIPAndPortFilterPolicy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CltIPAndPortFilterPolicy_descriptor_,
      CltIPAndPortFilterPolicy::default_instance_,
      CltIPAndPortFilterPolicy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltIPAndPortFilterPolicy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltIPAndPortFilterPolicy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CltIPAndPortFilterPolicy));
  CltIPAndPortFilterPolicy_FilterNode_descriptor_ = CltIPAndPortFilterPolicy_descriptor_->nested_type(0);
  static const int CltIPAndPortFilterPolicy_FilterNode_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltIPAndPortFilterPolicy_FilterNode, porttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltIPAndPortFilterPolicy_FilterNode, portf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltIPAndPortFilterPolicy_FilterNode, porte_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltIPAndPortFilterPolicy_FilterNode, portlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltIPAndPortFilterPolicy_FilterNode, iptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltIPAndPortFilterPolicy_FilterNode, ipaddrf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltIPAndPortFilterPolicy_FilterNode, ipaddre_),
  };
  CltIPAndPortFilterPolicy_FilterNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CltIPAndPortFilterPolicy_FilterNode_descriptor_,
      CltIPAndPortFilterPolicy_FilterNode::default_instance_,
      CltIPAndPortFilterPolicy_FilterNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltIPAndPortFilterPolicy_FilterNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltIPAndPortFilterPolicy_FilterNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CltIPAndPortFilterPolicy_FilterNode));
  CltIPAndPortFilterPolicyList_descriptor_ = file->message_type(5);
  static const int CltIPAndPortFilterPolicyList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltIPAndPortFilterPolicyList, list_),
  };
  CltIPAndPortFilterPolicyList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CltIPAndPortFilterPolicyList_descriptor_,
      CltIPAndPortFilterPolicyList::default_instance_,
      CltIPAndPortFilterPolicyList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltIPAndPortFilterPolicyList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltIPAndPortFilterPolicyList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CltIPAndPortFilterPolicyList));
  CltDeviceControlPolicy_descriptor_ = file->message_type(6);
  static const int CltDeviceControlPolicy_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltDeviceControlPolicy, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltDeviceControlPolicy, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltDeviceControlPolicy, last_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltDeviceControlPolicy, inuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltDeviceControlPolicy, filter_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltDeviceControlPolicy, filterlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltDeviceControlPolicy, timelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltDeviceControlPolicy, filter_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltDeviceControlPolicy, usetimef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltDeviceControlPolicy, usetimee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltDeviceControlPolicy, hints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltDeviceControlPolicy, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltDeviceControlPolicy, week_day_mask_),
  };
  CltDeviceControlPolicy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CltDeviceControlPolicy_descriptor_,
      CltDeviceControlPolicy::default_instance_,
      CltDeviceControlPolicy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltDeviceControlPolicy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltDeviceControlPolicy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CltDeviceControlPolicy));
  CltDeviceControlPolicy_FilterNode_descriptor_ = CltDeviceControlPolicy_descriptor_->nested_type(0);
  static const int CltDeviceControlPolicy_FilterNode_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltDeviceControlPolicy_FilterNode, filterby_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltDeviceControlPolicy_FilterNode, device_class_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltDeviceControlPolicy_FilterNode, device_interface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltDeviceControlPolicy_FilterNode, except_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltDeviceControlPolicy_FilterNode, state_),
  };
  CltDeviceControlPolicy_FilterNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CltDeviceControlPolicy_FilterNode_descriptor_,
      CltDeviceControlPolicy_FilterNode::default_instance_,
      CltDeviceControlPolicy_FilterNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltDeviceControlPolicy_FilterNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltDeviceControlPolicy_FilterNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CltDeviceControlPolicy_FilterNode));
  CltDeviceControlPolicyList_descriptor_ = file->message_type(7);
  static const int CltDeviceControlPolicyList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltDeviceControlPolicyList, list_),
  };
  CltDeviceControlPolicyList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CltDeviceControlPolicyList_descriptor_,
      CltDeviceControlPolicyList::default_instance_,
      CltDeviceControlPolicyList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltDeviceControlPolicyList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltDeviceControlPolicyList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CltDeviceControlPolicyList));
  CltPrintControlPolicy_descriptor_ = file->message_type(8);
  static const int CltPrintControlPolicy_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltPrintControlPolicy, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltPrintControlPolicy, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltPrintControlPolicy, last_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltPrintControlPolicy, inuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltPrintControlPolicy, filter_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltPrintControlPolicy, usetimef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltPrintControlPolicy, usetimee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltPrintControlPolicy, filterlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltPrintControlPolicy, timelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltPrintControlPolicy, filter_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltPrintControlPolicy, hints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltPrintControlPolicy, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltPrintControlPolicy, week_day_mask_),
  };
  CltPrintControlPolicy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CltPrintControlPolicy_descriptor_,
      CltPrintControlPolicy::default_instance_,
      CltPrintControlPolicy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltPrintControlPolicy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltPrintControlPolicy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CltPrintControlPolicy));
  CltPrintControlPolicy_FilterNode_descriptor_ = CltPrintControlPolicy_descriptor_->nested_type(0);
  static const int CltPrintControlPolicy_FilterNode_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltPrintControlPolicy_FilterNode, printer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltPrintControlPolicy_FilterNode, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltPrintControlPolicy_FilterNode, key_word_),
  };
  CltPrintControlPolicy_FilterNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CltPrintControlPolicy_FilterNode_descriptor_,
      CltPrintControlPolicy_FilterNode::default_instance_,
      CltPrintControlPolicy_FilterNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltPrintControlPolicy_FilterNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltPrintControlPolicy_FilterNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CltPrintControlPolicy_FilterNode));
  CltPrintControlPolicyList_descriptor_ = file->message_type(9);
  static const int CltPrintControlPolicyList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltPrintControlPolicyList, list_),
  };
  CltPrintControlPolicyList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CltPrintControlPolicyList_descriptor_,
      CltPrintControlPolicyList::default_instance_,
      CltPrintControlPolicyList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltPrintControlPolicyList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltPrintControlPolicyList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CltPrintControlPolicyList));
  CltFileControlPolicy_descriptor_ = file->message_type(10);
  static const int CltFileControlPolicy_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltFileControlPolicy, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltFileControlPolicy, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltFileControlPolicy, last_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltFileControlPolicy, inuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltFileControlPolicy, filter_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltFileControlPolicy, filterlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltFileControlPolicy, timelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltFileControlPolicy, filter_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltFileControlPolicy, usetimef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltFileControlPolicy, usetimee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltFileControlPolicy, hints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltFileControlPolicy, isinherit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltFileControlPolicy, allowedinherit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltFileControlPolicy, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltFileControlPolicy, week_day_mask_),
  };
  CltFileControlPolicy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CltFileControlPolicy_descriptor_,
      CltFileControlPolicy::default_instance_,
      CltFileControlPolicy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltFileControlPolicy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltFileControlPolicy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CltFileControlPolicy));
  CltFileControlPolicy_FilterNode_descriptor_ = CltFileControlPolicy_descriptor_->nested_type(0);
  static const int CltFileControlPolicy_FilterNode_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltFileControlPolicy_FilterNode, process_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltFileControlPolicy_FilterNode, key_word_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltFileControlPolicy_FilterNode, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltFileControlPolicy_FilterNode, modetype_),
  };
  CltFileControlPolicy_FilterNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CltFileControlPolicy_FilterNode_descriptor_,
      CltFileControlPolicy_FilterNode::default_instance_,
      CltFileControlPolicy_FilterNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltFileControlPolicy_FilterNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltFileControlPolicy_FilterNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CltFileControlPolicy_FilterNode));
  CltFileControlPolicyList_descriptor_ = file->message_type(11);
  static const int CltFileControlPolicyList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltFileControlPolicyList, list_),
  };
  CltFileControlPolicyList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CltFileControlPolicyList_descriptor_,
      CltFileControlPolicyList::default_instance_,
      CltFileControlPolicyList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltFileControlPolicyList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltFileControlPolicyList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CltFileControlPolicyList));
  CltSystemControlPolicy_descriptor_ = file->message_type(12);
  static const int CltSystemControlPolicy_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltSystemControlPolicy, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltSystemControlPolicy, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltSystemControlPolicy, last_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltSystemControlPolicy, inuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltSystemControlPolicy, filter_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltSystemControlPolicy, usetimef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltSystemControlPolicy, usetimee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltSystemControlPolicy, filterlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltSystemControlPolicy, timelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltSystemControlPolicy, filter_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltSystemControlPolicy, hints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltSystemControlPolicy, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltSystemControlPolicy, week_day_mask_),
  };
  CltSystemControlPolicy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CltSystemControlPolicy_descriptor_,
      CltSystemControlPolicy::default_instance_,
      CltSystemControlPolicy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltSystemControlPolicy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltSystemControlPolicy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CltSystemControlPolicy));
  CltSystemControlPolicy_FilterNode_descriptor_ = CltSystemControlPolicy_descriptor_->nested_type(0);
  static const int CltSystemControlPolicy_FilterNode_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltSystemControlPolicy_FilterNode, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltSystemControlPolicy_FilterNode, code_),
  };
  CltSystemControlPolicy_FilterNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CltSystemControlPolicy_FilterNode_descriptor_,
      CltSystemControlPolicy_FilterNode::default_instance_,
      CltSystemControlPolicy_FilterNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltSystemControlPolicy_FilterNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltSystemControlPolicy_FilterNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CltSystemControlPolicy_FilterNode));
  CltSystemControlPolicyList_descriptor_ = file->message_type(13);
  static const int CltSystemControlPolicyList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltSystemControlPolicyList, list_),
  };
  CltSystemControlPolicyList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CltSystemControlPolicyList_descriptor_,
      CltSystemControlPolicyList::default_instance_,
      CltSystemControlPolicyList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltSystemControlPolicyList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltSystemControlPolicyList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CltSystemControlPolicyList));
  FileParam_descriptor_ = file->message_type(14);
  static const int FileParam_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileParam, procname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileParam, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileParam, typeparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileParam, fileoptype_),
  };
  FileParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileParam_descriptor_,
      FileParam::default_instance_,
      FileParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileParam));
  FileParamList_descriptor_ = file->message_type(15);
  static const int FileParamList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileParamList, list_),
  };
  FileParamList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileParamList_descriptor_,
      FileParamList::default_instance_,
      FileParamList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileParamList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileParamList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileParamList));
  CltLogPolcicy_descriptor_ = file->message_type(16);
  static const int CltLogPolcicy_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltLogPolcicy, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltLogPolcicy, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltLogPolcicy, last_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltLogPolcicy, inuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltLogPolcicy, stateon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltLogPolcicy, uploadtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltLogPolcicy, upload_ontime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltLogPolcicy, cleantype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltLogPolcicy, cleanparamtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltLogPolcicy, screen_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltLogPolcicy, max_idle_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltLogPolcicy, fileparamlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltLogPolcicy, timelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltLogPolcicy, usetimef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltLogPolcicy, usetimee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltLogPolcicy, week_day_mask_),
  };
  CltLogPolcicy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CltLogPolcicy_descriptor_,
      CltLogPolcicy::default_instance_,
      CltLogPolcicy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltLogPolcicy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltLogPolcicy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CltLogPolcicy));
  CltLogPolcicy_ScreenParam_descriptor_ = CltLogPolcicy_descriptor_->nested_type(0);
  static const int CltLogPolcicy_ScreenParam_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltLogPolcicy_ScreenParam, interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltLogPolcicy_ScreenParam, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltLogPolcicy_ScreenParam, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltLogPolcicy_ScreenParam, save_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltLogPolcicy_ScreenParam, saveindb_),
  };
  CltLogPolcicy_ScreenParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CltLogPolcicy_ScreenParam_descriptor_,
      CltLogPolcicy_ScreenParam::default_instance_,
      CltLogPolcicy_ScreenParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltLogPolcicy_ScreenParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltLogPolcicy_ScreenParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CltLogPolcicy_ScreenParam));
  CltLogPolcicyList_descriptor_ = file->message_type(17);
  static const int CltLogPolcicyList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltLogPolcicyList, list_),
  };
  CltLogPolcicyList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CltLogPolcicyList_descriptor_,
      CltLogPolcicyList::default_instance_,
      CltLogPolcicyList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltLogPolcicyList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltLogPolcicyList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CltLogPolcicyList));
  CltStreamControlPolicy_descriptor_ = file->message_type(18);
  static const int CltStreamControlPolicy_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltStreamControlPolicy, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltStreamControlPolicy, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltStreamControlPolicy, last_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltStreamControlPolicy, inuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltStreamControlPolicy, filter_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltStreamControlPolicy, filterlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltStreamControlPolicy, timelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltStreamControlPolicy, filter_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltStreamControlPolicy, usetimef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltStreamControlPolicy, usetimee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltStreamControlPolicy, hints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltStreamControlPolicy, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltStreamControlPolicy, week_day_mask_),
  };
  CltStreamControlPolicy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CltStreamControlPolicy_descriptor_,
      CltStreamControlPolicy::default_instance_,
      CltStreamControlPolicy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltStreamControlPolicy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltStreamControlPolicy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CltStreamControlPolicy));
  CltStreamControlPolicy_FilterNode_descriptor_ = CltStreamControlPolicy_descriptor_->nested_type(0);
  static const int CltStreamControlPolicy_FilterNode_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltStreamControlPolicy_FilterNode, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltStreamControlPolicy_FilterNode, addtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltStreamControlPolicy_FilterNode, addparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltStreamControlPolicy_FilterNode, uptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltStreamControlPolicy_FilterNode, upparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltStreamControlPolicy_FilterNode, downtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltStreamControlPolicy_FilterNode, downparam_),
  };
  CltStreamControlPolicy_FilterNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CltStreamControlPolicy_FilterNode_descriptor_,
      CltStreamControlPolicy_FilterNode::default_instance_,
      CltStreamControlPolicy_FilterNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltStreamControlPolicy_FilterNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltStreamControlPolicy_FilterNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CltStreamControlPolicy_FilterNode));
  CltStreamControlPolicyList_descriptor_ = file->message_type(19);
  static const int CltStreamControlPolicyList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltStreamControlPolicyList, list_),
  };
  CltStreamControlPolicyList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CltStreamControlPolicyList_descriptor_,
      CltStreamControlPolicyList::default_instance_,
      CltStreamControlPolicyList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltStreamControlPolicyList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltStreamControlPolicyList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CltStreamControlPolicyList));
  CltCommonPolicy_descriptor_ = file->message_type(20);
  static const int CltCommonPolicy_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltCommonPolicy, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltCommonPolicy, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltCommonPolicy, last_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltCommonPolicy, inuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltCommonPolicy, stateon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltCommonPolicy, scan_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltCommonPolicy, filter_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltCommonPolicy, do_at_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltCommonPolicy, res_param_),
  };
  CltCommonPolicy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CltCommonPolicy_descriptor_,
      CltCommonPolicy::default_instance_,
      CltCommonPolicy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltCommonPolicy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltCommonPolicy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CltCommonPolicy));
  CltCommonPolicy_ResScan_descriptor_ = CltCommonPolicy_descriptor_->nested_type(0);
  static const int CltCommonPolicy_ResScan_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltCommonPolicy_ResScan, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltCommonPolicy_ResScan, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltCommonPolicy_ResScan, param_),
  };
  CltCommonPolicy_ResScan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CltCommonPolicy_ResScan_descriptor_,
      CltCommonPolicy_ResScan::default_instance_,
      CltCommonPolicy_ResScan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltCommonPolicy_ResScan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltCommonPolicy_ResScan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CltCommonPolicy_ResScan));
  CltCommonPolicyList_descriptor_ = file->message_type(21);
  static const int CltCommonPolicyList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltCommonPolicyList, list_),
  };
  CltCommonPolicyList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CltCommonPolicyList_descriptor_,
      CltCommonPolicyList::default_instance_,
      CltCommonPolicyList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltCommonPolicyList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltCommonPolicyList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CltCommonPolicyList));
  CltCheckPCIdlePolicy_descriptor_ = file->message_type(22);
  static const int CltCheckPCIdlePolicy_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltCheckPCIdlePolicy, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltCheckPCIdlePolicy, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltCheckPCIdlePolicy, last_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltCheckPCIdlePolicy, max_minute_),
  };
  CltCheckPCIdlePolicy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CltCheckPCIdlePolicy_descriptor_,
      CltCheckPCIdlePolicy::default_instance_,
      CltCheckPCIdlePolicy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltCheckPCIdlePolicy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltCheckPCIdlePolicy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CltCheckPCIdlePolicy));
  CltAlarmPolicy_descriptor_ = file->message_type(23);
  static const int CltAlarmPolicy_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltAlarmPolicy, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltAlarmPolicy, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltAlarmPolicy, last_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltAlarmPolicy, inuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltAlarmPolicy, stateon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltAlarmPolicy, timelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltAlarmPolicy, usetimef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltAlarmPolicy, usetimee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltAlarmPolicy, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltAlarmPolicy, week_day_mask_),
  };
  CltAlarmPolicy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CltAlarmPolicy_descriptor_,
      CltAlarmPolicy::default_instance_,
      CltAlarmPolicy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltAlarmPolicy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltAlarmPolicy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CltAlarmPolicy));
  CltAlarmPolicyList_descriptor_ = file->message_type(24);
  static const int CltAlarmPolicyList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltAlarmPolicyList, list_),
  };
  CltAlarmPolicyList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CltAlarmPolicyList_descriptor_,
      CltAlarmPolicyList::default_instance_,
      CltAlarmPolicyList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltAlarmPolicyList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltAlarmPolicyList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CltAlarmPolicyList));
  CltQQFilterPolicy_descriptor_ = file->message_type(25);
  static const int CltQQFilterPolicy_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltQQFilterPolicy, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltQQFilterPolicy, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltQQFilterPolicy, last_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltQQFilterPolicy, inuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltQQFilterPolicy, filter_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltQQFilterPolicy, filterlist_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltQQFilterPolicy, filterlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltQQFilterPolicy, timelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltQQFilterPolicy, filter_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltQQFilterPolicy, usetimef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltQQFilterPolicy, usetimee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltQQFilterPolicy, hints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltQQFilterPolicy, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltQQFilterPolicy, week_day_mask_),
  };
  CltQQFilterPolicy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CltQQFilterPolicy_descriptor_,
      CltQQFilterPolicy::default_instance_,
      CltQQFilterPolicy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltQQFilterPolicy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltQQFilterPolicy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CltQQFilterPolicy));
  CltQQFilterPolicy_FilterNode_descriptor_ = CltQQFilterPolicy_descriptor_->nested_type(0);
  static const int CltQQFilterPolicy_FilterNode_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltQQFilterPolicy_FilterNode, qqnumber_),
  };
  CltQQFilterPolicy_FilterNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CltQQFilterPolicy_FilterNode_descriptor_,
      CltQQFilterPolicy_FilterNode::default_instance_,
      CltQQFilterPolicy_FilterNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltQQFilterPolicy_FilterNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltQQFilterPolicy_FilterNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CltQQFilterPolicy_FilterNode));
  CltQQFilterPolicyList_descriptor_ = file->message_type(26);
  static const int CltQQFilterPolicyList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltQQFilterPolicyList, list_),
  };
  CltQQFilterPolicyList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CltQQFilterPolicyList_descriptor_,
      CltQQFilterPolicyList::default_instance_,
      CltQQFilterPolicyList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltQQFilterPolicyList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltQQFilterPolicyList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CltQQFilterPolicyList));
  PRINT_FLT_TYPE_descriptor_ = file->enum_type(0);
  FILE_FLT_TYPE_descriptor_ = file->enum_type(1);
  MODE_TYPE_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Intranetclt_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CltProcessFilterPolicy_descriptor_, &CltProcessFilterPolicy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CltProcessFilterPolicy_FilterNode_descriptor_, &CltProcessFilterPolicy_FilterNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CltProcessFilterPolicyList_descriptor_, &CltProcessFilterPolicyList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CltUrlFilterPolicy_descriptor_, &CltUrlFilterPolicy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CltUrlFilterPolicy_FilterNode_descriptor_, &CltUrlFilterPolicy_FilterNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CltUrlFilterPolicyList_descriptor_, &CltUrlFilterPolicyList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CltIPAndPortFilterPolicy_descriptor_, &CltIPAndPortFilterPolicy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CltIPAndPortFilterPolicy_FilterNode_descriptor_, &CltIPAndPortFilterPolicy_FilterNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CltIPAndPortFilterPolicyList_descriptor_, &CltIPAndPortFilterPolicyList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CltDeviceControlPolicy_descriptor_, &CltDeviceControlPolicy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CltDeviceControlPolicy_FilterNode_descriptor_, &CltDeviceControlPolicy_FilterNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CltDeviceControlPolicyList_descriptor_, &CltDeviceControlPolicyList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CltPrintControlPolicy_descriptor_, &CltPrintControlPolicy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CltPrintControlPolicy_FilterNode_descriptor_, &CltPrintControlPolicy_FilterNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CltPrintControlPolicyList_descriptor_, &CltPrintControlPolicyList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CltFileControlPolicy_descriptor_, &CltFileControlPolicy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CltFileControlPolicy_FilterNode_descriptor_, &CltFileControlPolicy_FilterNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CltFileControlPolicyList_descriptor_, &CltFileControlPolicyList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CltSystemControlPolicy_descriptor_, &CltSystemControlPolicy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CltSystemControlPolicy_FilterNode_descriptor_, &CltSystemControlPolicy_FilterNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CltSystemControlPolicyList_descriptor_, &CltSystemControlPolicyList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileParam_descriptor_, &FileParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileParamList_descriptor_, &FileParamList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CltLogPolcicy_descriptor_, &CltLogPolcicy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CltLogPolcicy_ScreenParam_descriptor_, &CltLogPolcicy_ScreenParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CltLogPolcicyList_descriptor_, &CltLogPolcicyList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CltStreamControlPolicy_descriptor_, &CltStreamControlPolicy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CltStreamControlPolicy_FilterNode_descriptor_, &CltStreamControlPolicy_FilterNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CltStreamControlPolicyList_descriptor_, &CltStreamControlPolicyList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CltCommonPolicy_descriptor_, &CltCommonPolicy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CltCommonPolicy_ResScan_descriptor_, &CltCommonPolicy_ResScan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CltCommonPolicyList_descriptor_, &CltCommonPolicyList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CltCheckPCIdlePolicy_descriptor_, &CltCheckPCIdlePolicy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CltAlarmPolicy_descriptor_, &CltAlarmPolicy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CltAlarmPolicyList_descriptor_, &CltAlarmPolicyList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CltQQFilterPolicy_descriptor_, &CltQQFilterPolicy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CltQQFilterPolicy_FilterNode_descriptor_, &CltQQFilterPolicy_FilterNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CltQQFilterPolicyList_descriptor_, &CltQQFilterPolicyList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Intranetclt_2eproto() {
  delete CltProcessFilterPolicy::default_instance_;
  delete CltProcessFilterPolicy_reflection_;
  delete CltProcessFilterPolicy_FilterNode::default_instance_;
  delete CltProcessFilterPolicy_FilterNode_reflection_;
  delete CltProcessFilterPolicyList::default_instance_;
  delete CltProcessFilterPolicyList_reflection_;
  delete CltUrlFilterPolicy::default_instance_;
  delete CltUrlFilterPolicy_reflection_;
  delete CltUrlFilterPolicy_FilterNode::default_instance_;
  delete CltUrlFilterPolicy_FilterNode_reflection_;
  delete CltUrlFilterPolicyList::default_instance_;
  delete CltUrlFilterPolicyList_reflection_;
  delete CltIPAndPortFilterPolicy::default_instance_;
  delete CltIPAndPortFilterPolicy_reflection_;
  delete CltIPAndPortFilterPolicy_FilterNode::default_instance_;
  delete CltIPAndPortFilterPolicy_FilterNode_reflection_;
  delete CltIPAndPortFilterPolicyList::default_instance_;
  delete CltIPAndPortFilterPolicyList_reflection_;
  delete CltDeviceControlPolicy::default_instance_;
  delete CltDeviceControlPolicy_reflection_;
  delete CltDeviceControlPolicy_FilterNode::default_instance_;
  delete CltDeviceControlPolicy_FilterNode_reflection_;
  delete CltDeviceControlPolicyList::default_instance_;
  delete CltDeviceControlPolicyList_reflection_;
  delete CltPrintControlPolicy::default_instance_;
  delete CltPrintControlPolicy_reflection_;
  delete CltPrintControlPolicy_FilterNode::default_instance_;
  delete CltPrintControlPolicy_FilterNode_reflection_;
  delete CltPrintControlPolicyList::default_instance_;
  delete CltPrintControlPolicyList_reflection_;
  delete CltFileControlPolicy::default_instance_;
  delete CltFileControlPolicy_reflection_;
  delete CltFileControlPolicy_FilterNode::default_instance_;
  delete CltFileControlPolicy_FilterNode_reflection_;
  delete CltFileControlPolicyList::default_instance_;
  delete CltFileControlPolicyList_reflection_;
  delete CltSystemControlPolicy::default_instance_;
  delete CltSystemControlPolicy_reflection_;
  delete CltSystemControlPolicy_FilterNode::default_instance_;
  delete CltSystemControlPolicy_FilterNode_reflection_;
  delete CltSystemControlPolicyList::default_instance_;
  delete CltSystemControlPolicyList_reflection_;
  delete FileParam::default_instance_;
  delete FileParam_reflection_;
  delete FileParamList::default_instance_;
  delete FileParamList_reflection_;
  delete CltLogPolcicy::default_instance_;
  delete CltLogPolcicy_reflection_;
  delete CltLogPolcicy_ScreenParam::default_instance_;
  delete CltLogPolcicy_ScreenParam_reflection_;
  delete CltLogPolcicyList::default_instance_;
  delete CltLogPolcicyList_reflection_;
  delete CltStreamControlPolicy::default_instance_;
  delete CltStreamControlPolicy_reflection_;
  delete CltStreamControlPolicy_FilterNode::default_instance_;
  delete CltStreamControlPolicy_FilterNode_reflection_;
  delete CltStreamControlPolicyList::default_instance_;
  delete CltStreamControlPolicyList_reflection_;
  delete CltCommonPolicy::default_instance_;
  delete CltCommonPolicy_reflection_;
  delete CltCommonPolicy_ResScan::default_instance_;
  delete CltCommonPolicy_ResScan_reflection_;
  delete CltCommonPolicyList::default_instance_;
  delete CltCommonPolicyList_reflection_;
  delete CltCheckPCIdlePolicy::default_instance_;
  delete CltCheckPCIdlePolicy_reflection_;
  delete CltAlarmPolicy::default_instance_;
  delete CltAlarmPolicy_reflection_;
  delete CltAlarmPolicyList::default_instance_;
  delete CltAlarmPolicyList_reflection_;
  delete CltQQFilterPolicy::default_instance_;
  delete CltQQFilterPolicy_reflection_;
  delete CltQQFilterPolicy_FilterNode::default_instance_;
  delete CltQQFilterPolicy_FilterNode_reflection_;
  delete CltQQFilterPolicyList::default_instance_;
  delete CltQQFilterPolicyList_reflection_;
}

void protobuf_AddDesc_Intranetclt_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::isafetec::protobuf_AddDesc_cmmmessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021Intranetclt.proto\022\010isafetec\032\020cmmmessag"
    "e.proto\"\201\004\n\026CltProcessFilterPolicy\022\n\n\002id"
    "\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\021\n\tlast_time\030\003 \001(\001\022"
    "\r\n\005inuse\030\016 \001(\005\022*\n\013filter_type\030\004 \001(\0162\025.is"
    "afetec.FILTER_TYPE\0222\n\017filterlist_type\030\005 "
    "\001(\0162\031.isafetec.FILTERLIST_TYPE\022\?\n\nfilter"
    "list\030\006 \003(\0132+.isafetec.CltProcessFilterPo"
    "licy.FilterNode\022(\n\010timelist\030\007 \001(\0132\026.isaf"
    "etec.TimeSpanList\022*\n\013filter_mode\030\010 \001(\0162\025"
    ".isafetec.FILTER_MODE\022\020\n\010usetimeF\030\t \001(\001\022"
    "\020\n\010usetimeE\030\n \001(\001\022\r\n\005hints\030\013 \001(\t\022\r\n\005inde"
    "x\030\014 \001(\005\022\025\n\rweek_day_mask\030\r \001(\005\032[\n\nFilter"
    "Node\022\014\n\004name\030\001 \001(\t\022\017\n\007orgname\030\002 \001(\t\022\017\n\007p"
    "roduct\030\003 \001(\t\022\017\n\007exttype\030\004 \001(\005\022\014\n\004hash\030\005 "
    "\001(\t\"L\n\032CltProcessFilterPolicyList\022.\n\004lis"
    "t\030\001 \003(\0132 .isafetec.CltProcessFilterPolic"
    "y\"\267\003\n\022CltUrlFilterPolicy\022\n\n\002id\030\001 \001(\005\022\014\n\004"
    "type\030\002 \001(\005\022\021\n\tlast_time\030\003 \001(\001\022\r\n\005inuse\030\016"
    " \001(\005\022*\n\013filter_type\030\004 \001(\0162\025.isafetec.FIL"
    "TER_TYPE\0222\n\017filterlist_type\030\005 \001(\0162\031.isaf"
    "etec.FILTERLIST_TYPE\022;\n\nfilterlist\030\006 \003(\013"
    "2\'.isafetec.CltUrlFilterPolicy.FilterNod"
    "e\022(\n\010timelist\030\007 \001(\0132\026.isafetec.TimeSpanL"
    "ist\022*\n\013filter_mode\030\010 \001(\0162\025.isafetec.FILT"
    "ER_MODE\022\020\n\010usetimeF\030\t \001(\001\022\020\n\010usetimeE\030\n "
    "\001(\001\022\r\n\005hints\030\013 \001(\t\022\r\n\005index\030\014 \001(\005\022\025\n\rwee"
    "k_day_mask\030\r \001(\005\032\031\n\nFilterNode\022\013\n\003url\030\001 "
    "\001(\t\"D\n\026CltUrlFilterPolicyList\022*\n\004list\030\001 "
    "\003(\0132\034.isafetec.CltUrlFilterPolicy\"\325\004\n\030Cl"
    "tIPAndPortFilterPolicy\022\n\n\002id\030\001 \001(\005\022\014\n\004ty"
    "pe\030\002 \001(\005\022\021\n\tlast_time\030\003 \001(\001\022\r\n\005inuse\030\025 \001"
    "(\005\022*\n\013filter_type\030\004 \001(\0162\025.isafetec.FILTE"
    "R_TYPE\0222\n\017filterlist_type\030\005 \001(\0162\031.isafet"
    "ec.FILTERLIST_TYPE\022A\n\nfilterlist\030\006 \003(\0132-"
    ".isafetec.CltIPAndPortFilterPolicy.Filte"
    "rNode\022(\n\010timelist\030\007 \001(\0132\026.isafetec.TimeS"
    "panList\022*\n\013filter_mode\030\010 \001(\0162\025.isafetec."
    "FILTER_MODE\022\022\n\ndirecttype\030\t \001(\r\022\024\n\014proto"
    "coltype\030\n \001(\r\022\020\n\010usetimeF\030\r \001(\001\022\020\n\010useti"
    "meE\030\016 \001(\001\022\r\n\005hints\030\020 \001(\t\022\r\n\005index\030\023 \001(\005\022"
    "\025\n\rweek_day_mask\030\024 \001(\005\032\200\001\n\nFilterNode\022\020\n"
    "\010porttype\030\002 \001(\r\022\r\n\005PortF\030\003 \001(\r\022\r\n\005PortE\030"
    "\004 \001(\r\022\020\n\010portlist\030\005 \001(\t\022\016\n\006iptype\030\006 \001(\r\022"
    "\017\n\007IpaddrF\030\007 \001(\r\022\017\n\007IpaddrE\030\010 \001(\r\"P\n\034Clt"
    "IPAndPortFilterPolicyList\0220\n\004list\030\001 \003(\0132"
    "\".isafetec.CltIPAndPortFilterPolicy\"\344\003\n\026"
    "CltDeviceControlPolicy\022\n\n\002id\030\001 \001(\005\022\014\n\004ty"
    "pe\030\002 \001(\005\022\021\n\tlast_time\030\003 \001(\001\022\r\n\005inuse\030\016 \001"
    "(\005\022*\n\013filter_type\030\004 \001(\0162\025.isafetec.FILTE"
    "R_TYPE\022\?\n\nfilterlist\030\005 \003(\0132+.isafetec.Cl"
    "tDeviceControlPolicy.FilterNode\022(\n\010timel"
    "ist\030\006 \001(\0132\026.isafetec.TimeSpanList\022*\n\013fil"
    "ter_mode\030\007 \001(\0162\025.isafetec.FILTER_MODE\022\020\n"
    "\010usetimeF\030\014 \001(\001\022\020\n\010usetimeE\030\r \001(\001\022\r\n\005hin"
    "ts\030\017 \001(\t\022\r\n\005index\030\022 \001(\005\022\025\n\rweek_day_mask"
    "\030\023 \001(\005\032r\n\nFilterNode\022\020\n\010filterby\030\001 \001(\005\022\024"
    "\n\014device_class\030\002 \001(\t\022\030\n\020device_interface"
    "\030\003 \001(\t\022\023\n\013except_list\030\004 \001(\t\022\r\n\005state\030\005 \001"
    "(\005\"L\n\032CltDeviceControlPolicyList\022.\n\004list"
    "\030\001 \003(\0132 .isafetec.CltDeviceControlPolicy"
    "\"\307\003\n\025CltPrintControlPolicy\022\n\n\002id\030\001 \001(\005\022\014"
    "\n\004type\030\002 \001(\005\022\021\n\tlast_time\030\003 \001(\001\022\r\n\005inuse"
    "\030\017 \001(\005\022*\n\013filter_type\030\004 \001(\0162\025.isafetec.F"
    "ILTER_TYPE\022\020\n\010usetimeF\030\005 \001(\001\022\020\n\010usetimeE"
    "\030\006 \001(\001\022>\n\nfilterlist\030\007 \003(\0132*.isafetec.Cl"
    "tPrintControlPolicy.FilterNode\022(\n\010timeli"
    "st\030\010 \001(\0132\026.isafetec.TimeSpanList\022*\n\013filt"
    "er_mode\030\t \001(\0162\025.isafetec.FILTER_MODE\022\r\n\005"
    "hints\030\n \001(\t\022\r\n\005index\030\013 \001(\005\022\025\n\rweek_day_m"
    "ask\030\014 \001(\005\032W\n\nFilterNode\022\017\n\007printer\030\001 \001(\t"
    "\022&\n\004type\030\002 \001(\0162\030.isafetec.PRINT_FLT_TYPE"
    "\022\020\n\010key_word\030\003 \001(\t\"J\n\031CltPrintControlPol"
    "icyList\022-\n\004list\030\001 \003(\0132\037.isafetec.CltPrin"
    "tControlPolicy\"\226\004\n\024CltFileControlPolicy\022"
    "\n\n\002id\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\021\n\tlast_time\030\003"
    " \001(\001\022\r\n\005inuse\030\020 \001(\005\022*\n\013filter_type\030\004 \001(\016"
    "2\025.isafetec.FILTER_TYPE\022=\n\nfilterlist\030\005 "
    "\003(\0132).isafetec.CltFileControlPolicy.Filt"
    "erNode\022(\n\010timelist\030\006 \001(\0132\026.isafetec.Time"
    "SpanList\022*\n\013filter_mode\030\007 \001(\0162\025.isafetec"
    ".FILTER_MODE\022\020\n\010usetimeF\030\t \001(\001\022\020\n\010usetim"
    "eE\030\n \001(\001\022\r\n\005hints\030\013 \001(\t\022\021\n\tisinherit\030\014 \001"
    "(\t\022\026\n\016allowedinherit\030\r \001(\005\022\r\n\005index\030\016 \001("
    "\005\022\025\n\rweek_day_mask\030\017 \001(\005\032}\n\nFilterNode\022\017"
    "\n\007process\030\001 \001(\t\022\020\n\010key_word\030\002 \001(\t\022%\n\004typ"
    "e\030\003 \001(\0162\027.isafetec.FILE_FLT_TYPE\022%\n\010mode"
    "type\030\004 \001(\0162\023.isafetec.MODE_TYPE\"H\n\030CltFi"
    "leControlPolicyList\022,\n\004list\030\001 \003(\0132\036.isaf"
    "etec.CltFileControlPolicy\"\233\003\n\026CltSystemC"
    "ontrolPolicy\022\n\n\002id\030\001 \001(\005\022\014\n\004type\030\013 \001(\005\022\021"
    "\n\tlast_time\030\014 \001(\001\022\r\n\005inuse\030\017 \001(\005\022*\n\013filt"
    "er_type\030\004 \001(\0162\025.isafetec.FILTER_TYPE\022\020\n\010"
    "usetimeF\030\005 \001(\001\022\020\n\010usetimeE\030\006 \001(\001\022\?\n\nfilt"
    "erlist\030\007 \003(\0132+.isafetec.CltSystemControl"
    "Policy.FilterNode\022(\n\010timelist\030\010 \001(\0132\026.is"
    "afetec.TimeSpanList\022*\n\013filter_mode\030\n \001(\016"
    "2\025.isafetec.FILTER_MODE\022\r\n\005hints\030\r \001(\t\022\r"
    "\n\005index\030\022 \001(\005\022\025\n\rweek_day_mask\030\023 \001(\005\032)\n\n"
    "FilterNode\022\r\n\005state\030\001 \001(\005\022\014\n\004code\030\002 \001(\t\""
    "L\n\032CltSystemControlPolicyList\022.\n\004list\030\001 "
    "\003(\0132 .isafetec.CltSystemControlPolicy\"R\n"
    "\tFileParam\022\020\n\010procname\030\001 \001(\t\022\014\n\004type\030\002 \001"
    "(\005\022\021\n\ttypeparam\030\003 \001(\t\022\022\n\nfileoptype\030\004 \001("
    "\005\"2\n\rFileParamList\022!\n\004list\030\001 \003(\0132\023.isafe"
    "tec.FileParam\"\265\004\n\rCltLogPolcicy\022\n\n\002id\030\001 "
    "\001(\005\022\014\n\004type\030\002 \001(\005\022\021\n\tlast_time\030\003 \001(\001\022\r\n\005"
    "inuse\030\017 \001(\005\022\017\n\007stateon\030\004 \003(\005\022,\n\nuploadty"
    "pe\030\005 \001(\0162\030.isafetec.UPLOADLOG_TYPE\022\025\n\rup"
    "load_ontime\030\010 \001(\001\022*\n\tcleantype\030\036 \001(\0162\027.i"
    "safetec.CLEANLOG_TYPE\022\026\n\016cleanparamtime\030"
    "  \001(\001\0229\n\014screen_param\030\n \001(\0132#.isafetec.C"
    "ltLogPolcicy.ScreenParam\022\031\n\021max_idle_int"
    "erval\030\013 \001(\005\022.\n\rfileparamlist\030\014 \001(\0132\027.isa"
    "fetec.FileParamList\022(\n\010timelist\030\031 \001(\0132\026."
    "isafetec.TimeSpanList\022\020\n\010usetimeF\030\032 \001(\001\022"
    "\020\n\010usetimeE\030\033 \001(\001\022\025\n\rweek_day_mask\030\034 \001(\005"
    "\032c\n\013ScreenParam\022\020\n\010interval\030\001 \001(\005\022\r\n\005wid"
    "th\030\002 \001(\005\022\016\n\006height\030\003 \001(\005\022\021\n\tsave_type\030\004 "
    "\001(\005\022\020\n\010saveindb\030\005 \001(\005\":\n\021CltLogPolcicyLi"
    "st\022%\n\004list\030\001 \003(\0132\027.isafetec.CltLogPolcic"
    "y\"\366\003\n\026CltStreamControlPolicy\022\n\n\002id\030\001 \001(\005"
    "\022\014\n\004type\030\002 \001(\005\022\021\n\tlast_time\030\003 \001(\001\022\r\n\005inu"
    "se\030\017 \001(\005\022*\n\013filter_type\030\004 \001(\0162\025.isafetec"
    ".FILTER_TYPE\022\?\n\nfilterlist\030\005 \003(\0132+.isafe"
    "tec.CltStreamControlPolicy.FilterNode\022(\n"
    "\010timelist\030\006 \001(\0132\026.isafetec.TimeSpanList\022"
    "*\n\013filter_mode\030\007 \001(\0162\025.isafetec.FILTER_M"
    "ODE\022\020\n\010usetimeF\030\r \001(\001\022\020\n\010usetimeE\030\016 \001(\001\022"
    "\r\n\005hints\030\020 \001(\t\022\r\n\005index\030\023 \001(\005\022\025\n\rweek_da"
    "y_mask\030\024 \001(\005\032\203\001\n\nFilterNode\022\014\n\004type\030\002 \001("
    "\r\022\017\n\007addtype\030\003 \001(\r\022\020\n\010addparam\030\004 \001(\t\022\016\n\006"
    "uptype\030\005 \001(\r\022\017\n\007upparam\030\006 \001(\r\022\020\n\010downtyp"
    "e\030\007 \001(\r\022\021\n\tdownparam\030\010 \001(\r\"L\n\032CltStreamC"
    "ontrolPolicyList\022.\n\004list\030\001 \003(\0132 .isafete"
    "c.CltStreamControlPolicy\"\235\002\n\017CltCommonPo"
    "licy\022\n\n\002id\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\021\n\tlast_t"
    "ime\030\003 \001(\001\022\r\n\005inuse\030\016 \001(\005\022\017\n\007stateon\030\004 \003("
    "\005\022\021\n\tscan_type\030\005 \001(\005\022*\n\013filter_type\030\010 \001("
    "\0162\025.isafetec.FILTER_TYPE\022\022\n\ndo_at_time\030\006"
    " \001(\001\0224\n\tres_param\030\007 \001(\0132!.isafetec.CltCo"
    "mmonPolicy.ResScan\0324\n\007ResScan\022\014\n\004type\030\001 "
    "\001(\005\022\014\n\004time\030\002 \001(\001\022\r\n\005param\030\003 \001(\005\">\n\023CltC"
    "ommonPolicyList\022\'\n\004list\030\001 \003(\0132\031.isafetec"
    ".CltCommonPolicy\"W\n\024CltCheckPCIdlePolicy"
    "\022\n\n\002id\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\021\n\tlast_time\030"
    "\003 \001(\001\022\022\n\nmax_minute\030\004 \001(\005\"\321\001\n\016CltAlarmPo"
    "licy\022\n\n\002id\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\021\n\tlast_t"
    "ime\030\003 \001(\001\022\r\n\005inuse\030\016 \001(\005\022\017\n\007stateon\030\004 \003("
    "\005\022(\n\010timelist\030\006 \001(\0132\026.isafetec.TimeSpanL"
    "ist\022\020\n\010usetimeF\030\014 \001(\001\022\020\n\010usetimeE\030\r \001(\001\022"
    "\r\n\005index\030\022 \001(\005\022\025\n\rweek_day_mask\030\023 \001(\005\"<\n"
    "\022CltAlarmPolicyList\022&\n\004list\030\001 \003(\0132\030.isaf"
    "etec.CltAlarmPolicy\"\272\003\n\021CltQQFilterPolic"
    "y\022\n\n\002id\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\021\n\tlast_time"
    "\030\003 \001(\001\022\r\n\005inuse\030\016 \001(\005\022*\n\013filter_type\030\004 \001"
    "(\0162\025.isafetec.FILTER_TYPE\0222\n\017filterlist_"
    "type\030\005 \001(\0162\031.isafetec.FILTERLIST_TYPE\022:\n"
    "\nfilterlist\030\006 \003(\0132&.isafetec.CltQQFilter"
    "Policy.FilterNode\022(\n\010timelist\030\007 \001(\0132\026.is"
    "afetec.TimeSpanList\022*\n\013filter_mode\030\010 \001(\016"
    "2\025.isafetec.FILTER_MODE\022\020\n\010usetimeF\030\t \001("
    "\001\022\020\n\010usetimeE\030\n \001(\001\022\r\n\005hints\030\013 \001(\t\022\r\n\005in"
    "dex\030\014 \001(\005\022\025\n\rweek_day_mask\030\r \001(\005\032\036\n\nFilt"
    "erNode\022\020\n\010qqnumber\030\001 \001(\t\"B\n\025CltQQFilterP"
    "olicyList\022)\n\004list\030\001 \003(\0132\033.isafetec.CltQQ"
    "FilterPolicy*:\n\016PRINT_FLT_TYPE\022\023\n\017PRT_BY"
    "_DOC_TYPE\020\000\022\023\n\017PRT_BY_DOC_NAME\020\001*>\n\rFILE"
    "_FLT_TYPE\022\030\n\024FILE_FLT_BY_DOC_TYPE\020\000\022\023\n\017F"
    "ILE_FLT_BY_DIR\020\001*\217\002\n\tMODE_TYPE\022\022\n\016MODE_C"
    "OPYF_USB\020\000\022\025\n\021MODE_COPYF_NSHARE\020\001\022\025\n\021MOD"
    "E_COPYF_NSTORE\020\002\022\025\n\021MODE_COPYF_DEFDIR\020\003\022"
    "\022\n\016MODE_COPYT_USB\020\004\022\025\n\021MODE_COPYT_NSHARE"
    "\020\005\022\025\n\021MODE_COPYT_NSTORE\020\006\022\025\n\021MODE_COPYT_"
    "DEFDIR\020\007\022\020\n\014MODE_UP_BYIE\020\010\022\024\n\020MODE_UP_BY"
    "MATHON\020\t\022\020\n\014MODE_UP_BYQQ\020\n\022\026\n\022MODE_USE_B"
    "Y_DEFEXE\020\013", 7010);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Intranetclt.proto", &protobuf_RegisterTypes);
  CltProcessFilterPolicy::default_instance_ = new CltProcessFilterPolicy();
  CltProcessFilterPolicy_FilterNode::default_instance_ = new CltProcessFilterPolicy_FilterNode();
  CltProcessFilterPolicyList::default_instance_ = new CltProcessFilterPolicyList();
  CltUrlFilterPolicy::default_instance_ = new CltUrlFilterPolicy();
  CltUrlFilterPolicy_FilterNode::default_instance_ = new CltUrlFilterPolicy_FilterNode();
  CltUrlFilterPolicyList::default_instance_ = new CltUrlFilterPolicyList();
  CltIPAndPortFilterPolicy::default_instance_ = new CltIPAndPortFilterPolicy();
  CltIPAndPortFilterPolicy_FilterNode::default_instance_ = new CltIPAndPortFilterPolicy_FilterNode();
  CltIPAndPortFilterPolicyList::default_instance_ = new CltIPAndPortFilterPolicyList();
  CltDeviceControlPolicy::default_instance_ = new CltDeviceControlPolicy();
  CltDeviceControlPolicy_FilterNode::default_instance_ = new CltDeviceControlPolicy_FilterNode();
  CltDeviceControlPolicyList::default_instance_ = new CltDeviceControlPolicyList();
  CltPrintControlPolicy::default_instance_ = new CltPrintControlPolicy();
  CltPrintControlPolicy_FilterNode::default_instance_ = new CltPrintControlPolicy_FilterNode();
  CltPrintControlPolicyList::default_instance_ = new CltPrintControlPolicyList();
  CltFileControlPolicy::default_instance_ = new CltFileControlPolicy();
  CltFileControlPolicy_FilterNode::default_instance_ = new CltFileControlPolicy_FilterNode();
  CltFileControlPolicyList::default_instance_ = new CltFileControlPolicyList();
  CltSystemControlPolicy::default_instance_ = new CltSystemControlPolicy();
  CltSystemControlPolicy_FilterNode::default_instance_ = new CltSystemControlPolicy_FilterNode();
  CltSystemControlPolicyList::default_instance_ = new CltSystemControlPolicyList();
  FileParam::default_instance_ = new FileParam();
  FileParamList::default_instance_ = new FileParamList();
  CltLogPolcicy::default_instance_ = new CltLogPolcicy();
  CltLogPolcicy_ScreenParam::default_instance_ = new CltLogPolcicy_ScreenParam();
  CltLogPolcicyList::default_instance_ = new CltLogPolcicyList();
  CltStreamControlPolicy::default_instance_ = new CltStreamControlPolicy();
  CltStreamControlPolicy_FilterNode::default_instance_ = new CltStreamControlPolicy_FilterNode();
  CltStreamControlPolicyList::default_instance_ = new CltStreamControlPolicyList();
  CltCommonPolicy::default_instance_ = new CltCommonPolicy();
  CltCommonPolicy_ResScan::default_instance_ = new CltCommonPolicy_ResScan();
  CltCommonPolicyList::default_instance_ = new CltCommonPolicyList();
  CltCheckPCIdlePolicy::default_instance_ = new CltCheckPCIdlePolicy();
  CltAlarmPolicy::default_instance_ = new CltAlarmPolicy();
  CltAlarmPolicyList::default_instance_ = new CltAlarmPolicyList();
  CltQQFilterPolicy::default_instance_ = new CltQQFilterPolicy();
  CltQQFilterPolicy_FilterNode::default_instance_ = new CltQQFilterPolicy_FilterNode();
  CltQQFilterPolicyList::default_instance_ = new CltQQFilterPolicyList();
  CltProcessFilterPolicy::default_instance_->InitAsDefaultInstance();
  CltProcessFilterPolicy_FilterNode::default_instance_->InitAsDefaultInstance();
  CltProcessFilterPolicyList::default_instance_->InitAsDefaultInstance();
  CltUrlFilterPolicy::default_instance_->InitAsDefaultInstance();
  CltUrlFilterPolicy_FilterNode::default_instance_->InitAsDefaultInstance();
  CltUrlFilterPolicyList::default_instance_->InitAsDefaultInstance();
  CltIPAndPortFilterPolicy::default_instance_->InitAsDefaultInstance();
  CltIPAndPortFilterPolicy_FilterNode::default_instance_->InitAsDefaultInstance();
  CltIPAndPortFilterPolicyList::default_instance_->InitAsDefaultInstance();
  CltDeviceControlPolicy::default_instance_->InitAsDefaultInstance();
  CltDeviceControlPolicy_FilterNode::default_instance_->InitAsDefaultInstance();
  CltDeviceControlPolicyList::default_instance_->InitAsDefaultInstance();
  CltPrintControlPolicy::default_instance_->InitAsDefaultInstance();
  CltPrintControlPolicy_FilterNode::default_instance_->InitAsDefaultInstance();
  CltPrintControlPolicyList::default_instance_->InitAsDefaultInstance();
  CltFileControlPolicy::default_instance_->InitAsDefaultInstance();
  CltFileControlPolicy_FilterNode::default_instance_->InitAsDefaultInstance();
  CltFileControlPolicyList::default_instance_->InitAsDefaultInstance();
  CltSystemControlPolicy::default_instance_->InitAsDefaultInstance();
  CltSystemControlPolicy_FilterNode::default_instance_->InitAsDefaultInstance();
  CltSystemControlPolicyList::default_instance_->InitAsDefaultInstance();
  FileParam::default_instance_->InitAsDefaultInstance();
  FileParamList::default_instance_->InitAsDefaultInstance();
  CltLogPolcicy::default_instance_->InitAsDefaultInstance();
  CltLogPolcicy_ScreenParam::default_instance_->InitAsDefaultInstance();
  CltLogPolcicyList::default_instance_->InitAsDefaultInstance();
  CltStreamControlPolicy::default_instance_->InitAsDefaultInstance();
  CltStreamControlPolicy_FilterNode::default_instance_->InitAsDefaultInstance();
  CltStreamControlPolicyList::default_instance_->InitAsDefaultInstance();
  CltCommonPolicy::default_instance_->InitAsDefaultInstance();
  CltCommonPolicy_ResScan::default_instance_->InitAsDefaultInstance();
  CltCommonPolicyList::default_instance_->InitAsDefaultInstance();
  CltCheckPCIdlePolicy::default_instance_->InitAsDefaultInstance();
  CltAlarmPolicy::default_instance_->InitAsDefaultInstance();
  CltAlarmPolicyList::default_instance_->InitAsDefaultInstance();
  CltQQFilterPolicy::default_instance_->InitAsDefaultInstance();
  CltQQFilterPolicy_FilterNode::default_instance_->InitAsDefaultInstance();
  CltQQFilterPolicyList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Intranetclt_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Intranetclt_2eproto {
  StaticDescriptorInitializer_Intranetclt_2eproto() {
    protobuf_AddDesc_Intranetclt_2eproto();
  }
} static_descriptor_initializer_Intranetclt_2eproto_;

const ::google::protobuf::EnumDescriptor* PRINT_FLT_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PRINT_FLT_TYPE_descriptor_;
}
bool PRINT_FLT_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FILE_FLT_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FILE_FLT_TYPE_descriptor_;
}
bool FILE_FLT_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MODE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MODE_TYPE_descriptor_;
}
bool MODE_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CltProcessFilterPolicy_FilterNode::kNameFieldNumber;
const int CltProcessFilterPolicy_FilterNode::kOrgnameFieldNumber;
const int CltProcessFilterPolicy_FilterNode::kProductFieldNumber;
const int CltProcessFilterPolicy_FilterNode::kExttypeFieldNumber;
const int CltProcessFilterPolicy_FilterNode::kHashFieldNumber;
#endif  // !_MSC_VER

CltProcessFilterPolicy_FilterNode::CltProcessFilterPolicy_FilterNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CltProcessFilterPolicy_FilterNode::InitAsDefaultInstance() {
}

CltProcessFilterPolicy_FilterNode::CltProcessFilterPolicy_FilterNode(const CltProcessFilterPolicy_FilterNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CltProcessFilterPolicy_FilterNode::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orgname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  product_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exttype_ = 0;
  hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CltProcessFilterPolicy_FilterNode::~CltProcessFilterPolicy_FilterNode() {
  SharedDtor();
}

void CltProcessFilterPolicy_FilterNode::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (orgname_ != &::google::protobuf::internal::kEmptyString) {
    delete orgname_;
  }
  if (product_ != &::google::protobuf::internal::kEmptyString) {
    delete product_;
  }
  if (hash_ != &::google::protobuf::internal::kEmptyString) {
    delete hash_;
  }
  if (this != default_instance_) {
  }
}

void CltProcessFilterPolicy_FilterNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CltProcessFilterPolicy_FilterNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CltProcessFilterPolicy_FilterNode_descriptor_;
}

const CltProcessFilterPolicy_FilterNode& CltProcessFilterPolicy_FilterNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Intranetclt_2eproto();  return *default_instance_;
}

CltProcessFilterPolicy_FilterNode* CltProcessFilterPolicy_FilterNode::default_instance_ = NULL;

CltProcessFilterPolicy_FilterNode* CltProcessFilterPolicy_FilterNode::New() const {
  return new CltProcessFilterPolicy_FilterNode;
}

void CltProcessFilterPolicy_FilterNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_orgname()) {
      if (orgname_ != &::google::protobuf::internal::kEmptyString) {
        orgname_->clear();
      }
    }
    if (has_product()) {
      if (product_ != &::google::protobuf::internal::kEmptyString) {
        product_->clear();
      }
    }
    exttype_ = 0;
    if (has_hash()) {
      if (hash_ != &::google::protobuf::internal::kEmptyString) {
        hash_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CltProcessFilterPolicy_FilterNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_orgname;
        break;
      }
      
      // optional string orgname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orgname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orgname().data(), this->orgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_product;
        break;
      }
      
      // optional string product = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_product:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->product().data(), this->product().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exttype;
        break;
      }
      
      // optional int32 exttype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exttype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exttype_)));
          set_has_exttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_hash;
        break;
      }
      
      // optional string hash = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hash().data(), this->hash().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CltProcessFilterPolicy_FilterNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional string orgname = 2;
  if (has_orgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orgname().data(), this->orgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->orgname(), output);
  }
  
  // optional string product = 3;
  if (has_product()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->product().data(), this->product().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->product(), output);
  }
  
  // optional int32 exttype = 4;
  if (has_exttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->exttype(), output);
  }
  
  // optional string hash = 5;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->hash(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CltProcessFilterPolicy_FilterNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional string orgname = 2;
  if (has_orgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orgname().data(), this->orgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->orgname(), target);
  }
  
  // optional string product = 3;
  if (has_product()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->product().data(), this->product().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->product(), target);
  }
  
  // optional int32 exttype = 4;
  if (has_exttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->exttype(), target);
  }
  
  // optional string hash = 5;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->hash(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CltProcessFilterPolicy_FilterNode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string orgname = 2;
    if (has_orgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orgname());
    }
    
    // optional string product = 3;
    if (has_product()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->product());
    }
    
    // optional int32 exttype = 4;
    if (has_exttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exttype());
    }
    
    // optional string hash = 5;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hash());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CltProcessFilterPolicy_FilterNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CltProcessFilterPolicy_FilterNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CltProcessFilterPolicy_FilterNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CltProcessFilterPolicy_FilterNode::MergeFrom(const CltProcessFilterPolicy_FilterNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_orgname()) {
      set_orgname(from.orgname());
    }
    if (from.has_product()) {
      set_product(from.product());
    }
    if (from.has_exttype()) {
      set_exttype(from.exttype());
    }
    if (from.has_hash()) {
      set_hash(from.hash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CltProcessFilterPolicy_FilterNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CltProcessFilterPolicy_FilterNode::CopyFrom(const CltProcessFilterPolicy_FilterNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CltProcessFilterPolicy_FilterNode::IsInitialized() const {
  
  return true;
}

void CltProcessFilterPolicy_FilterNode::Swap(CltProcessFilterPolicy_FilterNode* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(orgname_, other->orgname_);
    std::swap(product_, other->product_);
    std::swap(exttype_, other->exttype_);
    std::swap(hash_, other->hash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CltProcessFilterPolicy_FilterNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CltProcessFilterPolicy_FilterNode_descriptor_;
  metadata.reflection = CltProcessFilterPolicy_FilterNode_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CltProcessFilterPolicy::kIdFieldNumber;
const int CltProcessFilterPolicy::kTypeFieldNumber;
const int CltProcessFilterPolicy::kLastTimeFieldNumber;
const int CltProcessFilterPolicy::kInuseFieldNumber;
const int CltProcessFilterPolicy::kFilterTypeFieldNumber;
const int CltProcessFilterPolicy::kFilterlistTypeFieldNumber;
const int CltProcessFilterPolicy::kFilterlistFieldNumber;
const int CltProcessFilterPolicy::kTimelistFieldNumber;
const int CltProcessFilterPolicy::kFilterModeFieldNumber;
const int CltProcessFilterPolicy::kUsetimeFFieldNumber;
const int CltProcessFilterPolicy::kUsetimeEFieldNumber;
const int CltProcessFilterPolicy::kHintsFieldNumber;
const int CltProcessFilterPolicy::kIndexFieldNumber;
const int CltProcessFilterPolicy::kWeekDayMaskFieldNumber;
#endif  // !_MSC_VER

CltProcessFilterPolicy::CltProcessFilterPolicy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CltProcessFilterPolicy::InitAsDefaultInstance() {
  timelist_ = const_cast< ::isafetec::TimeSpanList*>(&::isafetec::TimeSpanList::default_instance());
}

CltProcessFilterPolicy::CltProcessFilterPolicy(const CltProcessFilterPolicy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CltProcessFilterPolicy::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  last_time_ = 0;
  inuse_ = 0;
  filter_type_ = 0;
  filterlist_type_ = 0;
  timelist_ = NULL;
  filter_mode_ = 0;
  usetimef_ = 0;
  usetimee_ = 0;
  hints_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  index_ = 0;
  week_day_mask_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CltProcessFilterPolicy::~CltProcessFilterPolicy() {
  SharedDtor();
}

void CltProcessFilterPolicy::SharedDtor() {
  if (hints_ != &::google::protobuf::internal::kEmptyString) {
    delete hints_;
  }
  if (this != default_instance_) {
    delete timelist_;
  }
}

void CltProcessFilterPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CltProcessFilterPolicy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CltProcessFilterPolicy_descriptor_;
}

const CltProcessFilterPolicy& CltProcessFilterPolicy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Intranetclt_2eproto();  return *default_instance_;
}

CltProcessFilterPolicy* CltProcessFilterPolicy::default_instance_ = NULL;

CltProcessFilterPolicy* CltProcessFilterPolicy::New() const {
  return new CltProcessFilterPolicy;
}

void CltProcessFilterPolicy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    last_time_ = 0;
    inuse_ = 0;
    filter_type_ = 0;
    filterlist_type_ = 0;
    if (has_timelist()) {
      if (timelist_ != NULL) timelist_->::isafetec::TimeSpanList::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    filter_mode_ = 0;
    usetimef_ = 0;
    usetimee_ = 0;
    if (has_hints()) {
      if (hints_ != &::google::protobuf::internal::kEmptyString) {
        hints_->clear();
      }
    }
    index_ = 0;
    week_day_mask_ = 0;
  }
  filterlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CltProcessFilterPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_last_time;
        break;
      }
      
      // optional double last_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_last_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_time_)));
          set_has_last_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_filter_type;
        break;
      }
      
      // optional .isafetec.FILTER_TYPE filter_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::FILTER_TYPE_IsValid(value)) {
            set_filter_type(static_cast< isafetec::FILTER_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_filterlist_type;
        break;
      }
      
      // optional .isafetec.FILTERLIST_TYPE filterlist_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filterlist_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::FILTERLIST_TYPE_IsValid(value)) {
            set_filterlist_type(static_cast< isafetec::FILTERLIST_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_filterlist;
        break;
      }
      
      // repeated .isafetec.CltProcessFilterPolicy.FilterNode filterlist = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filterlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_filterlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_filterlist;
        if (input->ExpectTag(58)) goto parse_timelist;
        break;
      }
      
      // optional .isafetec.TimeSpanList timelist = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_filter_mode;
        break;
      }
      
      // optional .isafetec.FILTER_MODE filter_mode = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::FILTER_MODE_IsValid(value)) {
            set_filter_mode(static_cast< isafetec::FILTER_MODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_usetimeF;
        break;
      }
      
      // optional double usetimeF = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_usetimeF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &usetimef_)));
          set_has_usetimef();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_usetimeE;
        break;
      }
      
      // optional double usetimeE = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_usetimeE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &usetimee_)));
          set_has_usetimee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_hints;
        break;
      }
      
      // optional string hints = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hints()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hints().data(), this->hints().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_index;
        break;
      }
      
      // optional int32 index = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_week_day_mask;
        break;
      }
      
      // optional int32 week_day_mask = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week_day_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &week_day_mask_)));
          set_has_week_day_mask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_inuse;
        break;
      }
      
      // optional int32 inuse = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inuse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inuse_)));
          set_has_inuse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CltProcessFilterPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // optional double last_time = 3;
  if (has_last_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->last_time(), output);
  }
  
  // optional .isafetec.FILTER_TYPE filter_type = 4;
  if (has_filter_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->filter_type(), output);
  }
  
  // optional .isafetec.FILTERLIST_TYPE filterlist_type = 5;
  if (has_filterlist_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->filterlist_type(), output);
  }
  
  // repeated .isafetec.CltProcessFilterPolicy.FilterNode filterlist = 6;
  for (int i = 0; i < this->filterlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->filterlist(i), output);
  }
  
  // optional .isafetec.TimeSpanList timelist = 7;
  if (has_timelist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->timelist(), output);
  }
  
  // optional .isafetec.FILTER_MODE filter_mode = 8;
  if (has_filter_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->filter_mode(), output);
  }
  
  // optional double usetimeF = 9;
  if (has_usetimef()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->usetimef(), output);
  }
  
  // optional double usetimeE = 10;
  if (has_usetimee()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->usetimee(), output);
  }
  
  // optional string hints = 11;
  if (has_hints()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hints().data(), this->hints().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->hints(), output);
  }
  
  // optional int32 index = 12;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->index(), output);
  }
  
  // optional int32 week_day_mask = 13;
  if (has_week_day_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->week_day_mask(), output);
  }
  
  // optional int32 inuse = 14;
  if (has_inuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->inuse(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CltProcessFilterPolicy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // optional double last_time = 3;
  if (has_last_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->last_time(), target);
  }
  
  // optional .isafetec.FILTER_TYPE filter_type = 4;
  if (has_filter_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->filter_type(), target);
  }
  
  // optional .isafetec.FILTERLIST_TYPE filterlist_type = 5;
  if (has_filterlist_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->filterlist_type(), target);
  }
  
  // repeated .isafetec.CltProcessFilterPolicy.FilterNode filterlist = 6;
  for (int i = 0; i < this->filterlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->filterlist(i), target);
  }
  
  // optional .isafetec.TimeSpanList timelist = 7;
  if (has_timelist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->timelist(), target);
  }
  
  // optional .isafetec.FILTER_MODE filter_mode = 8;
  if (has_filter_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->filter_mode(), target);
  }
  
  // optional double usetimeF = 9;
  if (has_usetimef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->usetimef(), target);
  }
  
  // optional double usetimeE = 10;
  if (has_usetimee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->usetimee(), target);
  }
  
  // optional string hints = 11;
  if (has_hints()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hints().data(), this->hints().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->hints(), target);
  }
  
  // optional int32 index = 12;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->index(), target);
  }
  
  // optional int32 week_day_mask = 13;
  if (has_week_day_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->week_day_mask(), target);
  }
  
  // optional int32 inuse = 14;
  if (has_inuse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->inuse(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CltProcessFilterPolicy::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional double last_time = 3;
    if (has_last_time()) {
      total_size += 1 + 8;
    }
    
    // optional int32 inuse = 14;
    if (has_inuse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inuse());
    }
    
    // optional .isafetec.FILTER_TYPE filter_type = 4;
    if (has_filter_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filter_type());
    }
    
    // optional .isafetec.FILTERLIST_TYPE filterlist_type = 5;
    if (has_filterlist_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filterlist_type());
    }
    
    // optional .isafetec.TimeSpanList timelist = 7;
    if (has_timelist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timelist());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .isafetec.FILTER_MODE filter_mode = 8;
    if (has_filter_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filter_mode());
    }
    
    // optional double usetimeF = 9;
    if (has_usetimef()) {
      total_size += 1 + 8;
    }
    
    // optional double usetimeE = 10;
    if (has_usetimee()) {
      total_size += 1 + 8;
    }
    
    // optional string hints = 11;
    if (has_hints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hints());
    }
    
    // optional int32 index = 12;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int32 week_day_mask = 13;
    if (has_week_day_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->week_day_mask());
    }
    
  }
  // repeated .isafetec.CltProcessFilterPolicy.FilterNode filterlist = 6;
  total_size += 1 * this->filterlist_size();
  for (int i = 0; i < this->filterlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->filterlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CltProcessFilterPolicy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CltProcessFilterPolicy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CltProcessFilterPolicy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CltProcessFilterPolicy::MergeFrom(const CltProcessFilterPolicy& from) {
  GOOGLE_CHECK_NE(&from, this);
  filterlist_.MergeFrom(from.filterlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_last_time()) {
      set_last_time(from.last_time());
    }
    if (from.has_inuse()) {
      set_inuse(from.inuse());
    }
    if (from.has_filter_type()) {
      set_filter_type(from.filter_type());
    }
    if (from.has_filterlist_type()) {
      set_filterlist_type(from.filterlist_type());
    }
    if (from.has_timelist()) {
      mutable_timelist()->::isafetec::TimeSpanList::MergeFrom(from.timelist());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_filter_mode()) {
      set_filter_mode(from.filter_mode());
    }
    if (from.has_usetimef()) {
      set_usetimef(from.usetimef());
    }
    if (from.has_usetimee()) {
      set_usetimee(from.usetimee());
    }
    if (from.has_hints()) {
      set_hints(from.hints());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_week_day_mask()) {
      set_week_day_mask(from.week_day_mask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CltProcessFilterPolicy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CltProcessFilterPolicy::CopyFrom(const CltProcessFilterPolicy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CltProcessFilterPolicy::IsInitialized() const {
  
  return true;
}

void CltProcessFilterPolicy::Swap(CltProcessFilterPolicy* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(last_time_, other->last_time_);
    std::swap(inuse_, other->inuse_);
    std::swap(filter_type_, other->filter_type_);
    std::swap(filterlist_type_, other->filterlist_type_);
    filterlist_.Swap(&other->filterlist_);
    std::swap(timelist_, other->timelist_);
    std::swap(filter_mode_, other->filter_mode_);
    std::swap(usetimef_, other->usetimef_);
    std::swap(usetimee_, other->usetimee_);
    std::swap(hints_, other->hints_);
    std::swap(index_, other->index_);
    std::swap(week_day_mask_, other->week_day_mask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CltProcessFilterPolicy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CltProcessFilterPolicy_descriptor_;
  metadata.reflection = CltProcessFilterPolicy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CltProcessFilterPolicyList::kListFieldNumber;
#endif  // !_MSC_VER

CltProcessFilterPolicyList::CltProcessFilterPolicyList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CltProcessFilterPolicyList::InitAsDefaultInstance() {
}

CltProcessFilterPolicyList::CltProcessFilterPolicyList(const CltProcessFilterPolicyList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CltProcessFilterPolicyList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CltProcessFilterPolicyList::~CltProcessFilterPolicyList() {
  SharedDtor();
}

void CltProcessFilterPolicyList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CltProcessFilterPolicyList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CltProcessFilterPolicyList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CltProcessFilterPolicyList_descriptor_;
}

const CltProcessFilterPolicyList& CltProcessFilterPolicyList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Intranetclt_2eproto();  return *default_instance_;
}

CltProcessFilterPolicyList* CltProcessFilterPolicyList::default_instance_ = NULL;

CltProcessFilterPolicyList* CltProcessFilterPolicyList::New() const {
  return new CltProcessFilterPolicyList;
}

void CltProcessFilterPolicyList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CltProcessFilterPolicyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .isafetec.CltProcessFilterPolicy list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CltProcessFilterPolicyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .isafetec.CltProcessFilterPolicy list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CltProcessFilterPolicyList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .isafetec.CltProcessFilterPolicy list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CltProcessFilterPolicyList::ByteSize() const {
  int total_size = 0;
  
  // repeated .isafetec.CltProcessFilterPolicy list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CltProcessFilterPolicyList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CltProcessFilterPolicyList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CltProcessFilterPolicyList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CltProcessFilterPolicyList::MergeFrom(const CltProcessFilterPolicyList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CltProcessFilterPolicyList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CltProcessFilterPolicyList::CopyFrom(const CltProcessFilterPolicyList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CltProcessFilterPolicyList::IsInitialized() const {
  
  return true;
}

void CltProcessFilterPolicyList::Swap(CltProcessFilterPolicyList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CltProcessFilterPolicyList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CltProcessFilterPolicyList_descriptor_;
  metadata.reflection = CltProcessFilterPolicyList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CltUrlFilterPolicy_FilterNode::kUrlFieldNumber;
#endif  // !_MSC_VER

CltUrlFilterPolicy_FilterNode::CltUrlFilterPolicy_FilterNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CltUrlFilterPolicy_FilterNode::InitAsDefaultInstance() {
}

CltUrlFilterPolicy_FilterNode::CltUrlFilterPolicy_FilterNode(const CltUrlFilterPolicy_FilterNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CltUrlFilterPolicy_FilterNode::SharedCtor() {
  _cached_size_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CltUrlFilterPolicy_FilterNode::~CltUrlFilterPolicy_FilterNode() {
  SharedDtor();
}

void CltUrlFilterPolicy_FilterNode::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void CltUrlFilterPolicy_FilterNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CltUrlFilterPolicy_FilterNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CltUrlFilterPolicy_FilterNode_descriptor_;
}

const CltUrlFilterPolicy_FilterNode& CltUrlFilterPolicy_FilterNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Intranetclt_2eproto();  return *default_instance_;
}

CltUrlFilterPolicy_FilterNode* CltUrlFilterPolicy_FilterNode::default_instance_ = NULL;

CltUrlFilterPolicy_FilterNode* CltUrlFilterPolicy_FilterNode::New() const {
  return new CltUrlFilterPolicy_FilterNode;
}

void CltUrlFilterPolicy_FilterNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CltUrlFilterPolicy_FilterNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string url = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CltUrlFilterPolicy_FilterNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->url(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CltUrlFilterPolicy_FilterNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string url = 1;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CltUrlFilterPolicy_FilterNode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CltUrlFilterPolicy_FilterNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CltUrlFilterPolicy_FilterNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CltUrlFilterPolicy_FilterNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CltUrlFilterPolicy_FilterNode::MergeFrom(const CltUrlFilterPolicy_FilterNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CltUrlFilterPolicy_FilterNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CltUrlFilterPolicy_FilterNode::CopyFrom(const CltUrlFilterPolicy_FilterNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CltUrlFilterPolicy_FilterNode::IsInitialized() const {
  
  return true;
}

void CltUrlFilterPolicy_FilterNode::Swap(CltUrlFilterPolicy_FilterNode* other) {
  if (other != this) {
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CltUrlFilterPolicy_FilterNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CltUrlFilterPolicy_FilterNode_descriptor_;
  metadata.reflection = CltUrlFilterPolicy_FilterNode_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CltUrlFilterPolicy::kIdFieldNumber;
const int CltUrlFilterPolicy::kTypeFieldNumber;
const int CltUrlFilterPolicy::kLastTimeFieldNumber;
const int CltUrlFilterPolicy::kInuseFieldNumber;
const int CltUrlFilterPolicy::kFilterTypeFieldNumber;
const int CltUrlFilterPolicy::kFilterlistTypeFieldNumber;
const int CltUrlFilterPolicy::kFilterlistFieldNumber;
const int CltUrlFilterPolicy::kTimelistFieldNumber;
const int CltUrlFilterPolicy::kFilterModeFieldNumber;
const int CltUrlFilterPolicy::kUsetimeFFieldNumber;
const int CltUrlFilterPolicy::kUsetimeEFieldNumber;
const int CltUrlFilterPolicy::kHintsFieldNumber;
const int CltUrlFilterPolicy::kIndexFieldNumber;
const int CltUrlFilterPolicy::kWeekDayMaskFieldNumber;
#endif  // !_MSC_VER

CltUrlFilterPolicy::CltUrlFilterPolicy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CltUrlFilterPolicy::InitAsDefaultInstance() {
  timelist_ = const_cast< ::isafetec::TimeSpanList*>(&::isafetec::TimeSpanList::default_instance());
}

CltUrlFilterPolicy::CltUrlFilterPolicy(const CltUrlFilterPolicy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CltUrlFilterPolicy::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  last_time_ = 0;
  inuse_ = 0;
  filter_type_ = 0;
  filterlist_type_ = 0;
  timelist_ = NULL;
  filter_mode_ = 0;
  usetimef_ = 0;
  usetimee_ = 0;
  hints_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  index_ = 0;
  week_day_mask_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CltUrlFilterPolicy::~CltUrlFilterPolicy() {
  SharedDtor();
}

void CltUrlFilterPolicy::SharedDtor() {
  if (hints_ != &::google::protobuf::internal::kEmptyString) {
    delete hints_;
  }
  if (this != default_instance_) {
    delete timelist_;
  }
}

void CltUrlFilterPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CltUrlFilterPolicy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CltUrlFilterPolicy_descriptor_;
}

const CltUrlFilterPolicy& CltUrlFilterPolicy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Intranetclt_2eproto();  return *default_instance_;
}

CltUrlFilterPolicy* CltUrlFilterPolicy::default_instance_ = NULL;

CltUrlFilterPolicy* CltUrlFilterPolicy::New() const {
  return new CltUrlFilterPolicy;
}

void CltUrlFilterPolicy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    last_time_ = 0;
    inuse_ = 0;
    filter_type_ = 0;
    filterlist_type_ = 0;
    if (has_timelist()) {
      if (timelist_ != NULL) timelist_->::isafetec::TimeSpanList::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    filter_mode_ = 0;
    usetimef_ = 0;
    usetimee_ = 0;
    if (has_hints()) {
      if (hints_ != &::google::protobuf::internal::kEmptyString) {
        hints_->clear();
      }
    }
    index_ = 0;
    week_day_mask_ = 0;
  }
  filterlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CltUrlFilterPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_last_time;
        break;
      }
      
      // optional double last_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_last_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_time_)));
          set_has_last_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_filter_type;
        break;
      }
      
      // optional .isafetec.FILTER_TYPE filter_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::FILTER_TYPE_IsValid(value)) {
            set_filter_type(static_cast< isafetec::FILTER_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_filterlist_type;
        break;
      }
      
      // optional .isafetec.FILTERLIST_TYPE filterlist_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filterlist_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::FILTERLIST_TYPE_IsValid(value)) {
            set_filterlist_type(static_cast< isafetec::FILTERLIST_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_filterlist;
        break;
      }
      
      // repeated .isafetec.CltUrlFilterPolicy.FilterNode filterlist = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filterlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_filterlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_filterlist;
        if (input->ExpectTag(58)) goto parse_timelist;
        break;
      }
      
      // optional .isafetec.TimeSpanList timelist = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_filter_mode;
        break;
      }
      
      // optional .isafetec.FILTER_MODE filter_mode = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::FILTER_MODE_IsValid(value)) {
            set_filter_mode(static_cast< isafetec::FILTER_MODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_usetimeF;
        break;
      }
      
      // optional double usetimeF = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_usetimeF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &usetimef_)));
          set_has_usetimef();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_usetimeE;
        break;
      }
      
      // optional double usetimeE = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_usetimeE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &usetimee_)));
          set_has_usetimee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_hints;
        break;
      }
      
      // optional string hints = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hints()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hints().data(), this->hints().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_index;
        break;
      }
      
      // optional int32 index = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_week_day_mask;
        break;
      }
      
      // optional int32 week_day_mask = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week_day_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &week_day_mask_)));
          set_has_week_day_mask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_inuse;
        break;
      }
      
      // optional int32 inuse = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inuse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inuse_)));
          set_has_inuse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CltUrlFilterPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // optional double last_time = 3;
  if (has_last_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->last_time(), output);
  }
  
  // optional .isafetec.FILTER_TYPE filter_type = 4;
  if (has_filter_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->filter_type(), output);
  }
  
  // optional .isafetec.FILTERLIST_TYPE filterlist_type = 5;
  if (has_filterlist_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->filterlist_type(), output);
  }
  
  // repeated .isafetec.CltUrlFilterPolicy.FilterNode filterlist = 6;
  for (int i = 0; i < this->filterlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->filterlist(i), output);
  }
  
  // optional .isafetec.TimeSpanList timelist = 7;
  if (has_timelist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->timelist(), output);
  }
  
  // optional .isafetec.FILTER_MODE filter_mode = 8;
  if (has_filter_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->filter_mode(), output);
  }
  
  // optional double usetimeF = 9;
  if (has_usetimef()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->usetimef(), output);
  }
  
  // optional double usetimeE = 10;
  if (has_usetimee()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->usetimee(), output);
  }
  
  // optional string hints = 11;
  if (has_hints()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hints().data(), this->hints().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->hints(), output);
  }
  
  // optional int32 index = 12;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->index(), output);
  }
  
  // optional int32 week_day_mask = 13;
  if (has_week_day_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->week_day_mask(), output);
  }
  
  // optional int32 inuse = 14;
  if (has_inuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->inuse(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CltUrlFilterPolicy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // optional double last_time = 3;
  if (has_last_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->last_time(), target);
  }
  
  // optional .isafetec.FILTER_TYPE filter_type = 4;
  if (has_filter_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->filter_type(), target);
  }
  
  // optional .isafetec.FILTERLIST_TYPE filterlist_type = 5;
  if (has_filterlist_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->filterlist_type(), target);
  }
  
  // repeated .isafetec.CltUrlFilterPolicy.FilterNode filterlist = 6;
  for (int i = 0; i < this->filterlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->filterlist(i), target);
  }
  
  // optional .isafetec.TimeSpanList timelist = 7;
  if (has_timelist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->timelist(), target);
  }
  
  // optional .isafetec.FILTER_MODE filter_mode = 8;
  if (has_filter_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->filter_mode(), target);
  }
  
  // optional double usetimeF = 9;
  if (has_usetimef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->usetimef(), target);
  }
  
  // optional double usetimeE = 10;
  if (has_usetimee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->usetimee(), target);
  }
  
  // optional string hints = 11;
  if (has_hints()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hints().data(), this->hints().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->hints(), target);
  }
  
  // optional int32 index = 12;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->index(), target);
  }
  
  // optional int32 week_day_mask = 13;
  if (has_week_day_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->week_day_mask(), target);
  }
  
  // optional int32 inuse = 14;
  if (has_inuse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->inuse(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CltUrlFilterPolicy::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional double last_time = 3;
    if (has_last_time()) {
      total_size += 1 + 8;
    }
    
    // optional int32 inuse = 14;
    if (has_inuse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inuse());
    }
    
    // optional .isafetec.FILTER_TYPE filter_type = 4;
    if (has_filter_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filter_type());
    }
    
    // optional .isafetec.FILTERLIST_TYPE filterlist_type = 5;
    if (has_filterlist_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filterlist_type());
    }
    
    // optional .isafetec.TimeSpanList timelist = 7;
    if (has_timelist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timelist());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .isafetec.FILTER_MODE filter_mode = 8;
    if (has_filter_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filter_mode());
    }
    
    // optional double usetimeF = 9;
    if (has_usetimef()) {
      total_size += 1 + 8;
    }
    
    // optional double usetimeE = 10;
    if (has_usetimee()) {
      total_size += 1 + 8;
    }
    
    // optional string hints = 11;
    if (has_hints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hints());
    }
    
    // optional int32 index = 12;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int32 week_day_mask = 13;
    if (has_week_day_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->week_day_mask());
    }
    
  }
  // repeated .isafetec.CltUrlFilterPolicy.FilterNode filterlist = 6;
  total_size += 1 * this->filterlist_size();
  for (int i = 0; i < this->filterlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->filterlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CltUrlFilterPolicy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CltUrlFilterPolicy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CltUrlFilterPolicy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CltUrlFilterPolicy::MergeFrom(const CltUrlFilterPolicy& from) {
  GOOGLE_CHECK_NE(&from, this);
  filterlist_.MergeFrom(from.filterlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_last_time()) {
      set_last_time(from.last_time());
    }
    if (from.has_inuse()) {
      set_inuse(from.inuse());
    }
    if (from.has_filter_type()) {
      set_filter_type(from.filter_type());
    }
    if (from.has_filterlist_type()) {
      set_filterlist_type(from.filterlist_type());
    }
    if (from.has_timelist()) {
      mutable_timelist()->::isafetec::TimeSpanList::MergeFrom(from.timelist());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_filter_mode()) {
      set_filter_mode(from.filter_mode());
    }
    if (from.has_usetimef()) {
      set_usetimef(from.usetimef());
    }
    if (from.has_usetimee()) {
      set_usetimee(from.usetimee());
    }
    if (from.has_hints()) {
      set_hints(from.hints());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_week_day_mask()) {
      set_week_day_mask(from.week_day_mask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CltUrlFilterPolicy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CltUrlFilterPolicy::CopyFrom(const CltUrlFilterPolicy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CltUrlFilterPolicy::IsInitialized() const {
  
  return true;
}

void CltUrlFilterPolicy::Swap(CltUrlFilterPolicy* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(last_time_, other->last_time_);
    std::swap(inuse_, other->inuse_);
    std::swap(filter_type_, other->filter_type_);
    std::swap(filterlist_type_, other->filterlist_type_);
    filterlist_.Swap(&other->filterlist_);
    std::swap(timelist_, other->timelist_);
    std::swap(filter_mode_, other->filter_mode_);
    std::swap(usetimef_, other->usetimef_);
    std::swap(usetimee_, other->usetimee_);
    std::swap(hints_, other->hints_);
    std::swap(index_, other->index_);
    std::swap(week_day_mask_, other->week_day_mask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CltUrlFilterPolicy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CltUrlFilterPolicy_descriptor_;
  metadata.reflection = CltUrlFilterPolicy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CltUrlFilterPolicyList::kListFieldNumber;
#endif  // !_MSC_VER

CltUrlFilterPolicyList::CltUrlFilterPolicyList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CltUrlFilterPolicyList::InitAsDefaultInstance() {
}

CltUrlFilterPolicyList::CltUrlFilterPolicyList(const CltUrlFilterPolicyList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CltUrlFilterPolicyList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CltUrlFilterPolicyList::~CltUrlFilterPolicyList() {
  SharedDtor();
}

void CltUrlFilterPolicyList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CltUrlFilterPolicyList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CltUrlFilterPolicyList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CltUrlFilterPolicyList_descriptor_;
}

const CltUrlFilterPolicyList& CltUrlFilterPolicyList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Intranetclt_2eproto();  return *default_instance_;
}

CltUrlFilterPolicyList* CltUrlFilterPolicyList::default_instance_ = NULL;

CltUrlFilterPolicyList* CltUrlFilterPolicyList::New() const {
  return new CltUrlFilterPolicyList;
}

void CltUrlFilterPolicyList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CltUrlFilterPolicyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .isafetec.CltUrlFilterPolicy list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CltUrlFilterPolicyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .isafetec.CltUrlFilterPolicy list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CltUrlFilterPolicyList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .isafetec.CltUrlFilterPolicy list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CltUrlFilterPolicyList::ByteSize() const {
  int total_size = 0;
  
  // repeated .isafetec.CltUrlFilterPolicy list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CltUrlFilterPolicyList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CltUrlFilterPolicyList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CltUrlFilterPolicyList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CltUrlFilterPolicyList::MergeFrom(const CltUrlFilterPolicyList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CltUrlFilterPolicyList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CltUrlFilterPolicyList::CopyFrom(const CltUrlFilterPolicyList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CltUrlFilterPolicyList::IsInitialized() const {
  
  return true;
}

void CltUrlFilterPolicyList::Swap(CltUrlFilterPolicyList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CltUrlFilterPolicyList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CltUrlFilterPolicyList_descriptor_;
  metadata.reflection = CltUrlFilterPolicyList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CltIPAndPortFilterPolicy_FilterNode::kPorttypeFieldNumber;
const int CltIPAndPortFilterPolicy_FilterNode::kPortFFieldNumber;
const int CltIPAndPortFilterPolicy_FilterNode::kPortEFieldNumber;
const int CltIPAndPortFilterPolicy_FilterNode::kPortlistFieldNumber;
const int CltIPAndPortFilterPolicy_FilterNode::kIptypeFieldNumber;
const int CltIPAndPortFilterPolicy_FilterNode::kIpaddrFFieldNumber;
const int CltIPAndPortFilterPolicy_FilterNode::kIpaddrEFieldNumber;
#endif  // !_MSC_VER

CltIPAndPortFilterPolicy_FilterNode::CltIPAndPortFilterPolicy_FilterNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CltIPAndPortFilterPolicy_FilterNode::InitAsDefaultInstance() {
}

CltIPAndPortFilterPolicy_FilterNode::CltIPAndPortFilterPolicy_FilterNode(const CltIPAndPortFilterPolicy_FilterNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CltIPAndPortFilterPolicy_FilterNode::SharedCtor() {
  _cached_size_ = 0;
  porttype_ = 0u;
  portf_ = 0u;
  porte_ = 0u;
  portlist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iptype_ = 0u;
  ipaddrf_ = 0u;
  ipaddre_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CltIPAndPortFilterPolicy_FilterNode::~CltIPAndPortFilterPolicy_FilterNode() {
  SharedDtor();
}

void CltIPAndPortFilterPolicy_FilterNode::SharedDtor() {
  if (portlist_ != &::google::protobuf::internal::kEmptyString) {
    delete portlist_;
  }
  if (this != default_instance_) {
  }
}

void CltIPAndPortFilterPolicy_FilterNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CltIPAndPortFilterPolicy_FilterNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CltIPAndPortFilterPolicy_FilterNode_descriptor_;
}

const CltIPAndPortFilterPolicy_FilterNode& CltIPAndPortFilterPolicy_FilterNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Intranetclt_2eproto();  return *default_instance_;
}

CltIPAndPortFilterPolicy_FilterNode* CltIPAndPortFilterPolicy_FilterNode::default_instance_ = NULL;

CltIPAndPortFilterPolicy_FilterNode* CltIPAndPortFilterPolicy_FilterNode::New() const {
  return new CltIPAndPortFilterPolicy_FilterNode;
}

void CltIPAndPortFilterPolicy_FilterNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    porttype_ = 0u;
    portf_ = 0u;
    porte_ = 0u;
    if (has_portlist()) {
      if (portlist_ != &::google::protobuf::internal::kEmptyString) {
        portlist_->clear();
      }
    }
    iptype_ = 0u;
    ipaddrf_ = 0u;
    ipaddre_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CltIPAndPortFilterPolicy_FilterNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 porttype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &porttype_)));
          set_has_porttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_PortF;
        break;
      }
      
      // optional uint32 PortF = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PortF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &portf_)));
          set_has_portf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_PortE;
        break;
      }
      
      // optional uint32 PortE = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PortE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &porte_)));
          set_has_porte();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_portlist;
        break;
      }
      
      // optional string portlist = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_portlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_portlist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->portlist().data(), this->portlist().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_iptype;
        break;
      }
      
      // optional uint32 iptype = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iptype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iptype_)));
          set_has_iptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_IpaddrF;
        break;
      }
      
      // optional uint32 IpaddrF = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IpaddrF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ipaddrf_)));
          set_has_ipaddrf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_IpaddrE;
        break;
      }
      
      // optional uint32 IpaddrE = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IpaddrE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ipaddre_)));
          set_has_ipaddre();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CltIPAndPortFilterPolicy_FilterNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 porttype = 2;
  if (has_porttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->porttype(), output);
  }
  
  // optional uint32 PortF = 3;
  if (has_portf()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->portf(), output);
  }
  
  // optional uint32 PortE = 4;
  if (has_porte()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->porte(), output);
  }
  
  // optional string portlist = 5;
  if (has_portlist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portlist().data(), this->portlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->portlist(), output);
  }
  
  // optional uint32 iptype = 6;
  if (has_iptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->iptype(), output);
  }
  
  // optional uint32 IpaddrF = 7;
  if (has_ipaddrf()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->ipaddrf(), output);
  }
  
  // optional uint32 IpaddrE = 8;
  if (has_ipaddre()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->ipaddre(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CltIPAndPortFilterPolicy_FilterNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 porttype = 2;
  if (has_porttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->porttype(), target);
  }
  
  // optional uint32 PortF = 3;
  if (has_portf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->portf(), target);
  }
  
  // optional uint32 PortE = 4;
  if (has_porte()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->porte(), target);
  }
  
  // optional string portlist = 5;
  if (has_portlist()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portlist().data(), this->portlist().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->portlist(), target);
  }
  
  // optional uint32 iptype = 6;
  if (has_iptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->iptype(), target);
  }
  
  // optional uint32 IpaddrF = 7;
  if (has_ipaddrf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->ipaddrf(), target);
  }
  
  // optional uint32 IpaddrE = 8;
  if (has_ipaddre()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->ipaddre(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CltIPAndPortFilterPolicy_FilterNode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 porttype = 2;
    if (has_porttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->porttype());
    }
    
    // optional uint32 PortF = 3;
    if (has_portf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->portf());
    }
    
    // optional uint32 PortE = 4;
    if (has_porte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->porte());
    }
    
    // optional string portlist = 5;
    if (has_portlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->portlist());
    }
    
    // optional uint32 iptype = 6;
    if (has_iptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iptype());
    }
    
    // optional uint32 IpaddrF = 7;
    if (has_ipaddrf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ipaddrf());
    }
    
    // optional uint32 IpaddrE = 8;
    if (has_ipaddre()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ipaddre());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CltIPAndPortFilterPolicy_FilterNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CltIPAndPortFilterPolicy_FilterNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CltIPAndPortFilterPolicy_FilterNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CltIPAndPortFilterPolicy_FilterNode::MergeFrom(const CltIPAndPortFilterPolicy_FilterNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_porttype()) {
      set_porttype(from.porttype());
    }
    if (from.has_portf()) {
      set_portf(from.portf());
    }
    if (from.has_porte()) {
      set_porte(from.porte());
    }
    if (from.has_portlist()) {
      set_portlist(from.portlist());
    }
    if (from.has_iptype()) {
      set_iptype(from.iptype());
    }
    if (from.has_ipaddrf()) {
      set_ipaddrf(from.ipaddrf());
    }
    if (from.has_ipaddre()) {
      set_ipaddre(from.ipaddre());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CltIPAndPortFilterPolicy_FilterNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CltIPAndPortFilterPolicy_FilterNode::CopyFrom(const CltIPAndPortFilterPolicy_FilterNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CltIPAndPortFilterPolicy_FilterNode::IsInitialized() const {
  
  return true;
}

void CltIPAndPortFilterPolicy_FilterNode::Swap(CltIPAndPortFilterPolicy_FilterNode* other) {
  if (other != this) {
    std::swap(porttype_, other->porttype_);
    std::swap(portf_, other->portf_);
    std::swap(porte_, other->porte_);
    std::swap(portlist_, other->portlist_);
    std::swap(iptype_, other->iptype_);
    std::swap(ipaddrf_, other->ipaddrf_);
    std::swap(ipaddre_, other->ipaddre_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CltIPAndPortFilterPolicy_FilterNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CltIPAndPortFilterPolicy_FilterNode_descriptor_;
  metadata.reflection = CltIPAndPortFilterPolicy_FilterNode_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CltIPAndPortFilterPolicy::kIdFieldNumber;
const int CltIPAndPortFilterPolicy::kTypeFieldNumber;
const int CltIPAndPortFilterPolicy::kLastTimeFieldNumber;
const int CltIPAndPortFilterPolicy::kInuseFieldNumber;
const int CltIPAndPortFilterPolicy::kFilterTypeFieldNumber;
const int CltIPAndPortFilterPolicy::kFilterlistTypeFieldNumber;
const int CltIPAndPortFilterPolicy::kFilterlistFieldNumber;
const int CltIPAndPortFilterPolicy::kTimelistFieldNumber;
const int CltIPAndPortFilterPolicy::kFilterModeFieldNumber;
const int CltIPAndPortFilterPolicy::kDirecttypeFieldNumber;
const int CltIPAndPortFilterPolicy::kProtocoltypeFieldNumber;
const int CltIPAndPortFilterPolicy::kUsetimeFFieldNumber;
const int CltIPAndPortFilterPolicy::kUsetimeEFieldNumber;
const int CltIPAndPortFilterPolicy::kHintsFieldNumber;
const int CltIPAndPortFilterPolicy::kIndexFieldNumber;
const int CltIPAndPortFilterPolicy::kWeekDayMaskFieldNumber;
#endif  // !_MSC_VER

CltIPAndPortFilterPolicy::CltIPAndPortFilterPolicy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CltIPAndPortFilterPolicy::InitAsDefaultInstance() {
  timelist_ = const_cast< ::isafetec::TimeSpanList*>(&::isafetec::TimeSpanList::default_instance());
}

CltIPAndPortFilterPolicy::CltIPAndPortFilterPolicy(const CltIPAndPortFilterPolicy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CltIPAndPortFilterPolicy::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  last_time_ = 0;
  inuse_ = 0;
  filter_type_ = 0;
  filterlist_type_ = 0;
  timelist_ = NULL;
  filter_mode_ = 0;
  directtype_ = 0u;
  protocoltype_ = 0u;
  usetimef_ = 0;
  usetimee_ = 0;
  hints_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  index_ = 0;
  week_day_mask_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CltIPAndPortFilterPolicy::~CltIPAndPortFilterPolicy() {
  SharedDtor();
}

void CltIPAndPortFilterPolicy::SharedDtor() {
  if (hints_ != &::google::protobuf::internal::kEmptyString) {
    delete hints_;
  }
  if (this != default_instance_) {
    delete timelist_;
  }
}

void CltIPAndPortFilterPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CltIPAndPortFilterPolicy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CltIPAndPortFilterPolicy_descriptor_;
}

const CltIPAndPortFilterPolicy& CltIPAndPortFilterPolicy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Intranetclt_2eproto();  return *default_instance_;
}

CltIPAndPortFilterPolicy* CltIPAndPortFilterPolicy::default_instance_ = NULL;

CltIPAndPortFilterPolicy* CltIPAndPortFilterPolicy::New() const {
  return new CltIPAndPortFilterPolicy;
}

void CltIPAndPortFilterPolicy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    last_time_ = 0;
    inuse_ = 0;
    filter_type_ = 0;
    filterlist_type_ = 0;
    if (has_timelist()) {
      if (timelist_ != NULL) timelist_->::isafetec::TimeSpanList::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    filter_mode_ = 0;
    directtype_ = 0u;
    protocoltype_ = 0u;
    usetimef_ = 0;
    usetimee_ = 0;
    if (has_hints()) {
      if (hints_ != &::google::protobuf::internal::kEmptyString) {
        hints_->clear();
      }
    }
    index_ = 0;
    week_day_mask_ = 0;
  }
  filterlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CltIPAndPortFilterPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_last_time;
        break;
      }
      
      // optional double last_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_last_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_time_)));
          set_has_last_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_filter_type;
        break;
      }
      
      // optional .isafetec.FILTER_TYPE filter_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::FILTER_TYPE_IsValid(value)) {
            set_filter_type(static_cast< isafetec::FILTER_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_filterlist_type;
        break;
      }
      
      // optional .isafetec.FILTERLIST_TYPE filterlist_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filterlist_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::FILTERLIST_TYPE_IsValid(value)) {
            set_filterlist_type(static_cast< isafetec::FILTERLIST_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_filterlist;
        break;
      }
      
      // repeated .isafetec.CltIPAndPortFilterPolicy.FilterNode filterlist = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filterlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_filterlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_filterlist;
        if (input->ExpectTag(58)) goto parse_timelist;
        break;
      }
      
      // optional .isafetec.TimeSpanList timelist = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_filter_mode;
        break;
      }
      
      // optional .isafetec.FILTER_MODE filter_mode = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::FILTER_MODE_IsValid(value)) {
            set_filter_mode(static_cast< isafetec::FILTER_MODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_directtype;
        break;
      }
      
      // optional uint32 directtype = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_directtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &directtype_)));
          set_has_directtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_protocoltype;
        break;
      }
      
      // optional uint32 protocoltype = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protocoltype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocoltype_)));
          set_has_protocoltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_usetimeF;
        break;
      }
      
      // optional double usetimeF = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_usetimeF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &usetimef_)));
          set_has_usetimef();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_usetimeE;
        break;
      }
      
      // optional double usetimeE = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_usetimeE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &usetimee_)));
          set_has_usetimee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_hints;
        break;
      }
      
      // optional string hints = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hints()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hints().data(), this->hints().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_index;
        break;
      }
      
      // optional int32 index = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_week_day_mask;
        break;
      }
      
      // optional int32 week_day_mask = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week_day_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &week_day_mask_)));
          set_has_week_day_mask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_inuse;
        break;
      }
      
      // optional int32 inuse = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inuse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inuse_)));
          set_has_inuse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CltIPAndPortFilterPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // optional double last_time = 3;
  if (has_last_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->last_time(), output);
  }
  
  // optional .isafetec.FILTER_TYPE filter_type = 4;
  if (has_filter_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->filter_type(), output);
  }
  
  // optional .isafetec.FILTERLIST_TYPE filterlist_type = 5;
  if (has_filterlist_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->filterlist_type(), output);
  }
  
  // repeated .isafetec.CltIPAndPortFilterPolicy.FilterNode filterlist = 6;
  for (int i = 0; i < this->filterlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->filterlist(i), output);
  }
  
  // optional .isafetec.TimeSpanList timelist = 7;
  if (has_timelist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->timelist(), output);
  }
  
  // optional .isafetec.FILTER_MODE filter_mode = 8;
  if (has_filter_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->filter_mode(), output);
  }
  
  // optional uint32 directtype = 9;
  if (has_directtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->directtype(), output);
  }
  
  // optional uint32 protocoltype = 10;
  if (has_protocoltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->protocoltype(), output);
  }
  
  // optional double usetimeF = 13;
  if (has_usetimef()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->usetimef(), output);
  }
  
  // optional double usetimeE = 14;
  if (has_usetimee()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->usetimee(), output);
  }
  
  // optional string hints = 16;
  if (has_hints()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hints().data(), this->hints().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->hints(), output);
  }
  
  // optional int32 index = 19;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->index(), output);
  }
  
  // optional int32 week_day_mask = 20;
  if (has_week_day_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->week_day_mask(), output);
  }
  
  // optional int32 inuse = 21;
  if (has_inuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->inuse(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CltIPAndPortFilterPolicy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // optional double last_time = 3;
  if (has_last_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->last_time(), target);
  }
  
  // optional .isafetec.FILTER_TYPE filter_type = 4;
  if (has_filter_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->filter_type(), target);
  }
  
  // optional .isafetec.FILTERLIST_TYPE filterlist_type = 5;
  if (has_filterlist_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->filterlist_type(), target);
  }
  
  // repeated .isafetec.CltIPAndPortFilterPolicy.FilterNode filterlist = 6;
  for (int i = 0; i < this->filterlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->filterlist(i), target);
  }
  
  // optional .isafetec.TimeSpanList timelist = 7;
  if (has_timelist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->timelist(), target);
  }
  
  // optional .isafetec.FILTER_MODE filter_mode = 8;
  if (has_filter_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->filter_mode(), target);
  }
  
  // optional uint32 directtype = 9;
  if (has_directtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->directtype(), target);
  }
  
  // optional uint32 protocoltype = 10;
  if (has_protocoltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->protocoltype(), target);
  }
  
  // optional double usetimeF = 13;
  if (has_usetimef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->usetimef(), target);
  }
  
  // optional double usetimeE = 14;
  if (has_usetimee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->usetimee(), target);
  }
  
  // optional string hints = 16;
  if (has_hints()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hints().data(), this->hints().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->hints(), target);
  }
  
  // optional int32 index = 19;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->index(), target);
  }
  
  // optional int32 week_day_mask = 20;
  if (has_week_day_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->week_day_mask(), target);
  }
  
  // optional int32 inuse = 21;
  if (has_inuse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->inuse(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CltIPAndPortFilterPolicy::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional double last_time = 3;
    if (has_last_time()) {
      total_size += 1 + 8;
    }
    
    // optional int32 inuse = 21;
    if (has_inuse()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inuse());
    }
    
    // optional .isafetec.FILTER_TYPE filter_type = 4;
    if (has_filter_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filter_type());
    }
    
    // optional .isafetec.FILTERLIST_TYPE filterlist_type = 5;
    if (has_filterlist_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filterlist_type());
    }
    
    // optional .isafetec.TimeSpanList timelist = 7;
    if (has_timelist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timelist());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .isafetec.FILTER_MODE filter_mode = 8;
    if (has_filter_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filter_mode());
    }
    
    // optional uint32 directtype = 9;
    if (has_directtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->directtype());
    }
    
    // optional uint32 protocoltype = 10;
    if (has_protocoltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->protocoltype());
    }
    
    // optional double usetimeF = 13;
    if (has_usetimef()) {
      total_size += 1 + 8;
    }
    
    // optional double usetimeE = 14;
    if (has_usetimee()) {
      total_size += 1 + 8;
    }
    
    // optional string hints = 16;
    if (has_hints()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hints());
    }
    
    // optional int32 index = 19;
    if (has_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int32 week_day_mask = 20;
    if (has_week_day_mask()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->week_day_mask());
    }
    
  }
  // repeated .isafetec.CltIPAndPortFilterPolicy.FilterNode filterlist = 6;
  total_size += 1 * this->filterlist_size();
  for (int i = 0; i < this->filterlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->filterlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CltIPAndPortFilterPolicy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CltIPAndPortFilterPolicy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CltIPAndPortFilterPolicy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CltIPAndPortFilterPolicy::MergeFrom(const CltIPAndPortFilterPolicy& from) {
  GOOGLE_CHECK_NE(&from, this);
  filterlist_.MergeFrom(from.filterlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_last_time()) {
      set_last_time(from.last_time());
    }
    if (from.has_inuse()) {
      set_inuse(from.inuse());
    }
    if (from.has_filter_type()) {
      set_filter_type(from.filter_type());
    }
    if (from.has_filterlist_type()) {
      set_filterlist_type(from.filterlist_type());
    }
    if (from.has_timelist()) {
      mutable_timelist()->::isafetec::TimeSpanList::MergeFrom(from.timelist());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_filter_mode()) {
      set_filter_mode(from.filter_mode());
    }
    if (from.has_directtype()) {
      set_directtype(from.directtype());
    }
    if (from.has_protocoltype()) {
      set_protocoltype(from.protocoltype());
    }
    if (from.has_usetimef()) {
      set_usetimef(from.usetimef());
    }
    if (from.has_usetimee()) {
      set_usetimee(from.usetimee());
    }
    if (from.has_hints()) {
      set_hints(from.hints());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_week_day_mask()) {
      set_week_day_mask(from.week_day_mask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CltIPAndPortFilterPolicy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CltIPAndPortFilterPolicy::CopyFrom(const CltIPAndPortFilterPolicy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CltIPAndPortFilterPolicy::IsInitialized() const {
  
  return true;
}

void CltIPAndPortFilterPolicy::Swap(CltIPAndPortFilterPolicy* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(last_time_, other->last_time_);
    std::swap(inuse_, other->inuse_);
    std::swap(filter_type_, other->filter_type_);
    std::swap(filterlist_type_, other->filterlist_type_);
    filterlist_.Swap(&other->filterlist_);
    std::swap(timelist_, other->timelist_);
    std::swap(filter_mode_, other->filter_mode_);
    std::swap(directtype_, other->directtype_);
    std::swap(protocoltype_, other->protocoltype_);
    std::swap(usetimef_, other->usetimef_);
    std::swap(usetimee_, other->usetimee_);
    std::swap(hints_, other->hints_);
    std::swap(index_, other->index_);
    std::swap(week_day_mask_, other->week_day_mask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CltIPAndPortFilterPolicy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CltIPAndPortFilterPolicy_descriptor_;
  metadata.reflection = CltIPAndPortFilterPolicy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CltIPAndPortFilterPolicyList::kListFieldNumber;
#endif  // !_MSC_VER

CltIPAndPortFilterPolicyList::CltIPAndPortFilterPolicyList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CltIPAndPortFilterPolicyList::InitAsDefaultInstance() {
}

CltIPAndPortFilterPolicyList::CltIPAndPortFilterPolicyList(const CltIPAndPortFilterPolicyList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CltIPAndPortFilterPolicyList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CltIPAndPortFilterPolicyList::~CltIPAndPortFilterPolicyList() {
  SharedDtor();
}

void CltIPAndPortFilterPolicyList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CltIPAndPortFilterPolicyList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CltIPAndPortFilterPolicyList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CltIPAndPortFilterPolicyList_descriptor_;
}

const CltIPAndPortFilterPolicyList& CltIPAndPortFilterPolicyList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Intranetclt_2eproto();  return *default_instance_;
}

CltIPAndPortFilterPolicyList* CltIPAndPortFilterPolicyList::default_instance_ = NULL;

CltIPAndPortFilterPolicyList* CltIPAndPortFilterPolicyList::New() const {
  return new CltIPAndPortFilterPolicyList;
}

void CltIPAndPortFilterPolicyList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CltIPAndPortFilterPolicyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .isafetec.CltIPAndPortFilterPolicy list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CltIPAndPortFilterPolicyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .isafetec.CltIPAndPortFilterPolicy list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CltIPAndPortFilterPolicyList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .isafetec.CltIPAndPortFilterPolicy list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CltIPAndPortFilterPolicyList::ByteSize() const {
  int total_size = 0;
  
  // repeated .isafetec.CltIPAndPortFilterPolicy list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CltIPAndPortFilterPolicyList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CltIPAndPortFilterPolicyList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CltIPAndPortFilterPolicyList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CltIPAndPortFilterPolicyList::MergeFrom(const CltIPAndPortFilterPolicyList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CltIPAndPortFilterPolicyList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CltIPAndPortFilterPolicyList::CopyFrom(const CltIPAndPortFilterPolicyList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CltIPAndPortFilterPolicyList::IsInitialized() const {
  
  return true;
}

void CltIPAndPortFilterPolicyList::Swap(CltIPAndPortFilterPolicyList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CltIPAndPortFilterPolicyList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CltIPAndPortFilterPolicyList_descriptor_;
  metadata.reflection = CltIPAndPortFilterPolicyList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CltDeviceControlPolicy_FilterNode::kFilterbyFieldNumber;
const int CltDeviceControlPolicy_FilterNode::kDeviceClassFieldNumber;
const int CltDeviceControlPolicy_FilterNode::kDeviceInterfaceFieldNumber;
const int CltDeviceControlPolicy_FilterNode::kExceptListFieldNumber;
const int CltDeviceControlPolicy_FilterNode::kStateFieldNumber;
#endif  // !_MSC_VER

CltDeviceControlPolicy_FilterNode::CltDeviceControlPolicy_FilterNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CltDeviceControlPolicy_FilterNode::InitAsDefaultInstance() {
}

CltDeviceControlPolicy_FilterNode::CltDeviceControlPolicy_FilterNode(const CltDeviceControlPolicy_FilterNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CltDeviceControlPolicy_FilterNode::SharedCtor() {
  _cached_size_ = 0;
  filterby_ = 0;
  device_class_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_interface_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  except_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CltDeviceControlPolicy_FilterNode::~CltDeviceControlPolicy_FilterNode() {
  SharedDtor();
}

void CltDeviceControlPolicy_FilterNode::SharedDtor() {
  if (device_class_ != &::google::protobuf::internal::kEmptyString) {
    delete device_class_;
  }
  if (device_interface_ != &::google::protobuf::internal::kEmptyString) {
    delete device_interface_;
  }
  if (except_list_ != &::google::protobuf::internal::kEmptyString) {
    delete except_list_;
  }
  if (this != default_instance_) {
  }
}

void CltDeviceControlPolicy_FilterNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CltDeviceControlPolicy_FilterNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CltDeviceControlPolicy_FilterNode_descriptor_;
}

const CltDeviceControlPolicy_FilterNode& CltDeviceControlPolicy_FilterNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Intranetclt_2eproto();  return *default_instance_;
}

CltDeviceControlPolicy_FilterNode* CltDeviceControlPolicy_FilterNode::default_instance_ = NULL;

CltDeviceControlPolicy_FilterNode* CltDeviceControlPolicy_FilterNode::New() const {
  return new CltDeviceControlPolicy_FilterNode;
}

void CltDeviceControlPolicy_FilterNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    filterby_ = 0;
    if (has_device_class()) {
      if (device_class_ != &::google::protobuf::internal::kEmptyString) {
        device_class_->clear();
      }
    }
    if (has_device_interface()) {
      if (device_interface_ != &::google::protobuf::internal::kEmptyString) {
        device_interface_->clear();
      }
    }
    if (has_except_list()) {
      if (except_list_ != &::google::protobuf::internal::kEmptyString) {
        except_list_->clear();
      }
    }
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CltDeviceControlPolicy_FilterNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 filterby = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &filterby_)));
          set_has_filterby();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_device_class;
        break;
      }
      
      // optional string device_class = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_class:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_class()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_class().data(), this->device_class().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_device_interface;
        break;
      }
      
      // optional string device_interface = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_interface:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_interface()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_interface().data(), this->device_interface().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_except_list;
        break;
      }
      
      // optional string except_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_except_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_except_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->except_list().data(), this->except_list().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_state;
        break;
      }
      
      // optional int32 state = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CltDeviceControlPolicy_FilterNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 filterby = 1;
  if (has_filterby()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->filterby(), output);
  }
  
  // optional string device_class = 2;
  if (has_device_class()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_class().data(), this->device_class().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->device_class(), output);
  }
  
  // optional string device_interface = 3;
  if (has_device_interface()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_interface().data(), this->device_interface().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->device_interface(), output);
  }
  
  // optional string except_list = 4;
  if (has_except_list()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->except_list().data(), this->except_list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->except_list(), output);
  }
  
  // optional int32 state = 5;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->state(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CltDeviceControlPolicy_FilterNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 filterby = 1;
  if (has_filterby()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->filterby(), target);
  }
  
  // optional string device_class = 2;
  if (has_device_class()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_class().data(), this->device_class().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->device_class(), target);
  }
  
  // optional string device_interface = 3;
  if (has_device_interface()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_interface().data(), this->device_interface().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->device_interface(), target);
  }
  
  // optional string except_list = 4;
  if (has_except_list()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->except_list().data(), this->except_list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->except_list(), target);
  }
  
  // optional int32 state = 5;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->state(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CltDeviceControlPolicy_FilterNode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 filterby = 1;
    if (has_filterby()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->filterby());
    }
    
    // optional string device_class = 2;
    if (has_device_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_class());
    }
    
    // optional string device_interface = 3;
    if (has_device_interface()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_interface());
    }
    
    // optional string except_list = 4;
    if (has_except_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->except_list());
    }
    
    // optional int32 state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CltDeviceControlPolicy_FilterNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CltDeviceControlPolicy_FilterNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CltDeviceControlPolicy_FilterNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CltDeviceControlPolicy_FilterNode::MergeFrom(const CltDeviceControlPolicy_FilterNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filterby()) {
      set_filterby(from.filterby());
    }
    if (from.has_device_class()) {
      set_device_class(from.device_class());
    }
    if (from.has_device_interface()) {
      set_device_interface(from.device_interface());
    }
    if (from.has_except_list()) {
      set_except_list(from.except_list());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CltDeviceControlPolicy_FilterNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CltDeviceControlPolicy_FilterNode::CopyFrom(const CltDeviceControlPolicy_FilterNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CltDeviceControlPolicy_FilterNode::IsInitialized() const {
  
  return true;
}

void CltDeviceControlPolicy_FilterNode::Swap(CltDeviceControlPolicy_FilterNode* other) {
  if (other != this) {
    std::swap(filterby_, other->filterby_);
    std::swap(device_class_, other->device_class_);
    std::swap(device_interface_, other->device_interface_);
    std::swap(except_list_, other->except_list_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CltDeviceControlPolicy_FilterNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CltDeviceControlPolicy_FilterNode_descriptor_;
  metadata.reflection = CltDeviceControlPolicy_FilterNode_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CltDeviceControlPolicy::kIdFieldNumber;
const int CltDeviceControlPolicy::kTypeFieldNumber;
const int CltDeviceControlPolicy::kLastTimeFieldNumber;
const int CltDeviceControlPolicy::kInuseFieldNumber;
const int CltDeviceControlPolicy::kFilterTypeFieldNumber;
const int CltDeviceControlPolicy::kFilterlistFieldNumber;
const int CltDeviceControlPolicy::kTimelistFieldNumber;
const int CltDeviceControlPolicy::kFilterModeFieldNumber;
const int CltDeviceControlPolicy::kUsetimeFFieldNumber;
const int CltDeviceControlPolicy::kUsetimeEFieldNumber;
const int CltDeviceControlPolicy::kHintsFieldNumber;
const int CltDeviceControlPolicy::kIndexFieldNumber;
const int CltDeviceControlPolicy::kWeekDayMaskFieldNumber;
#endif  // !_MSC_VER

CltDeviceControlPolicy::CltDeviceControlPolicy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CltDeviceControlPolicy::InitAsDefaultInstance() {
  timelist_ = const_cast< ::isafetec::TimeSpanList*>(&::isafetec::TimeSpanList::default_instance());
}

CltDeviceControlPolicy::CltDeviceControlPolicy(const CltDeviceControlPolicy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CltDeviceControlPolicy::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  last_time_ = 0;
  inuse_ = 0;
  filter_type_ = 0;
  timelist_ = NULL;
  filter_mode_ = 0;
  usetimef_ = 0;
  usetimee_ = 0;
  hints_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  index_ = 0;
  week_day_mask_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CltDeviceControlPolicy::~CltDeviceControlPolicy() {
  SharedDtor();
}

void CltDeviceControlPolicy::SharedDtor() {
  if (hints_ != &::google::protobuf::internal::kEmptyString) {
    delete hints_;
  }
  if (this != default_instance_) {
    delete timelist_;
  }
}

void CltDeviceControlPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CltDeviceControlPolicy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CltDeviceControlPolicy_descriptor_;
}

const CltDeviceControlPolicy& CltDeviceControlPolicy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Intranetclt_2eproto();  return *default_instance_;
}

CltDeviceControlPolicy* CltDeviceControlPolicy::default_instance_ = NULL;

CltDeviceControlPolicy* CltDeviceControlPolicy::New() const {
  return new CltDeviceControlPolicy;
}

void CltDeviceControlPolicy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    last_time_ = 0;
    inuse_ = 0;
    filter_type_ = 0;
    if (has_timelist()) {
      if (timelist_ != NULL) timelist_->::isafetec::TimeSpanList::Clear();
    }
    filter_mode_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    usetimef_ = 0;
    usetimee_ = 0;
    if (has_hints()) {
      if (hints_ != &::google::protobuf::internal::kEmptyString) {
        hints_->clear();
      }
    }
    index_ = 0;
    week_day_mask_ = 0;
  }
  filterlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CltDeviceControlPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_last_time;
        break;
      }
      
      // optional double last_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_last_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_time_)));
          set_has_last_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_filter_type;
        break;
      }
      
      // optional .isafetec.FILTER_TYPE filter_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::FILTER_TYPE_IsValid(value)) {
            set_filter_type(static_cast< isafetec::FILTER_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_filterlist;
        break;
      }
      
      // repeated .isafetec.CltDeviceControlPolicy.FilterNode filterlist = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filterlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_filterlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_filterlist;
        if (input->ExpectTag(50)) goto parse_timelist;
        break;
      }
      
      // optional .isafetec.TimeSpanList timelist = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_filter_mode;
        break;
      }
      
      // optional .isafetec.FILTER_MODE filter_mode = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::FILTER_MODE_IsValid(value)) {
            set_filter_mode(static_cast< isafetec::FILTER_MODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_usetimeF;
        break;
      }
      
      // optional double usetimeF = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_usetimeF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &usetimef_)));
          set_has_usetimef();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_usetimeE;
        break;
      }
      
      // optional double usetimeE = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_usetimeE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &usetimee_)));
          set_has_usetimee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_inuse;
        break;
      }
      
      // optional int32 inuse = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inuse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inuse_)));
          set_has_inuse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_hints;
        break;
      }
      
      // optional string hints = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hints()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hints().data(), this->hints().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_index;
        break;
      }
      
      // optional int32 index = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_week_day_mask;
        break;
      }
      
      // optional int32 week_day_mask = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week_day_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &week_day_mask_)));
          set_has_week_day_mask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CltDeviceControlPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // optional double last_time = 3;
  if (has_last_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->last_time(), output);
  }
  
  // optional .isafetec.FILTER_TYPE filter_type = 4;
  if (has_filter_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->filter_type(), output);
  }
  
  // repeated .isafetec.CltDeviceControlPolicy.FilterNode filterlist = 5;
  for (int i = 0; i < this->filterlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->filterlist(i), output);
  }
  
  // optional .isafetec.TimeSpanList timelist = 6;
  if (has_timelist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->timelist(), output);
  }
  
  // optional .isafetec.FILTER_MODE filter_mode = 7;
  if (has_filter_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->filter_mode(), output);
  }
  
  // optional double usetimeF = 12;
  if (has_usetimef()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->usetimef(), output);
  }
  
  // optional double usetimeE = 13;
  if (has_usetimee()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->usetimee(), output);
  }
  
  // optional int32 inuse = 14;
  if (has_inuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->inuse(), output);
  }
  
  // optional string hints = 15;
  if (has_hints()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hints().data(), this->hints().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->hints(), output);
  }
  
  // optional int32 index = 18;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->index(), output);
  }
  
  // optional int32 week_day_mask = 19;
  if (has_week_day_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->week_day_mask(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CltDeviceControlPolicy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // optional double last_time = 3;
  if (has_last_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->last_time(), target);
  }
  
  // optional .isafetec.FILTER_TYPE filter_type = 4;
  if (has_filter_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->filter_type(), target);
  }
  
  // repeated .isafetec.CltDeviceControlPolicy.FilterNode filterlist = 5;
  for (int i = 0; i < this->filterlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->filterlist(i), target);
  }
  
  // optional .isafetec.TimeSpanList timelist = 6;
  if (has_timelist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->timelist(), target);
  }
  
  // optional .isafetec.FILTER_MODE filter_mode = 7;
  if (has_filter_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->filter_mode(), target);
  }
  
  // optional double usetimeF = 12;
  if (has_usetimef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->usetimef(), target);
  }
  
  // optional double usetimeE = 13;
  if (has_usetimee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->usetimee(), target);
  }
  
  // optional int32 inuse = 14;
  if (has_inuse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->inuse(), target);
  }
  
  // optional string hints = 15;
  if (has_hints()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hints().data(), this->hints().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->hints(), target);
  }
  
  // optional int32 index = 18;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->index(), target);
  }
  
  // optional int32 week_day_mask = 19;
  if (has_week_day_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->week_day_mask(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CltDeviceControlPolicy::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional double last_time = 3;
    if (has_last_time()) {
      total_size += 1 + 8;
    }
    
    // optional int32 inuse = 14;
    if (has_inuse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inuse());
    }
    
    // optional .isafetec.FILTER_TYPE filter_type = 4;
    if (has_filter_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filter_type());
    }
    
    // optional .isafetec.TimeSpanList timelist = 6;
    if (has_timelist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timelist());
    }
    
    // optional .isafetec.FILTER_MODE filter_mode = 7;
    if (has_filter_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filter_mode());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double usetimeF = 12;
    if (has_usetimef()) {
      total_size += 1 + 8;
    }
    
    // optional double usetimeE = 13;
    if (has_usetimee()) {
      total_size += 1 + 8;
    }
    
    // optional string hints = 15;
    if (has_hints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hints());
    }
    
    // optional int32 index = 18;
    if (has_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int32 week_day_mask = 19;
    if (has_week_day_mask()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->week_day_mask());
    }
    
  }
  // repeated .isafetec.CltDeviceControlPolicy.FilterNode filterlist = 5;
  total_size += 1 * this->filterlist_size();
  for (int i = 0; i < this->filterlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->filterlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CltDeviceControlPolicy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CltDeviceControlPolicy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CltDeviceControlPolicy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CltDeviceControlPolicy::MergeFrom(const CltDeviceControlPolicy& from) {
  GOOGLE_CHECK_NE(&from, this);
  filterlist_.MergeFrom(from.filterlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_last_time()) {
      set_last_time(from.last_time());
    }
    if (from.has_inuse()) {
      set_inuse(from.inuse());
    }
    if (from.has_filter_type()) {
      set_filter_type(from.filter_type());
    }
    if (from.has_timelist()) {
      mutable_timelist()->::isafetec::TimeSpanList::MergeFrom(from.timelist());
    }
    if (from.has_filter_mode()) {
      set_filter_mode(from.filter_mode());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_usetimef()) {
      set_usetimef(from.usetimef());
    }
    if (from.has_usetimee()) {
      set_usetimee(from.usetimee());
    }
    if (from.has_hints()) {
      set_hints(from.hints());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_week_day_mask()) {
      set_week_day_mask(from.week_day_mask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CltDeviceControlPolicy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CltDeviceControlPolicy::CopyFrom(const CltDeviceControlPolicy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CltDeviceControlPolicy::IsInitialized() const {
  
  return true;
}

void CltDeviceControlPolicy::Swap(CltDeviceControlPolicy* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(last_time_, other->last_time_);
    std::swap(inuse_, other->inuse_);
    std::swap(filter_type_, other->filter_type_);
    filterlist_.Swap(&other->filterlist_);
    std::swap(timelist_, other->timelist_);
    std::swap(filter_mode_, other->filter_mode_);
    std::swap(usetimef_, other->usetimef_);
    std::swap(usetimee_, other->usetimee_);
    std::swap(hints_, other->hints_);
    std::swap(index_, other->index_);
    std::swap(week_day_mask_, other->week_day_mask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CltDeviceControlPolicy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CltDeviceControlPolicy_descriptor_;
  metadata.reflection = CltDeviceControlPolicy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CltDeviceControlPolicyList::kListFieldNumber;
#endif  // !_MSC_VER

CltDeviceControlPolicyList::CltDeviceControlPolicyList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CltDeviceControlPolicyList::InitAsDefaultInstance() {
}

CltDeviceControlPolicyList::CltDeviceControlPolicyList(const CltDeviceControlPolicyList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CltDeviceControlPolicyList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CltDeviceControlPolicyList::~CltDeviceControlPolicyList() {
  SharedDtor();
}

void CltDeviceControlPolicyList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CltDeviceControlPolicyList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CltDeviceControlPolicyList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CltDeviceControlPolicyList_descriptor_;
}

const CltDeviceControlPolicyList& CltDeviceControlPolicyList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Intranetclt_2eproto();  return *default_instance_;
}

CltDeviceControlPolicyList* CltDeviceControlPolicyList::default_instance_ = NULL;

CltDeviceControlPolicyList* CltDeviceControlPolicyList::New() const {
  return new CltDeviceControlPolicyList;
}

void CltDeviceControlPolicyList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CltDeviceControlPolicyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .isafetec.CltDeviceControlPolicy list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CltDeviceControlPolicyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .isafetec.CltDeviceControlPolicy list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CltDeviceControlPolicyList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .isafetec.CltDeviceControlPolicy list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CltDeviceControlPolicyList::ByteSize() const {
  int total_size = 0;
  
  // repeated .isafetec.CltDeviceControlPolicy list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CltDeviceControlPolicyList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CltDeviceControlPolicyList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CltDeviceControlPolicyList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CltDeviceControlPolicyList::MergeFrom(const CltDeviceControlPolicyList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CltDeviceControlPolicyList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CltDeviceControlPolicyList::CopyFrom(const CltDeviceControlPolicyList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CltDeviceControlPolicyList::IsInitialized() const {
  
  return true;
}

void CltDeviceControlPolicyList::Swap(CltDeviceControlPolicyList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CltDeviceControlPolicyList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CltDeviceControlPolicyList_descriptor_;
  metadata.reflection = CltDeviceControlPolicyList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CltPrintControlPolicy_FilterNode::kPrinterFieldNumber;
const int CltPrintControlPolicy_FilterNode::kTypeFieldNumber;
const int CltPrintControlPolicy_FilterNode::kKeyWordFieldNumber;
#endif  // !_MSC_VER

CltPrintControlPolicy_FilterNode::CltPrintControlPolicy_FilterNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CltPrintControlPolicy_FilterNode::InitAsDefaultInstance() {
}

CltPrintControlPolicy_FilterNode::CltPrintControlPolicy_FilterNode(const CltPrintControlPolicy_FilterNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CltPrintControlPolicy_FilterNode::SharedCtor() {
  _cached_size_ = 0;
  printer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  key_word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CltPrintControlPolicy_FilterNode::~CltPrintControlPolicy_FilterNode() {
  SharedDtor();
}

void CltPrintControlPolicy_FilterNode::SharedDtor() {
  if (printer_ != &::google::protobuf::internal::kEmptyString) {
    delete printer_;
  }
  if (key_word_ != &::google::protobuf::internal::kEmptyString) {
    delete key_word_;
  }
  if (this != default_instance_) {
  }
}

void CltPrintControlPolicy_FilterNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CltPrintControlPolicy_FilterNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CltPrintControlPolicy_FilterNode_descriptor_;
}

const CltPrintControlPolicy_FilterNode& CltPrintControlPolicy_FilterNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Intranetclt_2eproto();  return *default_instance_;
}

CltPrintControlPolicy_FilterNode* CltPrintControlPolicy_FilterNode::default_instance_ = NULL;

CltPrintControlPolicy_FilterNode* CltPrintControlPolicy_FilterNode::New() const {
  return new CltPrintControlPolicy_FilterNode;
}

void CltPrintControlPolicy_FilterNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_printer()) {
      if (printer_ != &::google::protobuf::internal::kEmptyString) {
        printer_->clear();
      }
    }
    type_ = 0;
    if (has_key_word()) {
      if (key_word_ != &::google::protobuf::internal::kEmptyString) {
        key_word_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CltPrintControlPolicy_FilterNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string printer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_printer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->printer().data(), this->printer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional .isafetec.PRINT_FLT_TYPE type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::PRINT_FLT_TYPE_IsValid(value)) {
            set_type(static_cast< isafetec::PRINT_FLT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_key_word;
        break;
      }
      
      // optional string key_word = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key_word:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key_word()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key_word().data(), this->key_word().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CltPrintControlPolicy_FilterNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string printer = 1;
  if (has_printer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->printer().data(), this->printer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->printer(), output);
  }
  
  // optional .isafetec.PRINT_FLT_TYPE type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  // optional string key_word = 3;
  if (has_key_word()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key_word().data(), this->key_word().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->key_word(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CltPrintControlPolicy_FilterNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string printer = 1;
  if (has_printer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->printer().data(), this->printer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->printer(), target);
  }
  
  // optional .isafetec.PRINT_FLT_TYPE type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  // optional string key_word = 3;
  if (has_key_word()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key_word().data(), this->key_word().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->key_word(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CltPrintControlPolicy_FilterNode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string printer = 1;
    if (has_printer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->printer());
    }
    
    // optional .isafetec.PRINT_FLT_TYPE type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional string key_word = 3;
    if (has_key_word()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key_word());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CltPrintControlPolicy_FilterNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CltPrintControlPolicy_FilterNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CltPrintControlPolicy_FilterNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CltPrintControlPolicy_FilterNode::MergeFrom(const CltPrintControlPolicy_FilterNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_printer()) {
      set_printer(from.printer());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_key_word()) {
      set_key_word(from.key_word());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CltPrintControlPolicy_FilterNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CltPrintControlPolicy_FilterNode::CopyFrom(const CltPrintControlPolicy_FilterNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CltPrintControlPolicy_FilterNode::IsInitialized() const {
  
  return true;
}

void CltPrintControlPolicy_FilterNode::Swap(CltPrintControlPolicy_FilterNode* other) {
  if (other != this) {
    std::swap(printer_, other->printer_);
    std::swap(type_, other->type_);
    std::swap(key_word_, other->key_word_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CltPrintControlPolicy_FilterNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CltPrintControlPolicy_FilterNode_descriptor_;
  metadata.reflection = CltPrintControlPolicy_FilterNode_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CltPrintControlPolicy::kIdFieldNumber;
const int CltPrintControlPolicy::kTypeFieldNumber;
const int CltPrintControlPolicy::kLastTimeFieldNumber;
const int CltPrintControlPolicy::kInuseFieldNumber;
const int CltPrintControlPolicy::kFilterTypeFieldNumber;
const int CltPrintControlPolicy::kUsetimeFFieldNumber;
const int CltPrintControlPolicy::kUsetimeEFieldNumber;
const int CltPrintControlPolicy::kFilterlistFieldNumber;
const int CltPrintControlPolicy::kTimelistFieldNumber;
const int CltPrintControlPolicy::kFilterModeFieldNumber;
const int CltPrintControlPolicy::kHintsFieldNumber;
const int CltPrintControlPolicy::kIndexFieldNumber;
const int CltPrintControlPolicy::kWeekDayMaskFieldNumber;
#endif  // !_MSC_VER

CltPrintControlPolicy::CltPrintControlPolicy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CltPrintControlPolicy::InitAsDefaultInstance() {
  timelist_ = const_cast< ::isafetec::TimeSpanList*>(&::isafetec::TimeSpanList::default_instance());
}

CltPrintControlPolicy::CltPrintControlPolicy(const CltPrintControlPolicy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CltPrintControlPolicy::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  last_time_ = 0;
  inuse_ = 0;
  filter_type_ = 0;
  usetimef_ = 0;
  usetimee_ = 0;
  timelist_ = NULL;
  filter_mode_ = 0;
  hints_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  index_ = 0;
  week_day_mask_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CltPrintControlPolicy::~CltPrintControlPolicy() {
  SharedDtor();
}

void CltPrintControlPolicy::SharedDtor() {
  if (hints_ != &::google::protobuf::internal::kEmptyString) {
    delete hints_;
  }
  if (this != default_instance_) {
    delete timelist_;
  }
}

void CltPrintControlPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CltPrintControlPolicy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CltPrintControlPolicy_descriptor_;
}

const CltPrintControlPolicy& CltPrintControlPolicy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Intranetclt_2eproto();  return *default_instance_;
}

CltPrintControlPolicy* CltPrintControlPolicy::default_instance_ = NULL;

CltPrintControlPolicy* CltPrintControlPolicy::New() const {
  return new CltPrintControlPolicy;
}

void CltPrintControlPolicy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    last_time_ = 0;
    inuse_ = 0;
    filter_type_ = 0;
    usetimef_ = 0;
    usetimee_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_timelist()) {
      if (timelist_ != NULL) timelist_->::isafetec::TimeSpanList::Clear();
    }
    filter_mode_ = 0;
    if (has_hints()) {
      if (hints_ != &::google::protobuf::internal::kEmptyString) {
        hints_->clear();
      }
    }
    index_ = 0;
    week_day_mask_ = 0;
  }
  filterlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CltPrintControlPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_last_time;
        break;
      }
      
      // optional double last_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_last_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_time_)));
          set_has_last_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_filter_type;
        break;
      }
      
      // optional .isafetec.FILTER_TYPE filter_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::FILTER_TYPE_IsValid(value)) {
            set_filter_type(static_cast< isafetec::FILTER_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_usetimeF;
        break;
      }
      
      // optional double usetimeF = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_usetimeF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &usetimef_)));
          set_has_usetimef();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_usetimeE;
        break;
      }
      
      // optional double usetimeE = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_usetimeE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &usetimee_)));
          set_has_usetimee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_filterlist;
        break;
      }
      
      // repeated .isafetec.CltPrintControlPolicy.FilterNode filterlist = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filterlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_filterlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_filterlist;
        if (input->ExpectTag(66)) goto parse_timelist;
        break;
      }
      
      // optional .isafetec.TimeSpanList timelist = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_filter_mode;
        break;
      }
      
      // optional .isafetec.FILTER_MODE filter_mode = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::FILTER_MODE_IsValid(value)) {
            set_filter_mode(static_cast< isafetec::FILTER_MODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_hints;
        break;
      }
      
      // optional string hints = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hints()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hints().data(), this->hints().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_index;
        break;
      }
      
      // optional int32 index = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_week_day_mask;
        break;
      }
      
      // optional int32 week_day_mask = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week_day_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &week_day_mask_)));
          set_has_week_day_mask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_inuse;
        break;
      }
      
      // optional int32 inuse = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inuse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inuse_)));
          set_has_inuse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CltPrintControlPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // optional double last_time = 3;
  if (has_last_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->last_time(), output);
  }
  
  // optional .isafetec.FILTER_TYPE filter_type = 4;
  if (has_filter_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->filter_type(), output);
  }
  
  // optional double usetimeF = 5;
  if (has_usetimef()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->usetimef(), output);
  }
  
  // optional double usetimeE = 6;
  if (has_usetimee()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->usetimee(), output);
  }
  
  // repeated .isafetec.CltPrintControlPolicy.FilterNode filterlist = 7;
  for (int i = 0; i < this->filterlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->filterlist(i), output);
  }
  
  // optional .isafetec.TimeSpanList timelist = 8;
  if (has_timelist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->timelist(), output);
  }
  
  // optional .isafetec.FILTER_MODE filter_mode = 9;
  if (has_filter_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->filter_mode(), output);
  }
  
  // optional string hints = 10;
  if (has_hints()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hints().data(), this->hints().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->hints(), output);
  }
  
  // optional int32 index = 11;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->index(), output);
  }
  
  // optional int32 week_day_mask = 12;
  if (has_week_day_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->week_day_mask(), output);
  }
  
  // optional int32 inuse = 15;
  if (has_inuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->inuse(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CltPrintControlPolicy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // optional double last_time = 3;
  if (has_last_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->last_time(), target);
  }
  
  // optional .isafetec.FILTER_TYPE filter_type = 4;
  if (has_filter_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->filter_type(), target);
  }
  
  // optional double usetimeF = 5;
  if (has_usetimef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->usetimef(), target);
  }
  
  // optional double usetimeE = 6;
  if (has_usetimee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->usetimee(), target);
  }
  
  // repeated .isafetec.CltPrintControlPolicy.FilterNode filterlist = 7;
  for (int i = 0; i < this->filterlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->filterlist(i), target);
  }
  
  // optional .isafetec.TimeSpanList timelist = 8;
  if (has_timelist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->timelist(), target);
  }
  
  // optional .isafetec.FILTER_MODE filter_mode = 9;
  if (has_filter_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->filter_mode(), target);
  }
  
  // optional string hints = 10;
  if (has_hints()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hints().data(), this->hints().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->hints(), target);
  }
  
  // optional int32 index = 11;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->index(), target);
  }
  
  // optional int32 week_day_mask = 12;
  if (has_week_day_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->week_day_mask(), target);
  }
  
  // optional int32 inuse = 15;
  if (has_inuse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->inuse(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CltPrintControlPolicy::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional double last_time = 3;
    if (has_last_time()) {
      total_size += 1 + 8;
    }
    
    // optional int32 inuse = 15;
    if (has_inuse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inuse());
    }
    
    // optional .isafetec.FILTER_TYPE filter_type = 4;
    if (has_filter_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filter_type());
    }
    
    // optional double usetimeF = 5;
    if (has_usetimef()) {
      total_size += 1 + 8;
    }
    
    // optional double usetimeE = 6;
    if (has_usetimee()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .isafetec.TimeSpanList timelist = 8;
    if (has_timelist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timelist());
    }
    
    // optional .isafetec.FILTER_MODE filter_mode = 9;
    if (has_filter_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filter_mode());
    }
    
    // optional string hints = 10;
    if (has_hints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hints());
    }
    
    // optional int32 index = 11;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int32 week_day_mask = 12;
    if (has_week_day_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->week_day_mask());
    }
    
  }
  // repeated .isafetec.CltPrintControlPolicy.FilterNode filterlist = 7;
  total_size += 1 * this->filterlist_size();
  for (int i = 0; i < this->filterlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->filterlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CltPrintControlPolicy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CltPrintControlPolicy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CltPrintControlPolicy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CltPrintControlPolicy::MergeFrom(const CltPrintControlPolicy& from) {
  GOOGLE_CHECK_NE(&from, this);
  filterlist_.MergeFrom(from.filterlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_last_time()) {
      set_last_time(from.last_time());
    }
    if (from.has_inuse()) {
      set_inuse(from.inuse());
    }
    if (from.has_filter_type()) {
      set_filter_type(from.filter_type());
    }
    if (from.has_usetimef()) {
      set_usetimef(from.usetimef());
    }
    if (from.has_usetimee()) {
      set_usetimee(from.usetimee());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_timelist()) {
      mutable_timelist()->::isafetec::TimeSpanList::MergeFrom(from.timelist());
    }
    if (from.has_filter_mode()) {
      set_filter_mode(from.filter_mode());
    }
    if (from.has_hints()) {
      set_hints(from.hints());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_week_day_mask()) {
      set_week_day_mask(from.week_day_mask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CltPrintControlPolicy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CltPrintControlPolicy::CopyFrom(const CltPrintControlPolicy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CltPrintControlPolicy::IsInitialized() const {
  
  return true;
}

void CltPrintControlPolicy::Swap(CltPrintControlPolicy* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(last_time_, other->last_time_);
    std::swap(inuse_, other->inuse_);
    std::swap(filter_type_, other->filter_type_);
    std::swap(usetimef_, other->usetimef_);
    std::swap(usetimee_, other->usetimee_);
    filterlist_.Swap(&other->filterlist_);
    std::swap(timelist_, other->timelist_);
    std::swap(filter_mode_, other->filter_mode_);
    std::swap(hints_, other->hints_);
    std::swap(index_, other->index_);
    std::swap(week_day_mask_, other->week_day_mask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CltPrintControlPolicy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CltPrintControlPolicy_descriptor_;
  metadata.reflection = CltPrintControlPolicy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CltPrintControlPolicyList::kListFieldNumber;
#endif  // !_MSC_VER

CltPrintControlPolicyList::CltPrintControlPolicyList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CltPrintControlPolicyList::InitAsDefaultInstance() {
}

CltPrintControlPolicyList::CltPrintControlPolicyList(const CltPrintControlPolicyList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CltPrintControlPolicyList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CltPrintControlPolicyList::~CltPrintControlPolicyList() {
  SharedDtor();
}

void CltPrintControlPolicyList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CltPrintControlPolicyList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CltPrintControlPolicyList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CltPrintControlPolicyList_descriptor_;
}

const CltPrintControlPolicyList& CltPrintControlPolicyList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Intranetclt_2eproto();  return *default_instance_;
}

CltPrintControlPolicyList* CltPrintControlPolicyList::default_instance_ = NULL;

CltPrintControlPolicyList* CltPrintControlPolicyList::New() const {
  return new CltPrintControlPolicyList;
}

void CltPrintControlPolicyList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CltPrintControlPolicyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .isafetec.CltPrintControlPolicy list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CltPrintControlPolicyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .isafetec.CltPrintControlPolicy list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CltPrintControlPolicyList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .isafetec.CltPrintControlPolicy list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CltPrintControlPolicyList::ByteSize() const {
  int total_size = 0;
  
  // repeated .isafetec.CltPrintControlPolicy list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CltPrintControlPolicyList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CltPrintControlPolicyList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CltPrintControlPolicyList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CltPrintControlPolicyList::MergeFrom(const CltPrintControlPolicyList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CltPrintControlPolicyList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CltPrintControlPolicyList::CopyFrom(const CltPrintControlPolicyList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CltPrintControlPolicyList::IsInitialized() const {
  
  return true;
}

void CltPrintControlPolicyList::Swap(CltPrintControlPolicyList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CltPrintControlPolicyList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CltPrintControlPolicyList_descriptor_;
  metadata.reflection = CltPrintControlPolicyList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CltFileControlPolicy_FilterNode::kProcessFieldNumber;
const int CltFileControlPolicy_FilterNode::kKeyWordFieldNumber;
const int CltFileControlPolicy_FilterNode::kTypeFieldNumber;
const int CltFileControlPolicy_FilterNode::kModetypeFieldNumber;
#endif  // !_MSC_VER

CltFileControlPolicy_FilterNode::CltFileControlPolicy_FilterNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CltFileControlPolicy_FilterNode::InitAsDefaultInstance() {
}

CltFileControlPolicy_FilterNode::CltFileControlPolicy_FilterNode(const CltFileControlPolicy_FilterNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CltFileControlPolicy_FilterNode::SharedCtor() {
  _cached_size_ = 0;
  process_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  modetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CltFileControlPolicy_FilterNode::~CltFileControlPolicy_FilterNode() {
  SharedDtor();
}

void CltFileControlPolicy_FilterNode::SharedDtor() {
  if (process_ != &::google::protobuf::internal::kEmptyString) {
    delete process_;
  }
  if (key_word_ != &::google::protobuf::internal::kEmptyString) {
    delete key_word_;
  }
  if (this != default_instance_) {
  }
}

void CltFileControlPolicy_FilterNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CltFileControlPolicy_FilterNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CltFileControlPolicy_FilterNode_descriptor_;
}

const CltFileControlPolicy_FilterNode& CltFileControlPolicy_FilterNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Intranetclt_2eproto();  return *default_instance_;
}

CltFileControlPolicy_FilterNode* CltFileControlPolicy_FilterNode::default_instance_ = NULL;

CltFileControlPolicy_FilterNode* CltFileControlPolicy_FilterNode::New() const {
  return new CltFileControlPolicy_FilterNode;
}

void CltFileControlPolicy_FilterNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_process()) {
      if (process_ != &::google::protobuf::internal::kEmptyString) {
        process_->clear();
      }
    }
    if (has_key_word()) {
      if (key_word_ != &::google::protobuf::internal::kEmptyString) {
        key_word_->clear();
      }
    }
    type_ = 0;
    modetype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CltFileControlPolicy_FilterNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string process = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_process()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->process().data(), this->process().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key_word;
        break;
      }
      
      // optional string key_word = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key_word:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key_word()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key_word().data(), this->key_word().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // optional .isafetec.FILE_FLT_TYPE type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::FILE_FLT_TYPE_IsValid(value)) {
            set_type(static_cast< isafetec::FILE_FLT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_modetype;
        break;
      }
      
      // optional .isafetec.MODE_TYPE modetype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modetype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::MODE_TYPE_IsValid(value)) {
            set_modetype(static_cast< isafetec::MODE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CltFileControlPolicy_FilterNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string process = 1;
  if (has_process()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->process().data(), this->process().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->process(), output);
  }
  
  // optional string key_word = 2;
  if (has_key_word()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key_word().data(), this->key_word().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->key_word(), output);
  }
  
  // optional .isafetec.FILE_FLT_TYPE type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }
  
  // optional .isafetec.MODE_TYPE modetype = 4;
  if (has_modetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->modetype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CltFileControlPolicy_FilterNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string process = 1;
  if (has_process()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->process().data(), this->process().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->process(), target);
  }
  
  // optional string key_word = 2;
  if (has_key_word()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key_word().data(), this->key_word().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key_word(), target);
  }
  
  // optional .isafetec.FILE_FLT_TYPE type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }
  
  // optional .isafetec.MODE_TYPE modetype = 4;
  if (has_modetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->modetype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CltFileControlPolicy_FilterNode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string process = 1;
    if (has_process()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->process());
    }
    
    // optional string key_word = 2;
    if (has_key_word()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key_word());
    }
    
    // optional .isafetec.FILE_FLT_TYPE type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .isafetec.MODE_TYPE modetype = 4;
    if (has_modetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->modetype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CltFileControlPolicy_FilterNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CltFileControlPolicy_FilterNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CltFileControlPolicy_FilterNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CltFileControlPolicy_FilterNode::MergeFrom(const CltFileControlPolicy_FilterNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_process()) {
      set_process(from.process());
    }
    if (from.has_key_word()) {
      set_key_word(from.key_word());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_modetype()) {
      set_modetype(from.modetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CltFileControlPolicy_FilterNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CltFileControlPolicy_FilterNode::CopyFrom(const CltFileControlPolicy_FilterNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CltFileControlPolicy_FilterNode::IsInitialized() const {
  
  return true;
}

void CltFileControlPolicy_FilterNode::Swap(CltFileControlPolicy_FilterNode* other) {
  if (other != this) {
    std::swap(process_, other->process_);
    std::swap(key_word_, other->key_word_);
    std::swap(type_, other->type_);
    std::swap(modetype_, other->modetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CltFileControlPolicy_FilterNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CltFileControlPolicy_FilterNode_descriptor_;
  metadata.reflection = CltFileControlPolicy_FilterNode_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CltFileControlPolicy::kIdFieldNumber;
const int CltFileControlPolicy::kTypeFieldNumber;
const int CltFileControlPolicy::kLastTimeFieldNumber;
const int CltFileControlPolicy::kInuseFieldNumber;
const int CltFileControlPolicy::kFilterTypeFieldNumber;
const int CltFileControlPolicy::kFilterlistFieldNumber;
const int CltFileControlPolicy::kTimelistFieldNumber;
const int CltFileControlPolicy::kFilterModeFieldNumber;
const int CltFileControlPolicy::kUsetimeFFieldNumber;
const int CltFileControlPolicy::kUsetimeEFieldNumber;
const int CltFileControlPolicy::kHintsFieldNumber;
const int CltFileControlPolicy::kIsinheritFieldNumber;
const int CltFileControlPolicy::kAllowedinheritFieldNumber;
const int CltFileControlPolicy::kIndexFieldNumber;
const int CltFileControlPolicy::kWeekDayMaskFieldNumber;
#endif  // !_MSC_VER

CltFileControlPolicy::CltFileControlPolicy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CltFileControlPolicy::InitAsDefaultInstance() {
  timelist_ = const_cast< ::isafetec::TimeSpanList*>(&::isafetec::TimeSpanList::default_instance());
}

CltFileControlPolicy::CltFileControlPolicy(const CltFileControlPolicy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CltFileControlPolicy::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  last_time_ = 0;
  inuse_ = 0;
  filter_type_ = 0;
  timelist_ = NULL;
  filter_mode_ = 0;
  usetimef_ = 0;
  usetimee_ = 0;
  hints_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isinherit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  allowedinherit_ = 0;
  index_ = 0;
  week_day_mask_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CltFileControlPolicy::~CltFileControlPolicy() {
  SharedDtor();
}

void CltFileControlPolicy::SharedDtor() {
  if (hints_ != &::google::protobuf::internal::kEmptyString) {
    delete hints_;
  }
  if (isinherit_ != &::google::protobuf::internal::kEmptyString) {
    delete isinherit_;
  }
  if (this != default_instance_) {
    delete timelist_;
  }
}

void CltFileControlPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CltFileControlPolicy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CltFileControlPolicy_descriptor_;
}

const CltFileControlPolicy& CltFileControlPolicy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Intranetclt_2eproto();  return *default_instance_;
}

CltFileControlPolicy* CltFileControlPolicy::default_instance_ = NULL;

CltFileControlPolicy* CltFileControlPolicy::New() const {
  return new CltFileControlPolicy;
}

void CltFileControlPolicy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    last_time_ = 0;
    inuse_ = 0;
    filter_type_ = 0;
    if (has_timelist()) {
      if (timelist_ != NULL) timelist_->::isafetec::TimeSpanList::Clear();
    }
    filter_mode_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    usetimef_ = 0;
    usetimee_ = 0;
    if (has_hints()) {
      if (hints_ != &::google::protobuf::internal::kEmptyString) {
        hints_->clear();
      }
    }
    if (has_isinherit()) {
      if (isinherit_ != &::google::protobuf::internal::kEmptyString) {
        isinherit_->clear();
      }
    }
    allowedinherit_ = 0;
    index_ = 0;
    week_day_mask_ = 0;
  }
  filterlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CltFileControlPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_last_time;
        break;
      }
      
      // optional double last_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_last_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_time_)));
          set_has_last_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_filter_type;
        break;
      }
      
      // optional .isafetec.FILTER_TYPE filter_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::FILTER_TYPE_IsValid(value)) {
            set_filter_type(static_cast< isafetec::FILTER_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_filterlist;
        break;
      }
      
      // repeated .isafetec.CltFileControlPolicy.FilterNode filterlist = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filterlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_filterlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_filterlist;
        if (input->ExpectTag(50)) goto parse_timelist;
        break;
      }
      
      // optional .isafetec.TimeSpanList timelist = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_filter_mode;
        break;
      }
      
      // optional .isafetec.FILTER_MODE filter_mode = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::FILTER_MODE_IsValid(value)) {
            set_filter_mode(static_cast< isafetec::FILTER_MODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_usetimeF;
        break;
      }
      
      // optional double usetimeF = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_usetimeF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &usetimef_)));
          set_has_usetimef();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_usetimeE;
        break;
      }
      
      // optional double usetimeE = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_usetimeE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &usetimee_)));
          set_has_usetimee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_hints;
        break;
      }
      
      // optional string hints = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hints()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hints().data(), this->hints().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_isinherit;
        break;
      }
      
      // optional string isinherit = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_isinherit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_isinherit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->isinherit().data(), this->isinherit().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_allowedinherit;
        break;
      }
      
      // optional int32 allowedinherit = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allowedinherit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allowedinherit_)));
          set_has_allowedinherit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_index;
        break;
      }
      
      // optional int32 index = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_week_day_mask;
        break;
      }
      
      // optional int32 week_day_mask = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week_day_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &week_day_mask_)));
          set_has_week_day_mask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_inuse;
        break;
      }
      
      // optional int32 inuse = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inuse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inuse_)));
          set_has_inuse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CltFileControlPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // optional double last_time = 3;
  if (has_last_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->last_time(), output);
  }
  
  // optional .isafetec.FILTER_TYPE filter_type = 4;
  if (has_filter_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->filter_type(), output);
  }
  
  // repeated .isafetec.CltFileControlPolicy.FilterNode filterlist = 5;
  for (int i = 0; i < this->filterlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->filterlist(i), output);
  }
  
  // optional .isafetec.TimeSpanList timelist = 6;
  if (has_timelist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->timelist(), output);
  }
  
  // optional .isafetec.FILTER_MODE filter_mode = 7;
  if (has_filter_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->filter_mode(), output);
  }
  
  // optional double usetimeF = 9;
  if (has_usetimef()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->usetimef(), output);
  }
  
  // optional double usetimeE = 10;
  if (has_usetimee()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->usetimee(), output);
  }
  
  // optional string hints = 11;
  if (has_hints()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hints().data(), this->hints().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->hints(), output);
  }
  
  // optional string isinherit = 12;
  if (has_isinherit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->isinherit().data(), this->isinherit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->isinherit(), output);
  }
  
  // optional int32 allowedinherit = 13;
  if (has_allowedinherit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->allowedinherit(), output);
  }
  
  // optional int32 index = 14;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->index(), output);
  }
  
  // optional int32 week_day_mask = 15;
  if (has_week_day_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->week_day_mask(), output);
  }
  
  // optional int32 inuse = 16;
  if (has_inuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->inuse(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CltFileControlPolicy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // optional double last_time = 3;
  if (has_last_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->last_time(), target);
  }
  
  // optional .isafetec.FILTER_TYPE filter_type = 4;
  if (has_filter_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->filter_type(), target);
  }
  
  // repeated .isafetec.CltFileControlPolicy.FilterNode filterlist = 5;
  for (int i = 0; i < this->filterlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->filterlist(i), target);
  }
  
  // optional .isafetec.TimeSpanList timelist = 6;
  if (has_timelist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->timelist(), target);
  }
  
  // optional .isafetec.FILTER_MODE filter_mode = 7;
  if (has_filter_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->filter_mode(), target);
  }
  
  // optional double usetimeF = 9;
  if (has_usetimef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->usetimef(), target);
  }
  
  // optional double usetimeE = 10;
  if (has_usetimee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->usetimee(), target);
  }
  
  // optional string hints = 11;
  if (has_hints()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hints().data(), this->hints().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->hints(), target);
  }
  
  // optional string isinherit = 12;
  if (has_isinherit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->isinherit().data(), this->isinherit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->isinherit(), target);
  }
  
  // optional int32 allowedinherit = 13;
  if (has_allowedinherit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->allowedinherit(), target);
  }
  
  // optional int32 index = 14;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->index(), target);
  }
  
  // optional int32 week_day_mask = 15;
  if (has_week_day_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->week_day_mask(), target);
  }
  
  // optional int32 inuse = 16;
  if (has_inuse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->inuse(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CltFileControlPolicy::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional double last_time = 3;
    if (has_last_time()) {
      total_size += 1 + 8;
    }
    
    // optional int32 inuse = 16;
    if (has_inuse()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inuse());
    }
    
    // optional .isafetec.FILTER_TYPE filter_type = 4;
    if (has_filter_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filter_type());
    }
    
    // optional .isafetec.TimeSpanList timelist = 6;
    if (has_timelist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timelist());
    }
    
    // optional .isafetec.FILTER_MODE filter_mode = 7;
    if (has_filter_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filter_mode());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double usetimeF = 9;
    if (has_usetimef()) {
      total_size += 1 + 8;
    }
    
    // optional double usetimeE = 10;
    if (has_usetimee()) {
      total_size += 1 + 8;
    }
    
    // optional string hints = 11;
    if (has_hints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hints());
    }
    
    // optional string isinherit = 12;
    if (has_isinherit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->isinherit());
    }
    
    // optional int32 allowedinherit = 13;
    if (has_allowedinherit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allowedinherit());
    }
    
    // optional int32 index = 14;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int32 week_day_mask = 15;
    if (has_week_day_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->week_day_mask());
    }
    
  }
  // repeated .isafetec.CltFileControlPolicy.FilterNode filterlist = 5;
  total_size += 1 * this->filterlist_size();
  for (int i = 0; i < this->filterlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->filterlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CltFileControlPolicy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CltFileControlPolicy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CltFileControlPolicy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CltFileControlPolicy::MergeFrom(const CltFileControlPolicy& from) {
  GOOGLE_CHECK_NE(&from, this);
  filterlist_.MergeFrom(from.filterlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_last_time()) {
      set_last_time(from.last_time());
    }
    if (from.has_inuse()) {
      set_inuse(from.inuse());
    }
    if (from.has_filter_type()) {
      set_filter_type(from.filter_type());
    }
    if (from.has_timelist()) {
      mutable_timelist()->::isafetec::TimeSpanList::MergeFrom(from.timelist());
    }
    if (from.has_filter_mode()) {
      set_filter_mode(from.filter_mode());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_usetimef()) {
      set_usetimef(from.usetimef());
    }
    if (from.has_usetimee()) {
      set_usetimee(from.usetimee());
    }
    if (from.has_hints()) {
      set_hints(from.hints());
    }
    if (from.has_isinherit()) {
      set_isinherit(from.isinherit());
    }
    if (from.has_allowedinherit()) {
      set_allowedinherit(from.allowedinherit());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_week_day_mask()) {
      set_week_day_mask(from.week_day_mask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CltFileControlPolicy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CltFileControlPolicy::CopyFrom(const CltFileControlPolicy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CltFileControlPolicy::IsInitialized() const {
  
  return true;
}

void CltFileControlPolicy::Swap(CltFileControlPolicy* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(last_time_, other->last_time_);
    std::swap(inuse_, other->inuse_);
    std::swap(filter_type_, other->filter_type_);
    filterlist_.Swap(&other->filterlist_);
    std::swap(timelist_, other->timelist_);
    std::swap(filter_mode_, other->filter_mode_);
    std::swap(usetimef_, other->usetimef_);
    std::swap(usetimee_, other->usetimee_);
    std::swap(hints_, other->hints_);
    std::swap(isinherit_, other->isinherit_);
    std::swap(allowedinherit_, other->allowedinherit_);
    std::swap(index_, other->index_);
    std::swap(week_day_mask_, other->week_day_mask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CltFileControlPolicy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CltFileControlPolicy_descriptor_;
  metadata.reflection = CltFileControlPolicy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CltFileControlPolicyList::kListFieldNumber;
#endif  // !_MSC_VER

CltFileControlPolicyList::CltFileControlPolicyList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CltFileControlPolicyList::InitAsDefaultInstance() {
}

CltFileControlPolicyList::CltFileControlPolicyList(const CltFileControlPolicyList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CltFileControlPolicyList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CltFileControlPolicyList::~CltFileControlPolicyList() {
  SharedDtor();
}

void CltFileControlPolicyList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CltFileControlPolicyList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CltFileControlPolicyList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CltFileControlPolicyList_descriptor_;
}

const CltFileControlPolicyList& CltFileControlPolicyList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Intranetclt_2eproto();  return *default_instance_;
}

CltFileControlPolicyList* CltFileControlPolicyList::default_instance_ = NULL;

CltFileControlPolicyList* CltFileControlPolicyList::New() const {
  return new CltFileControlPolicyList;
}

void CltFileControlPolicyList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CltFileControlPolicyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .isafetec.CltFileControlPolicy list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CltFileControlPolicyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .isafetec.CltFileControlPolicy list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CltFileControlPolicyList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .isafetec.CltFileControlPolicy list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CltFileControlPolicyList::ByteSize() const {
  int total_size = 0;
  
  // repeated .isafetec.CltFileControlPolicy list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CltFileControlPolicyList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CltFileControlPolicyList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CltFileControlPolicyList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CltFileControlPolicyList::MergeFrom(const CltFileControlPolicyList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CltFileControlPolicyList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CltFileControlPolicyList::CopyFrom(const CltFileControlPolicyList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CltFileControlPolicyList::IsInitialized() const {
  
  return true;
}

void CltFileControlPolicyList::Swap(CltFileControlPolicyList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CltFileControlPolicyList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CltFileControlPolicyList_descriptor_;
  metadata.reflection = CltFileControlPolicyList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CltSystemControlPolicy_FilterNode::kStateFieldNumber;
const int CltSystemControlPolicy_FilterNode::kCodeFieldNumber;
#endif  // !_MSC_VER

CltSystemControlPolicy_FilterNode::CltSystemControlPolicy_FilterNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CltSystemControlPolicy_FilterNode::InitAsDefaultInstance() {
}

CltSystemControlPolicy_FilterNode::CltSystemControlPolicy_FilterNode(const CltSystemControlPolicy_FilterNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CltSystemControlPolicy_FilterNode::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CltSystemControlPolicy_FilterNode::~CltSystemControlPolicy_FilterNode() {
  SharedDtor();
}

void CltSystemControlPolicy_FilterNode::SharedDtor() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (this != default_instance_) {
  }
}

void CltSystemControlPolicy_FilterNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CltSystemControlPolicy_FilterNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CltSystemControlPolicy_FilterNode_descriptor_;
}

const CltSystemControlPolicy_FilterNode& CltSystemControlPolicy_FilterNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Intranetclt_2eproto();  return *default_instance_;
}

CltSystemControlPolicy_FilterNode* CltSystemControlPolicy_FilterNode::default_instance_ = NULL;

CltSystemControlPolicy_FilterNode* CltSystemControlPolicy_FilterNode::New() const {
  return new CltSystemControlPolicy_FilterNode;
}

void CltSystemControlPolicy_FilterNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0;
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::kEmptyString) {
        code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CltSystemControlPolicy_FilterNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_code;
        break;
      }
      
      // optional string code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CltSystemControlPolicy_FilterNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }
  
  // optional string code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CltSystemControlPolicy_FilterNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }
  
  // optional string code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CltSystemControlPolicy_FilterNode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }
    
    // optional string code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CltSystemControlPolicy_FilterNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CltSystemControlPolicy_FilterNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CltSystemControlPolicy_FilterNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CltSystemControlPolicy_FilterNode::MergeFrom(const CltSystemControlPolicy_FilterNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CltSystemControlPolicy_FilterNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CltSystemControlPolicy_FilterNode::CopyFrom(const CltSystemControlPolicy_FilterNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CltSystemControlPolicy_FilterNode::IsInitialized() const {
  
  return true;
}

void CltSystemControlPolicy_FilterNode::Swap(CltSystemControlPolicy_FilterNode* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CltSystemControlPolicy_FilterNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CltSystemControlPolicy_FilterNode_descriptor_;
  metadata.reflection = CltSystemControlPolicy_FilterNode_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CltSystemControlPolicy::kIdFieldNumber;
const int CltSystemControlPolicy::kTypeFieldNumber;
const int CltSystemControlPolicy::kLastTimeFieldNumber;
const int CltSystemControlPolicy::kInuseFieldNumber;
const int CltSystemControlPolicy::kFilterTypeFieldNumber;
const int CltSystemControlPolicy::kUsetimeFFieldNumber;
const int CltSystemControlPolicy::kUsetimeEFieldNumber;
const int CltSystemControlPolicy::kFilterlistFieldNumber;
const int CltSystemControlPolicy::kTimelistFieldNumber;
const int CltSystemControlPolicy::kFilterModeFieldNumber;
const int CltSystemControlPolicy::kHintsFieldNumber;
const int CltSystemControlPolicy::kIndexFieldNumber;
const int CltSystemControlPolicy::kWeekDayMaskFieldNumber;
#endif  // !_MSC_VER

CltSystemControlPolicy::CltSystemControlPolicy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CltSystemControlPolicy::InitAsDefaultInstance() {
  timelist_ = const_cast< ::isafetec::TimeSpanList*>(&::isafetec::TimeSpanList::default_instance());
}

CltSystemControlPolicy::CltSystemControlPolicy(const CltSystemControlPolicy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CltSystemControlPolicy::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  last_time_ = 0;
  inuse_ = 0;
  filter_type_ = 0;
  usetimef_ = 0;
  usetimee_ = 0;
  timelist_ = NULL;
  filter_mode_ = 0;
  hints_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  index_ = 0;
  week_day_mask_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CltSystemControlPolicy::~CltSystemControlPolicy() {
  SharedDtor();
}

void CltSystemControlPolicy::SharedDtor() {
  if (hints_ != &::google::protobuf::internal::kEmptyString) {
    delete hints_;
  }
  if (this != default_instance_) {
    delete timelist_;
  }
}

void CltSystemControlPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CltSystemControlPolicy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CltSystemControlPolicy_descriptor_;
}

const CltSystemControlPolicy& CltSystemControlPolicy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Intranetclt_2eproto();  return *default_instance_;
}

CltSystemControlPolicy* CltSystemControlPolicy::default_instance_ = NULL;

CltSystemControlPolicy* CltSystemControlPolicy::New() const {
  return new CltSystemControlPolicy;
}

void CltSystemControlPolicy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    last_time_ = 0;
    inuse_ = 0;
    filter_type_ = 0;
    usetimef_ = 0;
    usetimee_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_timelist()) {
      if (timelist_ != NULL) timelist_->::isafetec::TimeSpanList::Clear();
    }
    filter_mode_ = 0;
    if (has_hints()) {
      if (hints_ != &::google::protobuf::internal::kEmptyString) {
        hints_->clear();
      }
    }
    index_ = 0;
    week_day_mask_ = 0;
  }
  filterlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CltSystemControlPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_filter_type;
        break;
      }
      
      // optional .isafetec.FILTER_TYPE filter_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::FILTER_TYPE_IsValid(value)) {
            set_filter_type(static_cast< isafetec::FILTER_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_usetimeF;
        break;
      }
      
      // optional double usetimeF = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_usetimeF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &usetimef_)));
          set_has_usetimef();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_usetimeE;
        break;
      }
      
      // optional double usetimeE = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_usetimeE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &usetimee_)));
          set_has_usetimee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_filterlist;
        break;
      }
      
      // repeated .isafetec.CltSystemControlPolicy.FilterNode filterlist = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filterlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_filterlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_filterlist;
        if (input->ExpectTag(66)) goto parse_timelist;
        break;
      }
      
      // optional .isafetec.TimeSpanList timelist = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_filter_mode;
        break;
      }
      
      // optional .isafetec.FILTER_MODE filter_mode = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::FILTER_MODE_IsValid(value)) {
            set_filter_mode(static_cast< isafetec::FILTER_MODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_type;
        break;
      }
      
      // optional int32 type = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_last_time;
        break;
      }
      
      // optional double last_time = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_last_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_time_)));
          set_has_last_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_hints;
        break;
      }
      
      // optional string hints = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hints()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hints().data(), this->hints().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_inuse;
        break;
      }
      
      // optional int32 inuse = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inuse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inuse_)));
          set_has_inuse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_index;
        break;
      }
      
      // optional int32 index = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_week_day_mask;
        break;
      }
      
      // optional int32 week_day_mask = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week_day_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &week_day_mask_)));
          set_has_week_day_mask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CltSystemControlPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional .isafetec.FILTER_TYPE filter_type = 4;
  if (has_filter_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->filter_type(), output);
  }
  
  // optional double usetimeF = 5;
  if (has_usetimef()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->usetimef(), output);
  }
  
  // optional double usetimeE = 6;
  if (has_usetimee()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->usetimee(), output);
  }
  
  // repeated .isafetec.CltSystemControlPolicy.FilterNode filterlist = 7;
  for (int i = 0; i < this->filterlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->filterlist(i), output);
  }
  
  // optional .isafetec.TimeSpanList timelist = 8;
  if (has_timelist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->timelist(), output);
  }
  
  // optional .isafetec.FILTER_MODE filter_mode = 10;
  if (has_filter_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->filter_mode(), output);
  }
  
  // optional int32 type = 11;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->type(), output);
  }
  
  // optional double last_time = 12;
  if (has_last_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->last_time(), output);
  }
  
  // optional string hints = 13;
  if (has_hints()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hints().data(), this->hints().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->hints(), output);
  }
  
  // optional int32 inuse = 15;
  if (has_inuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->inuse(), output);
  }
  
  // optional int32 index = 18;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->index(), output);
  }
  
  // optional int32 week_day_mask = 19;
  if (has_week_day_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->week_day_mask(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CltSystemControlPolicy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional .isafetec.FILTER_TYPE filter_type = 4;
  if (has_filter_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->filter_type(), target);
  }
  
  // optional double usetimeF = 5;
  if (has_usetimef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->usetimef(), target);
  }
  
  // optional double usetimeE = 6;
  if (has_usetimee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->usetimee(), target);
  }
  
  // repeated .isafetec.CltSystemControlPolicy.FilterNode filterlist = 7;
  for (int i = 0; i < this->filterlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->filterlist(i), target);
  }
  
  // optional .isafetec.TimeSpanList timelist = 8;
  if (has_timelist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->timelist(), target);
  }
  
  // optional .isafetec.FILTER_MODE filter_mode = 10;
  if (has_filter_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->filter_mode(), target);
  }
  
  // optional int32 type = 11;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->type(), target);
  }
  
  // optional double last_time = 12;
  if (has_last_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->last_time(), target);
  }
  
  // optional string hints = 13;
  if (has_hints()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hints().data(), this->hints().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->hints(), target);
  }
  
  // optional int32 inuse = 15;
  if (has_inuse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->inuse(), target);
  }
  
  // optional int32 index = 18;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->index(), target);
  }
  
  // optional int32 week_day_mask = 19;
  if (has_week_day_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->week_day_mask(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CltSystemControlPolicy::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 type = 11;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional double last_time = 12;
    if (has_last_time()) {
      total_size += 1 + 8;
    }
    
    // optional int32 inuse = 15;
    if (has_inuse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inuse());
    }
    
    // optional .isafetec.FILTER_TYPE filter_type = 4;
    if (has_filter_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filter_type());
    }
    
    // optional double usetimeF = 5;
    if (has_usetimef()) {
      total_size += 1 + 8;
    }
    
    // optional double usetimeE = 6;
    if (has_usetimee()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .isafetec.TimeSpanList timelist = 8;
    if (has_timelist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timelist());
    }
    
    // optional .isafetec.FILTER_MODE filter_mode = 10;
    if (has_filter_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filter_mode());
    }
    
    // optional string hints = 13;
    if (has_hints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hints());
    }
    
    // optional int32 index = 18;
    if (has_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int32 week_day_mask = 19;
    if (has_week_day_mask()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->week_day_mask());
    }
    
  }
  // repeated .isafetec.CltSystemControlPolicy.FilterNode filterlist = 7;
  total_size += 1 * this->filterlist_size();
  for (int i = 0; i < this->filterlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->filterlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CltSystemControlPolicy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CltSystemControlPolicy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CltSystemControlPolicy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CltSystemControlPolicy::MergeFrom(const CltSystemControlPolicy& from) {
  GOOGLE_CHECK_NE(&from, this);
  filterlist_.MergeFrom(from.filterlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_last_time()) {
      set_last_time(from.last_time());
    }
    if (from.has_inuse()) {
      set_inuse(from.inuse());
    }
    if (from.has_filter_type()) {
      set_filter_type(from.filter_type());
    }
    if (from.has_usetimef()) {
      set_usetimef(from.usetimef());
    }
    if (from.has_usetimee()) {
      set_usetimee(from.usetimee());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_timelist()) {
      mutable_timelist()->::isafetec::TimeSpanList::MergeFrom(from.timelist());
    }
    if (from.has_filter_mode()) {
      set_filter_mode(from.filter_mode());
    }
    if (from.has_hints()) {
      set_hints(from.hints());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_week_day_mask()) {
      set_week_day_mask(from.week_day_mask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CltSystemControlPolicy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CltSystemControlPolicy::CopyFrom(const CltSystemControlPolicy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CltSystemControlPolicy::IsInitialized() const {
  
  return true;
}

void CltSystemControlPolicy::Swap(CltSystemControlPolicy* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(last_time_, other->last_time_);
    std::swap(inuse_, other->inuse_);
    std::swap(filter_type_, other->filter_type_);
    std::swap(usetimef_, other->usetimef_);
    std::swap(usetimee_, other->usetimee_);
    filterlist_.Swap(&other->filterlist_);
    std::swap(timelist_, other->timelist_);
    std::swap(filter_mode_, other->filter_mode_);
    std::swap(hints_, other->hints_);
    std::swap(index_, other->index_);
    std::swap(week_day_mask_, other->week_day_mask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CltSystemControlPolicy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CltSystemControlPolicy_descriptor_;
  metadata.reflection = CltSystemControlPolicy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CltSystemControlPolicyList::kListFieldNumber;
#endif  // !_MSC_VER

CltSystemControlPolicyList::CltSystemControlPolicyList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CltSystemControlPolicyList::InitAsDefaultInstance() {
}

CltSystemControlPolicyList::CltSystemControlPolicyList(const CltSystemControlPolicyList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CltSystemControlPolicyList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CltSystemControlPolicyList::~CltSystemControlPolicyList() {
  SharedDtor();
}

void CltSystemControlPolicyList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CltSystemControlPolicyList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CltSystemControlPolicyList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CltSystemControlPolicyList_descriptor_;
}

const CltSystemControlPolicyList& CltSystemControlPolicyList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Intranetclt_2eproto();  return *default_instance_;
}

CltSystemControlPolicyList* CltSystemControlPolicyList::default_instance_ = NULL;

CltSystemControlPolicyList* CltSystemControlPolicyList::New() const {
  return new CltSystemControlPolicyList;
}

void CltSystemControlPolicyList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CltSystemControlPolicyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .isafetec.CltSystemControlPolicy list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CltSystemControlPolicyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .isafetec.CltSystemControlPolicy list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CltSystemControlPolicyList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .isafetec.CltSystemControlPolicy list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CltSystemControlPolicyList::ByteSize() const {
  int total_size = 0;
  
  // repeated .isafetec.CltSystemControlPolicy list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CltSystemControlPolicyList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CltSystemControlPolicyList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CltSystemControlPolicyList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CltSystemControlPolicyList::MergeFrom(const CltSystemControlPolicyList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CltSystemControlPolicyList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CltSystemControlPolicyList::CopyFrom(const CltSystemControlPolicyList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CltSystemControlPolicyList::IsInitialized() const {
  
  return true;
}

void CltSystemControlPolicyList::Swap(CltSystemControlPolicyList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CltSystemControlPolicyList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CltSystemControlPolicyList_descriptor_;
  metadata.reflection = CltSystemControlPolicyList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileParam::kProcnameFieldNumber;
const int FileParam::kTypeFieldNumber;
const int FileParam::kTypeparamFieldNumber;
const int FileParam::kFileoptypeFieldNumber;
#endif  // !_MSC_VER

FileParam::FileParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileParam::InitAsDefaultInstance() {
}

FileParam::FileParam(const FileParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileParam::SharedCtor() {
  _cached_size_ = 0;
  procname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  typeparam_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fileoptype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileParam::~FileParam() {
  SharedDtor();
}

void FileParam::SharedDtor() {
  if (procname_ != &::google::protobuf::internal::kEmptyString) {
    delete procname_;
  }
  if (typeparam_ != &::google::protobuf::internal::kEmptyString) {
    delete typeparam_;
  }
  if (this != default_instance_) {
  }
}

void FileParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileParam_descriptor_;
}

const FileParam& FileParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Intranetclt_2eproto();  return *default_instance_;
}

FileParam* FileParam::default_instance_ = NULL;

FileParam* FileParam::New() const {
  return new FileParam;
}

void FileParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_procname()) {
      if (procname_ != &::google::protobuf::internal::kEmptyString) {
        procname_->clear();
      }
    }
    type_ = 0;
    if (has_typeparam()) {
      if (typeparam_ != &::google::protobuf::internal::kEmptyString) {
        typeparam_->clear();
      }
    }
    fileoptype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string procname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_procname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->procname().data(), this->procname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_typeparam;
        break;
      }
      
      // optional string typeparam = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_typeparam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_typeparam()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->typeparam().data(), this->typeparam().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fileoptype;
        break;
      }
      
      // optional int32 fileoptype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fileoptype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fileoptype_)));
          set_has_fileoptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string procname = 1;
  if (has_procname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->procname().data(), this->procname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->procname(), output);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // optional string typeparam = 3;
  if (has_typeparam()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->typeparam().data(), this->typeparam().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->typeparam(), output);
  }
  
  // optional int32 fileoptype = 4;
  if (has_fileoptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fileoptype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string procname = 1;
  if (has_procname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->procname().data(), this->procname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->procname(), target);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // optional string typeparam = 3;
  if (has_typeparam()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->typeparam().data(), this->typeparam().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->typeparam(), target);
  }
  
  // optional int32 fileoptype = 4;
  if (has_fileoptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fileoptype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string procname = 1;
    if (has_procname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->procname());
    }
    
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional string typeparam = 3;
    if (has_typeparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->typeparam());
    }
    
    // optional int32 fileoptype = 4;
    if (has_fileoptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fileoptype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileParam::MergeFrom(const FileParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_procname()) {
      set_procname(from.procname());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_typeparam()) {
      set_typeparam(from.typeparam());
    }
    if (from.has_fileoptype()) {
      set_fileoptype(from.fileoptype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileParam::CopyFrom(const FileParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileParam::IsInitialized() const {
  
  return true;
}

void FileParam::Swap(FileParam* other) {
  if (other != this) {
    std::swap(procname_, other->procname_);
    std::swap(type_, other->type_);
    std::swap(typeparam_, other->typeparam_);
    std::swap(fileoptype_, other->fileoptype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileParam_descriptor_;
  metadata.reflection = FileParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileParamList::kListFieldNumber;
#endif  // !_MSC_VER

FileParamList::FileParamList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileParamList::InitAsDefaultInstance() {
}

FileParamList::FileParamList(const FileParamList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileParamList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileParamList::~FileParamList() {
  SharedDtor();
}

void FileParamList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FileParamList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileParamList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileParamList_descriptor_;
}

const FileParamList& FileParamList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Intranetclt_2eproto();  return *default_instance_;
}

FileParamList* FileParamList::default_instance_ = NULL;

FileParamList* FileParamList::New() const {
  return new FileParamList;
}

void FileParamList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileParamList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .isafetec.FileParam list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileParamList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .isafetec.FileParam list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileParamList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .isafetec.FileParam list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileParamList::ByteSize() const {
  int total_size = 0;
  
  // repeated .isafetec.FileParam list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileParamList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileParamList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileParamList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileParamList::MergeFrom(const FileParamList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileParamList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileParamList::CopyFrom(const FileParamList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileParamList::IsInitialized() const {
  
  return true;
}

void FileParamList::Swap(FileParamList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileParamList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileParamList_descriptor_;
  metadata.reflection = FileParamList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CltLogPolcicy_ScreenParam::kIntervalFieldNumber;
const int CltLogPolcicy_ScreenParam::kWidthFieldNumber;
const int CltLogPolcicy_ScreenParam::kHeightFieldNumber;
const int CltLogPolcicy_ScreenParam::kSaveTypeFieldNumber;
const int CltLogPolcicy_ScreenParam::kSaveindbFieldNumber;
#endif  // !_MSC_VER

CltLogPolcicy_ScreenParam::CltLogPolcicy_ScreenParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CltLogPolcicy_ScreenParam::InitAsDefaultInstance() {
}

CltLogPolcicy_ScreenParam::CltLogPolcicy_ScreenParam(const CltLogPolcicy_ScreenParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CltLogPolcicy_ScreenParam::SharedCtor() {
  _cached_size_ = 0;
  interval_ = 0;
  width_ = 0;
  height_ = 0;
  save_type_ = 0;
  saveindb_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CltLogPolcicy_ScreenParam::~CltLogPolcicy_ScreenParam() {
  SharedDtor();
}

void CltLogPolcicy_ScreenParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CltLogPolcicy_ScreenParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CltLogPolcicy_ScreenParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CltLogPolcicy_ScreenParam_descriptor_;
}

const CltLogPolcicy_ScreenParam& CltLogPolcicy_ScreenParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Intranetclt_2eproto();  return *default_instance_;
}

CltLogPolcicy_ScreenParam* CltLogPolcicy_ScreenParam::default_instance_ = NULL;

CltLogPolcicy_ScreenParam* CltLogPolcicy_ScreenParam::New() const {
  return new CltLogPolcicy_ScreenParam;
}

void CltLogPolcicy_ScreenParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    interval_ = 0;
    width_ = 0;
    height_ = 0;
    save_type_ = 0;
    saveindb_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CltLogPolcicy_ScreenParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 interval = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &interval_)));
          set_has_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_width;
        break;
      }
      
      // optional int32 width = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }
      
      // optional int32 height = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_save_type;
        break;
      }
      
      // optional int32 save_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_save_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &save_type_)));
          set_has_save_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_saveindb;
        break;
      }
      
      // optional int32 saveindb = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_saveindb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &saveindb_)));
          set_has_saveindb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CltLogPolcicy_ScreenParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 interval = 1;
  if (has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->interval(), output);
  }
  
  // optional int32 width = 2;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }
  
  // optional int32 height = 3;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }
  
  // optional int32 save_type = 4;
  if (has_save_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->save_type(), output);
  }
  
  // optional int32 saveindb = 5;
  if (has_saveindb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->saveindb(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CltLogPolcicy_ScreenParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 interval = 1;
  if (has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->interval(), target);
  }
  
  // optional int32 width = 2;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }
  
  // optional int32 height = 3;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }
  
  // optional int32 save_type = 4;
  if (has_save_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->save_type(), target);
  }
  
  // optional int32 saveindb = 5;
  if (has_saveindb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->saveindb(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CltLogPolcicy_ScreenParam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 interval = 1;
    if (has_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->interval());
    }
    
    // optional int32 width = 2;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }
    
    // optional int32 height = 3;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }
    
    // optional int32 save_type = 4;
    if (has_save_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->save_type());
    }
    
    // optional int32 saveindb = 5;
    if (has_saveindb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->saveindb());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CltLogPolcicy_ScreenParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CltLogPolcicy_ScreenParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CltLogPolcicy_ScreenParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CltLogPolcicy_ScreenParam::MergeFrom(const CltLogPolcicy_ScreenParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_interval()) {
      set_interval(from.interval());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_save_type()) {
      set_save_type(from.save_type());
    }
    if (from.has_saveindb()) {
      set_saveindb(from.saveindb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CltLogPolcicy_ScreenParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CltLogPolcicy_ScreenParam::CopyFrom(const CltLogPolcicy_ScreenParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CltLogPolcicy_ScreenParam::IsInitialized() const {
  
  return true;
}

void CltLogPolcicy_ScreenParam::Swap(CltLogPolcicy_ScreenParam* other) {
  if (other != this) {
    std::swap(interval_, other->interval_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(save_type_, other->save_type_);
    std::swap(saveindb_, other->saveindb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CltLogPolcicy_ScreenParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CltLogPolcicy_ScreenParam_descriptor_;
  metadata.reflection = CltLogPolcicy_ScreenParam_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CltLogPolcicy::kIdFieldNumber;
const int CltLogPolcicy::kTypeFieldNumber;
const int CltLogPolcicy::kLastTimeFieldNumber;
const int CltLogPolcicy::kInuseFieldNumber;
const int CltLogPolcicy::kStateonFieldNumber;
const int CltLogPolcicy::kUploadtypeFieldNumber;
const int CltLogPolcicy::kUploadOntimeFieldNumber;
const int CltLogPolcicy::kCleantypeFieldNumber;
const int CltLogPolcicy::kCleanparamtimeFieldNumber;
const int CltLogPolcicy::kScreenParamFieldNumber;
const int CltLogPolcicy::kMaxIdleIntervalFieldNumber;
const int CltLogPolcicy::kFileparamlistFieldNumber;
const int CltLogPolcicy::kTimelistFieldNumber;
const int CltLogPolcicy::kUsetimeFFieldNumber;
const int CltLogPolcicy::kUsetimeEFieldNumber;
const int CltLogPolcicy::kWeekDayMaskFieldNumber;
#endif  // !_MSC_VER

CltLogPolcicy::CltLogPolcicy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CltLogPolcicy::InitAsDefaultInstance() {
  screen_param_ = const_cast< ::isafetec::CltLogPolcicy_ScreenParam*>(&::isafetec::CltLogPolcicy_ScreenParam::default_instance());
  fileparamlist_ = const_cast< ::isafetec::FileParamList*>(&::isafetec::FileParamList::default_instance());
  timelist_ = const_cast< ::isafetec::TimeSpanList*>(&::isafetec::TimeSpanList::default_instance());
}

CltLogPolcicy::CltLogPolcicy(const CltLogPolcicy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CltLogPolcicy::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  last_time_ = 0;
  inuse_ = 0;
  uploadtype_ = 0;
  upload_ontime_ = 0;
  cleantype_ = 0;
  cleanparamtime_ = 0;
  screen_param_ = NULL;
  max_idle_interval_ = 0;
  fileparamlist_ = NULL;
  timelist_ = NULL;
  usetimef_ = 0;
  usetimee_ = 0;
  week_day_mask_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CltLogPolcicy::~CltLogPolcicy() {
  SharedDtor();
}

void CltLogPolcicy::SharedDtor() {
  if (this != default_instance_) {
    delete screen_param_;
    delete fileparamlist_;
    delete timelist_;
  }
}

void CltLogPolcicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CltLogPolcicy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CltLogPolcicy_descriptor_;
}

const CltLogPolcicy& CltLogPolcicy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Intranetclt_2eproto();  return *default_instance_;
}

CltLogPolcicy* CltLogPolcicy::default_instance_ = NULL;

CltLogPolcicy* CltLogPolcicy::New() const {
  return new CltLogPolcicy;
}

void CltLogPolcicy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    last_time_ = 0;
    inuse_ = 0;
    uploadtype_ = 0;
    upload_ontime_ = 0;
    cleantype_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cleanparamtime_ = 0;
    if (has_screen_param()) {
      if (screen_param_ != NULL) screen_param_->::isafetec::CltLogPolcicy_ScreenParam::Clear();
    }
    max_idle_interval_ = 0;
    if (has_fileparamlist()) {
      if (fileparamlist_ != NULL) fileparamlist_->::isafetec::FileParamList::Clear();
    }
    if (has_timelist()) {
      if (timelist_ != NULL) timelist_->::isafetec::TimeSpanList::Clear();
    }
    usetimef_ = 0;
    usetimee_ = 0;
    week_day_mask_ = 0;
  }
  stateon_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CltLogPolcicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_last_time;
        break;
      }
      
      // optional double last_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_last_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_time_)));
          set_has_last_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_stateon;
        break;
      }
      
      // repeated int32 stateon = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stateon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_stateon())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stateon())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_stateon;
        if (input->ExpectTag(40)) goto parse_uploadtype;
        break;
      }
      
      // optional .isafetec.UPLOADLOG_TYPE uploadtype = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uploadtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::UPLOADLOG_TYPE_IsValid(value)) {
            set_uploadtype(static_cast< isafetec::UPLOADLOG_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_upload_ontime;
        break;
      }
      
      // optional double upload_ontime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_upload_ontime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &upload_ontime_)));
          set_has_upload_ontime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_screen_param;
        break;
      }
      
      // optional .isafetec.CltLogPolcicy.ScreenParam screen_param = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_screen_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_screen_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_max_idle_interval;
        break;
      }
      
      // optional int32 max_idle_interval = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_idle_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_idle_interval_)));
          set_has_max_idle_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_fileparamlist;
        break;
      }
      
      // optional .isafetec.FileParamList fileparamlist = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fileparamlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fileparamlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_inuse;
        break;
      }
      
      // optional int32 inuse = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inuse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inuse_)));
          set_has_inuse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_timelist;
        break;
      }
      
      // optional .isafetec.TimeSpanList timelist = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(209)) goto parse_usetimeF;
        break;
      }
      
      // optional double usetimeF = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_usetimeF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &usetimef_)));
          set_has_usetimef();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(217)) goto parse_usetimeE;
        break;
      }
      
      // optional double usetimeE = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_usetimeE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &usetimee_)));
          set_has_usetimee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_week_day_mask;
        break;
      }
      
      // optional int32 week_day_mask = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week_day_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &week_day_mask_)));
          set_has_week_day_mask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_cleantype;
        break;
      }
      
      // optional .isafetec.CLEANLOG_TYPE cleantype = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cleantype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::CLEANLOG_TYPE_IsValid(value)) {
            set_cleantype(static_cast< isafetec::CLEANLOG_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(30, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(257)) goto parse_cleanparamtime;
        break;
      }
      
      // optional double cleanparamtime = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_cleanparamtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cleanparamtime_)));
          set_has_cleanparamtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CltLogPolcicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // optional double last_time = 3;
  if (has_last_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->last_time(), output);
  }
  
  // repeated int32 stateon = 4;
  for (int i = 0; i < this->stateon_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->stateon(i), output);
  }
  
  // optional .isafetec.UPLOADLOG_TYPE uploadtype = 5;
  if (has_uploadtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->uploadtype(), output);
  }
  
  // optional double upload_ontime = 8;
  if (has_upload_ontime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->upload_ontime(), output);
  }
  
  // optional .isafetec.CltLogPolcicy.ScreenParam screen_param = 10;
  if (has_screen_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->screen_param(), output);
  }
  
  // optional int32 max_idle_interval = 11;
  if (has_max_idle_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->max_idle_interval(), output);
  }
  
  // optional .isafetec.FileParamList fileparamlist = 12;
  if (has_fileparamlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->fileparamlist(), output);
  }
  
  // optional int32 inuse = 15;
  if (has_inuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->inuse(), output);
  }
  
  // optional .isafetec.TimeSpanList timelist = 25;
  if (has_timelist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->timelist(), output);
  }
  
  // optional double usetimeF = 26;
  if (has_usetimef()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->usetimef(), output);
  }
  
  // optional double usetimeE = 27;
  if (has_usetimee()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->usetimee(), output);
  }
  
  // optional int32 week_day_mask = 28;
  if (has_week_day_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->week_day_mask(), output);
  }
  
  // optional .isafetec.CLEANLOG_TYPE cleantype = 30;
  if (has_cleantype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      30, this->cleantype(), output);
  }
  
  // optional double cleanparamtime = 32;
  if (has_cleanparamtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->cleanparamtime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CltLogPolcicy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // optional double last_time = 3;
  if (has_last_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->last_time(), target);
  }
  
  // repeated int32 stateon = 4;
  for (int i = 0; i < this->stateon_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->stateon(i), target);
  }
  
  // optional .isafetec.UPLOADLOG_TYPE uploadtype = 5;
  if (has_uploadtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->uploadtype(), target);
  }
  
  // optional double upload_ontime = 8;
  if (has_upload_ontime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->upload_ontime(), target);
  }
  
  // optional .isafetec.CltLogPolcicy.ScreenParam screen_param = 10;
  if (has_screen_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->screen_param(), target);
  }
  
  // optional int32 max_idle_interval = 11;
  if (has_max_idle_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->max_idle_interval(), target);
  }
  
  // optional .isafetec.FileParamList fileparamlist = 12;
  if (has_fileparamlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->fileparamlist(), target);
  }
  
  // optional int32 inuse = 15;
  if (has_inuse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->inuse(), target);
  }
  
  // optional .isafetec.TimeSpanList timelist = 25;
  if (has_timelist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->timelist(), target);
  }
  
  // optional double usetimeF = 26;
  if (has_usetimef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->usetimef(), target);
  }
  
  // optional double usetimeE = 27;
  if (has_usetimee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->usetimee(), target);
  }
  
  // optional int32 week_day_mask = 28;
  if (has_week_day_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->week_day_mask(), target);
  }
  
  // optional .isafetec.CLEANLOG_TYPE cleantype = 30;
  if (has_cleantype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      30, this->cleantype(), target);
  }
  
  // optional double cleanparamtime = 32;
  if (has_cleanparamtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->cleanparamtime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CltLogPolcicy::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional double last_time = 3;
    if (has_last_time()) {
      total_size += 1 + 8;
    }
    
    // optional int32 inuse = 15;
    if (has_inuse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inuse());
    }
    
    // optional .isafetec.UPLOADLOG_TYPE uploadtype = 5;
    if (has_uploadtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->uploadtype());
    }
    
    // optional double upload_ontime = 8;
    if (has_upload_ontime()) {
      total_size += 1 + 8;
    }
    
    // optional .isafetec.CLEANLOG_TYPE cleantype = 30;
    if (has_cleantype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cleantype());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double cleanparamtime = 32;
    if (has_cleanparamtime()) {
      total_size += 2 + 8;
    }
    
    // optional .isafetec.CltLogPolcicy.ScreenParam screen_param = 10;
    if (has_screen_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->screen_param());
    }
    
    // optional int32 max_idle_interval = 11;
    if (has_max_idle_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_idle_interval());
    }
    
    // optional .isafetec.FileParamList fileparamlist = 12;
    if (has_fileparamlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fileparamlist());
    }
    
    // optional .isafetec.TimeSpanList timelist = 25;
    if (has_timelist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timelist());
    }
    
    // optional double usetimeF = 26;
    if (has_usetimef()) {
      total_size += 2 + 8;
    }
    
    // optional double usetimeE = 27;
    if (has_usetimee()) {
      total_size += 2 + 8;
    }
    
    // optional int32 week_day_mask = 28;
    if (has_week_day_mask()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->week_day_mask());
    }
    
  }
  // repeated int32 stateon = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->stateon_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->stateon(i));
    }
    total_size += 1 * this->stateon_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CltLogPolcicy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CltLogPolcicy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CltLogPolcicy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CltLogPolcicy::MergeFrom(const CltLogPolcicy& from) {
  GOOGLE_CHECK_NE(&from, this);
  stateon_.MergeFrom(from.stateon_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_last_time()) {
      set_last_time(from.last_time());
    }
    if (from.has_inuse()) {
      set_inuse(from.inuse());
    }
    if (from.has_uploadtype()) {
      set_uploadtype(from.uploadtype());
    }
    if (from.has_upload_ontime()) {
      set_upload_ontime(from.upload_ontime());
    }
    if (from.has_cleantype()) {
      set_cleantype(from.cleantype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cleanparamtime()) {
      set_cleanparamtime(from.cleanparamtime());
    }
    if (from.has_screen_param()) {
      mutable_screen_param()->::isafetec::CltLogPolcicy_ScreenParam::MergeFrom(from.screen_param());
    }
    if (from.has_max_idle_interval()) {
      set_max_idle_interval(from.max_idle_interval());
    }
    if (from.has_fileparamlist()) {
      mutable_fileparamlist()->::isafetec::FileParamList::MergeFrom(from.fileparamlist());
    }
    if (from.has_timelist()) {
      mutable_timelist()->::isafetec::TimeSpanList::MergeFrom(from.timelist());
    }
    if (from.has_usetimef()) {
      set_usetimef(from.usetimef());
    }
    if (from.has_usetimee()) {
      set_usetimee(from.usetimee());
    }
    if (from.has_week_day_mask()) {
      set_week_day_mask(from.week_day_mask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CltLogPolcicy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CltLogPolcicy::CopyFrom(const CltLogPolcicy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CltLogPolcicy::IsInitialized() const {
  
  return true;
}

void CltLogPolcicy::Swap(CltLogPolcicy* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(last_time_, other->last_time_);
    std::swap(inuse_, other->inuse_);
    stateon_.Swap(&other->stateon_);
    std::swap(uploadtype_, other->uploadtype_);
    std::swap(upload_ontime_, other->upload_ontime_);
    std::swap(cleantype_, other->cleantype_);
    std::swap(cleanparamtime_, other->cleanparamtime_);
    std::swap(screen_param_, other->screen_param_);
    std::swap(max_idle_interval_, other->max_idle_interval_);
    std::swap(fileparamlist_, other->fileparamlist_);
    std::swap(timelist_, other->timelist_);
    std::swap(usetimef_, other->usetimef_);
    std::swap(usetimee_, other->usetimee_);
    std::swap(week_day_mask_, other->week_day_mask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CltLogPolcicy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CltLogPolcicy_descriptor_;
  metadata.reflection = CltLogPolcicy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CltLogPolcicyList::kListFieldNumber;
#endif  // !_MSC_VER

CltLogPolcicyList::CltLogPolcicyList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CltLogPolcicyList::InitAsDefaultInstance() {
}

CltLogPolcicyList::CltLogPolcicyList(const CltLogPolcicyList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CltLogPolcicyList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CltLogPolcicyList::~CltLogPolcicyList() {
  SharedDtor();
}

void CltLogPolcicyList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CltLogPolcicyList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CltLogPolcicyList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CltLogPolcicyList_descriptor_;
}

const CltLogPolcicyList& CltLogPolcicyList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Intranetclt_2eproto();  return *default_instance_;
}

CltLogPolcicyList* CltLogPolcicyList::default_instance_ = NULL;

CltLogPolcicyList* CltLogPolcicyList::New() const {
  return new CltLogPolcicyList;
}

void CltLogPolcicyList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CltLogPolcicyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .isafetec.CltLogPolcicy list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CltLogPolcicyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .isafetec.CltLogPolcicy list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CltLogPolcicyList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .isafetec.CltLogPolcicy list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CltLogPolcicyList::ByteSize() const {
  int total_size = 0;
  
  // repeated .isafetec.CltLogPolcicy list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CltLogPolcicyList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CltLogPolcicyList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CltLogPolcicyList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CltLogPolcicyList::MergeFrom(const CltLogPolcicyList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CltLogPolcicyList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CltLogPolcicyList::CopyFrom(const CltLogPolcicyList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CltLogPolcicyList::IsInitialized() const {
  
  return true;
}

void CltLogPolcicyList::Swap(CltLogPolcicyList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CltLogPolcicyList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CltLogPolcicyList_descriptor_;
  metadata.reflection = CltLogPolcicyList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CltStreamControlPolicy_FilterNode::kTypeFieldNumber;
const int CltStreamControlPolicy_FilterNode::kAddtypeFieldNumber;
const int CltStreamControlPolicy_FilterNode::kAddparamFieldNumber;
const int CltStreamControlPolicy_FilterNode::kUptypeFieldNumber;
const int CltStreamControlPolicy_FilterNode::kUpparamFieldNumber;
const int CltStreamControlPolicy_FilterNode::kDowntypeFieldNumber;
const int CltStreamControlPolicy_FilterNode::kDownparamFieldNumber;
#endif  // !_MSC_VER

CltStreamControlPolicy_FilterNode::CltStreamControlPolicy_FilterNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CltStreamControlPolicy_FilterNode::InitAsDefaultInstance() {
}

CltStreamControlPolicy_FilterNode::CltStreamControlPolicy_FilterNode(const CltStreamControlPolicy_FilterNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CltStreamControlPolicy_FilterNode::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  addtype_ = 0u;
  addparam_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uptype_ = 0u;
  upparam_ = 0u;
  downtype_ = 0u;
  downparam_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CltStreamControlPolicy_FilterNode::~CltStreamControlPolicy_FilterNode() {
  SharedDtor();
}

void CltStreamControlPolicy_FilterNode::SharedDtor() {
  if (addparam_ != &::google::protobuf::internal::kEmptyString) {
    delete addparam_;
  }
  if (this != default_instance_) {
  }
}

void CltStreamControlPolicy_FilterNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CltStreamControlPolicy_FilterNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CltStreamControlPolicy_FilterNode_descriptor_;
}

const CltStreamControlPolicy_FilterNode& CltStreamControlPolicy_FilterNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Intranetclt_2eproto();  return *default_instance_;
}

CltStreamControlPolicy_FilterNode* CltStreamControlPolicy_FilterNode::default_instance_ = NULL;

CltStreamControlPolicy_FilterNode* CltStreamControlPolicy_FilterNode::New() const {
  return new CltStreamControlPolicy_FilterNode;
}

void CltStreamControlPolicy_FilterNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    addtype_ = 0u;
    if (has_addparam()) {
      if (addparam_ != &::google::protobuf::internal::kEmptyString) {
        addparam_->clear();
      }
    }
    uptype_ = 0u;
    upparam_ = 0u;
    downtype_ = 0u;
    downparam_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CltStreamControlPolicy_FilterNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_addtype;
        break;
      }
      
      // optional uint32 addtype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addtype_)));
          set_has_addtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_addparam;
        break;
      }
      
      // optional string addparam = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_addparam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addparam()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->addparam().data(), this->addparam().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_uptype;
        break;
      }
      
      // optional uint32 uptype = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uptype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uptype_)));
          set_has_uptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_upparam;
        break;
      }
      
      // optional uint32 upparam = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upparam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upparam_)));
          set_has_upparam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_downtype;
        break;
      }
      
      // optional uint32 downtype = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_downtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &downtype_)));
          set_has_downtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_downparam;
        break;
      }
      
      // optional uint32 downparam = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_downparam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &downparam_)));
          set_has_downparam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CltStreamControlPolicy_FilterNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }
  
  // optional uint32 addtype = 3;
  if (has_addtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->addtype(), output);
  }
  
  // optional string addparam = 4;
  if (has_addparam()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->addparam().data(), this->addparam().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->addparam(), output);
  }
  
  // optional uint32 uptype = 5;
  if (has_uptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uptype(), output);
  }
  
  // optional uint32 upparam = 6;
  if (has_upparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->upparam(), output);
  }
  
  // optional uint32 downtype = 7;
  if (has_downtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->downtype(), output);
  }
  
  // optional uint32 downparam = 8;
  if (has_downparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->downparam(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CltStreamControlPolicy_FilterNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }
  
  // optional uint32 addtype = 3;
  if (has_addtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->addtype(), target);
  }
  
  // optional string addparam = 4;
  if (has_addparam()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->addparam().data(), this->addparam().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->addparam(), target);
  }
  
  // optional uint32 uptype = 5;
  if (has_uptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uptype(), target);
  }
  
  // optional uint32 upparam = 6;
  if (has_upparam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->upparam(), target);
  }
  
  // optional uint32 downtype = 7;
  if (has_downtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->downtype(), target);
  }
  
  // optional uint32 downparam = 8;
  if (has_downparam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->downparam(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CltStreamControlPolicy_FilterNode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 addtype = 3;
    if (has_addtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addtype());
    }
    
    // optional string addparam = 4;
    if (has_addparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->addparam());
    }
    
    // optional uint32 uptype = 5;
    if (has_uptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uptype());
    }
    
    // optional uint32 upparam = 6;
    if (has_upparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upparam());
    }
    
    // optional uint32 downtype = 7;
    if (has_downtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->downtype());
    }
    
    // optional uint32 downparam = 8;
    if (has_downparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->downparam());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CltStreamControlPolicy_FilterNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CltStreamControlPolicy_FilterNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CltStreamControlPolicy_FilterNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CltStreamControlPolicy_FilterNode::MergeFrom(const CltStreamControlPolicy_FilterNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_addtype()) {
      set_addtype(from.addtype());
    }
    if (from.has_addparam()) {
      set_addparam(from.addparam());
    }
    if (from.has_uptype()) {
      set_uptype(from.uptype());
    }
    if (from.has_upparam()) {
      set_upparam(from.upparam());
    }
    if (from.has_downtype()) {
      set_downtype(from.downtype());
    }
    if (from.has_downparam()) {
      set_downparam(from.downparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CltStreamControlPolicy_FilterNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CltStreamControlPolicy_FilterNode::CopyFrom(const CltStreamControlPolicy_FilterNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CltStreamControlPolicy_FilterNode::IsInitialized() const {
  
  return true;
}

void CltStreamControlPolicy_FilterNode::Swap(CltStreamControlPolicy_FilterNode* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(addtype_, other->addtype_);
    std::swap(addparam_, other->addparam_);
    std::swap(uptype_, other->uptype_);
    std::swap(upparam_, other->upparam_);
    std::swap(downtype_, other->downtype_);
    std::swap(downparam_, other->downparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CltStreamControlPolicy_FilterNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CltStreamControlPolicy_FilterNode_descriptor_;
  metadata.reflection = CltStreamControlPolicy_FilterNode_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CltStreamControlPolicy::kIdFieldNumber;
const int CltStreamControlPolicy::kTypeFieldNumber;
const int CltStreamControlPolicy::kLastTimeFieldNumber;
const int CltStreamControlPolicy::kInuseFieldNumber;
const int CltStreamControlPolicy::kFilterTypeFieldNumber;
const int CltStreamControlPolicy::kFilterlistFieldNumber;
const int CltStreamControlPolicy::kTimelistFieldNumber;
const int CltStreamControlPolicy::kFilterModeFieldNumber;
const int CltStreamControlPolicy::kUsetimeFFieldNumber;
const int CltStreamControlPolicy::kUsetimeEFieldNumber;
const int CltStreamControlPolicy::kHintsFieldNumber;
const int CltStreamControlPolicy::kIndexFieldNumber;
const int CltStreamControlPolicy::kWeekDayMaskFieldNumber;
#endif  // !_MSC_VER

CltStreamControlPolicy::CltStreamControlPolicy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CltStreamControlPolicy::InitAsDefaultInstance() {
  timelist_ = const_cast< ::isafetec::TimeSpanList*>(&::isafetec::TimeSpanList::default_instance());
}

CltStreamControlPolicy::CltStreamControlPolicy(const CltStreamControlPolicy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CltStreamControlPolicy::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  last_time_ = 0;
  inuse_ = 0;
  filter_type_ = 0;
  timelist_ = NULL;
  filter_mode_ = 0;
  usetimef_ = 0;
  usetimee_ = 0;
  hints_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  index_ = 0;
  week_day_mask_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CltStreamControlPolicy::~CltStreamControlPolicy() {
  SharedDtor();
}

void CltStreamControlPolicy::SharedDtor() {
  if (hints_ != &::google::protobuf::internal::kEmptyString) {
    delete hints_;
  }
  if (this != default_instance_) {
    delete timelist_;
  }
}

void CltStreamControlPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CltStreamControlPolicy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CltStreamControlPolicy_descriptor_;
}

const CltStreamControlPolicy& CltStreamControlPolicy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Intranetclt_2eproto();  return *default_instance_;
}

CltStreamControlPolicy* CltStreamControlPolicy::default_instance_ = NULL;

CltStreamControlPolicy* CltStreamControlPolicy::New() const {
  return new CltStreamControlPolicy;
}

void CltStreamControlPolicy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    last_time_ = 0;
    inuse_ = 0;
    filter_type_ = 0;
    if (has_timelist()) {
      if (timelist_ != NULL) timelist_->::isafetec::TimeSpanList::Clear();
    }
    filter_mode_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    usetimef_ = 0;
    usetimee_ = 0;
    if (has_hints()) {
      if (hints_ != &::google::protobuf::internal::kEmptyString) {
        hints_->clear();
      }
    }
    index_ = 0;
    week_day_mask_ = 0;
  }
  filterlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CltStreamControlPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_last_time;
        break;
      }
      
      // optional double last_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_last_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_time_)));
          set_has_last_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_filter_type;
        break;
      }
      
      // optional .isafetec.FILTER_TYPE filter_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::FILTER_TYPE_IsValid(value)) {
            set_filter_type(static_cast< isafetec::FILTER_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_filterlist;
        break;
      }
      
      // repeated .isafetec.CltStreamControlPolicy.FilterNode filterlist = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filterlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_filterlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_filterlist;
        if (input->ExpectTag(50)) goto parse_timelist;
        break;
      }
      
      // optional .isafetec.TimeSpanList timelist = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_filter_mode;
        break;
      }
      
      // optional .isafetec.FILTER_MODE filter_mode = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::FILTER_MODE_IsValid(value)) {
            set_filter_mode(static_cast< isafetec::FILTER_MODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_usetimeF;
        break;
      }
      
      // optional double usetimeF = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_usetimeF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &usetimef_)));
          set_has_usetimef();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_usetimeE;
        break;
      }
      
      // optional double usetimeE = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_usetimeE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &usetimee_)));
          set_has_usetimee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_inuse;
        break;
      }
      
      // optional int32 inuse = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inuse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inuse_)));
          set_has_inuse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_hints;
        break;
      }
      
      // optional string hints = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hints()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hints().data(), this->hints().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_index;
        break;
      }
      
      // optional int32 index = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_week_day_mask;
        break;
      }
      
      // optional int32 week_day_mask = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week_day_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &week_day_mask_)));
          set_has_week_day_mask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CltStreamControlPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // optional double last_time = 3;
  if (has_last_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->last_time(), output);
  }
  
  // optional .isafetec.FILTER_TYPE filter_type = 4;
  if (has_filter_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->filter_type(), output);
  }
  
  // repeated .isafetec.CltStreamControlPolicy.FilterNode filterlist = 5;
  for (int i = 0; i < this->filterlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->filterlist(i), output);
  }
  
  // optional .isafetec.TimeSpanList timelist = 6;
  if (has_timelist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->timelist(), output);
  }
  
  // optional .isafetec.FILTER_MODE filter_mode = 7;
  if (has_filter_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->filter_mode(), output);
  }
  
  // optional double usetimeF = 13;
  if (has_usetimef()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->usetimef(), output);
  }
  
  // optional double usetimeE = 14;
  if (has_usetimee()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->usetimee(), output);
  }
  
  // optional int32 inuse = 15;
  if (has_inuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->inuse(), output);
  }
  
  // optional string hints = 16;
  if (has_hints()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hints().data(), this->hints().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->hints(), output);
  }
  
  // optional int32 index = 19;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->index(), output);
  }
  
  // optional int32 week_day_mask = 20;
  if (has_week_day_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->week_day_mask(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CltStreamControlPolicy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // optional double last_time = 3;
  if (has_last_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->last_time(), target);
  }
  
  // optional .isafetec.FILTER_TYPE filter_type = 4;
  if (has_filter_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->filter_type(), target);
  }
  
  // repeated .isafetec.CltStreamControlPolicy.FilterNode filterlist = 5;
  for (int i = 0; i < this->filterlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->filterlist(i), target);
  }
  
  // optional .isafetec.TimeSpanList timelist = 6;
  if (has_timelist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->timelist(), target);
  }
  
  // optional .isafetec.FILTER_MODE filter_mode = 7;
  if (has_filter_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->filter_mode(), target);
  }
  
  // optional double usetimeF = 13;
  if (has_usetimef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->usetimef(), target);
  }
  
  // optional double usetimeE = 14;
  if (has_usetimee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->usetimee(), target);
  }
  
  // optional int32 inuse = 15;
  if (has_inuse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->inuse(), target);
  }
  
  // optional string hints = 16;
  if (has_hints()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hints().data(), this->hints().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->hints(), target);
  }
  
  // optional int32 index = 19;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->index(), target);
  }
  
  // optional int32 week_day_mask = 20;
  if (has_week_day_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->week_day_mask(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CltStreamControlPolicy::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional double last_time = 3;
    if (has_last_time()) {
      total_size += 1 + 8;
    }
    
    // optional int32 inuse = 15;
    if (has_inuse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inuse());
    }
    
    // optional .isafetec.FILTER_TYPE filter_type = 4;
    if (has_filter_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filter_type());
    }
    
    // optional .isafetec.TimeSpanList timelist = 6;
    if (has_timelist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timelist());
    }
    
    // optional .isafetec.FILTER_MODE filter_mode = 7;
    if (has_filter_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filter_mode());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double usetimeF = 13;
    if (has_usetimef()) {
      total_size += 1 + 8;
    }
    
    // optional double usetimeE = 14;
    if (has_usetimee()) {
      total_size += 1 + 8;
    }
    
    // optional string hints = 16;
    if (has_hints()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hints());
    }
    
    // optional int32 index = 19;
    if (has_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int32 week_day_mask = 20;
    if (has_week_day_mask()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->week_day_mask());
    }
    
  }
  // repeated .isafetec.CltStreamControlPolicy.FilterNode filterlist = 5;
  total_size += 1 * this->filterlist_size();
  for (int i = 0; i < this->filterlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->filterlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CltStreamControlPolicy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CltStreamControlPolicy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CltStreamControlPolicy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CltStreamControlPolicy::MergeFrom(const CltStreamControlPolicy& from) {
  GOOGLE_CHECK_NE(&from, this);
  filterlist_.MergeFrom(from.filterlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_last_time()) {
      set_last_time(from.last_time());
    }
    if (from.has_inuse()) {
      set_inuse(from.inuse());
    }
    if (from.has_filter_type()) {
      set_filter_type(from.filter_type());
    }
    if (from.has_timelist()) {
      mutable_timelist()->::isafetec::TimeSpanList::MergeFrom(from.timelist());
    }
    if (from.has_filter_mode()) {
      set_filter_mode(from.filter_mode());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_usetimef()) {
      set_usetimef(from.usetimef());
    }
    if (from.has_usetimee()) {
      set_usetimee(from.usetimee());
    }
    if (from.has_hints()) {
      set_hints(from.hints());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_week_day_mask()) {
      set_week_day_mask(from.week_day_mask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CltStreamControlPolicy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CltStreamControlPolicy::CopyFrom(const CltStreamControlPolicy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CltStreamControlPolicy::IsInitialized() const {
  
  return true;
}

void CltStreamControlPolicy::Swap(CltStreamControlPolicy* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(last_time_, other->last_time_);
    std::swap(inuse_, other->inuse_);
    std::swap(filter_type_, other->filter_type_);
    filterlist_.Swap(&other->filterlist_);
    std::swap(timelist_, other->timelist_);
    std::swap(filter_mode_, other->filter_mode_);
    std::swap(usetimef_, other->usetimef_);
    std::swap(usetimee_, other->usetimee_);
    std::swap(hints_, other->hints_);
    std::swap(index_, other->index_);
    std::swap(week_day_mask_, other->week_day_mask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CltStreamControlPolicy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CltStreamControlPolicy_descriptor_;
  metadata.reflection = CltStreamControlPolicy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CltStreamControlPolicyList::kListFieldNumber;
#endif  // !_MSC_VER

CltStreamControlPolicyList::CltStreamControlPolicyList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CltStreamControlPolicyList::InitAsDefaultInstance() {
}

CltStreamControlPolicyList::CltStreamControlPolicyList(const CltStreamControlPolicyList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CltStreamControlPolicyList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CltStreamControlPolicyList::~CltStreamControlPolicyList() {
  SharedDtor();
}

void CltStreamControlPolicyList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CltStreamControlPolicyList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CltStreamControlPolicyList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CltStreamControlPolicyList_descriptor_;
}

const CltStreamControlPolicyList& CltStreamControlPolicyList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Intranetclt_2eproto();  return *default_instance_;
}

CltStreamControlPolicyList* CltStreamControlPolicyList::default_instance_ = NULL;

CltStreamControlPolicyList* CltStreamControlPolicyList::New() const {
  return new CltStreamControlPolicyList;
}

void CltStreamControlPolicyList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CltStreamControlPolicyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .isafetec.CltStreamControlPolicy list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CltStreamControlPolicyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .isafetec.CltStreamControlPolicy list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CltStreamControlPolicyList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .isafetec.CltStreamControlPolicy list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CltStreamControlPolicyList::ByteSize() const {
  int total_size = 0;
  
  // repeated .isafetec.CltStreamControlPolicy list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CltStreamControlPolicyList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CltStreamControlPolicyList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CltStreamControlPolicyList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CltStreamControlPolicyList::MergeFrom(const CltStreamControlPolicyList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CltStreamControlPolicyList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CltStreamControlPolicyList::CopyFrom(const CltStreamControlPolicyList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CltStreamControlPolicyList::IsInitialized() const {
  
  return true;
}

void CltStreamControlPolicyList::Swap(CltStreamControlPolicyList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CltStreamControlPolicyList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CltStreamControlPolicyList_descriptor_;
  metadata.reflection = CltStreamControlPolicyList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CltCommonPolicy_ResScan::kTypeFieldNumber;
const int CltCommonPolicy_ResScan::kTimeFieldNumber;
const int CltCommonPolicy_ResScan::kParamFieldNumber;
#endif  // !_MSC_VER

CltCommonPolicy_ResScan::CltCommonPolicy_ResScan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CltCommonPolicy_ResScan::InitAsDefaultInstance() {
}

CltCommonPolicy_ResScan::CltCommonPolicy_ResScan(const CltCommonPolicy_ResScan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CltCommonPolicy_ResScan::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  time_ = 0;
  param_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CltCommonPolicy_ResScan::~CltCommonPolicy_ResScan() {
  SharedDtor();
}

void CltCommonPolicy_ResScan::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CltCommonPolicy_ResScan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CltCommonPolicy_ResScan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CltCommonPolicy_ResScan_descriptor_;
}

const CltCommonPolicy_ResScan& CltCommonPolicy_ResScan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Intranetclt_2eproto();  return *default_instance_;
}

CltCommonPolicy_ResScan* CltCommonPolicy_ResScan::default_instance_ = NULL;

CltCommonPolicy_ResScan* CltCommonPolicy_ResScan::New() const {
  return new CltCommonPolicy_ResScan;
}

void CltCommonPolicy_ResScan::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    time_ = 0;
    param_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CltCommonPolicy_ResScan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_time;
        break;
      }
      
      // optional double time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_param;
        break;
      }
      
      // optional int32 param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CltCommonPolicy_ResScan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional double time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->time(), output);
  }
  
  // optional int32 param = 3;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->param(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CltCommonPolicy_ResScan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional double time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->time(), target);
  }
  
  // optional int32 param = 3;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->param(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CltCommonPolicy_ResScan::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional double time = 2;
    if (has_time()) {
      total_size += 1 + 8;
    }
    
    // optional int32 param = 3;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CltCommonPolicy_ResScan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CltCommonPolicy_ResScan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CltCommonPolicy_ResScan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CltCommonPolicy_ResScan::MergeFrom(const CltCommonPolicy_ResScan& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CltCommonPolicy_ResScan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CltCommonPolicy_ResScan::CopyFrom(const CltCommonPolicy_ResScan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CltCommonPolicy_ResScan::IsInitialized() const {
  
  return true;
}

void CltCommonPolicy_ResScan::Swap(CltCommonPolicy_ResScan* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(time_, other->time_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CltCommonPolicy_ResScan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CltCommonPolicy_ResScan_descriptor_;
  metadata.reflection = CltCommonPolicy_ResScan_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CltCommonPolicy::kIdFieldNumber;
const int CltCommonPolicy::kTypeFieldNumber;
const int CltCommonPolicy::kLastTimeFieldNumber;
const int CltCommonPolicy::kInuseFieldNumber;
const int CltCommonPolicy::kStateonFieldNumber;
const int CltCommonPolicy::kScanTypeFieldNumber;
const int CltCommonPolicy::kFilterTypeFieldNumber;
const int CltCommonPolicy::kDoAtTimeFieldNumber;
const int CltCommonPolicy::kResParamFieldNumber;
#endif  // !_MSC_VER

CltCommonPolicy::CltCommonPolicy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CltCommonPolicy::InitAsDefaultInstance() {
  res_param_ = const_cast< ::isafetec::CltCommonPolicy_ResScan*>(&::isafetec::CltCommonPolicy_ResScan::default_instance());
}

CltCommonPolicy::CltCommonPolicy(const CltCommonPolicy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CltCommonPolicy::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  last_time_ = 0;
  inuse_ = 0;
  scan_type_ = 0;
  filter_type_ = 0;
  do_at_time_ = 0;
  res_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CltCommonPolicy::~CltCommonPolicy() {
  SharedDtor();
}

void CltCommonPolicy::SharedDtor() {
  if (this != default_instance_) {
    delete res_param_;
  }
}

void CltCommonPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CltCommonPolicy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CltCommonPolicy_descriptor_;
}

const CltCommonPolicy& CltCommonPolicy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Intranetclt_2eproto();  return *default_instance_;
}

CltCommonPolicy* CltCommonPolicy::default_instance_ = NULL;

CltCommonPolicy* CltCommonPolicy::New() const {
  return new CltCommonPolicy;
}

void CltCommonPolicy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    last_time_ = 0;
    inuse_ = 0;
    scan_type_ = 0;
    filter_type_ = 0;
    do_at_time_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_res_param()) {
      if (res_param_ != NULL) res_param_->::isafetec::CltCommonPolicy_ResScan::Clear();
    }
  }
  stateon_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CltCommonPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_last_time;
        break;
      }
      
      // optional double last_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_last_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_time_)));
          set_has_last_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_stateon;
        break;
      }
      
      // repeated int32 stateon = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stateon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_stateon())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stateon())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_stateon;
        if (input->ExpectTag(40)) goto parse_scan_type;
        break;
      }
      
      // optional int32 scan_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scan_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scan_type_)));
          set_has_scan_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_do_at_time;
        break;
      }
      
      // optional double do_at_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_do_at_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &do_at_time_)));
          set_has_do_at_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_res_param;
        break;
      }
      
      // optional .isafetec.CltCommonPolicy.ResScan res_param = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_res_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_res_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_filter_type;
        break;
      }
      
      // optional .isafetec.FILTER_TYPE filter_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::FILTER_TYPE_IsValid(value)) {
            set_filter_type(static_cast< isafetec::FILTER_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_inuse;
        break;
      }
      
      // optional int32 inuse = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inuse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inuse_)));
          set_has_inuse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CltCommonPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // optional double last_time = 3;
  if (has_last_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->last_time(), output);
  }
  
  // repeated int32 stateon = 4;
  for (int i = 0; i < this->stateon_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->stateon(i), output);
  }
  
  // optional int32 scan_type = 5;
  if (has_scan_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->scan_type(), output);
  }
  
  // optional double do_at_time = 6;
  if (has_do_at_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->do_at_time(), output);
  }
  
  // optional .isafetec.CltCommonPolicy.ResScan res_param = 7;
  if (has_res_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->res_param(), output);
  }
  
  // optional .isafetec.FILTER_TYPE filter_type = 8;
  if (has_filter_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->filter_type(), output);
  }
  
  // optional int32 inuse = 14;
  if (has_inuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->inuse(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CltCommonPolicy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // optional double last_time = 3;
  if (has_last_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->last_time(), target);
  }
  
  // repeated int32 stateon = 4;
  for (int i = 0; i < this->stateon_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->stateon(i), target);
  }
  
  // optional int32 scan_type = 5;
  if (has_scan_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->scan_type(), target);
  }
  
  // optional double do_at_time = 6;
  if (has_do_at_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->do_at_time(), target);
  }
  
  // optional .isafetec.CltCommonPolicy.ResScan res_param = 7;
  if (has_res_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->res_param(), target);
  }
  
  // optional .isafetec.FILTER_TYPE filter_type = 8;
  if (has_filter_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->filter_type(), target);
  }
  
  // optional int32 inuse = 14;
  if (has_inuse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->inuse(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CltCommonPolicy::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional double last_time = 3;
    if (has_last_time()) {
      total_size += 1 + 8;
    }
    
    // optional int32 inuse = 14;
    if (has_inuse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inuse());
    }
    
    // optional int32 scan_type = 5;
    if (has_scan_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scan_type());
    }
    
    // optional .isafetec.FILTER_TYPE filter_type = 8;
    if (has_filter_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filter_type());
    }
    
    // optional double do_at_time = 6;
    if (has_do_at_time()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .isafetec.CltCommonPolicy.ResScan res_param = 7;
    if (has_res_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->res_param());
    }
    
  }
  // repeated int32 stateon = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->stateon_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->stateon(i));
    }
    total_size += 1 * this->stateon_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CltCommonPolicy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CltCommonPolicy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CltCommonPolicy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CltCommonPolicy::MergeFrom(const CltCommonPolicy& from) {
  GOOGLE_CHECK_NE(&from, this);
  stateon_.MergeFrom(from.stateon_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_last_time()) {
      set_last_time(from.last_time());
    }
    if (from.has_inuse()) {
      set_inuse(from.inuse());
    }
    if (from.has_scan_type()) {
      set_scan_type(from.scan_type());
    }
    if (from.has_filter_type()) {
      set_filter_type(from.filter_type());
    }
    if (from.has_do_at_time()) {
      set_do_at_time(from.do_at_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_res_param()) {
      mutable_res_param()->::isafetec::CltCommonPolicy_ResScan::MergeFrom(from.res_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CltCommonPolicy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CltCommonPolicy::CopyFrom(const CltCommonPolicy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CltCommonPolicy::IsInitialized() const {
  
  return true;
}

void CltCommonPolicy::Swap(CltCommonPolicy* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(last_time_, other->last_time_);
    std::swap(inuse_, other->inuse_);
    stateon_.Swap(&other->stateon_);
    std::swap(scan_type_, other->scan_type_);
    std::swap(filter_type_, other->filter_type_);
    std::swap(do_at_time_, other->do_at_time_);
    std::swap(res_param_, other->res_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CltCommonPolicy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CltCommonPolicy_descriptor_;
  metadata.reflection = CltCommonPolicy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CltCommonPolicyList::kListFieldNumber;
#endif  // !_MSC_VER

CltCommonPolicyList::CltCommonPolicyList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CltCommonPolicyList::InitAsDefaultInstance() {
}

CltCommonPolicyList::CltCommonPolicyList(const CltCommonPolicyList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CltCommonPolicyList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CltCommonPolicyList::~CltCommonPolicyList() {
  SharedDtor();
}

void CltCommonPolicyList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CltCommonPolicyList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CltCommonPolicyList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CltCommonPolicyList_descriptor_;
}

const CltCommonPolicyList& CltCommonPolicyList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Intranetclt_2eproto();  return *default_instance_;
}

CltCommonPolicyList* CltCommonPolicyList::default_instance_ = NULL;

CltCommonPolicyList* CltCommonPolicyList::New() const {
  return new CltCommonPolicyList;
}

void CltCommonPolicyList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CltCommonPolicyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .isafetec.CltCommonPolicy list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CltCommonPolicyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .isafetec.CltCommonPolicy list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CltCommonPolicyList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .isafetec.CltCommonPolicy list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CltCommonPolicyList::ByteSize() const {
  int total_size = 0;
  
  // repeated .isafetec.CltCommonPolicy list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CltCommonPolicyList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CltCommonPolicyList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CltCommonPolicyList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CltCommonPolicyList::MergeFrom(const CltCommonPolicyList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CltCommonPolicyList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CltCommonPolicyList::CopyFrom(const CltCommonPolicyList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CltCommonPolicyList::IsInitialized() const {
  
  return true;
}

void CltCommonPolicyList::Swap(CltCommonPolicyList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CltCommonPolicyList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CltCommonPolicyList_descriptor_;
  metadata.reflection = CltCommonPolicyList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CltCheckPCIdlePolicy::kIdFieldNumber;
const int CltCheckPCIdlePolicy::kTypeFieldNumber;
const int CltCheckPCIdlePolicy::kLastTimeFieldNumber;
const int CltCheckPCIdlePolicy::kMaxMinuteFieldNumber;
#endif  // !_MSC_VER

CltCheckPCIdlePolicy::CltCheckPCIdlePolicy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CltCheckPCIdlePolicy::InitAsDefaultInstance() {
}

CltCheckPCIdlePolicy::CltCheckPCIdlePolicy(const CltCheckPCIdlePolicy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CltCheckPCIdlePolicy::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  last_time_ = 0;
  max_minute_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CltCheckPCIdlePolicy::~CltCheckPCIdlePolicy() {
  SharedDtor();
}

void CltCheckPCIdlePolicy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CltCheckPCIdlePolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CltCheckPCIdlePolicy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CltCheckPCIdlePolicy_descriptor_;
}

const CltCheckPCIdlePolicy& CltCheckPCIdlePolicy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Intranetclt_2eproto();  return *default_instance_;
}

CltCheckPCIdlePolicy* CltCheckPCIdlePolicy::default_instance_ = NULL;

CltCheckPCIdlePolicy* CltCheckPCIdlePolicy::New() const {
  return new CltCheckPCIdlePolicy;
}

void CltCheckPCIdlePolicy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    last_time_ = 0;
    max_minute_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CltCheckPCIdlePolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_last_time;
        break;
      }
      
      // optional double last_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_last_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_time_)));
          set_has_last_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_minute;
        break;
      }
      
      // optional int32 max_minute = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_minute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_minute_)));
          set_has_max_minute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CltCheckPCIdlePolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // optional double last_time = 3;
  if (has_last_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->last_time(), output);
  }
  
  // optional int32 max_minute = 4;
  if (has_max_minute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_minute(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CltCheckPCIdlePolicy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // optional double last_time = 3;
  if (has_last_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->last_time(), target);
  }
  
  // optional int32 max_minute = 4;
  if (has_max_minute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_minute(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CltCheckPCIdlePolicy::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional double last_time = 3;
    if (has_last_time()) {
      total_size += 1 + 8;
    }
    
    // optional int32 max_minute = 4;
    if (has_max_minute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_minute());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CltCheckPCIdlePolicy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CltCheckPCIdlePolicy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CltCheckPCIdlePolicy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CltCheckPCIdlePolicy::MergeFrom(const CltCheckPCIdlePolicy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_last_time()) {
      set_last_time(from.last_time());
    }
    if (from.has_max_minute()) {
      set_max_minute(from.max_minute());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CltCheckPCIdlePolicy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CltCheckPCIdlePolicy::CopyFrom(const CltCheckPCIdlePolicy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CltCheckPCIdlePolicy::IsInitialized() const {
  
  return true;
}

void CltCheckPCIdlePolicy::Swap(CltCheckPCIdlePolicy* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(last_time_, other->last_time_);
    std::swap(max_minute_, other->max_minute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CltCheckPCIdlePolicy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CltCheckPCIdlePolicy_descriptor_;
  metadata.reflection = CltCheckPCIdlePolicy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CltAlarmPolicy::kIdFieldNumber;
const int CltAlarmPolicy::kTypeFieldNumber;
const int CltAlarmPolicy::kLastTimeFieldNumber;
const int CltAlarmPolicy::kInuseFieldNumber;
const int CltAlarmPolicy::kStateonFieldNumber;
const int CltAlarmPolicy::kTimelistFieldNumber;
const int CltAlarmPolicy::kUsetimeFFieldNumber;
const int CltAlarmPolicy::kUsetimeEFieldNumber;
const int CltAlarmPolicy::kIndexFieldNumber;
const int CltAlarmPolicy::kWeekDayMaskFieldNumber;
#endif  // !_MSC_VER

CltAlarmPolicy::CltAlarmPolicy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CltAlarmPolicy::InitAsDefaultInstance() {
  timelist_ = const_cast< ::isafetec::TimeSpanList*>(&::isafetec::TimeSpanList::default_instance());
}

CltAlarmPolicy::CltAlarmPolicy(const CltAlarmPolicy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CltAlarmPolicy::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  last_time_ = 0;
  inuse_ = 0;
  timelist_ = NULL;
  usetimef_ = 0;
  usetimee_ = 0;
  index_ = 0;
  week_day_mask_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CltAlarmPolicy::~CltAlarmPolicy() {
  SharedDtor();
}

void CltAlarmPolicy::SharedDtor() {
  if (this != default_instance_) {
    delete timelist_;
  }
}

void CltAlarmPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CltAlarmPolicy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CltAlarmPolicy_descriptor_;
}

const CltAlarmPolicy& CltAlarmPolicy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Intranetclt_2eproto();  return *default_instance_;
}

CltAlarmPolicy* CltAlarmPolicy::default_instance_ = NULL;

CltAlarmPolicy* CltAlarmPolicy::New() const {
  return new CltAlarmPolicy;
}

void CltAlarmPolicy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    last_time_ = 0;
    inuse_ = 0;
    if (has_timelist()) {
      if (timelist_ != NULL) timelist_->::isafetec::TimeSpanList::Clear();
    }
    usetimef_ = 0;
    usetimee_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    index_ = 0;
    week_day_mask_ = 0;
  }
  stateon_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CltAlarmPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_last_time;
        break;
      }
      
      // optional double last_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_last_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_time_)));
          set_has_last_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_stateon;
        break;
      }
      
      // repeated int32 stateon = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stateon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_stateon())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stateon())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_stateon;
        if (input->ExpectTag(50)) goto parse_timelist;
        break;
      }
      
      // optional .isafetec.TimeSpanList timelist = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_usetimeF;
        break;
      }
      
      // optional double usetimeF = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_usetimeF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &usetimef_)));
          set_has_usetimef();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_usetimeE;
        break;
      }
      
      // optional double usetimeE = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_usetimeE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &usetimee_)));
          set_has_usetimee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_inuse;
        break;
      }
      
      // optional int32 inuse = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inuse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inuse_)));
          set_has_inuse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_index;
        break;
      }
      
      // optional int32 index = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_week_day_mask;
        break;
      }
      
      // optional int32 week_day_mask = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week_day_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &week_day_mask_)));
          set_has_week_day_mask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CltAlarmPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // optional double last_time = 3;
  if (has_last_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->last_time(), output);
  }
  
  // repeated int32 stateon = 4;
  for (int i = 0; i < this->stateon_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->stateon(i), output);
  }
  
  // optional .isafetec.TimeSpanList timelist = 6;
  if (has_timelist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->timelist(), output);
  }
  
  // optional double usetimeF = 12;
  if (has_usetimef()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->usetimef(), output);
  }
  
  // optional double usetimeE = 13;
  if (has_usetimee()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->usetimee(), output);
  }
  
  // optional int32 inuse = 14;
  if (has_inuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->inuse(), output);
  }
  
  // optional int32 index = 18;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->index(), output);
  }
  
  // optional int32 week_day_mask = 19;
  if (has_week_day_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->week_day_mask(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CltAlarmPolicy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // optional double last_time = 3;
  if (has_last_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->last_time(), target);
  }
  
  // repeated int32 stateon = 4;
  for (int i = 0; i < this->stateon_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->stateon(i), target);
  }
  
  // optional .isafetec.TimeSpanList timelist = 6;
  if (has_timelist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->timelist(), target);
  }
  
  // optional double usetimeF = 12;
  if (has_usetimef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->usetimef(), target);
  }
  
  // optional double usetimeE = 13;
  if (has_usetimee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->usetimee(), target);
  }
  
  // optional int32 inuse = 14;
  if (has_inuse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->inuse(), target);
  }
  
  // optional int32 index = 18;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->index(), target);
  }
  
  // optional int32 week_day_mask = 19;
  if (has_week_day_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->week_day_mask(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CltAlarmPolicy::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional double last_time = 3;
    if (has_last_time()) {
      total_size += 1 + 8;
    }
    
    // optional int32 inuse = 14;
    if (has_inuse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inuse());
    }
    
    // optional .isafetec.TimeSpanList timelist = 6;
    if (has_timelist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timelist());
    }
    
    // optional double usetimeF = 12;
    if (has_usetimef()) {
      total_size += 1 + 8;
    }
    
    // optional double usetimeE = 13;
    if (has_usetimee()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 index = 18;
    if (has_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int32 week_day_mask = 19;
    if (has_week_day_mask()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->week_day_mask());
    }
    
  }
  // repeated int32 stateon = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->stateon_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->stateon(i));
    }
    total_size += 1 * this->stateon_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CltAlarmPolicy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CltAlarmPolicy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CltAlarmPolicy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CltAlarmPolicy::MergeFrom(const CltAlarmPolicy& from) {
  GOOGLE_CHECK_NE(&from, this);
  stateon_.MergeFrom(from.stateon_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_last_time()) {
      set_last_time(from.last_time());
    }
    if (from.has_inuse()) {
      set_inuse(from.inuse());
    }
    if (from.has_timelist()) {
      mutable_timelist()->::isafetec::TimeSpanList::MergeFrom(from.timelist());
    }
    if (from.has_usetimef()) {
      set_usetimef(from.usetimef());
    }
    if (from.has_usetimee()) {
      set_usetimee(from.usetimee());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_week_day_mask()) {
      set_week_day_mask(from.week_day_mask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CltAlarmPolicy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CltAlarmPolicy::CopyFrom(const CltAlarmPolicy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CltAlarmPolicy::IsInitialized() const {
  
  return true;
}

void CltAlarmPolicy::Swap(CltAlarmPolicy* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(last_time_, other->last_time_);
    std::swap(inuse_, other->inuse_);
    stateon_.Swap(&other->stateon_);
    std::swap(timelist_, other->timelist_);
    std::swap(usetimef_, other->usetimef_);
    std::swap(usetimee_, other->usetimee_);
    std::swap(index_, other->index_);
    std::swap(week_day_mask_, other->week_day_mask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CltAlarmPolicy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CltAlarmPolicy_descriptor_;
  metadata.reflection = CltAlarmPolicy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CltAlarmPolicyList::kListFieldNumber;
#endif  // !_MSC_VER

CltAlarmPolicyList::CltAlarmPolicyList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CltAlarmPolicyList::InitAsDefaultInstance() {
}

CltAlarmPolicyList::CltAlarmPolicyList(const CltAlarmPolicyList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CltAlarmPolicyList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CltAlarmPolicyList::~CltAlarmPolicyList() {
  SharedDtor();
}

void CltAlarmPolicyList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CltAlarmPolicyList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CltAlarmPolicyList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CltAlarmPolicyList_descriptor_;
}

const CltAlarmPolicyList& CltAlarmPolicyList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Intranetclt_2eproto();  return *default_instance_;
}

CltAlarmPolicyList* CltAlarmPolicyList::default_instance_ = NULL;

CltAlarmPolicyList* CltAlarmPolicyList::New() const {
  return new CltAlarmPolicyList;
}

void CltAlarmPolicyList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CltAlarmPolicyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .isafetec.CltAlarmPolicy list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CltAlarmPolicyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .isafetec.CltAlarmPolicy list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CltAlarmPolicyList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .isafetec.CltAlarmPolicy list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CltAlarmPolicyList::ByteSize() const {
  int total_size = 0;
  
  // repeated .isafetec.CltAlarmPolicy list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CltAlarmPolicyList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CltAlarmPolicyList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CltAlarmPolicyList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CltAlarmPolicyList::MergeFrom(const CltAlarmPolicyList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CltAlarmPolicyList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CltAlarmPolicyList::CopyFrom(const CltAlarmPolicyList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CltAlarmPolicyList::IsInitialized() const {
  
  return true;
}

void CltAlarmPolicyList::Swap(CltAlarmPolicyList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CltAlarmPolicyList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CltAlarmPolicyList_descriptor_;
  metadata.reflection = CltAlarmPolicyList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CltQQFilterPolicy_FilterNode::kQqnumberFieldNumber;
#endif  // !_MSC_VER

CltQQFilterPolicy_FilterNode::CltQQFilterPolicy_FilterNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CltQQFilterPolicy_FilterNode::InitAsDefaultInstance() {
}

CltQQFilterPolicy_FilterNode::CltQQFilterPolicy_FilterNode(const CltQQFilterPolicy_FilterNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CltQQFilterPolicy_FilterNode::SharedCtor() {
  _cached_size_ = 0;
  qqnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CltQQFilterPolicy_FilterNode::~CltQQFilterPolicy_FilterNode() {
  SharedDtor();
}

void CltQQFilterPolicy_FilterNode::SharedDtor() {
  if (qqnumber_ != &::google::protobuf::internal::kEmptyString) {
    delete qqnumber_;
  }
  if (this != default_instance_) {
  }
}

void CltQQFilterPolicy_FilterNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CltQQFilterPolicy_FilterNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CltQQFilterPolicy_FilterNode_descriptor_;
}

const CltQQFilterPolicy_FilterNode& CltQQFilterPolicy_FilterNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Intranetclt_2eproto();  return *default_instance_;
}

CltQQFilterPolicy_FilterNode* CltQQFilterPolicy_FilterNode::default_instance_ = NULL;

CltQQFilterPolicy_FilterNode* CltQQFilterPolicy_FilterNode::New() const {
  return new CltQQFilterPolicy_FilterNode;
}

void CltQQFilterPolicy_FilterNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_qqnumber()) {
      if (qqnumber_ != &::google::protobuf::internal::kEmptyString) {
        qqnumber_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CltQQFilterPolicy_FilterNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string qqnumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qqnumber()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->qqnumber().data(), this->qqnumber().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CltQQFilterPolicy_FilterNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string qqnumber = 1;
  if (has_qqnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qqnumber().data(), this->qqnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->qqnumber(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CltQQFilterPolicy_FilterNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string qqnumber = 1;
  if (has_qqnumber()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qqnumber().data(), this->qqnumber().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->qqnumber(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CltQQFilterPolicy_FilterNode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string qqnumber = 1;
    if (has_qqnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qqnumber());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CltQQFilterPolicy_FilterNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CltQQFilterPolicy_FilterNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CltQQFilterPolicy_FilterNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CltQQFilterPolicy_FilterNode::MergeFrom(const CltQQFilterPolicy_FilterNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_qqnumber()) {
      set_qqnumber(from.qqnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CltQQFilterPolicy_FilterNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CltQQFilterPolicy_FilterNode::CopyFrom(const CltQQFilterPolicy_FilterNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CltQQFilterPolicy_FilterNode::IsInitialized() const {
  
  return true;
}

void CltQQFilterPolicy_FilterNode::Swap(CltQQFilterPolicy_FilterNode* other) {
  if (other != this) {
    std::swap(qqnumber_, other->qqnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CltQQFilterPolicy_FilterNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CltQQFilterPolicy_FilterNode_descriptor_;
  metadata.reflection = CltQQFilterPolicy_FilterNode_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CltQQFilterPolicy::kIdFieldNumber;
const int CltQQFilterPolicy::kTypeFieldNumber;
const int CltQQFilterPolicy::kLastTimeFieldNumber;
const int CltQQFilterPolicy::kInuseFieldNumber;
const int CltQQFilterPolicy::kFilterTypeFieldNumber;
const int CltQQFilterPolicy::kFilterlistTypeFieldNumber;
const int CltQQFilterPolicy::kFilterlistFieldNumber;
const int CltQQFilterPolicy::kTimelistFieldNumber;
const int CltQQFilterPolicy::kFilterModeFieldNumber;
const int CltQQFilterPolicy::kUsetimeFFieldNumber;
const int CltQQFilterPolicy::kUsetimeEFieldNumber;
const int CltQQFilterPolicy::kHintsFieldNumber;
const int CltQQFilterPolicy::kIndexFieldNumber;
const int CltQQFilterPolicy::kWeekDayMaskFieldNumber;
#endif  // !_MSC_VER

CltQQFilterPolicy::CltQQFilterPolicy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CltQQFilterPolicy::InitAsDefaultInstance() {
  timelist_ = const_cast< ::isafetec::TimeSpanList*>(&::isafetec::TimeSpanList::default_instance());
}

CltQQFilterPolicy::CltQQFilterPolicy(const CltQQFilterPolicy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CltQQFilterPolicy::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  last_time_ = 0;
  inuse_ = 0;
  filter_type_ = 0;
  filterlist_type_ = 0;
  timelist_ = NULL;
  filter_mode_ = 0;
  usetimef_ = 0;
  usetimee_ = 0;
  hints_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  index_ = 0;
  week_day_mask_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CltQQFilterPolicy::~CltQQFilterPolicy() {
  SharedDtor();
}

void CltQQFilterPolicy::SharedDtor() {
  if (hints_ != &::google::protobuf::internal::kEmptyString) {
    delete hints_;
  }
  if (this != default_instance_) {
    delete timelist_;
  }
}

void CltQQFilterPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CltQQFilterPolicy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CltQQFilterPolicy_descriptor_;
}

const CltQQFilterPolicy& CltQQFilterPolicy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Intranetclt_2eproto();  return *default_instance_;
}

CltQQFilterPolicy* CltQQFilterPolicy::default_instance_ = NULL;

CltQQFilterPolicy* CltQQFilterPolicy::New() const {
  return new CltQQFilterPolicy;
}

void CltQQFilterPolicy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    last_time_ = 0;
    inuse_ = 0;
    filter_type_ = 0;
    filterlist_type_ = 0;
    if (has_timelist()) {
      if (timelist_ != NULL) timelist_->::isafetec::TimeSpanList::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    filter_mode_ = 0;
    usetimef_ = 0;
    usetimee_ = 0;
    if (has_hints()) {
      if (hints_ != &::google::protobuf::internal::kEmptyString) {
        hints_->clear();
      }
    }
    index_ = 0;
    week_day_mask_ = 0;
  }
  filterlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CltQQFilterPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_last_time;
        break;
      }
      
      // optional double last_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_last_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_time_)));
          set_has_last_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_filter_type;
        break;
      }
      
      // optional .isafetec.FILTER_TYPE filter_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::FILTER_TYPE_IsValid(value)) {
            set_filter_type(static_cast< isafetec::FILTER_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_filterlist_type;
        break;
      }
      
      // optional .isafetec.FILTERLIST_TYPE filterlist_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filterlist_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::FILTERLIST_TYPE_IsValid(value)) {
            set_filterlist_type(static_cast< isafetec::FILTERLIST_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_filterlist;
        break;
      }
      
      // repeated .isafetec.CltQQFilterPolicy.FilterNode filterlist = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filterlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_filterlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_filterlist;
        if (input->ExpectTag(58)) goto parse_timelist;
        break;
      }
      
      // optional .isafetec.TimeSpanList timelist = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_filter_mode;
        break;
      }
      
      // optional .isafetec.FILTER_MODE filter_mode = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::FILTER_MODE_IsValid(value)) {
            set_filter_mode(static_cast< isafetec::FILTER_MODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_usetimeF;
        break;
      }
      
      // optional double usetimeF = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_usetimeF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &usetimef_)));
          set_has_usetimef();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_usetimeE;
        break;
      }
      
      // optional double usetimeE = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_usetimeE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &usetimee_)));
          set_has_usetimee();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_hints;
        break;
      }
      
      // optional string hints = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hints()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hints().data(), this->hints().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_index;
        break;
      }
      
      // optional int32 index = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_week_day_mask;
        break;
      }
      
      // optional int32 week_day_mask = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week_day_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &week_day_mask_)));
          set_has_week_day_mask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_inuse;
        break;
      }
      
      // optional int32 inuse = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inuse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inuse_)));
          set_has_inuse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CltQQFilterPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // optional double last_time = 3;
  if (has_last_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->last_time(), output);
  }
  
  // optional .isafetec.FILTER_TYPE filter_type = 4;
  if (has_filter_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->filter_type(), output);
  }
  
  // optional .isafetec.FILTERLIST_TYPE filterlist_type = 5;
  if (has_filterlist_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->filterlist_type(), output);
  }
  
  // repeated .isafetec.CltQQFilterPolicy.FilterNode filterlist = 6;
  for (int i = 0; i < this->filterlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->filterlist(i), output);
  }
  
  // optional .isafetec.TimeSpanList timelist = 7;
  if (has_timelist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->timelist(), output);
  }
  
  // optional .isafetec.FILTER_MODE filter_mode = 8;
  if (has_filter_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->filter_mode(), output);
  }
  
  // optional double usetimeF = 9;
  if (has_usetimef()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->usetimef(), output);
  }
  
  // optional double usetimeE = 10;
  if (has_usetimee()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->usetimee(), output);
  }
  
  // optional string hints = 11;
  if (has_hints()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hints().data(), this->hints().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->hints(), output);
  }
  
  // optional int32 index = 12;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->index(), output);
  }
  
  // optional int32 week_day_mask = 13;
  if (has_week_day_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->week_day_mask(), output);
  }
  
  // optional int32 inuse = 14;
  if (has_inuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->inuse(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CltQQFilterPolicy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // optional double last_time = 3;
  if (has_last_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->last_time(), target);
  }
  
  // optional .isafetec.FILTER_TYPE filter_type = 4;
  if (has_filter_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->filter_type(), target);
  }
  
  // optional .isafetec.FILTERLIST_TYPE filterlist_type = 5;
  if (has_filterlist_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->filterlist_type(), target);
  }
  
  // repeated .isafetec.CltQQFilterPolicy.FilterNode filterlist = 6;
  for (int i = 0; i < this->filterlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->filterlist(i), target);
  }
  
  // optional .isafetec.TimeSpanList timelist = 7;
  if (has_timelist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->timelist(), target);
  }
  
  // optional .isafetec.FILTER_MODE filter_mode = 8;
  if (has_filter_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->filter_mode(), target);
  }
  
  // optional double usetimeF = 9;
  if (has_usetimef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->usetimef(), target);
  }
  
  // optional double usetimeE = 10;
  if (has_usetimee()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->usetimee(), target);
  }
  
  // optional string hints = 11;
  if (has_hints()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hints().data(), this->hints().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->hints(), target);
  }
  
  // optional int32 index = 12;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->index(), target);
  }
  
  // optional int32 week_day_mask = 13;
  if (has_week_day_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->week_day_mask(), target);
  }
  
  // optional int32 inuse = 14;
  if (has_inuse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->inuse(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CltQQFilterPolicy::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional double last_time = 3;
    if (has_last_time()) {
      total_size += 1 + 8;
    }
    
    // optional int32 inuse = 14;
    if (has_inuse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inuse());
    }
    
    // optional .isafetec.FILTER_TYPE filter_type = 4;
    if (has_filter_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filter_type());
    }
    
    // optional .isafetec.FILTERLIST_TYPE filterlist_type = 5;
    if (has_filterlist_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filterlist_type());
    }
    
    // optional .isafetec.TimeSpanList timelist = 7;
    if (has_timelist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timelist());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .isafetec.FILTER_MODE filter_mode = 8;
    if (has_filter_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->filter_mode());
    }
    
    // optional double usetimeF = 9;
    if (has_usetimef()) {
      total_size += 1 + 8;
    }
    
    // optional double usetimeE = 10;
    if (has_usetimee()) {
      total_size += 1 + 8;
    }
    
    // optional string hints = 11;
    if (has_hints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hints());
    }
    
    // optional int32 index = 12;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int32 week_day_mask = 13;
    if (has_week_day_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->week_day_mask());
    }
    
  }
  // repeated .isafetec.CltQQFilterPolicy.FilterNode filterlist = 6;
  total_size += 1 * this->filterlist_size();
  for (int i = 0; i < this->filterlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->filterlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CltQQFilterPolicy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CltQQFilterPolicy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CltQQFilterPolicy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CltQQFilterPolicy::MergeFrom(const CltQQFilterPolicy& from) {
  GOOGLE_CHECK_NE(&from, this);
  filterlist_.MergeFrom(from.filterlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_last_time()) {
      set_last_time(from.last_time());
    }
    if (from.has_inuse()) {
      set_inuse(from.inuse());
    }
    if (from.has_filter_type()) {
      set_filter_type(from.filter_type());
    }
    if (from.has_filterlist_type()) {
      set_filterlist_type(from.filterlist_type());
    }
    if (from.has_timelist()) {
      mutable_timelist()->::isafetec::TimeSpanList::MergeFrom(from.timelist());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_filter_mode()) {
      set_filter_mode(from.filter_mode());
    }
    if (from.has_usetimef()) {
      set_usetimef(from.usetimef());
    }
    if (from.has_usetimee()) {
      set_usetimee(from.usetimee());
    }
    if (from.has_hints()) {
      set_hints(from.hints());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_week_day_mask()) {
      set_week_day_mask(from.week_day_mask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CltQQFilterPolicy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CltQQFilterPolicy::CopyFrom(const CltQQFilterPolicy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CltQQFilterPolicy::IsInitialized() const {
  
  return true;
}

void CltQQFilterPolicy::Swap(CltQQFilterPolicy* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(last_time_, other->last_time_);
    std::swap(inuse_, other->inuse_);
    std::swap(filter_type_, other->filter_type_);
    std::swap(filterlist_type_, other->filterlist_type_);
    filterlist_.Swap(&other->filterlist_);
    std::swap(timelist_, other->timelist_);
    std::swap(filter_mode_, other->filter_mode_);
    std::swap(usetimef_, other->usetimef_);
    std::swap(usetimee_, other->usetimee_);
    std::swap(hints_, other->hints_);
    std::swap(index_, other->index_);
    std::swap(week_day_mask_, other->week_day_mask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CltQQFilterPolicy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CltQQFilterPolicy_descriptor_;
  metadata.reflection = CltQQFilterPolicy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CltQQFilterPolicyList::kListFieldNumber;
#endif  // !_MSC_VER

CltQQFilterPolicyList::CltQQFilterPolicyList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CltQQFilterPolicyList::InitAsDefaultInstance() {
}

CltQQFilterPolicyList::CltQQFilterPolicyList(const CltQQFilterPolicyList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CltQQFilterPolicyList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CltQQFilterPolicyList::~CltQQFilterPolicyList() {
  SharedDtor();
}

void CltQQFilterPolicyList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CltQQFilterPolicyList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CltQQFilterPolicyList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CltQQFilterPolicyList_descriptor_;
}

const CltQQFilterPolicyList& CltQQFilterPolicyList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Intranetclt_2eproto();  return *default_instance_;
}

CltQQFilterPolicyList* CltQQFilterPolicyList::default_instance_ = NULL;

CltQQFilterPolicyList* CltQQFilterPolicyList::New() const {
  return new CltQQFilterPolicyList;
}

void CltQQFilterPolicyList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CltQQFilterPolicyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .isafetec.CltQQFilterPolicy list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CltQQFilterPolicyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .isafetec.CltQQFilterPolicy list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CltQQFilterPolicyList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .isafetec.CltQQFilterPolicy list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CltQQFilterPolicyList::ByteSize() const {
  int total_size = 0;
  
  // repeated .isafetec.CltQQFilterPolicy list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CltQQFilterPolicyList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CltQQFilterPolicyList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CltQQFilterPolicyList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CltQQFilterPolicyList::MergeFrom(const CltQQFilterPolicyList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CltQQFilterPolicyList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CltQQFilterPolicyList::CopyFrom(const CltQQFilterPolicyList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CltQQFilterPolicyList::IsInitialized() const {
  
  return true;
}

void CltQQFilterPolicyList::Swap(CltQQFilterPolicyList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CltQQFilterPolicyList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CltQQFilterPolicyList_descriptor_;
  metadata.reflection = CltQQFilterPolicyList_reflection_;
  return metadata;
}

// CltProcessFilterPolicy_FilterNode

// optional string name = 1;
inline bool CltProcessFilterPolicy_FilterNode::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CltProcessFilterPolicy_FilterNode::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CltProcessFilterPolicy_FilterNode::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CltProcessFilterPolicy_FilterNode::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CltProcessFilterPolicy_FilterNode::name() const {
  return *name_;
}
inline void CltProcessFilterPolicy_FilterNode::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CltProcessFilterPolicy_FilterNode::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CltProcessFilterPolicy_FilterNode::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CltProcessFilterPolicy_FilterNode::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CltProcessFilterPolicy_FilterNode::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string orgname = 2;
inline bool CltProcessFilterPolicy_FilterNode::has_orgname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CltProcessFilterPolicy_FilterNode::set_has_orgname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CltProcessFilterPolicy_FilterNode::clear_has_orgname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CltProcessFilterPolicy_FilterNode::clear_orgname() {
  if (orgname_ != &::google::protobuf::internal::kEmptyString) {
    orgname_->clear();
  }
  clear_has_orgname();
}
inline const ::std::string& CltProcessFilterPolicy_FilterNode::orgname() const {
  return *orgname_;
}
inline void CltProcessFilterPolicy_FilterNode::set_orgname(const ::std::string& value) {
  set_has_orgname();
  if (orgname_ == &::google::protobuf::internal::kEmptyString) {
    orgname_ = new ::std::string;
  }
  orgname_->assign(value);
}
inline void CltProcessFilterPolicy_FilterNode::set_orgname(const char* value) {
  set_has_orgname();
  if (orgname_ == &::google::protobuf::internal::kEmptyString) {
    orgname_ = new ::std::string;
  }
  orgname_->assign(value);
}
inline void CltProcessFilterPolicy_FilterNode::set_orgname(const char* value, size_t size) {
  set_has_orgname();
  if (orgname_ == &::google::protobuf::internal::kEmptyString) {
    orgname_ = new ::std::string;
  }
  orgname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CltProcessFilterPolicy_FilterNode::mutable_orgname() {
  set_has_orgname();
  if (orgname_ == &::google::protobuf::internal::kEmptyString) {
    orgname_ = new ::std::string;
  }
  return orgname_;
}
inline ::std::string* CltProcessFilterPolicy_FilterNode::release_orgname() {
  clear_has_orgname();
  if (orgname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = orgname_;
    orgname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string product = 3;
inline bool CltProcessFilterPolicy_FilterNode::has_product() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CltProcessFilterPolicy_FilterNode::set_has_product() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CltProcessFilterPolicy_FilterNode::clear_has_product() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CltProcessFilterPolicy_FilterNode::clear_product() {
  if (product_ != &::google::protobuf::internal::kEmptyString) {
    product_->clear();
  }
  clear_has_product();
}
inline const ::std::string& CltProcessFilterPolicy_FilterNode::product() const {
  return *product_;
}
inline void CltProcessFilterPolicy_FilterNode::set_product(const ::std::string& value) {
  set_has_product();
  if (product_ == &::google::protobuf::internal::kEmptyString) {
    product_ = new ::std::string;
  }
  product_->assign(value);
}
inline void CltProcessFilterPolicy_FilterNode::set_product(const char* value) {
  set_has_product();
  if (product_ == &::google::protobuf::internal::kEmptyString) {
    product_ = new ::std::string;
  }
  product_->assign(value);
}
inline void CltProcessFilterPolicy_FilterNode::set_product(const char* value, size_t size) {
  set_has_product();
  if (product_ == &::google::protobuf::internal::kEmptyString) {
    product_ = new ::std::string;
  }
  product_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CltProcessFilterPolicy_FilterNode::mutable_product() {
  set_has_product();
  if (product_ == &::google::protobuf::internal::kEmptyString) {
    product_ = new ::std::string;
  }
  return product_;
}
inline ::std::string* CltProcessFilterPolicy_FilterNode::release_product() {
  clear_has_product();
  if (product_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = product_;
    product_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 exttype = 4;
inline bool CltProcessFilterPolicy_FilterNode::has_exttype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CltProcessFilterPolicy_FilterNode::set_has_exttype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CltProcessFilterPolicy_FilterNode::clear_has_exttype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CltProcessFilterPolicy_FilterNode::clear_exttype() {
  exttype_ = 0;
  clear_has_exttype();
}
inline ::google::protobuf::int32 CltProcessFilterPolicy_FilterNode::exttype() const {
  return exttype_;
}
inline void CltProcessFilterPolicy_FilterNode::set_exttype(::google::protobuf::int32 value) {
  set_has_exttype();
  exttype_ = value;
}

// optional string hash = 5;
inline bool CltProcessFilterPolicy_FilterNode::has_hash() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CltProcessFilterPolicy_FilterNode::set_has_hash() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CltProcessFilterPolicy_FilterNode::clear_has_hash() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CltProcessFilterPolicy_FilterNode::clear_hash() {
  if (hash_ != &::google::protobuf::internal::kEmptyString) {
    hash_->clear();
  }
  clear_has_hash();
}
inline const ::std::string& CltProcessFilterPolicy_FilterNode::hash() const {
  return *hash_;
}
inline void CltProcessFilterPolicy_FilterNode::set_hash(const ::std::string& value) {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    hash_ = new ::std::string;
  }
  hash_->assign(value);
}
inline void CltProcessFilterPolicy_FilterNode::set_hash(const char* value) {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    hash_ = new ::std::string;
  }
  hash_->assign(value);
}
inline void CltProcessFilterPolicy_FilterNode::set_hash(const char* value, size_t size) {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    hash_ = new ::std::string;
  }
  hash_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CltProcessFilterPolicy_FilterNode::mutable_hash() {
  set_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    hash_ = new ::std::string;
  }
  return hash_;
}
inline ::std::string* CltProcessFilterPolicy_FilterNode::release_hash() {
  clear_has_hash();
  if (hash_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hash_;
    hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CltProcessFilterPolicy

// optional int32 id = 1;
inline bool CltProcessFilterPolicy::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CltProcessFilterPolicy::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CltProcessFilterPolicy::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CltProcessFilterPolicy::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 CltProcessFilterPolicy::id() const {
  return id_;
}
inline void CltProcessFilterPolicy::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 type = 2;
inline bool CltProcessFilterPolicy::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CltProcessFilterPolicy::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CltProcessFilterPolicy::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CltProcessFilterPolicy::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 CltProcessFilterPolicy::type() const {
  return type_;
}
inline void CltProcessFilterPolicy::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional double last_time = 3;
inline bool CltProcessFilterPolicy::has_last_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CltProcessFilterPolicy::set_has_last_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CltProcessFilterPolicy::clear_has_last_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CltProcessFilterPolicy::clear_last_time() {
  last_time_ = 0;
  clear_has_last_time();
}
inline double CltProcessFilterPolicy::last_time() const {
  return last_time_;
}
inline void CltProcessFilterPolicy::set_last_time(double value) {
  set_has_last_time();
  last_time_ = value;
}

// optional int32 inuse = 14;
inline bool CltProcessFilterPolicy::has_inuse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CltProcessFilterPolicy::set_has_inuse() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CltProcessFilterPolicy::clear_has_inuse() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CltProcessFilterPolicy::clear_inuse() {
  inuse_ = 0;
  clear_has_inuse();
}
inline ::google::protobuf::int32 CltProcessFilterPolicy::inuse() const {
  return inuse_;
}
inline void CltProcessFilterPolicy::set_inuse(::google::protobuf::int32 value) {
  set_has_inuse();
  inuse_ = value;
}

// optional .isafetec.FILTER_TYPE filter_type = 4;
inline bool CltProcessFilterPolicy::has_filter_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CltProcessFilterPolicy::set_has_filter_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CltProcessFilterPolicy::clear_has_filter_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CltProcessFilterPolicy::clear_filter_type() {
  filter_type_ = 0;
  clear_has_filter_type();
}
inline isafetec::FILTER_TYPE CltProcessFilterPolicy::filter_type() const {
  return static_cast< isafetec::FILTER_TYPE >(filter_type_);
}
inline void CltProcessFilterPolicy::set_filter_type(isafetec::FILTER_TYPE value) {
  GOOGLE_DCHECK(isafetec::FILTER_TYPE_IsValid(value));
  set_has_filter_type();
  filter_type_ = value;
}

// optional .isafetec.FILTERLIST_TYPE filterlist_type = 5;
inline bool CltProcessFilterPolicy::has_filterlist_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CltProcessFilterPolicy::set_has_filterlist_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CltProcessFilterPolicy::clear_has_filterlist_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CltProcessFilterPolicy::clear_filterlist_type() {
  filterlist_type_ = 0;
  clear_has_filterlist_type();
}
inline isafetec::FILTERLIST_TYPE CltProcessFilterPolicy::filterlist_type() const {
  return static_cast< isafetec::FILTERLIST_TYPE >(filterlist_type_);
}
inline void CltProcessFilterPolicy::set_filterlist_type(isafetec::FILTERLIST_TYPE value) {
  GOOGLE_DCHECK(isafetec::FILTERLIST_TYPE_IsValid(value));
  set_has_filterlist_type();
  filterlist_type_ = value;
}

// repeated .isafetec.CltProcessFilterPolicy.FilterNode filterlist = 6;
inline int CltProcessFilterPolicy::filterlist_size() const {
  return filterlist_.size();
}
inline void CltProcessFilterPolicy::clear_filterlist() {
  filterlist_.Clear();
}
inline const ::isafetec::CltProcessFilterPolicy_FilterNode& CltProcessFilterPolicy::filterlist(int index) const {
  return filterlist_.Get(index);
}
inline ::isafetec::CltProcessFilterPolicy_FilterNode* CltProcessFilterPolicy::mutable_filterlist(int index) {
  return filterlist_.Mutable(index);
}
inline ::isafetec::CltProcessFilterPolicy_FilterNode* CltProcessFilterPolicy::filterlist_ReleaseAt(int index) {
  return filterlist_.ReleaseAt(index);
}
inline void CltProcessFilterPolicy::filterlist_RemoveAt(int index) {
  filterlist_.RemoveAt(index);
}
inline ::isafetec::CltProcessFilterPolicy_FilterNode* CltProcessFilterPolicy::add_filterlist() {
  return filterlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::CltProcessFilterPolicy_FilterNode >&
CltProcessFilterPolicy::filterlist() const {
  return filterlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::CltProcessFilterPolicy_FilterNode >*
CltProcessFilterPolicy::mutable_filterlist() {
  return &filterlist_;
}

// optional .isafetec.TimeSpanList timelist = 7;
inline bool CltProcessFilterPolicy::has_timelist() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CltProcessFilterPolicy::set_has_timelist() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CltProcessFilterPolicy::clear_has_timelist() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CltProcessFilterPolicy::clear_timelist() {
  if (timelist_ != NULL) timelist_->::isafetec::TimeSpanList::Clear();
  clear_has_timelist();
}
inline const ::isafetec::TimeSpanList& CltProcessFilterPolicy::timelist() const {
  return timelist_ != NULL ? *timelist_ : *default_instance_->timelist_;
}
inline ::isafetec::TimeSpanList* CltProcessFilterPolicy::mutable_timelist() {
  set_has_timelist();
  if (timelist_ == NULL) timelist_ = new ::isafetec::TimeSpanList;
  return timelist_;
}
inline ::isafetec::TimeSpanList* CltProcessFilterPolicy::release_timelist() {
  clear_has_timelist();
  ::isafetec::TimeSpanList* temp = timelist_;
  timelist_ = NULL;
  return temp;
}

// optional .isafetec.FILTER_MODE filter_mode = 8;
inline bool CltProcessFilterPolicy::has_filter_mode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CltProcessFilterPolicy::set_has_filter_mode() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CltProcessFilterPolicy::clear_has_filter_mode() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CltProcessFilterPolicy::clear_filter_mode() {
  filter_mode_ = 0;
  clear_has_filter_mode();
}
inline isafetec::FILTER_MODE CltProcessFilterPolicy::filter_mode() const {
  return static_cast< isafetec::FILTER_MODE >(filter_mode_);
}
inline void CltProcessFilterPolicy::set_filter_mode(isafetec::FILTER_MODE value) {
  GOOGLE_DCHECK(isafetec::FILTER_MODE_IsValid(value));
  set_has_filter_mode();
  filter_mode_ = value;
}

// optional double usetimeF = 9;
inline bool CltProcessFilterPolicy::has_usetimef() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CltProcessFilterPolicy::set_has_usetimef() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CltProcessFilterPolicy::clear_has_usetimef() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CltProcessFilterPolicy::clear_usetimef() {
  usetimef_ = 0;
  clear_has_usetimef();
}
inline double CltProcessFilterPolicy::usetimef() const {
  return usetimef_;
}
inline void CltProcessFilterPolicy::set_usetimef(double value) {
  set_has_usetimef();
  usetimef_ = value;
}

// optional double usetimeE = 10;
inline bool CltProcessFilterPolicy::has_usetimee() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CltProcessFilterPolicy::set_has_usetimee() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CltProcessFilterPolicy::clear_has_usetimee() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CltProcessFilterPolicy::clear_usetimee() {
  usetimee_ = 0;
  clear_has_usetimee();
}
inline double CltProcessFilterPolicy::usetimee() const {
  return usetimee_;
}
inline void CltProcessFilterPolicy::set_usetimee(double value) {
  set_has_usetimee();
  usetimee_ = value;
}

// optional string hints = 11;
inline bool CltProcessFilterPolicy::has_hints() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CltProcessFilterPolicy::set_has_hints() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CltProcessFilterPolicy::clear_has_hints() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CltProcessFilterPolicy::clear_hints() {
  if (hints_ != &::google::protobuf::internal::kEmptyString) {
    hints_->clear();
  }
  clear_has_hints();
}
inline const ::std::string& CltProcessFilterPolicy::hints() const {
  return *hints_;
}
inline void CltProcessFilterPolicy::set_hints(const ::std::string& value) {
  set_has_hints();
  if (hints_ == &::google::protobuf::internal::kEmptyString) {
    hints_ = new ::std::string;
  }
  hints_->assign(value);
}
inline void CltProcessFilterPolicy::set_hints(const char* value) {
  set_has_hints();
  if (hints_ == &::google::protobuf::internal::kEmptyString) {
    hints_ = new ::std::string;
  }
  hints_->assign(value);
}
inline void CltProcessFilterPolicy::set_hints(const char* value, size_t size) {
  set_has_hints();
  if (hints_ == &::google::protobuf::internal::kEmptyString) {
    hints_ = new ::std::string;
  }
  hints_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CltProcessFilterPolicy::mutable_hints() {
  set_has_hints();
  if (hints_ == &::google::protobuf::internal::kEmptyString) {
    hints_ = new ::std::string;
  }
  return hints_;
}
inline ::std::string* CltProcessFilterPolicy::release_hints() {
  clear_has_hints();
  if (hints_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hints_;
    hints_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 index = 12;
inline bool CltProcessFilterPolicy::has_index() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CltProcessFilterPolicy::set_has_index() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CltProcessFilterPolicy::clear_has_index() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CltProcessFilterPolicy::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 CltProcessFilterPolicy::index() const {
  return index_;
}
inline void CltProcessFilterPolicy::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 week_day_mask = 13;
inline bool CltProcessFilterPolicy::has_week_day_mask() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CltProcessFilterPolicy::set_has_week_day_mask() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CltProcessFilterPolicy::clear_has_week_day_mask() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CltProcessFilterPolicy::clear_week_day_mask() {
  week_day_mask_ = 0;
  clear_has_week_day_mask();
}
inline ::google::protobuf::int32 CltProcessFilterPolicy::week_day_mask() const {
  return week_day_mask_;
}
inline void CltProcessFilterPolicy::set_week_day_mask(::google::protobuf::int32 value) {
  set_has_week_day_mask();
  week_day_mask_ = value;
}

// -------------------------------------------------------------------

// CltProcessFilterPolicyList

// repeated .isafetec.CltProcessFilterPolicy list = 1;
inline int CltProcessFilterPolicyList::list_size() const {
  return list_.size();
}
inline void CltProcessFilterPolicyList::clear_list() {
  list_.Clear();
}
inline const ::isafetec::CltProcessFilterPolicy& CltProcessFilterPolicyList::list(int index) const {
  return list_.Get(index);
}
inline ::isafetec::CltProcessFilterPolicy* CltProcessFilterPolicyList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::isafetec::CltProcessFilterPolicy* CltProcessFilterPolicyList::list_ReleaseAt(int index) {
  return list_.ReleaseAt(index);
}
inline void CltProcessFilterPolicyList::list_RemoveAt(int index) {
  list_.RemoveAt(index);
}
inline ::isafetec::CltProcessFilterPolicy* CltProcessFilterPolicyList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::CltProcessFilterPolicy >&
CltProcessFilterPolicyList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::CltProcessFilterPolicy >*
CltProcessFilterPolicyList::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// CltUrlFilterPolicy_FilterNode

// optional string url = 1;
inline bool CltUrlFilterPolicy_FilterNode::has_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CltUrlFilterPolicy_FilterNode::set_has_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CltUrlFilterPolicy_FilterNode::clear_has_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CltUrlFilterPolicy_FilterNode::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& CltUrlFilterPolicy_FilterNode::url() const {
  return *url_;
}
inline void CltUrlFilterPolicy_FilterNode::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void CltUrlFilterPolicy_FilterNode::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void CltUrlFilterPolicy_FilterNode::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CltUrlFilterPolicy_FilterNode::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* CltUrlFilterPolicy_FilterNode::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CltUrlFilterPolicy

// optional int32 id = 1;
inline bool CltUrlFilterPolicy::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CltUrlFilterPolicy::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CltUrlFilterPolicy::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CltUrlFilterPolicy::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 CltUrlFilterPolicy::id() const {
  return id_;
}
inline void CltUrlFilterPolicy::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 type = 2;
inline bool CltUrlFilterPolicy::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CltUrlFilterPolicy::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CltUrlFilterPolicy::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CltUrlFilterPolicy::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 CltUrlFilterPolicy::type() const {
  return type_;
}
inline void CltUrlFilterPolicy::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional double last_time = 3;
inline bool CltUrlFilterPolicy::has_last_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CltUrlFilterPolicy::set_has_last_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CltUrlFilterPolicy::clear_has_last_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CltUrlFilterPolicy::clear_last_time() {
  last_time_ = 0;
  clear_has_last_time();
}
inline double CltUrlFilterPolicy::last_time() const {
  return last_time_;
}
inline void CltUrlFilterPolicy::set_last_time(double value) {
  set_has_last_time();
  last_time_ = value;
}

// optional int32 inuse = 14;
inline bool CltUrlFilterPolicy::has_inuse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CltUrlFilterPolicy::set_has_inuse() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CltUrlFilterPolicy::clear_has_inuse() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CltUrlFilterPolicy::clear_inuse() {
  inuse_ = 0;
  clear_has_inuse();
}
inline ::google::protobuf::int32 CltUrlFilterPolicy::inuse() const {
  return inuse_;
}
inline void CltUrlFilterPolicy::set_inuse(::google::protobuf::int32 value) {
  set_has_inuse();
  inuse_ = value;
}

// optional .isafetec.FILTER_TYPE filter_type = 4;
inline bool CltUrlFilterPolicy::has_filter_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CltUrlFilterPolicy::set_has_filter_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CltUrlFilterPolicy::clear_has_filter_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CltUrlFilterPolicy::clear_filter_type() {
  filter_type_ = 0;
  clear_has_filter_type();
}
inline isafetec::FILTER_TYPE CltUrlFilterPolicy::filter_type() const {
  return static_cast< isafetec::FILTER_TYPE >(filter_type_);
}
inline void CltUrlFilterPolicy::set_filter_type(isafetec::FILTER_TYPE value) {
  GOOGLE_DCHECK(isafetec::FILTER_TYPE_IsValid(value));
  set_has_filter_type();
  filter_type_ = value;
}

// optional .isafetec.FILTERLIST_TYPE filterlist_type = 5;
inline bool CltUrlFilterPolicy::has_filterlist_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CltUrlFilterPolicy::set_has_filterlist_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CltUrlFilterPolicy::clear_has_filterlist_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CltUrlFilterPolicy::clear_filterlist_type() {
  filterlist_type_ = 0;
  clear_has_filterlist_type();
}
inline isafetec::FILTERLIST_TYPE CltUrlFilterPolicy::filterlist_type() const {
  return static_cast< isafetec::FILTERLIST_TYPE >(filterlist_type_);
}
inline void CltUrlFilterPolicy::set_filterlist_type(isafetec::FILTERLIST_TYPE value) {
  GOOGLE_DCHECK(isafetec::FILTERLIST_TYPE_IsValid(value));
  set_has_filterlist_type();
  filterlist_type_ = value;
}

// repeated .isafetec.CltUrlFilterPolicy.FilterNode filterlist = 6;
inline int CltUrlFilterPolicy::filterlist_size() const {
  return filterlist_.size();
}
inline void CltUrlFilterPolicy::clear_filterlist() {
  filterlist_.Clear();
}
inline const ::isafetec::CltUrlFilterPolicy_FilterNode& CltUrlFilterPolicy::filterlist(int index) const {
  return filterlist_.Get(index);
}
inline ::isafetec::CltUrlFilterPolicy_FilterNode* CltUrlFilterPolicy::mutable_filterlist(int index) {
  return filterlist_.Mutable(index);
}
inline ::isafetec::CltUrlFilterPolicy_FilterNode* CltUrlFilterPolicy::filterlist_ReleaseAt(int index) {
  return filterlist_.ReleaseAt(index);
}
inline void CltUrlFilterPolicy::filterlist_RemoveAt(int index) {
  filterlist_.RemoveAt(index);
}
inline ::isafetec::CltUrlFilterPolicy_FilterNode* CltUrlFilterPolicy::add_filterlist() {
  return filterlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::CltUrlFilterPolicy_FilterNode >&
CltUrlFilterPolicy::filterlist() const {
  return filterlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::CltUrlFilterPolicy_FilterNode >*
CltUrlFilterPolicy::mutable_filterlist() {
  return &filterlist_;
}

// optional .isafetec.TimeSpanList timelist = 7;
inline bool CltUrlFilterPolicy::has_timelist() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CltUrlFilterPolicy::set_has_timelist() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CltUrlFilterPolicy::clear_has_timelist() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CltUrlFilterPolicy::clear_timelist() {
  if (timelist_ != NULL) timelist_->::isafetec::TimeSpanList::Clear();
  clear_has_timelist();
}
inline const ::isafetec::TimeSpanList& CltUrlFilterPolicy::timelist() const {
  return timelist_ != NULL ? *timelist_ : *default_instance_->timelist_;
}
inline ::isafetec::TimeSpanList* CltUrlFilterPolicy::mutable_timelist() {
  set_has_timelist();
  if (timelist_ == NULL) timelist_ = new ::isafetec::TimeSpanList;
  return timelist_;
}
inline ::isafetec::TimeSpanList* CltUrlFilterPolicy::release_timelist() {
  clear_has_timelist();
  ::isafetec::TimeSpanList* temp = timelist_;
  timelist_ = NULL;
  return temp;
}

// optional .isafetec.FILTER_MODE filter_mode = 8;
inline bool CltUrlFilterPolicy::has_filter_mode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CltUrlFilterPolicy::set_has_filter_mode() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CltUrlFilterPolicy::clear_has_filter_mode() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CltUrlFilterPolicy::clear_filter_mode() {
  filter_mode_ = 0;
  clear_has_filter_mode();
}
inline isafetec::FILTER_MODE CltUrlFilterPolicy::filter_mode() const {
  return static_cast< isafetec::FILTER_MODE >(filter_mode_);
}
inline void CltUrlFilterPolicy::set_filter_mode(isafetec::FILTER_MODE value) {
  GOOGLE_DCHECK(isafetec::FILTER_MODE_IsValid(value));
  set_has_filter_mode();
  filter_mode_ = value;
}

// optional double usetimeF = 9;
inline bool CltUrlFilterPolicy::has_usetimef() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CltUrlFilterPolicy::set_has_usetimef() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CltUrlFilterPolicy::clear_has_usetimef() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CltUrlFilterPolicy::clear_usetimef() {
  usetimef_ = 0;
  clear_has_usetimef();
}
inline double CltUrlFilterPolicy::usetimef() const {
  return usetimef_;
}
inline void CltUrlFilterPolicy::set_usetimef(double value) {
  set_has_usetimef();
  usetimef_ = value;
}

// optional double usetimeE = 10;
inline bool CltUrlFilterPolicy::has_usetimee() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CltUrlFilterPolicy::set_has_usetimee() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CltUrlFilterPolicy::clear_has_usetimee() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CltUrlFilterPolicy::clear_usetimee() {
  usetimee_ = 0;
  clear_has_usetimee();
}
inline double CltUrlFilterPolicy::usetimee() const {
  return usetimee_;
}
inline void CltUrlFilterPolicy::set_usetimee(double value) {
  set_has_usetimee();
  usetimee_ = value;
}

// optional string hints = 11;
inline bool CltUrlFilterPolicy::has_hints() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CltUrlFilterPolicy::set_has_hints() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CltUrlFilterPolicy::clear_has_hints() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CltUrlFilterPolicy::clear_hints() {
  if (hints_ != &::google::protobuf::internal::kEmptyString) {
    hints_->clear();
  }
  clear_has_hints();
}
inline const ::std::string& CltUrlFilterPolicy::hints() const {
  return *hints_;
}
inline void CltUrlFilterPolicy::set_hints(const ::std::string& value) {
  set_has_hints();
  if (hints_ == &::google::protobuf::internal::kEmptyString) {
    hints_ = new ::std::string;
  }
  hints_->assign(value);
}
inline void CltUrlFilterPolicy::set_hints(const char* value) {
  set_has_hints();
  if (hints_ == &::google::protobuf::internal::kEmptyString) {
    hints_ = new ::std::string;
  }
  hints_->assign(value);
}
inline void CltUrlFilterPolicy::set_hints(const char* value, size_t size) {
  set_has_hints();
  if (hints_ == &::google::protobuf::internal::kEmptyString) {
    hints_ = new ::std::string;
  }
  hints_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CltUrlFilterPolicy::mutable_hints() {
  set_has_hints();
  if (hints_ == &::google::protobuf::internal::kEmptyString) {
    hints_ = new ::std::string;
  }
  return hints_;
}
inline ::std::string* CltUrlFilterPolicy::release_hints() {
  clear_has_hints();
  if (hints_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hints_;
    hints_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 index = 12;
inline bool CltUrlFilterPolicy::has_index() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CltUrlFilterPolicy::set_has_index() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CltUrlFilterPolicy::clear_has_index() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CltUrlFilterPolicy::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 CltUrlFilterPolicy::index() const {
  return index_;
}
inline void CltUrlFilterPolicy::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 week_day_mask = 13;
inline bool CltUrlFilterPolicy::has_week_day_mask() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CltUrlFilterPolicy::set_has_week_day_mask() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CltUrlFilterPolicy::clear_has_week_day_mask() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CltUrlFilterPolicy::clear_week_day_mask() {
  week_day_mask_ = 0;
  clear_has_week_day_mask();
}
inline ::google::protobuf::int32 CltUrlFilterPolicy::week_day_mask() const {
  return week_day_mask_;
}
inline void CltUrlFilterPolicy::set_week_day_mask(::google::protobuf::int32 value) {
  set_has_week_day_mask();
  week_day_mask_ = value;
}

// -------------------------------------------------------------------

// CltUrlFilterPolicyList

// repeated .isafetec.CltUrlFilterPolicy list = 1;
inline int CltUrlFilterPolicyList::list_size() const {
  return list_.size();
}
inline void CltUrlFilterPolicyList::clear_list() {
  list_.Clear();
}
inline const ::isafetec::CltUrlFilterPolicy& CltUrlFilterPolicyList::list(int index) const {
  return list_.Get(index);
}
inline ::isafetec::CltUrlFilterPolicy* CltUrlFilterPolicyList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::isafetec::CltUrlFilterPolicy* CltUrlFilterPolicyList::list_ReleaseAt(int index) {
  return list_.ReleaseAt(index);
}
inline void CltUrlFilterPolicyList::list_RemoveAt(int index) {
  list_.RemoveAt(index);
}
inline ::isafetec::CltUrlFilterPolicy* CltUrlFilterPolicyList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::CltUrlFilterPolicy >&
CltUrlFilterPolicyList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::CltUrlFilterPolicy >*
CltUrlFilterPolicyList::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// CltIPAndPortFilterPolicy_FilterNode

// optional uint32 porttype = 2;
inline bool CltIPAndPortFilterPolicy_FilterNode::has_porttype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CltIPAndPortFilterPolicy_FilterNode::set_has_porttype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CltIPAndPortFilterPolicy_FilterNode::clear_has_porttype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CltIPAndPortFilterPolicy_FilterNode::clear_porttype() {
  porttype_ = 0u;
  clear_has_porttype();
}
inline ::google::protobuf::uint32 CltIPAndPortFilterPolicy_FilterNode::porttype() const {
  return porttype_;
}
inline void CltIPAndPortFilterPolicy_FilterNode::set_porttype(::google::protobuf::uint32 value) {
  set_has_porttype();
  porttype_ = value;
}

// optional uint32 PortF = 3;
inline bool CltIPAndPortFilterPolicy_FilterNode::has_portf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CltIPAndPortFilterPolicy_FilterNode::set_has_portf() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CltIPAndPortFilterPolicy_FilterNode::clear_has_portf() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CltIPAndPortFilterPolicy_FilterNode::clear_portf() {
  portf_ = 0u;
  clear_has_portf();
}
inline ::google::protobuf::uint32 CltIPAndPortFilterPolicy_FilterNode::portf() const {
  return portf_;
}
inline void CltIPAndPortFilterPolicy_FilterNode::set_portf(::google::protobuf::uint32 value) {
  set_has_portf();
  portf_ = value;
}

// optional uint32 PortE = 4;
inline bool CltIPAndPortFilterPolicy_FilterNode::has_porte() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CltIPAndPortFilterPolicy_FilterNode::set_has_porte() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CltIPAndPortFilterPolicy_FilterNode::clear_has_porte() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CltIPAndPortFilterPolicy_FilterNode::clear_porte() {
  porte_ = 0u;
  clear_has_porte();
}
inline ::google::protobuf::uint32 CltIPAndPortFilterPolicy_FilterNode::porte() const {
  return porte_;
}
inline void CltIPAndPortFilterPolicy_FilterNode::set_porte(::google::protobuf::uint32 value) {
  set_has_porte();
  porte_ = value;
}

// optional string portlist = 5;
inline bool CltIPAndPortFilterPolicy_FilterNode::has_portlist() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CltIPAndPortFilterPolicy_FilterNode::set_has_portlist() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CltIPAndPortFilterPolicy_FilterNode::clear_has_portlist() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CltIPAndPortFilterPolicy_FilterNode::clear_portlist() {
  if (portlist_ != &::google::protobuf::internal::kEmptyString) {
    portlist_->clear();
  }
  clear_has_portlist();
}
inline const ::std::string& CltIPAndPortFilterPolicy_FilterNode::portlist() const {
  return *portlist_;
}
inline void CltIPAndPortFilterPolicy_FilterNode::set_portlist(const ::std::string& value) {
  set_has_portlist();
  if (portlist_ == &::google::protobuf::internal::kEmptyString) {
    portlist_ = new ::std::string;
  }
  portlist_->assign(value);
}
inline void CltIPAndPortFilterPolicy_FilterNode::set_portlist(const char* value) {
  set_has_portlist();
  if (portlist_ == &::google::protobuf::internal::kEmptyString) {
    portlist_ = new ::std::string;
  }
  portlist_->assign(value);
}
inline void CltIPAndPortFilterPolicy_FilterNode::set_portlist(const char* value, size_t size) {
  set_has_portlist();
  if (portlist_ == &::google::protobuf::internal::kEmptyString) {
    portlist_ = new ::std::string;
  }
  portlist_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CltIPAndPortFilterPolicy_FilterNode::mutable_portlist() {
  set_has_portlist();
  if (portlist_ == &::google::protobuf::internal::kEmptyString) {
    portlist_ = new ::std::string;
  }
  return portlist_;
}
inline ::std::string* CltIPAndPortFilterPolicy_FilterNode::release_portlist() {
  clear_has_portlist();
  if (portlist_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = portlist_;
    portlist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 iptype = 6;
inline bool CltIPAndPortFilterPolicy_FilterNode::has_iptype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CltIPAndPortFilterPolicy_FilterNode::set_has_iptype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CltIPAndPortFilterPolicy_FilterNode::clear_has_iptype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CltIPAndPortFilterPolicy_FilterNode::clear_iptype() {
  iptype_ = 0u;
  clear_has_iptype();
}
inline ::google::protobuf::uint32 CltIPAndPortFilterPolicy_FilterNode::iptype() const {
  return iptype_;
}
inline void CltIPAndPortFilterPolicy_FilterNode::set_iptype(::google::protobuf::uint32 value) {
  set_has_iptype();
  iptype_ = value;
}

// optional uint32 IpaddrF = 7;
inline bool CltIPAndPortFilterPolicy_FilterNode::has_ipaddrf() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CltIPAndPortFilterPolicy_FilterNode::set_has_ipaddrf() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CltIPAndPortFilterPolicy_FilterNode::clear_has_ipaddrf() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CltIPAndPortFilterPolicy_FilterNode::clear_ipaddrf() {
  ipaddrf_ = 0u;
  clear_has_ipaddrf();
}
inline ::google::protobuf::uint32 CltIPAndPortFilterPolicy_FilterNode::ipaddrf() const {
  return ipaddrf_;
}
inline void CltIPAndPortFilterPolicy_FilterNode::set_ipaddrf(::google::protobuf::uint32 value) {
  set_has_ipaddrf();
  ipaddrf_ = value;
}

// optional uint32 IpaddrE = 8;
inline bool CltIPAndPortFilterPolicy_FilterNode::has_ipaddre() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CltIPAndPortFilterPolicy_FilterNode::set_has_ipaddre() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CltIPAndPortFilterPolicy_FilterNode::clear_has_ipaddre() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CltIPAndPortFilterPolicy_FilterNode::clear_ipaddre() {
  ipaddre_ = 0u;
  clear_has_ipaddre();
}
inline ::google::protobuf::uint32 CltIPAndPortFilterPolicy_FilterNode::ipaddre() const {
  return ipaddre_;
}
inline void CltIPAndPortFilterPolicy_FilterNode::set_ipaddre(::google::protobuf::uint32 value) {
  set_has_ipaddre();
  ipaddre_ = value;
}

// -------------------------------------------------------------------

// CltIPAndPortFilterPolicy

// optional int32 id = 1;
inline bool CltIPAndPortFilterPolicy::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CltIPAndPortFilterPolicy::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CltIPAndPortFilterPolicy::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CltIPAndPortFilterPolicy::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 CltIPAndPortFilterPolicy::id() const {
  return id_;
}
inline void CltIPAndPortFilterPolicy::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 type = 2;
inline bool CltIPAndPortFilterPolicy::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CltIPAndPortFilterPolicy::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CltIPAndPortFilterPolicy::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CltIPAndPortFilterPolicy::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 CltIPAndPortFilterPolicy::type() const {
  return type_;
}
inline void CltIPAndPortFilterPolicy::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional double last_time = 3;
inline bool CltIPAndPortFilterPolicy::has_last_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CltIPAndPortFilterPolicy::set_has_last_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CltIPAndPortFilterPolicy::clear_has_last_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CltIPAndPortFilterPolicy::clear_last_time() {
  last_time_ = 0;
  clear_has_last_time();
}
inline double CltIPAndPortFilterPolicy::last_time() const {
  return last_time_;
}
inline void CltIPAndPortFilterPolicy::set_last_time(double value) {
  set_has_last_time();
  last_time_ = value;
}

// optional int32 inuse = 21;
inline bool CltIPAndPortFilterPolicy::has_inuse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CltIPAndPortFilterPolicy::set_has_inuse() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CltIPAndPortFilterPolicy::clear_has_inuse() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CltIPAndPortFilterPolicy::clear_inuse() {
  inuse_ = 0;
  clear_has_inuse();
}
inline ::google::protobuf::int32 CltIPAndPortFilterPolicy::inuse() const {
  return inuse_;
}
inline void CltIPAndPortFilterPolicy::set_inuse(::google::protobuf::int32 value) {
  set_has_inuse();
  inuse_ = value;
}

// optional .isafetec.FILTER_TYPE filter_type = 4;
inline bool CltIPAndPortFilterPolicy::has_filter_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CltIPAndPortFilterPolicy::set_has_filter_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CltIPAndPortFilterPolicy::clear_has_filter_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CltIPAndPortFilterPolicy::clear_filter_type() {
  filter_type_ = 0;
  clear_has_filter_type();
}
inline isafetec::FILTER_TYPE CltIPAndPortFilterPolicy::filter_type() const {
  return static_cast< isafetec::FILTER_TYPE >(filter_type_);
}
inline void CltIPAndPortFilterPolicy::set_filter_type(isafetec::FILTER_TYPE value) {
  GOOGLE_DCHECK(isafetec::FILTER_TYPE_IsValid(value));
  set_has_filter_type();
  filter_type_ = value;
}

// optional .isafetec.FILTERLIST_TYPE filterlist_type = 5;
inline bool CltIPAndPortFilterPolicy::has_filterlist_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CltIPAndPortFilterPolicy::set_has_filterlist_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CltIPAndPortFilterPolicy::clear_has_filterlist_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CltIPAndPortFilterPolicy::clear_filterlist_type() {
  filterlist_type_ = 0;
  clear_has_filterlist_type();
}
inline isafetec::FILTERLIST_TYPE CltIPAndPortFilterPolicy::filterlist_type() const {
  return static_cast< isafetec::FILTERLIST_TYPE >(filterlist_type_);
}
inline void CltIPAndPortFilterPolicy::set_filterlist_type(isafetec::FILTERLIST_TYPE value) {
  GOOGLE_DCHECK(isafetec::FILTERLIST_TYPE_IsValid(value));
  set_has_filterlist_type();
  filterlist_type_ = value;
}

// repeated .isafetec.CltIPAndPortFilterPolicy.FilterNode filterlist = 6;
inline int CltIPAndPortFilterPolicy::filterlist_size() const {
  return filterlist_.size();
}
inline void CltIPAndPortFilterPolicy::clear_filterlist() {
  filterlist_.Clear();
}
inline const ::isafetec::CltIPAndPortFilterPolicy_FilterNode& CltIPAndPortFilterPolicy::filterlist(int index) const {
  return filterlist_.Get(index);
}
inline ::isafetec::CltIPAndPortFilterPolicy_FilterNode* CltIPAndPortFilterPolicy::mutable_filterlist(int index) {
  return filterlist_.Mutable(index);
}
inline ::isafetec::CltIPAndPortFilterPolicy_FilterNode* CltIPAndPortFilterPolicy::filterlist_ReleaseAt(int index) {
  return filterlist_.ReleaseAt(index);
}
inline void CltIPAndPortFilterPolicy::filterlist_RemoveAt(int index) {
  filterlist_.RemoveAt(index);
}
inline ::isafetec::CltIPAndPortFilterPolicy_FilterNode* CltIPAndPortFilterPolicy::add_filterlist() {
  return filterlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::CltIPAndPortFilterPolicy_FilterNode >&
CltIPAndPortFilterPolicy::filterlist() const {
  return filterlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::CltIPAndPortFilterPolicy_FilterNode >*
CltIPAndPortFilterPolicy::mutable_filterlist() {
  return &filterlist_;
}

// optional .isafetec.TimeSpanList timelist = 7;
inline bool CltIPAndPortFilterPolicy::has_timelist() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CltIPAndPortFilterPolicy::set_has_timelist() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CltIPAndPortFilterPolicy::clear_has_timelist() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CltIPAndPortFilterPolicy::clear_timelist() {
  if (timelist_ != NULL) timelist_->::isafetec::TimeSpanList::Clear();
  clear_has_timelist();
}
inline const ::isafetec::TimeSpanList& CltIPAndPortFilterPolicy::timelist() const {
  return timelist_ != NULL ? *timelist_ : *default_instance_->timelist_;
}
inline ::isafetec::TimeSpanList* CltIPAndPortFilterPolicy::mutable_timelist() {
  set_has_timelist();
  if (timelist_ == NULL) timelist_ = new ::isafetec::TimeSpanList;
  return timelist_;
}
inline ::isafetec::TimeSpanList* CltIPAndPortFilterPolicy::release_timelist() {
  clear_has_timelist();
  ::isafetec::TimeSpanList* temp = timelist_;
  timelist_ = NULL;
  return temp;
}

// optional .isafetec.FILTER_MODE filter_mode = 8;
inline bool CltIPAndPortFilterPolicy::has_filter_mode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CltIPAndPortFilterPolicy::set_has_filter_mode() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CltIPAndPortFilterPolicy::clear_has_filter_mode() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CltIPAndPortFilterPolicy::clear_filter_mode() {
  filter_mode_ = 0;
  clear_has_filter_mode();
}
inline isafetec::FILTER_MODE CltIPAndPortFilterPolicy::filter_mode() const {
  return static_cast< isafetec::FILTER_MODE >(filter_mode_);
}
inline void CltIPAndPortFilterPolicy::set_filter_mode(isafetec::FILTER_MODE value) {
  GOOGLE_DCHECK(isafetec::FILTER_MODE_IsValid(value));
  set_has_filter_mode();
  filter_mode_ = value;
}

// optional uint32 directtype = 9;
inline bool CltIPAndPortFilterPolicy::has_directtype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CltIPAndPortFilterPolicy::set_has_directtype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CltIPAndPortFilterPolicy::clear_has_directtype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CltIPAndPortFilterPolicy::clear_directtype() {
  directtype_ = 0u;
  clear_has_directtype();
}
inline ::google::protobuf::uint32 CltIPAndPortFilterPolicy::directtype() const {
  return directtype_;
}
inline void CltIPAndPortFilterPolicy::set_directtype(::google::protobuf::uint32 value) {
  set_has_directtype();
  directtype_ = value;
}

// optional uint32 protocoltype = 10;
inline bool CltIPAndPortFilterPolicy::has_protocoltype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CltIPAndPortFilterPolicy::set_has_protocoltype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CltIPAndPortFilterPolicy::clear_has_protocoltype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CltIPAndPortFilterPolicy::clear_protocoltype() {
  protocoltype_ = 0u;
  clear_has_protocoltype();
}
inline ::google::protobuf::uint32 CltIPAndPortFilterPolicy::protocoltype() const {
  return protocoltype_;
}
inline void CltIPAndPortFilterPolicy::set_protocoltype(::google::protobuf::uint32 value) {
  set_has_protocoltype();
  protocoltype_ = value;
}

// optional double usetimeF = 13;
inline bool CltIPAndPortFilterPolicy::has_usetimef() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CltIPAndPortFilterPolicy::set_has_usetimef() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CltIPAndPortFilterPolicy::clear_has_usetimef() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CltIPAndPortFilterPolicy::clear_usetimef() {
  usetimef_ = 0;
  clear_has_usetimef();
}
inline double CltIPAndPortFilterPolicy::usetimef() const {
  return usetimef_;
}
inline void CltIPAndPortFilterPolicy::set_usetimef(double value) {
  set_has_usetimef();
  usetimef_ = value;
}

// optional double usetimeE = 14;
inline bool CltIPAndPortFilterPolicy::has_usetimee() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CltIPAndPortFilterPolicy::set_has_usetimee() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CltIPAndPortFilterPolicy::clear_has_usetimee() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CltIPAndPortFilterPolicy::clear_usetimee() {
  usetimee_ = 0;
  clear_has_usetimee();
}
inline double CltIPAndPortFilterPolicy::usetimee() const {
  return usetimee_;
}
inline void CltIPAndPortFilterPolicy::set_usetimee(double value) {
  set_has_usetimee();
  usetimee_ = value;
}

// optional string hints = 16;
inline bool CltIPAndPortFilterPolicy::has_hints() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CltIPAndPortFilterPolicy::set_has_hints() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CltIPAndPortFilterPolicy::clear_has_hints() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CltIPAndPortFilterPolicy::clear_hints() {
  if (hints_ != &::google::protobuf::internal::kEmptyString) {
    hints_->clear();
  }
  clear_has_hints();
}
inline const ::std::string& CltIPAndPortFilterPolicy::hints() const {
  return *hints_;
}
inline void CltIPAndPortFilterPolicy::set_hints(const ::std::string& value) {
  set_has_hints();
  if (hints_ == &::google::protobuf::internal::kEmptyString) {
    hints_ = new ::std::string;
  }
  hints_->assign(value);
}
inline void CltIPAndPortFilterPolicy::set_hints(const char* value) {
  set_has_hints();
  if (hints_ == &::google::protobuf::internal::kEmptyString) {
    hints_ = new ::std::string;
  }
  hints_->assign(value);
}
inline void CltIPAndPortFilterPolicy::set_hints(const char* value, size_t size) {
  set_has_hints();
  if (hints_ == &::google::protobuf::internal::kEmptyString) {
    hints_ = new ::std::string;
  }
  hints_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CltIPAndPortFilterPolicy::mutable_hints() {
  set_has_hints();
  if (hints_ == &::google::protobuf::internal::kEmptyString) {
    hints_ = new ::std::string;
  }
  return hints_;
}
inline ::std::string* CltIPAndPortFilterPolicy::release_hints() {
  clear_has_hints();
  if (hints_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hints_;
    hints_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 index = 19;
inline bool CltIPAndPortFilterPolicy::has_index() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CltIPAndPortFilterPolicy::set_has_index() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CltIPAndPortFilterPolicy::clear_has_index() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CltIPAndPortFilterPolicy::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 CltIPAndPortFilterPolicy::index() const {
  return index_;
}
inline void CltIPAndPortFilterPolicy::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 week_day_mask = 20;
inline bool CltIPAndPortFilterPolicy::has_week_day_mask() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CltIPAndPortFilterPolicy::set_has_week_day_mask() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CltIPAndPortFilterPolicy::clear_has_week_day_mask() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CltIPAndPortFilterPolicy::clear_week_day_mask() {
  week_day_mask_ = 0;
  clear_has_week_day_mask();
}
inline ::google::protobuf::int32 CltIPAndPortFilterPolicy::week_day_mask() const {
  return week_day_mask_;
}
inline void CltIPAndPortFilterPolicy::set_week_day_mask(::google::protobuf::int32 value) {
  set_has_week_day_mask();
  week_day_mask_ = value;
}

// -------------------------------------------------------------------

// CltIPAndPortFilterPolicyList

// repeated .isafetec.CltIPAndPortFilterPolicy list = 1;
inline int CltIPAndPortFilterPolicyList::list_size() const {
  return list_.size();
}
inline void CltIPAndPortFilterPolicyList::clear_list() {
  list_.Clear();
}
inline const ::isafetec::CltIPAndPortFilterPolicy& CltIPAndPortFilterPolicyList::list(int index) const {
  return list_.Get(index);
}
inline ::isafetec::CltIPAndPortFilterPolicy* CltIPAndPortFilterPolicyList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::isafetec::CltIPAndPortFilterPolicy* CltIPAndPortFilterPolicyList::list_ReleaseAt(int index) {
  return list_.ReleaseAt(index);
}
inline void CltIPAndPortFilterPolicyList::list_RemoveAt(int index) {
  list_.RemoveAt(index);
}
inline ::isafetec::CltIPAndPortFilterPolicy* CltIPAndPortFilterPolicyList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::CltIPAndPortFilterPolicy >&
CltIPAndPortFilterPolicyList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::CltIPAndPortFilterPolicy >*
CltIPAndPortFilterPolicyList::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// CltDeviceControlPolicy_FilterNode

// optional int32 filterby = 1;
inline bool CltDeviceControlPolicy_FilterNode::has_filterby() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CltDeviceControlPolicy_FilterNode::set_has_filterby() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CltDeviceControlPolicy_FilterNode::clear_has_filterby() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CltDeviceControlPolicy_FilterNode::clear_filterby() {
  filterby_ = 0;
  clear_has_filterby();
}
inline ::google::protobuf::int32 CltDeviceControlPolicy_FilterNode::filterby() const {
  return filterby_;
}
inline void CltDeviceControlPolicy_FilterNode::set_filterby(::google::protobuf::int32 value) {
  set_has_filterby();
  filterby_ = value;
}

// optional string device_class = 2;
inline bool CltDeviceControlPolicy_FilterNode::has_device_class() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CltDeviceControlPolicy_FilterNode::set_has_device_class() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CltDeviceControlPolicy_FilterNode::clear_has_device_class() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CltDeviceControlPolicy_FilterNode::clear_device_class() {
  if (device_class_ != &::google::protobuf::internal::kEmptyString) {
    device_class_->clear();
  }
  clear_has_device_class();
}
inline const ::std::string& CltDeviceControlPolicy_FilterNode::device_class() const {
  return *device_class_;
}
inline void CltDeviceControlPolicy_FilterNode::set_device_class(const ::std::string& value) {
  set_has_device_class();
  if (device_class_ == &::google::protobuf::internal::kEmptyString) {
    device_class_ = new ::std::string;
  }
  device_class_->assign(value);
}
inline void CltDeviceControlPolicy_FilterNode::set_device_class(const char* value) {
  set_has_device_class();
  if (device_class_ == &::google::protobuf::internal::kEmptyString) {
    device_class_ = new ::std::string;
  }
  device_class_->assign(value);
}
inline void CltDeviceControlPolicy_FilterNode::set_device_class(const char* value, size_t size) {
  set_has_device_class();
  if (device_class_ == &::google::protobuf::internal::kEmptyString) {
    device_class_ = new ::std::string;
  }
  device_class_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CltDeviceControlPolicy_FilterNode::mutable_device_class() {
  set_has_device_class();
  if (device_class_ == &::google::protobuf::internal::kEmptyString) {
    device_class_ = new ::std::string;
  }
  return device_class_;
}
inline ::std::string* CltDeviceControlPolicy_FilterNode::release_device_class() {
  clear_has_device_class();
  if (device_class_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_class_;
    device_class_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string device_interface = 3;
inline bool CltDeviceControlPolicy_FilterNode::has_device_interface() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CltDeviceControlPolicy_FilterNode::set_has_device_interface() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CltDeviceControlPolicy_FilterNode::clear_has_device_interface() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CltDeviceControlPolicy_FilterNode::clear_device_interface() {
  if (device_interface_ != &::google::protobuf::internal::kEmptyString) {
    device_interface_->clear();
  }
  clear_has_device_interface();
}
inline const ::std::string& CltDeviceControlPolicy_FilterNode::device_interface() const {
  return *device_interface_;
}
inline void CltDeviceControlPolicy_FilterNode::set_device_interface(const ::std::string& value) {
  set_has_device_interface();
  if (device_interface_ == &::google::protobuf::internal::kEmptyString) {
    device_interface_ = new ::std::string;
  }
  device_interface_->assign(value);
}
inline void CltDeviceControlPolicy_FilterNode::set_device_interface(const char* value) {
  set_has_device_interface();
  if (device_interface_ == &::google::protobuf::internal::kEmptyString) {
    device_interface_ = new ::std::string;
  }
  device_interface_->assign(value);
}
inline void CltDeviceControlPolicy_FilterNode::set_device_interface(const char* value, size_t size) {
  set_has_device_interface();
  if (device_interface_ == &::google::protobuf::internal::kEmptyString) {
    device_interface_ = new ::std::string;
  }
  device_interface_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CltDeviceControlPolicy_FilterNode::mutable_device_interface() {
  set_has_device_interface();
  if (device_interface_ == &::google::protobuf::internal::kEmptyString) {
    device_interface_ = new ::std::string;
  }
  return device_interface_;
}
inline ::std::string* CltDeviceControlPolicy_FilterNode::release_device_interface() {
  clear_has_device_interface();
  if (device_interface_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_interface_;
    device_interface_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string except_list = 4;
inline bool CltDeviceControlPolicy_FilterNode::has_except_list() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CltDeviceControlPolicy_FilterNode::set_has_except_list() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CltDeviceControlPolicy_FilterNode::clear_has_except_list() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CltDeviceControlPolicy_FilterNode::clear_except_list() {
  if (except_list_ != &::google::protobuf::internal::kEmptyString) {
    except_list_->clear();
  }
  clear_has_except_list();
}
inline const ::std::string& CltDeviceControlPolicy_FilterNode::except_list() const {
  return *except_list_;
}
inline void CltDeviceControlPolicy_FilterNode::set_except_list(const ::std::string& value) {
  set_has_except_list();
  if (except_list_ == &::google::protobuf::internal::kEmptyString) {
    except_list_ = new ::std::string;
  }
  except_list_->assign(value);
}
inline void CltDeviceControlPolicy_FilterNode::set_except_list(const char* value) {
  set_has_except_list();
  if (except_list_ == &::google::protobuf::internal::kEmptyString) {
    except_list_ = new ::std::string;
  }
  except_list_->assign(value);
}
inline void CltDeviceControlPolicy_FilterNode::set_except_list(const char* value, size_t size) {
  set_has_except_list();
  if (except_list_ == &::google::protobuf::internal::kEmptyString) {
    except_list_ = new ::std::string;
  }
  except_list_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CltDeviceControlPolicy_FilterNode::mutable_except_list() {
  set_has_except_list();
  if (except_list_ == &::google::protobuf::internal::kEmptyString) {
    except_list_ = new ::std::string;
  }
  return except_list_;
}
inline ::std::string* CltDeviceControlPolicy_FilterNode::release_except_list() {
  clear_has_except_list();
  if (except_list_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = except_list_;
    except_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 state = 5;
inline bool CltDeviceControlPolicy_FilterNode::has_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CltDeviceControlPolicy_FilterNode::set_has_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CltDeviceControlPolicy_FilterNode::clear_has_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CltDeviceControlPolicy_FilterNode::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 CltDeviceControlPolicy_FilterNode::state() const {
  return state_;
}
inline void CltDeviceControlPolicy_FilterNode::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// CltDeviceControlPolicy

// optional int32 id = 1;
inline bool CltDeviceControlPolicy::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CltDeviceControlPolicy::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CltDeviceControlPolicy::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CltDeviceControlPolicy::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 CltDeviceControlPolicy::id() const {
  return id_;
}
inline void CltDeviceControlPolicy::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 type = 2;
inline bool CltDeviceControlPolicy::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CltDeviceControlPolicy::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CltDeviceControlPolicy::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CltDeviceControlPolicy::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 CltDeviceControlPolicy::type() const {
  return type_;
}
inline void CltDeviceControlPolicy::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional double last_time = 3;
inline bool CltDeviceControlPolicy::has_last_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CltDeviceControlPolicy::set_has_last_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CltDeviceControlPolicy::clear_has_last_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CltDeviceControlPolicy::clear_last_time() {
  last_time_ = 0;
  clear_has_last_time();
}
inline double CltDeviceControlPolicy::last_time() const {
  return last_time_;
}
inline void CltDeviceControlPolicy::set_last_time(double value) {
  set_has_last_time();
  last_time_ = value;
}

// optional int32 inuse = 14;
inline bool CltDeviceControlPolicy::has_inuse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CltDeviceControlPolicy::set_has_inuse() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CltDeviceControlPolicy::clear_has_inuse() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CltDeviceControlPolicy::clear_inuse() {
  inuse_ = 0;
  clear_has_inuse();
}
inline ::google::protobuf::int32 CltDeviceControlPolicy::inuse() const {
  return inuse_;
}
inline void CltDeviceControlPolicy::set_inuse(::google::protobuf::int32 value) {
  set_has_inuse();
  inuse_ = value;
}

// optional .isafetec.FILTER_TYPE filter_type = 4;
inline bool CltDeviceControlPolicy::has_filter_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CltDeviceControlPolicy::set_has_filter_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CltDeviceControlPolicy::clear_has_filter_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CltDeviceControlPolicy::clear_filter_type() {
  filter_type_ = 0;
  clear_has_filter_type();
}
inline isafetec::FILTER_TYPE CltDeviceControlPolicy::filter_type() const {
  return static_cast< isafetec::FILTER_TYPE >(filter_type_);
}
inline void CltDeviceControlPolicy::set_filter_type(isafetec::FILTER_TYPE value) {
  GOOGLE_DCHECK(isafetec::FILTER_TYPE_IsValid(value));
  set_has_filter_type();
  filter_type_ = value;
}

// repeated .isafetec.CltDeviceControlPolicy.FilterNode filterlist = 5;
inline int CltDeviceControlPolicy::filterlist_size() const {
  return filterlist_.size();
}
inline void CltDeviceControlPolicy::clear_filterlist() {
  filterlist_.Clear();
}
inline const ::isafetec::CltDeviceControlPolicy_FilterNode& CltDeviceControlPolicy::filterlist(int index) const {
  return filterlist_.Get(index);
}
inline ::isafetec::CltDeviceControlPolicy_FilterNode* CltDeviceControlPolicy::mutable_filterlist(int index) {
  return filterlist_.Mutable(index);
}
inline ::isafetec::CltDeviceControlPolicy_FilterNode* CltDeviceControlPolicy::filterlist_ReleaseAt(int index) {
  return filterlist_.ReleaseAt(index);
}
inline void CltDeviceControlPolicy::filterlist_RemoveAt(int index) {
  filterlist_.RemoveAt(index);
}
inline ::isafetec::CltDeviceControlPolicy_FilterNode* CltDeviceControlPolicy::add_filterlist() {
  return filterlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::CltDeviceControlPolicy_FilterNode >&
CltDeviceControlPolicy::filterlist() const {
  return filterlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::CltDeviceControlPolicy_FilterNode >*
CltDeviceControlPolicy::mutable_filterlist() {
  return &filterlist_;
}

// optional .isafetec.TimeSpanList timelist = 6;
inline bool CltDeviceControlPolicy::has_timelist() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CltDeviceControlPolicy::set_has_timelist() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CltDeviceControlPolicy::clear_has_timelist() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CltDeviceControlPolicy::clear_timelist() {
  if (timelist_ != NULL) timelist_->::isafetec::TimeSpanList::Clear();
  clear_has_timelist();
}
inline const ::isafetec::TimeSpanList& CltDeviceControlPolicy::timelist() const {
  return timelist_ != NULL ? *timelist_ : *default_instance_->timelist_;
}
inline ::isafetec::TimeSpanList* CltDeviceControlPolicy::mutable_timelist() {
  set_has_timelist();
  if (timelist_ == NULL) timelist_ = new ::isafetec::TimeSpanList;
  return timelist_;
}
inline ::isafetec::TimeSpanList* CltDeviceControlPolicy::release_timelist() {
  clear_has_timelist();
  ::isafetec::TimeSpanList* temp = timelist_;
  timelist_ = NULL;
  return temp;
}

// optional .isafetec.FILTER_MODE filter_mode = 7;
inline bool CltDeviceControlPolicy::has_filter_mode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CltDeviceControlPolicy::set_has_filter_mode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CltDeviceControlPolicy::clear_has_filter_mode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CltDeviceControlPolicy::clear_filter_mode() {
  filter_mode_ = 0;
  clear_has_filter_mode();
}
inline isafetec::FILTER_MODE CltDeviceControlPolicy::filter_mode() const {
  return static_cast< isafetec::FILTER_MODE >(filter_mode_);
}
inline void CltDeviceControlPolicy::set_filter_mode(isafetec::FILTER_MODE value) {
  GOOGLE_DCHECK(isafetec::FILTER_MODE_IsValid(value));
  set_has_filter_mode();
  filter_mode_ = value;
}

// optional double usetimeF = 12;
inline bool CltDeviceControlPolicy::has_usetimef() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CltDeviceControlPolicy::set_has_usetimef() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CltDeviceControlPolicy::clear_has_usetimef() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CltDeviceControlPolicy::clear_usetimef() {
  usetimef_ = 0;
  clear_has_usetimef();
}
inline double CltDeviceControlPolicy::usetimef() const {
  return usetimef_;
}
inline void CltDeviceControlPolicy::set_usetimef(double value) {
  set_has_usetimef();
  usetimef_ = value;
}

// optional double usetimeE = 13;
inline bool CltDeviceControlPolicy::has_usetimee() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CltDeviceControlPolicy::set_has_usetimee() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CltDeviceControlPolicy::clear_has_usetimee() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CltDeviceControlPolicy::clear_usetimee() {
  usetimee_ = 0;
  clear_has_usetimee();
}
inline double CltDeviceControlPolicy::usetimee() const {
  return usetimee_;
}
inline void CltDeviceControlPolicy::set_usetimee(double value) {
  set_has_usetimee();
  usetimee_ = value;
}

// optional string hints = 15;
inline bool CltDeviceControlPolicy::has_hints() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CltDeviceControlPolicy::set_has_hints() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CltDeviceControlPolicy::clear_has_hints() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CltDeviceControlPolicy::clear_hints() {
  if (hints_ != &::google::protobuf::internal::kEmptyString) {
    hints_->clear();
  }
  clear_has_hints();
}
inline const ::std::string& CltDeviceControlPolicy::hints() const {
  return *hints_;
}
inline void CltDeviceControlPolicy::set_hints(const ::std::string& value) {
  set_has_hints();
  if (hints_ == &::google::protobuf::internal::kEmptyString) {
    hints_ = new ::std::string;
  }
  hints_->assign(value);
}
inline void CltDeviceControlPolicy::set_hints(const char* value) {
  set_has_hints();
  if (hints_ == &::google::protobuf::internal::kEmptyString) {
    hints_ = new ::std::string;
  }
  hints_->assign(value);
}
inline void CltDeviceControlPolicy::set_hints(const char* value, size_t size) {
  set_has_hints();
  if (hints_ == &::google::protobuf::internal::kEmptyString) {
    hints_ = new ::std::string;
  }
  hints_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CltDeviceControlPolicy::mutable_hints() {
  set_has_hints();
  if (hints_ == &::google::protobuf::internal::kEmptyString) {
    hints_ = new ::std::string;
  }
  return hints_;
}
inline ::std::string* CltDeviceControlPolicy::release_hints() {
  clear_has_hints();
  if (hints_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hints_;
    hints_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 index = 18;
inline bool CltDeviceControlPolicy::has_index() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CltDeviceControlPolicy::set_has_index() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CltDeviceControlPolicy::clear_has_index() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CltDeviceControlPolicy::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 CltDeviceControlPolicy::index() const {
  return index_;
}
inline void CltDeviceControlPolicy::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 week_day_mask = 19;
inline bool CltDeviceControlPolicy::has_week_day_mask() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CltDeviceControlPolicy::set_has_week_day_mask() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CltDeviceControlPolicy::clear_has_week_day_mask() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CltDeviceControlPolicy::clear_week_day_mask() {
  week_day_mask_ = 0;
  clear_has_week_day_mask();
}
inline ::google::protobuf::int32 CltDeviceControlPolicy::week_day_mask() const {
  return week_day_mask_;
}
inline void CltDeviceControlPolicy::set_week_day_mask(::google::protobuf::int32 value) {
  set_has_week_day_mask();
  week_day_mask_ = value;
}

// -------------------------------------------------------------------

// CltDeviceControlPolicyList

// repeated .isafetec.CltDeviceControlPolicy list = 1;
inline int CltDeviceControlPolicyList::list_size() const {
  return list_.size();
}
inline void CltDeviceControlPolicyList::clear_list() {
  list_.Clear();
}
inline const ::isafetec::CltDeviceControlPolicy& CltDeviceControlPolicyList::list(int index) const {
  return list_.Get(index);
}
inline ::isafetec::CltDeviceControlPolicy* CltDeviceControlPolicyList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::isafetec::CltDeviceControlPolicy* CltDeviceControlPolicyList::list_ReleaseAt(int index) {
  return list_.ReleaseAt(index);
}
inline void CltDeviceControlPolicyList::list_RemoveAt(int index) {
  list_.RemoveAt(index);
}
inline ::isafetec::CltDeviceControlPolicy* CltDeviceControlPolicyList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::CltDeviceControlPolicy >&
CltDeviceControlPolicyList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::CltDeviceControlPolicy >*
CltDeviceControlPolicyList::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// CltPrintControlPolicy_FilterNode

// optional string printer = 1;
inline bool CltPrintControlPolicy_FilterNode::has_printer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CltPrintControlPolicy_FilterNode::set_has_printer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CltPrintControlPolicy_FilterNode::clear_has_printer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CltPrintControlPolicy_FilterNode::clear_printer() {
  if (printer_ != &::google::protobuf::internal::kEmptyString) {
    printer_->clear();
  }
  clear_has_printer();
}
inline const ::std::string& CltPrintControlPolicy_FilterNode::printer() const {
  return *printer_;
}
inline void CltPrintControlPolicy_FilterNode::set_printer(const ::std::string& value) {
  set_has_printer();
  if (printer_ == &::google::protobuf::internal::kEmptyString) {
    printer_ = new ::std::string;
  }
  printer_->assign(value);
}
inline void CltPrintControlPolicy_FilterNode::set_printer(const char* value) {
  set_has_printer();
  if (printer_ == &::google::protobuf::internal::kEmptyString) {
    printer_ = new ::std::string;
  }
  printer_->assign(value);
}
inline void CltPrintControlPolicy_FilterNode::set_printer(const char* value, size_t size) {
  set_has_printer();
  if (printer_ == &::google::protobuf::internal::kEmptyString) {
    printer_ = new ::std::string;
  }
  printer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CltPrintControlPolicy_FilterNode::mutable_printer() {
  set_has_printer();
  if (printer_ == &::google::protobuf::internal::kEmptyString) {
    printer_ = new ::std::string;
  }
  return printer_;
}
inline ::std::string* CltPrintControlPolicy_FilterNode::release_printer() {
  clear_has_printer();
  if (printer_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = printer_;
    printer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .isafetec.PRINT_FLT_TYPE type = 2;
inline bool CltPrintControlPolicy_FilterNode::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CltPrintControlPolicy_FilterNode::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CltPrintControlPolicy_FilterNode::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CltPrintControlPolicy_FilterNode::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline isafetec::PRINT_FLT_TYPE CltPrintControlPolicy_FilterNode::type() const {
  return static_cast< isafetec::PRINT_FLT_TYPE >(type_);
}
inline void CltPrintControlPolicy_FilterNode::set_type(isafetec::PRINT_FLT_TYPE value) {
  GOOGLE_DCHECK(isafetec::PRINT_FLT_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string key_word = 3;
inline bool CltPrintControlPolicy_FilterNode::has_key_word() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CltPrintControlPolicy_FilterNode::set_has_key_word() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CltPrintControlPolicy_FilterNode::clear_has_key_word() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CltPrintControlPolicy_FilterNode::clear_key_word() {
  if (key_word_ != &::google::protobuf::internal::kEmptyString) {
    key_word_->clear();
  }
  clear_has_key_word();
}
inline const ::std::string& CltPrintControlPolicy_FilterNode::key_word() const {
  return *key_word_;
}
inline void CltPrintControlPolicy_FilterNode::set_key_word(const ::std::string& value) {
  set_has_key_word();
  if (key_word_ == &::google::protobuf::internal::kEmptyString) {
    key_word_ = new ::std::string;
  }
  key_word_->assign(value);
}
inline void CltPrintControlPolicy_FilterNode::set_key_word(const char* value) {
  set_has_key_word();
  if (key_word_ == &::google::protobuf::internal::kEmptyString) {
    key_word_ = new ::std::string;
  }
  key_word_->assign(value);
}
inline void CltPrintControlPolicy_FilterNode::set_key_word(const char* value, size_t size) {
  set_has_key_word();
  if (key_word_ == &::google::protobuf::internal::kEmptyString) {
    key_word_ = new ::std::string;
  }
  key_word_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CltPrintControlPolicy_FilterNode::mutable_key_word() {
  set_has_key_word();
  if (key_word_ == &::google::protobuf::internal::kEmptyString) {
    key_word_ = new ::std::string;
  }
  return key_word_;
}
inline ::std::string* CltPrintControlPolicy_FilterNode::release_key_word() {
  clear_has_key_word();
  if (key_word_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_word_;
    key_word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CltPrintControlPolicy

// optional int32 id = 1;
inline bool CltPrintControlPolicy::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CltPrintControlPolicy::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CltPrintControlPolicy::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CltPrintControlPolicy::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 CltPrintControlPolicy::id() const {
  return id_;
}
inline void CltPrintControlPolicy::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 type = 2;
inline bool CltPrintControlPolicy::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CltPrintControlPolicy::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CltPrintControlPolicy::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CltPrintControlPolicy::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 CltPrintControlPolicy::type() const {
  return type_;
}
inline void CltPrintControlPolicy::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional double last_time = 3;
inline bool CltPrintControlPolicy::has_last_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CltPrintControlPolicy::set_has_last_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CltPrintControlPolicy::clear_has_last_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CltPrintControlPolicy::clear_last_time() {
  last_time_ = 0;
  clear_has_last_time();
}
inline double CltPrintControlPolicy::last_time() const {
  return last_time_;
}
inline void CltPrintControlPolicy::set_last_time(double value) {
  set_has_last_time();
  last_time_ = value;
}

// optional int32 inuse = 15;
inline bool CltPrintControlPolicy::has_inuse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CltPrintControlPolicy::set_has_inuse() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CltPrintControlPolicy::clear_has_inuse() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CltPrintControlPolicy::clear_inuse() {
  inuse_ = 0;
  clear_has_inuse();
}
inline ::google::protobuf::int32 CltPrintControlPolicy::inuse() const {
  return inuse_;
}
inline void CltPrintControlPolicy::set_inuse(::google::protobuf::int32 value) {
  set_has_inuse();
  inuse_ = value;
}

// optional .isafetec.FILTER_TYPE filter_type = 4;
inline bool CltPrintControlPolicy::has_filter_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CltPrintControlPolicy::set_has_filter_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CltPrintControlPolicy::clear_has_filter_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CltPrintControlPolicy::clear_filter_type() {
  filter_type_ = 0;
  clear_has_filter_type();
}
inline isafetec::FILTER_TYPE CltPrintControlPolicy::filter_type() const {
  return static_cast< isafetec::FILTER_TYPE >(filter_type_);
}
inline void CltPrintControlPolicy::set_filter_type(isafetec::FILTER_TYPE value) {
  GOOGLE_DCHECK(isafetec::FILTER_TYPE_IsValid(value));
  set_has_filter_type();
  filter_type_ = value;
}

// optional double usetimeF = 5;
inline bool CltPrintControlPolicy::has_usetimef() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CltPrintControlPolicy::set_has_usetimef() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CltPrintControlPolicy::clear_has_usetimef() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CltPrintControlPolicy::clear_usetimef() {
  usetimef_ = 0;
  clear_has_usetimef();
}
inline double CltPrintControlPolicy::usetimef() const {
  return usetimef_;
}
inline void CltPrintControlPolicy::set_usetimef(double value) {
  set_has_usetimef();
  usetimef_ = value;
}

// optional double usetimeE = 6;
inline bool CltPrintControlPolicy::has_usetimee() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CltPrintControlPolicy::set_has_usetimee() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CltPrintControlPolicy::clear_has_usetimee() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CltPrintControlPolicy::clear_usetimee() {
  usetimee_ = 0;
  clear_has_usetimee();
}
inline double CltPrintControlPolicy::usetimee() const {
  return usetimee_;
}
inline void CltPrintControlPolicy::set_usetimee(double value) {
  set_has_usetimee();
  usetimee_ = value;
}

// repeated .isafetec.CltPrintControlPolicy.FilterNode filterlist = 7;
inline int CltPrintControlPolicy::filterlist_size() const {
  return filterlist_.size();
}
inline void CltPrintControlPolicy::clear_filterlist() {
  filterlist_.Clear();
}
inline const ::isafetec::CltPrintControlPolicy_FilterNode& CltPrintControlPolicy::filterlist(int index) const {
  return filterlist_.Get(index);
}
inline ::isafetec::CltPrintControlPolicy_FilterNode* CltPrintControlPolicy::mutable_filterlist(int index) {
  return filterlist_.Mutable(index);
}
inline ::isafetec::CltPrintControlPolicy_FilterNode* CltPrintControlPolicy::filterlist_ReleaseAt(int index) {
  return filterlist_.ReleaseAt(index);
}
inline void CltPrintControlPolicy::filterlist_RemoveAt(int index) {
  filterlist_.RemoveAt(index);
}
inline ::isafetec::CltPrintControlPolicy_FilterNode* CltPrintControlPolicy::add_filterlist() {
  return filterlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::CltPrintControlPolicy_FilterNode >&
CltPrintControlPolicy::filterlist() const {
  return filterlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::CltPrintControlPolicy_FilterNode >*
CltPrintControlPolicy::mutable_filterlist() {
  return &filterlist_;
}

// optional .isafetec.TimeSpanList timelist = 8;
inline bool CltPrintControlPolicy::has_timelist() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CltPrintControlPolicy::set_has_timelist() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CltPrintControlPolicy::clear_has_timelist() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CltPrintControlPolicy::clear_timelist() {
  if (timelist_ != NULL) timelist_->::isafetec::TimeSpanList::Clear();
  clear_has_timelist();
}
inline const ::isafetec::TimeSpanList& CltPrintControlPolicy::timelist() const {
  return timelist_ != NULL ? *timelist_ : *default_instance_->timelist_;
}
inline ::isafetec::TimeSpanList* CltPrintControlPolicy::mutable_timelist() {
  set_has_timelist();
  if (timelist_ == NULL) timelist_ = new ::isafetec::TimeSpanList;
  return timelist_;
}
inline ::isafetec::TimeSpanList* CltPrintControlPolicy::release_timelist() {
  clear_has_timelist();
  ::isafetec::TimeSpanList* temp = timelist_;
  timelist_ = NULL;
  return temp;
}

// optional .isafetec.FILTER_MODE filter_mode = 9;
inline bool CltPrintControlPolicy::has_filter_mode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CltPrintControlPolicy::set_has_filter_mode() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CltPrintControlPolicy::clear_has_filter_mode() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CltPrintControlPolicy::clear_filter_mode() {
  filter_mode_ = 0;
  clear_has_filter_mode();
}
inline isafetec::FILTER_MODE CltPrintControlPolicy::filter_mode() const {
  return static_cast< isafetec::FILTER_MODE >(filter_mode_);
}
inline void CltPrintControlPolicy::set_filter_mode(isafetec::FILTER_MODE value) {
  GOOGLE_DCHECK(isafetec::FILTER_MODE_IsValid(value));
  set_has_filter_mode();
  filter_mode_ = value;
}

// optional string hints = 10;
inline bool CltPrintControlPolicy::has_hints() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CltPrintControlPolicy::set_has_hints() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CltPrintControlPolicy::clear_has_hints() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CltPrintControlPolicy::clear_hints() {
  if (hints_ != &::google::protobuf::internal::kEmptyString) {
    hints_->clear();
  }
  clear_has_hints();
}
inline const ::std::string& CltPrintControlPolicy::hints() const {
  return *hints_;
}
inline void CltPrintControlPolicy::set_hints(const ::std::string& value) {
  set_has_hints();
  if (hints_ == &::google::protobuf::internal::kEmptyString) {
    hints_ = new ::std::string;
  }
  hints_->assign(value);
}
inline void CltPrintControlPolicy::set_hints(const char* value) {
  set_has_hints();
  if (hints_ == &::google::protobuf::internal::kEmptyString) {
    hints_ = new ::std::string;
  }
  hints_->assign(value);
}
inline void CltPrintControlPolicy::set_hints(const char* value, size_t size) {
  set_has_hints();
  if (hints_ == &::google::protobuf::internal::kEmptyString) {
    hints_ = new ::std::string;
  }
  hints_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CltPrintControlPolicy::mutable_hints() {
  set_has_hints();
  if (hints_ == &::google::protobuf::internal::kEmptyString) {
    hints_ = new ::std::string;
  }
  return hints_;
}
inline ::std::string* CltPrintControlPolicy::release_hints() {
  clear_has_hints();
  if (hints_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hints_;
    hints_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 index = 11;
inline bool CltPrintControlPolicy::has_index() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CltPrintControlPolicy::set_has_index() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CltPrintControlPolicy::clear_has_index() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CltPrintControlPolicy::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 CltPrintControlPolicy::index() const {
  return index_;
}
inline void CltPrintControlPolicy::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 week_day_mask = 12;
inline bool CltPrintControlPolicy::has_week_day_mask() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CltPrintControlPolicy::set_has_week_day_mask() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CltPrintControlPolicy::clear_has_week_day_mask() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CltPrintControlPolicy::clear_week_day_mask() {
  week_day_mask_ = 0;
  clear_has_week_day_mask();
}
inline ::google::protobuf::int32 CltPrintControlPolicy::week_day_mask() const {
  return week_day_mask_;
}
inline void CltPrintControlPolicy::set_week_day_mask(::google::protobuf::int32 value) {
  set_has_week_day_mask();
  week_day_mask_ = value;
}

// -------------------------------------------------------------------

// CltPrintControlPolicyList

// repeated .isafetec.CltPrintControlPolicy list = 1;
inline int CltPrintControlPolicyList::list_size() const {
  return list_.size();
}
inline void CltPrintControlPolicyList::clear_list() {
  list_.Clear();
}
inline const ::isafetec::CltPrintControlPolicy& CltPrintControlPolicyList::list(int index) const {
  return list_.Get(index);
}
inline ::isafetec::CltPrintControlPolicy* CltPrintControlPolicyList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::isafetec::CltPrintControlPolicy* CltPrintControlPolicyList::list_ReleaseAt(int index) {
  return list_.ReleaseAt(index);
}
inline void CltPrintControlPolicyList::list_RemoveAt(int index) {
  list_.RemoveAt(index);
}
inline ::isafetec::CltPrintControlPolicy* CltPrintControlPolicyList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::CltPrintControlPolicy >&
CltPrintControlPolicyList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::CltPrintControlPolicy >*
CltPrintControlPolicyList::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// CltFileControlPolicy_FilterNode

// optional string process = 1;
inline bool CltFileControlPolicy_FilterNode::has_process() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CltFileControlPolicy_FilterNode::set_has_process() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CltFileControlPolicy_FilterNode::clear_has_process() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CltFileControlPolicy_FilterNode::clear_process() {
  if (process_ != &::google::protobuf::internal::kEmptyString) {
    process_->clear();
  }
  clear_has_process();
}
inline const ::std::string& CltFileControlPolicy_FilterNode::process() const {
  return *process_;
}
inline void CltFileControlPolicy_FilterNode::set_process(const ::std::string& value) {
  set_has_process();
  if (process_ == &::google::protobuf::internal::kEmptyString) {
    process_ = new ::std::string;
  }
  process_->assign(value);
}
inline void CltFileControlPolicy_FilterNode::set_process(const char* value) {
  set_has_process();
  if (process_ == &::google::protobuf::internal::kEmptyString) {
    process_ = new ::std::string;
  }
  process_->assign(value);
}
inline void CltFileControlPolicy_FilterNode::set_process(const char* value, size_t size) {
  set_has_process();
  if (process_ == &::google::protobuf::internal::kEmptyString) {
    process_ = new ::std::string;
  }
  process_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CltFileControlPolicy_FilterNode::mutable_process() {
  set_has_process();
  if (process_ == &::google::protobuf::internal::kEmptyString) {
    process_ = new ::std::string;
  }
  return process_;
}
inline ::std::string* CltFileControlPolicy_FilterNode::release_process() {
  clear_has_process();
  if (process_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = process_;
    process_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string key_word = 2;
inline bool CltFileControlPolicy_FilterNode::has_key_word() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CltFileControlPolicy_FilterNode::set_has_key_word() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CltFileControlPolicy_FilterNode::clear_has_key_word() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CltFileControlPolicy_FilterNode::clear_key_word() {
  if (key_word_ != &::google::protobuf::internal::kEmptyString) {
    key_word_->clear();
  }
  clear_has_key_word();
}
inline const ::std::string& CltFileControlPolicy_FilterNode::key_word() const {
  return *key_word_;
}
inline void CltFileControlPolicy_FilterNode::set_key_word(const ::std::string& value) {
  set_has_key_word();
  if (key_word_ == &::google::protobuf::internal::kEmptyString) {
    key_word_ = new ::std::string;
  }
  key_word_->assign(value);
}
inline void CltFileControlPolicy_FilterNode::set_key_word(const char* value) {
  set_has_key_word();
  if (key_word_ == &::google::protobuf::internal::kEmptyString) {
    key_word_ = new ::std::string;
  }
  key_word_->assign(value);
}
inline void CltFileControlPolicy_FilterNode::set_key_word(const char* value, size_t size) {
  set_has_key_word();
  if (key_word_ == &::google::protobuf::internal::kEmptyString) {
    key_word_ = new ::std::string;
  }
  key_word_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CltFileControlPolicy_FilterNode::mutable_key_word() {
  set_has_key_word();
  if (key_word_ == &::google::protobuf::internal::kEmptyString) {
    key_word_ = new ::std::string;
  }
  return key_word_;
}
inline ::std::string* CltFileControlPolicy_FilterNode::release_key_word() {
  clear_has_key_word();
  if (key_word_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_word_;
    key_word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .isafetec.FILE_FLT_TYPE type = 3;
inline bool CltFileControlPolicy_FilterNode::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CltFileControlPolicy_FilterNode::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CltFileControlPolicy_FilterNode::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CltFileControlPolicy_FilterNode::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline isafetec::FILE_FLT_TYPE CltFileControlPolicy_FilterNode::type() const {
  return static_cast< isafetec::FILE_FLT_TYPE >(type_);
}
inline void CltFileControlPolicy_FilterNode::set_type(isafetec::FILE_FLT_TYPE value) {
  GOOGLE_DCHECK(isafetec::FILE_FLT_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .isafetec.MODE_TYPE modetype = 4;
inline bool CltFileControlPolicy_FilterNode::has_modetype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CltFileControlPolicy_FilterNode::set_has_modetype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CltFileControlPolicy_FilterNode::clear_has_modetype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CltFileControlPolicy_FilterNode::clear_modetype() {
  modetype_ = 0;
  clear_has_modetype();
}
inline isafetec::MODE_TYPE CltFileControlPolicy_FilterNode::modetype() const {
  return static_cast< isafetec::MODE_TYPE >(modetype_);
}
inline void CltFileControlPolicy_FilterNode::set_modetype(isafetec::MODE_TYPE value) {
  GOOGLE_DCHECK(isafetec::MODE_TYPE_IsValid(value));
  set_has_modetype();
  modetype_ = value;
}

// -------------------------------------------------------------------

// CltFileControlPolicy

// optional int32 id = 1;
inline bool CltFileControlPolicy::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CltFileControlPolicy::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CltFileControlPolicy::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CltFileControlPolicy::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 CltFileControlPolicy::id() const {
  return id_;
}
inline void CltFileControlPolicy::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 type = 2;
inline bool CltFileControlPolicy::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CltFileControlPolicy::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CltFileControlPolicy::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CltFileControlPolicy::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 CltFileControlPolicy::type() const {
  return type_;
}
inline void CltFileControlPolicy::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional double last_time = 3;
inline bool CltFileControlPolicy::has_last_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CltFileControlPolicy::set_has_last_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CltFileControlPolicy::clear_has_last_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CltFileControlPolicy::clear_last_time() {
  last_time_ = 0;
  clear_has_last_time();
}
inline double CltFileControlPolicy::last_time() const {
  return last_time_;
}
inline void CltFileControlPolicy::set_last_time(double value) {
  set_has_last_time();
  last_time_ = value;
}

// optional int32 inuse = 16;
inline bool CltFileControlPolicy::has_inuse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CltFileControlPolicy::set_has_inuse() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CltFileControlPolicy::clear_has_inuse() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CltFileControlPolicy::clear_inuse() {
  inuse_ = 0;
  clear_has_inuse();
}
inline ::google::protobuf::int32 CltFileControlPolicy::inuse() const {
  return inuse_;
}
inline void CltFileControlPolicy::set_inuse(::google::protobuf::int32 value) {
  set_has_inuse();
  inuse_ = value;
}

// optional .isafetec.FILTER_TYPE filter_type = 4;
inline bool CltFileControlPolicy::has_filter_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CltFileControlPolicy::set_has_filter_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CltFileControlPolicy::clear_has_filter_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CltFileControlPolicy::clear_filter_type() {
  filter_type_ = 0;
  clear_has_filter_type();
}
inline isafetec::FILTER_TYPE CltFileControlPolicy::filter_type() const {
  return static_cast< isafetec::FILTER_TYPE >(filter_type_);
}
inline void CltFileControlPolicy::set_filter_type(isafetec::FILTER_TYPE value) {
  GOOGLE_DCHECK(isafetec::FILTER_TYPE_IsValid(value));
  set_has_filter_type();
  filter_type_ = value;
}

// repeated .isafetec.CltFileControlPolicy.FilterNode filterlist = 5;
inline int CltFileControlPolicy::filterlist_size() const {
  return filterlist_.size();
}
inline void CltFileControlPolicy::clear_filterlist() {
  filterlist_.Clear();
}
inline const ::isafetec::CltFileControlPolicy_FilterNode& CltFileControlPolicy::filterlist(int index) const {
  return filterlist_.Get(index);
}
inline ::isafetec::CltFileControlPolicy_FilterNode* CltFileControlPolicy::mutable_filterlist(int index) {
  return filterlist_.Mutable(index);
}
inline ::isafetec::CltFileControlPolicy_FilterNode* CltFileControlPolicy::filterlist_ReleaseAt(int index) {
  return filterlist_.ReleaseAt(index);
}
inline void CltFileControlPolicy::filterlist_RemoveAt(int index) {
  filterlist_.RemoveAt(index);
}
inline ::isafetec::CltFileControlPolicy_FilterNode* CltFileControlPolicy::add_filterlist() {
  return filterlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::CltFileControlPolicy_FilterNode >&
CltFileControlPolicy::filterlist() const {
  return filterlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::CltFileControlPolicy_FilterNode >*
CltFileControlPolicy::mutable_filterlist() {
  return &filterlist_;
}

// optional .isafetec.TimeSpanList timelist = 6;
inline bool CltFileControlPolicy::has_timelist() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CltFileControlPolicy::set_has_timelist() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CltFileControlPolicy::clear_has_timelist() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CltFileControlPolicy::clear_timelist() {
  if (timelist_ != NULL) timelist_->::isafetec::TimeSpanList::Clear();
  clear_has_timelist();
}
inline const ::isafetec::TimeSpanList& CltFileControlPolicy::timelist() const {
  return timelist_ != NULL ? *timelist_ : *default_instance_->timelist_;
}
inline ::isafetec::TimeSpanList* CltFileControlPolicy::mutable_timelist() {
  set_has_timelist();
  if (timelist_ == NULL) timelist_ = new ::isafetec::TimeSpanList;
  return timelist_;
}
inline ::isafetec::TimeSpanList* CltFileControlPolicy::release_timelist() {
  clear_has_timelist();
  ::isafetec::TimeSpanList* temp = timelist_;
  timelist_ = NULL;
  return temp;
}

// optional .isafetec.FILTER_MODE filter_mode = 7;
inline bool CltFileControlPolicy::has_filter_mode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CltFileControlPolicy::set_has_filter_mode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CltFileControlPolicy::clear_has_filter_mode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CltFileControlPolicy::clear_filter_mode() {
  filter_mode_ = 0;
  clear_has_filter_mode();
}
inline isafetec::FILTER_MODE CltFileControlPolicy::filter_mode() const {
  return static_cast< isafetec::FILTER_MODE >(filter_mode_);
}
inline void CltFileControlPolicy::set_filter_mode(isafetec::FILTER_MODE value) {
  GOOGLE_DCHECK(isafetec::FILTER_MODE_IsValid(value));
  set_has_filter_mode();
  filter_mode_ = value;
}

// optional double usetimeF = 9;
inline bool CltFileControlPolicy::has_usetimef() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CltFileControlPolicy::set_has_usetimef() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CltFileControlPolicy::clear_has_usetimef() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CltFileControlPolicy::clear_usetimef() {
  usetimef_ = 0;
  clear_has_usetimef();
}
inline double CltFileControlPolicy::usetimef() const {
  return usetimef_;
}
inline void CltFileControlPolicy::set_usetimef(double value) {
  set_has_usetimef();
  usetimef_ = value;
}

// optional double usetimeE = 10;
inline bool CltFileControlPolicy::has_usetimee() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CltFileControlPolicy::set_has_usetimee() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CltFileControlPolicy::clear_has_usetimee() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CltFileControlPolicy::clear_usetimee() {
  usetimee_ = 0;
  clear_has_usetimee();
}
inline double CltFileControlPolicy::usetimee() const {
  return usetimee_;
}
inline void CltFileControlPolicy::set_usetimee(double value) {
  set_has_usetimee();
  usetimee_ = value;
}

// optional string hints = 11;
inline bool CltFileControlPolicy::has_hints() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CltFileControlPolicy::set_has_hints() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CltFileControlPolicy::clear_has_hints() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CltFileControlPolicy::clear_hints() {
  if (hints_ != &::google::protobuf::internal::kEmptyString) {
    hints_->clear();
  }
  clear_has_hints();
}
inline const ::std::string& CltFileControlPolicy::hints() const {
  return *hints_;
}
inline void CltFileControlPolicy::set_hints(const ::std::string& value) {
  set_has_hints();
  if (hints_ == &::google::protobuf::internal::kEmptyString) {
    hints_ = new ::std::string;
  }
  hints_->assign(value);
}
inline void CltFileControlPolicy::set_hints(const char* value) {
  set_has_hints();
  if (hints_ == &::google::protobuf::internal::kEmptyString) {
    hints_ = new ::std::string;
  }
  hints_->assign(value);
}
inline void CltFileControlPolicy::set_hints(const char* value, size_t size) {
  set_has_hints();
  if (hints_ == &::google::protobuf::internal::kEmptyString) {
    hints_ = new ::std::string;
  }
  hints_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CltFileControlPolicy::mutable_hints() {
  set_has_hints();
  if (hints_ == &::google::protobuf::internal::kEmptyString) {
    hints_ = new ::std::string;
  }
  return hints_;
}
inline ::std::string* CltFileControlPolicy::release_hints() {
  clear_has_hints();
  if (hints_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hints_;
    hints_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string isinherit = 12;
inline bool CltFileControlPolicy::has_isinherit() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CltFileControlPolicy::set_has_isinherit() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CltFileControlPolicy::clear_has_isinherit() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CltFileControlPolicy::clear_isinherit() {
  if (isinherit_ != &::google::protobuf::internal::kEmptyString) {
    isinherit_->clear();
  }
  clear_has_isinherit();
}
inline const ::std::string& CltFileControlPolicy::isinherit() const {
  return *isinherit_;
}
inline void CltFileControlPolicy::set_isinherit(const ::std::string& value) {
  set_has_isinherit();
  if (isinherit_ == &::google::protobuf::internal::kEmptyString) {
    isinherit_ = new ::std::string;
  }
  isinherit_->assign(value);
}
inline void CltFileControlPolicy::set_isinherit(const char* value) {
  set_has_isinherit();
  if (isinherit_ == &::google::protobuf::internal::kEmptyString) {
    isinherit_ = new ::std::string;
  }
  isinherit_->assign(value);
}
inline void CltFileControlPolicy::set_isinherit(const char* value, size_t size) {
  set_has_isinherit();
  if (isinherit_ == &::google::protobuf::internal::kEmptyString) {
    isinherit_ = new ::std::string;
  }
  isinherit_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CltFileControlPolicy::mutable_isinherit() {
  set_has_isinherit();
  if (isinherit_ == &::google::protobuf::internal::kEmptyString) {
    isinherit_ = new ::std::string;
  }
  return isinherit_;
}
inline ::std::string* CltFileControlPolicy::release_isinherit() {
  clear_has_isinherit();
  if (isinherit_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = isinherit_;
    isinherit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 allowedinherit = 13;
inline bool CltFileControlPolicy::has_allowedinherit() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CltFileControlPolicy::set_has_allowedinherit() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CltFileControlPolicy::clear_has_allowedinherit() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CltFileControlPolicy::clear_allowedinherit() {
  allowedinherit_ = 0;
  clear_has_allowedinherit();
}
inline ::google::protobuf::int32 CltFileControlPolicy::allowedinherit() const {
  return allowedinherit_;
}
inline void CltFileControlPolicy::set_allowedinherit(::google::protobuf::int32 value) {
  set_has_allowedinherit();
  allowedinherit_ = value;
}

// optional int32 index = 14;
inline bool CltFileControlPolicy::has_index() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CltFileControlPolicy::set_has_index() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CltFileControlPolicy::clear_has_index() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CltFileControlPolicy::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 CltFileControlPolicy::index() const {
  return index_;
}
inline void CltFileControlPolicy::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 week_day_mask = 15;
inline bool CltFileControlPolicy::has_week_day_mask() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CltFileControlPolicy::set_has_week_day_mask() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CltFileControlPolicy::clear_has_week_day_mask() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CltFileControlPolicy::clear_week_day_mask() {
  week_day_mask_ = 0;
  clear_has_week_day_mask();
}
inline ::google::protobuf::int32 CltFileControlPolicy::week_day_mask() const {
  return week_day_mask_;
}
inline void CltFileControlPolicy::set_week_day_mask(::google::protobuf::int32 value) {
  set_has_week_day_mask();
  week_day_mask_ = value;
}

// -------------------------------------------------------------------

// CltFileControlPolicyList

// repeated .isafetec.CltFileControlPolicy list = 1;
inline int CltFileControlPolicyList::list_size() const {
  return list_.size();
}
inline void CltFileControlPolicyList::clear_list() {
  list_.Clear();
}
inline const ::isafetec::CltFileControlPolicy& CltFileControlPolicyList::list(int index) const {
  return list_.Get(index);
}
inline ::isafetec::CltFileControlPolicy* CltFileControlPolicyList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::isafetec::CltFileControlPolicy* CltFileControlPolicyList::list_ReleaseAt(int index) {
  return list_.ReleaseAt(index);
}
inline void CltFileControlPolicyList::list_RemoveAt(int index) {
  list_.RemoveAt(index);
}
inline ::isafetec::CltFileControlPolicy* CltFileControlPolicyList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::CltFileControlPolicy >&
CltFileControlPolicyList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::CltFileControlPolicy >*
CltFileControlPolicyList::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// CltSystemControlPolicy_FilterNode

// optional int32 state = 1;
inline bool CltSystemControlPolicy_FilterNode::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CltSystemControlPolicy_FilterNode::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CltSystemControlPolicy_FilterNode::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CltSystemControlPolicy_FilterNode::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 CltSystemControlPolicy_FilterNode::state() const {
  return state_;
}
inline void CltSystemControlPolicy_FilterNode::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional string code = 2;
inline bool CltSystemControlPolicy_FilterNode::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CltSystemControlPolicy_FilterNode::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CltSystemControlPolicy_FilterNode::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CltSystemControlPolicy_FilterNode::clear_code() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& CltSystemControlPolicy_FilterNode::code() const {
  return *code_;
}
inline void CltSystemControlPolicy_FilterNode::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void CltSystemControlPolicy_FilterNode::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void CltSystemControlPolicy_FilterNode::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CltSystemControlPolicy_FilterNode::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  return code_;
}
inline ::std::string* CltSystemControlPolicy_FilterNode::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CltSystemControlPolicy

// optional int32 id = 1;
inline bool CltSystemControlPolicy::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CltSystemControlPolicy::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CltSystemControlPolicy::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CltSystemControlPolicy::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 CltSystemControlPolicy::id() const {
  return id_;
}
inline void CltSystemControlPolicy::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 type = 11;
inline bool CltSystemControlPolicy::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CltSystemControlPolicy::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CltSystemControlPolicy::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CltSystemControlPolicy::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 CltSystemControlPolicy::type() const {
  return type_;
}
inline void CltSystemControlPolicy::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional double last_time = 12;
inline bool CltSystemControlPolicy::has_last_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CltSystemControlPolicy::set_has_last_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CltSystemControlPolicy::clear_has_last_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CltSystemControlPolicy::clear_last_time() {
  last_time_ = 0;
  clear_has_last_time();
}
inline double CltSystemControlPolicy::last_time() const {
  return last_time_;
}
inline void CltSystemControlPolicy::set_last_time(double value) {
  set_has_last_time();
  last_time_ = value;
}

// optional int32 inuse = 15;
inline bool CltSystemControlPolicy::has_inuse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CltSystemControlPolicy::set_has_inuse() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CltSystemControlPolicy::clear_has_inuse() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CltSystemControlPolicy::clear_inuse() {
  inuse_ = 0;
  clear_has_inuse();
}
inline ::google::protobuf::int32 CltSystemControlPolicy::inuse() const {
  return inuse_;
}
inline void CltSystemControlPolicy::set_inuse(::google::protobuf::int32 value) {
  set_has_inuse();
  inuse_ = value;
}

// optional .isafetec.FILTER_TYPE filter_type = 4;
inline bool CltSystemControlPolicy::has_filter_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CltSystemControlPolicy::set_has_filter_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CltSystemControlPolicy::clear_has_filter_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CltSystemControlPolicy::clear_filter_type() {
  filter_type_ = 0;
  clear_has_filter_type();
}
inline isafetec::FILTER_TYPE CltSystemControlPolicy::filter_type() const {
  return static_cast< isafetec::FILTER_TYPE >(filter_type_);
}
inline void CltSystemControlPolicy::set_filter_type(isafetec::FILTER_TYPE value) {
  GOOGLE_DCHECK(isafetec::FILTER_TYPE_IsValid(value));
  set_has_filter_type();
  filter_type_ = value;
}

// optional double usetimeF = 5;
inline bool CltSystemControlPolicy::has_usetimef() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CltSystemControlPolicy::set_has_usetimef() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CltSystemControlPolicy::clear_has_usetimef() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CltSystemControlPolicy::clear_usetimef() {
  usetimef_ = 0;
  clear_has_usetimef();
}
inline double CltSystemControlPolicy::usetimef() const {
  return usetimef_;
}
inline void CltSystemControlPolicy::set_usetimef(double value) {
  set_has_usetimef();
  usetimef_ = value;
}

// optional double usetimeE = 6;
inline bool CltSystemControlPolicy::has_usetimee() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CltSystemControlPolicy::set_has_usetimee() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CltSystemControlPolicy::clear_has_usetimee() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CltSystemControlPolicy::clear_usetimee() {
  usetimee_ = 0;
  clear_has_usetimee();
}
inline double CltSystemControlPolicy::usetimee() const {
  return usetimee_;
}
inline void CltSystemControlPolicy::set_usetimee(double value) {
  set_has_usetimee();
  usetimee_ = value;
}

// repeated .isafetec.CltSystemControlPolicy.FilterNode filterlist = 7;
inline int CltSystemControlPolicy::filterlist_size() const {
  return filterlist_.size();
}
inline void CltSystemControlPolicy::clear_filterlist() {
  filterlist_.Clear();
}
inline const ::isafetec::CltSystemControlPolicy_FilterNode& CltSystemControlPolicy::filterlist(int index) const {
  return filterlist_.Get(index);
}
inline ::isafetec::CltSystemControlPolicy_FilterNode* CltSystemControlPolicy::mutable_filterlist(int index) {
  return filterlist_.Mutable(index);
}
inline ::isafetec::CltSystemControlPolicy_FilterNode* CltSystemControlPolicy::filterlist_ReleaseAt(int index) {
  return filterlist_.ReleaseAt(index);
}
inline void CltSystemControlPolicy::filterlist_RemoveAt(int index) {
  filterlist_.RemoveAt(index);
}
inline ::isafetec::CltSystemControlPolicy_FilterNode* CltSystemControlPolicy::add_filterlist() {
  return filterlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::CltSystemControlPolicy_FilterNode >&
CltSystemControlPolicy::filterlist() const {
  return filterlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::CltSystemControlPolicy_FilterNode >*
CltSystemControlPolicy::mutable_filterlist() {
  return &filterlist_;
}

// optional .isafetec.TimeSpanList timelist = 8;
inline bool CltSystemControlPolicy::has_timelist() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CltSystemControlPolicy::set_has_timelist() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CltSystemControlPolicy::clear_has_timelist() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CltSystemControlPolicy::clear_timelist() {
  if (timelist_ != NULL) timelist_->::isafetec::TimeSpanList::Clear();
  clear_has_timelist();
}
inline const ::isafetec::TimeSpanList& CltSystemControlPolicy::timelist() const {
  return timelist_ != NULL ? *timelist_ : *default_instance_->timelist_;
}
inline ::isafetec::TimeSpanList* CltSystemControlPolicy::mutable_timelist() {
  set_has_timelist();
  if (timelist_ == NULL) timelist_ = new ::isafetec::TimeSpanList;
  return timelist_;
}
inline ::isafetec::TimeSpanList* CltSystemControlPolicy::release_timelist() {
  clear_has_timelist();
  ::isafetec::TimeSpanList* temp = timelist_;
  timelist_ = NULL;
  return temp;
}

// optional .isafetec.FILTER_MODE filter_mode = 10;
inline bool CltSystemControlPolicy::has_filter_mode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CltSystemControlPolicy::set_has_filter_mode() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CltSystemControlPolicy::clear_has_filter_mode() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CltSystemControlPolicy::clear_filter_mode() {
  filter_mode_ = 0;
  clear_has_filter_mode();
}
inline isafetec::FILTER_MODE CltSystemControlPolicy::filter_mode() const {
  return static_cast< isafetec::FILTER_MODE >(filter_mode_);
}
inline void CltSystemControlPolicy::set_filter_mode(isafetec::FILTER_MODE value) {
  GOOGLE_DCHECK(isafetec::FILTER_MODE_IsValid(value));
  set_has_filter_mode();
  filter_mode_ = value;
}

// optional string hints = 13;
inline bool CltSystemControlPolicy::has_hints() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CltSystemControlPolicy::set_has_hints() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CltSystemControlPolicy::clear_has_hints() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CltSystemControlPolicy::clear_hints() {
  if (hints_ != &::google::protobuf::internal::kEmptyString) {
    hints_->clear();
  }
  clear_has_hints();
}
inline const ::std::string& CltSystemControlPolicy::hints() const {
  return *hints_;
}
inline void CltSystemControlPolicy::set_hints(const ::std::string& value) {
  set_has_hints();
  if (hints_ == &::google::protobuf::internal::kEmptyString) {
    hints_ = new ::std::string;
  }
  hints_->assign(value);
}
inline void CltSystemControlPolicy::set_hints(const char* value) {
  set_has_hints();
  if (hints_ == &::google::protobuf::internal::kEmptyString) {
    hints_ = new ::std::string;
  }
  hints_->assign(value);
}
inline void CltSystemControlPolicy::set_hints(const char* value, size_t size) {
  set_has_hints();
  if (hints_ == &::google::protobuf::internal::kEmptyString) {
    hints_ = new ::std::string;
  }
  hints_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CltSystemControlPolicy::mutable_hints() {
  set_has_hints();
  if (hints_ == &::google::protobuf::internal::kEmptyString) {
    hints_ = new ::std::string;
  }
  return hints_;
}
inline ::std::string* CltSystemControlPolicy::release_hints() {
  clear_has_hints();
  if (hints_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hints_;
    hints_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 index = 18;
inline bool CltSystemControlPolicy::has_index() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CltSystemControlPolicy::set_has_index() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CltSystemControlPolicy::clear_has_index() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CltSystemControlPolicy::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 CltSystemControlPolicy::index() const {
  return index_;
}
inline void CltSystemControlPolicy::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 week_day_mask = 19;
inline bool CltSystemControlPolicy::has_week_day_mask() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CltSystemControlPolicy::set_has_week_day_mask() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CltSystemControlPolicy::clear_has_week_day_mask() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CltSystemControlPolicy::clear_week_day_mask() {
  week_day_mask_ = 0;
  clear_has_week_day_mask();
}
inline ::google::protobuf::int32 CltSystemControlPolicy::week_day_mask() const {
  return week_day_mask_;
}
inline void CltSystemControlPolicy::set_week_day_mask(::google::protobuf::int32 value) {
  set_has_week_day_mask();
  week_day_mask_ = value;
}

// -------------------------------------------------------------------

// CltSystemControlPolicyList

// repeated .isafetec.CltSystemControlPolicy list = 1;
inline int CltSystemControlPolicyList::list_size() const {
  return list_.size();
}
inline void CltSystemControlPolicyList::clear_list() {
  list_.Clear();
}
inline const ::isafetec::CltSystemControlPolicy& CltSystemControlPolicyList::list(int index) const {
  return list_.Get(index);
}
inline ::isafetec::CltSystemControlPolicy* CltSystemControlPolicyList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::isafetec::CltSystemControlPolicy* CltSystemControlPolicyList::list_ReleaseAt(int index) {
  return list_.ReleaseAt(index);
}
inline void CltSystemControlPolicyList::list_RemoveAt(int index) {
  list_.RemoveAt(index);
}
inline ::isafetec::CltSystemControlPolicy* CltSystemControlPolicyList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::CltSystemControlPolicy >&
CltSystemControlPolicyList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::CltSystemControlPolicy >*
CltSystemControlPolicyList::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// FileParam

// optional string procname = 1;
inline bool FileParam::has_procname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileParam::set_has_procname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileParam::clear_has_procname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileParam::clear_procname() {
  if (procname_ != &::google::protobuf::internal::kEmptyString) {
    procname_->clear();
  }
  clear_has_procname();
}
inline const ::std::string& FileParam::procname() const {
  return *procname_;
}
inline void FileParam::set_procname(const ::std::string& value) {
  set_has_procname();
  if (procname_ == &::google::protobuf::internal::kEmptyString) {
    procname_ = new ::std::string;
  }
  procname_->assign(value);
}
inline void FileParam::set_procname(const char* value) {
  set_has_procname();
  if (procname_ == &::google::protobuf::internal::kEmptyString) {
    procname_ = new ::std::string;
  }
  procname_->assign(value);
}
inline void FileParam::set_procname(const char* value, size_t size) {
  set_has_procname();
  if (procname_ == &::google::protobuf::internal::kEmptyString) {
    procname_ = new ::std::string;
  }
  procname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileParam::mutable_procname() {
  set_has_procname();
  if (procname_ == &::google::protobuf::internal::kEmptyString) {
    procname_ = new ::std::string;
  }
  return procname_;
}
inline ::std::string* FileParam::release_procname() {
  clear_has_procname();
  if (procname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = procname_;
    procname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 type = 2;
inline bool FileParam::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileParam::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileParam::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileParam::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 FileParam::type() const {
  return type_;
}
inline void FileParam::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string typeparam = 3;
inline bool FileParam::has_typeparam() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FileParam::set_has_typeparam() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FileParam::clear_has_typeparam() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FileParam::clear_typeparam() {
  if (typeparam_ != &::google::protobuf::internal::kEmptyString) {
    typeparam_->clear();
  }
  clear_has_typeparam();
}
inline const ::std::string& FileParam::typeparam() const {
  return *typeparam_;
}
inline void FileParam::set_typeparam(const ::std::string& value) {
  set_has_typeparam();
  if (typeparam_ == &::google::protobuf::internal::kEmptyString) {
    typeparam_ = new ::std::string;
  }
  typeparam_->assign(value);
}
inline void FileParam::set_typeparam(const char* value) {
  set_has_typeparam();
  if (typeparam_ == &::google::protobuf::internal::kEmptyString) {
    typeparam_ = new ::std::string;
  }
  typeparam_->assign(value);
}
inline void FileParam::set_typeparam(const char* value, size_t size) {
  set_has_typeparam();
  if (typeparam_ == &::google::protobuf::internal::kEmptyString) {
    typeparam_ = new ::std::string;
  }
  typeparam_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileParam::mutable_typeparam() {
  set_has_typeparam();
  if (typeparam_ == &::google::protobuf::internal::kEmptyString) {
    typeparam_ = new ::std::string;
  }
  return typeparam_;
}
inline ::std::string* FileParam::release_typeparam() {
  clear_has_typeparam();
  if (typeparam_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = typeparam_;
    typeparam_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 fileoptype = 4;
inline bool FileParam::has_fileoptype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FileParam::set_has_fileoptype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FileParam::clear_has_fileoptype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FileParam::clear_fileoptype() {
  fileoptype_ = 0;
  clear_has_fileoptype();
}
inline ::google::protobuf::int32 FileParam::fileoptype() const {
  return fileoptype_;
}
inline void FileParam::set_fileoptype(::google::protobuf::int32 value) {
  set_has_fileoptype();
  fileoptype_ = value;
}

// -------------------------------------------------------------------

// FileParamList

// repeated .isafetec.FileParam list = 1;
inline int FileParamList::list_size() const {
  return list_.size();
}
inline void FileParamList::clear_list() {
  list_.Clear();
}
inline const ::isafetec::FileParam& FileParamList::list(int index) const {
  return list_.Get(index);
}
inline ::isafetec::FileParam* FileParamList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::isafetec::FileParam* FileParamList::list_ReleaseAt(int index) {
  return list_.ReleaseAt(index);
}
inline void FileParamList::list_RemoveAt(int index) {
  list_.RemoveAt(index);
}
inline ::isafetec::FileParam* FileParamList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::FileParam >&
FileParamList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::FileParam >*
FileParamList::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// CltLogPolcicy_ScreenParam

// optional int32 interval = 1;
inline bool CltLogPolcicy_ScreenParam::has_interval() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CltLogPolcicy_ScreenParam::set_has_interval() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CltLogPolcicy_ScreenParam::clear_has_interval() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CltLogPolcicy_ScreenParam::clear_interval() {
  interval_ = 0;
  clear_has_interval();
}
inline ::google::protobuf::int32 CltLogPolcicy_ScreenParam::interval() const {
  return interval_;
}
inline void CltLogPolcicy_ScreenParam::set_interval(::google::protobuf::int32 value) {
  set_has_interval();
  interval_ = value;
}

// optional int32 width = 2;
inline bool CltLogPolcicy_ScreenParam::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CltLogPolcicy_ScreenParam::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CltLogPolcicy_ScreenParam::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CltLogPolcicy_ScreenParam::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 CltLogPolcicy_ScreenParam::width() const {
  return width_;
}
inline void CltLogPolcicy_ScreenParam::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
}

// optional int32 height = 3;
inline bool CltLogPolcicy_ScreenParam::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CltLogPolcicy_ScreenParam::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CltLogPolcicy_ScreenParam::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CltLogPolcicy_ScreenParam::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 CltLogPolcicy_ScreenParam::height() const {
  return height_;
}
inline void CltLogPolcicy_ScreenParam::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
}

// optional int32 save_type = 4;
inline bool CltLogPolcicy_ScreenParam::has_save_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CltLogPolcicy_ScreenParam::set_has_save_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CltLogPolcicy_ScreenParam::clear_has_save_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CltLogPolcicy_ScreenParam::clear_save_type() {
  save_type_ = 0;
  clear_has_save_type();
}
inline ::google::protobuf::int32 CltLogPolcicy_ScreenParam::save_type() const {
  return save_type_;
}
inline void CltLogPolcicy_ScreenParam::set_save_type(::google::protobuf::int32 value) {
  set_has_save_type();
  save_type_ = value;
}

// optional int32 saveindb = 5;
inline bool CltLogPolcicy_ScreenParam::has_saveindb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CltLogPolcicy_ScreenParam::set_has_saveindb() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CltLogPolcicy_ScreenParam::clear_has_saveindb() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CltLogPolcicy_ScreenParam::clear_saveindb() {
  saveindb_ = 0;
  clear_has_saveindb();
}
inline ::google::protobuf::int32 CltLogPolcicy_ScreenParam::saveindb() const {
  return saveindb_;
}
inline void CltLogPolcicy_ScreenParam::set_saveindb(::google::protobuf::int32 value) {
  set_has_saveindb();
  saveindb_ = value;
}

// -------------------------------------------------------------------

// CltLogPolcicy

// optional int32 id = 1;
inline bool CltLogPolcicy::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CltLogPolcicy::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CltLogPolcicy::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CltLogPolcicy::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 CltLogPolcicy::id() const {
  return id_;
}
inline void CltLogPolcicy::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 type = 2;
inline bool CltLogPolcicy::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CltLogPolcicy::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CltLogPolcicy::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CltLogPolcicy::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 CltLogPolcicy::type() const {
  return type_;
}
inline void CltLogPolcicy::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional double last_time = 3;
inline bool CltLogPolcicy::has_last_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CltLogPolcicy::set_has_last_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CltLogPolcicy::clear_has_last_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CltLogPolcicy::clear_last_time() {
  last_time_ = 0;
  clear_has_last_time();
}
inline double CltLogPolcicy::last_time() const {
  return last_time_;
}
inline void CltLogPolcicy::set_last_time(double value) {
  set_has_last_time();
  last_time_ = value;
}

// optional int32 inuse = 15;
inline bool CltLogPolcicy::has_inuse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CltLogPolcicy::set_has_inuse() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CltLogPolcicy::clear_has_inuse() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CltLogPolcicy::clear_inuse() {
  inuse_ = 0;
  clear_has_inuse();
}
inline ::google::protobuf::int32 CltLogPolcicy::inuse() const {
  return inuse_;
}
inline void CltLogPolcicy::set_inuse(::google::protobuf::int32 value) {
  set_has_inuse();
  inuse_ = value;
}

// repeated int32 stateon = 4;
inline int CltLogPolcicy::stateon_size() const {
  return stateon_.size();
}
inline void CltLogPolcicy::clear_stateon() {
  stateon_.Clear();
}
inline ::google::protobuf::int32 CltLogPolcicy::stateon(int index) const {
  return stateon_.Get(index);
}
inline void CltLogPolcicy::set_stateon(int index, ::google::protobuf::int32 value) {
  stateon_.Set(index, value);
}
inline void CltLogPolcicy::add_stateon(::google::protobuf::int32 value) {
  stateon_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CltLogPolcicy::stateon() const {
  return stateon_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CltLogPolcicy::mutable_stateon() {
  return &stateon_;
}

// optional .isafetec.UPLOADLOG_TYPE uploadtype = 5;
inline bool CltLogPolcicy::has_uploadtype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CltLogPolcicy::set_has_uploadtype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CltLogPolcicy::clear_has_uploadtype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CltLogPolcicy::clear_uploadtype() {
  uploadtype_ = 0;
  clear_has_uploadtype();
}
inline isafetec::UPLOADLOG_TYPE CltLogPolcicy::uploadtype() const {
  return static_cast< isafetec::UPLOADLOG_TYPE >(uploadtype_);
}
inline void CltLogPolcicy::set_uploadtype(isafetec::UPLOADLOG_TYPE value) {
  GOOGLE_DCHECK(isafetec::UPLOADLOG_TYPE_IsValid(value));
  set_has_uploadtype();
  uploadtype_ = value;
}

// optional double upload_ontime = 8;
inline bool CltLogPolcicy::has_upload_ontime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CltLogPolcicy::set_has_upload_ontime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CltLogPolcicy::clear_has_upload_ontime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CltLogPolcicy::clear_upload_ontime() {
  upload_ontime_ = 0;
  clear_has_upload_ontime();
}
inline double CltLogPolcicy::upload_ontime() const {
  return upload_ontime_;
}
inline void CltLogPolcicy::set_upload_ontime(double value) {
  set_has_upload_ontime();
  upload_ontime_ = value;
}

// optional .isafetec.CLEANLOG_TYPE cleantype = 30;
inline bool CltLogPolcicy::has_cleantype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CltLogPolcicy::set_has_cleantype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CltLogPolcicy::clear_has_cleantype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CltLogPolcicy::clear_cleantype() {
  cleantype_ = 0;
  clear_has_cleantype();
}
inline isafetec::CLEANLOG_TYPE CltLogPolcicy::cleantype() const {
  return static_cast< isafetec::CLEANLOG_TYPE >(cleantype_);
}
inline void CltLogPolcicy::set_cleantype(isafetec::CLEANLOG_TYPE value) {
  GOOGLE_DCHECK(isafetec::CLEANLOG_TYPE_IsValid(value));
  set_has_cleantype();
  cleantype_ = value;
}

// optional double cleanparamtime = 32;
inline bool CltLogPolcicy::has_cleanparamtime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CltLogPolcicy::set_has_cleanparamtime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CltLogPolcicy::clear_has_cleanparamtime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CltLogPolcicy::clear_cleanparamtime() {
  cleanparamtime_ = 0;
  clear_has_cleanparamtime();
}
inline double CltLogPolcicy::cleanparamtime() const {
  return cleanparamtime_;
}
inline void CltLogPolcicy::set_cleanparamtime(double value) {
  set_has_cleanparamtime();
  cleanparamtime_ = value;
}

// optional .isafetec.CltLogPolcicy.ScreenParam screen_param = 10;
inline bool CltLogPolcicy::has_screen_param() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CltLogPolcicy::set_has_screen_param() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CltLogPolcicy::clear_has_screen_param() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CltLogPolcicy::clear_screen_param() {
  if (screen_param_ != NULL) screen_param_->::isafetec::CltLogPolcicy_ScreenParam::Clear();
  clear_has_screen_param();
}
inline const ::isafetec::CltLogPolcicy_ScreenParam& CltLogPolcicy::screen_param() const {
  return screen_param_ != NULL ? *screen_param_ : *default_instance_->screen_param_;
}
inline ::isafetec::CltLogPolcicy_ScreenParam* CltLogPolcicy::mutable_screen_param() {
  set_has_screen_param();
  if (screen_param_ == NULL) screen_param_ = new ::isafetec::CltLogPolcicy_ScreenParam;
  return screen_param_;
}
inline ::isafetec::CltLogPolcicy_ScreenParam* CltLogPolcicy::release_screen_param() {
  clear_has_screen_param();
  ::isafetec::CltLogPolcicy_ScreenParam* temp = screen_param_;
  screen_param_ = NULL;
  return temp;
}

// optional int32 max_idle_interval = 11;
inline bool CltLogPolcicy::has_max_idle_interval() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CltLogPolcicy::set_has_max_idle_interval() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CltLogPolcicy::clear_has_max_idle_interval() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CltLogPolcicy::clear_max_idle_interval() {
  max_idle_interval_ = 0;
  clear_has_max_idle_interval();
}
inline ::google::protobuf::int32 CltLogPolcicy::max_idle_interval() const {
  return max_idle_interval_;
}
inline void CltLogPolcicy::set_max_idle_interval(::google::protobuf::int32 value) {
  set_has_max_idle_interval();
  max_idle_interval_ = value;
}

// optional .isafetec.FileParamList fileparamlist = 12;
inline bool CltLogPolcicy::has_fileparamlist() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CltLogPolcicy::set_has_fileparamlist() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CltLogPolcicy::clear_has_fileparamlist() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CltLogPolcicy::clear_fileparamlist() {
  if (fileparamlist_ != NULL) fileparamlist_->::isafetec::FileParamList::Clear();
  clear_has_fileparamlist();
}
inline const ::isafetec::FileParamList& CltLogPolcicy::fileparamlist() const {
  return fileparamlist_ != NULL ? *fileparamlist_ : *default_instance_->fileparamlist_;
}
inline ::isafetec::FileParamList* CltLogPolcicy::mutable_fileparamlist() {
  set_has_fileparamlist();
  if (fileparamlist_ == NULL) fileparamlist_ = new ::isafetec::FileParamList;
  return fileparamlist_;
}
inline ::isafetec::FileParamList* CltLogPolcicy::release_fileparamlist() {
  clear_has_fileparamlist();
  ::isafetec::FileParamList* temp = fileparamlist_;
  fileparamlist_ = NULL;
  return temp;
}

// optional .isafetec.TimeSpanList timelist = 25;
inline bool CltLogPolcicy::has_timelist() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CltLogPolcicy::set_has_timelist() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CltLogPolcicy::clear_has_timelist() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CltLogPolcicy::clear_timelist() {
  if (timelist_ != NULL) timelist_->::isafetec::TimeSpanList::Clear();
  clear_has_timelist();
}
inline const ::isafetec::TimeSpanList& CltLogPolcicy::timelist() const {
  return timelist_ != NULL ? *timelist_ : *default_instance_->timelist_;
}
inline ::isafetec::TimeSpanList* CltLogPolcicy::mutable_timelist() {
  set_has_timelist();
  if (timelist_ == NULL) timelist_ = new ::isafetec::TimeSpanList;
  return timelist_;
}
inline ::isafetec::TimeSpanList* CltLogPolcicy::release_timelist() {
  clear_has_timelist();
  ::isafetec::TimeSpanList* temp = timelist_;
  timelist_ = NULL;
  return temp;
}

// optional double usetimeF = 26;
inline bool CltLogPolcicy::has_usetimef() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CltLogPolcicy::set_has_usetimef() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CltLogPolcicy::clear_has_usetimef() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CltLogPolcicy::clear_usetimef() {
  usetimef_ = 0;
  clear_has_usetimef();
}
inline double CltLogPolcicy::usetimef() const {
  return usetimef_;
}
inline void CltLogPolcicy::set_usetimef(double value) {
  set_has_usetimef();
  usetimef_ = value;
}

// optional double usetimeE = 27;
inline bool CltLogPolcicy::has_usetimee() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CltLogPolcicy::set_has_usetimee() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CltLogPolcicy::clear_has_usetimee() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CltLogPolcicy::clear_usetimee() {
  usetimee_ = 0;
  clear_has_usetimee();
}
inline double CltLogPolcicy::usetimee() const {
  return usetimee_;
}
inline void CltLogPolcicy::set_usetimee(double value) {
  set_has_usetimee();
  usetimee_ = value;
}

// optional int32 week_day_mask = 28;
inline bool CltLogPolcicy::has_week_day_mask() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CltLogPolcicy::set_has_week_day_mask() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CltLogPolcicy::clear_has_week_day_mask() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CltLogPolcicy::clear_week_day_mask() {
  week_day_mask_ = 0;
  clear_has_week_day_mask();
}
inline ::google::protobuf::int32 CltLogPolcicy::week_day_mask() const {
  return week_day_mask_;
}
inline void CltLogPolcicy::set_week_day_mask(::google::protobuf::int32 value) {
  set_has_week_day_mask();
  week_day_mask_ = value;
}

// -------------------------------------------------------------------

// CltLogPolcicyList

// repeated .isafetec.CltLogPolcicy list = 1;
inline int CltLogPolcicyList::list_size() const {
  return list_.size();
}
inline void CltLogPolcicyList::clear_list() {
  list_.Clear();
}
inline const ::isafetec::CltLogPolcicy& CltLogPolcicyList::list(int index) const {
  return list_.Get(index);
}
inline ::isafetec::CltLogPolcicy* CltLogPolcicyList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::isafetec::CltLogPolcicy* CltLogPolcicyList::list_ReleaseAt(int index) {
  return list_.ReleaseAt(index);
}
inline void CltLogPolcicyList::list_RemoveAt(int index) {
  list_.RemoveAt(index);
}
inline ::isafetec::CltLogPolcicy* CltLogPolcicyList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::CltLogPolcicy >&
CltLogPolcicyList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::CltLogPolcicy >*
CltLogPolcicyList::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// CltStreamControlPolicy_FilterNode

// optional uint32 type = 2;
inline bool CltStreamControlPolicy_FilterNode::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CltStreamControlPolicy_FilterNode::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CltStreamControlPolicy_FilterNode::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CltStreamControlPolicy_FilterNode::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 CltStreamControlPolicy_FilterNode::type() const {
  return type_;
}
inline void CltStreamControlPolicy_FilterNode::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 addtype = 3;
inline bool CltStreamControlPolicy_FilterNode::has_addtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CltStreamControlPolicy_FilterNode::set_has_addtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CltStreamControlPolicy_FilterNode::clear_has_addtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CltStreamControlPolicy_FilterNode::clear_addtype() {
  addtype_ = 0u;
  clear_has_addtype();
}
inline ::google::protobuf::uint32 CltStreamControlPolicy_FilterNode::addtype() const {
  return addtype_;
}
inline void CltStreamControlPolicy_FilterNode::set_addtype(::google::protobuf::uint32 value) {
  set_has_addtype();
  addtype_ = value;
}

// optional string addparam = 4;
inline bool CltStreamControlPolicy_FilterNode::has_addparam() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CltStreamControlPolicy_FilterNode::set_has_addparam() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CltStreamControlPolicy_FilterNode::clear_has_addparam() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CltStreamControlPolicy_FilterNode::clear_addparam() {
  if (addparam_ != &::google::protobuf::internal::kEmptyString) {
    addparam_->clear();
  }
  clear_has_addparam();
}
inline const ::std::string& CltStreamControlPolicy_FilterNode::addparam() const {
  return *addparam_;
}
inline void CltStreamControlPolicy_FilterNode::set_addparam(const ::std::string& value) {
  set_has_addparam();
  if (addparam_ == &::google::protobuf::internal::kEmptyString) {
    addparam_ = new ::std::string;
  }
  addparam_->assign(value);
}
inline void CltStreamControlPolicy_FilterNode::set_addparam(const char* value) {
  set_has_addparam();
  if (addparam_ == &::google::protobuf::internal::kEmptyString) {
    addparam_ = new ::std::string;
  }
  addparam_->assign(value);
}
inline void CltStreamControlPolicy_FilterNode::set_addparam(const char* value, size_t size) {
  set_has_addparam();
  if (addparam_ == &::google::protobuf::internal::kEmptyString) {
    addparam_ = new ::std::string;
  }
  addparam_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CltStreamControlPolicy_FilterNode::mutable_addparam() {
  set_has_addparam();
  if (addparam_ == &::google::protobuf::internal::kEmptyString) {
    addparam_ = new ::std::string;
  }
  return addparam_;
}
inline ::std::string* CltStreamControlPolicy_FilterNode::release_addparam() {
  clear_has_addparam();
  if (addparam_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = addparam_;
    addparam_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 uptype = 5;
inline bool CltStreamControlPolicy_FilterNode::has_uptype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CltStreamControlPolicy_FilterNode::set_has_uptype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CltStreamControlPolicy_FilterNode::clear_has_uptype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CltStreamControlPolicy_FilterNode::clear_uptype() {
  uptype_ = 0u;
  clear_has_uptype();
}
inline ::google::protobuf::uint32 CltStreamControlPolicy_FilterNode::uptype() const {
  return uptype_;
}
inline void CltStreamControlPolicy_FilterNode::set_uptype(::google::protobuf::uint32 value) {
  set_has_uptype();
  uptype_ = value;
}

// optional uint32 upparam = 6;
inline bool CltStreamControlPolicy_FilterNode::has_upparam() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CltStreamControlPolicy_FilterNode::set_has_upparam() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CltStreamControlPolicy_FilterNode::clear_has_upparam() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CltStreamControlPolicy_FilterNode::clear_upparam() {
  upparam_ = 0u;
  clear_has_upparam();
}
inline ::google::protobuf::uint32 CltStreamControlPolicy_FilterNode::upparam() const {
  return upparam_;
}
inline void CltStreamControlPolicy_FilterNode::set_upparam(::google::protobuf::uint32 value) {
  set_has_upparam();
  upparam_ = value;
}

// optional uint32 downtype = 7;
inline bool CltStreamControlPolicy_FilterNode::has_downtype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CltStreamControlPolicy_FilterNode::set_has_downtype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CltStreamControlPolicy_FilterNode::clear_has_downtype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CltStreamControlPolicy_FilterNode::clear_downtype() {
  downtype_ = 0u;
  clear_has_downtype();
}
inline ::google::protobuf::uint32 CltStreamControlPolicy_FilterNode::downtype() const {
  return downtype_;
}
inline void CltStreamControlPolicy_FilterNode::set_downtype(::google::protobuf::uint32 value) {
  set_has_downtype();
  downtype_ = value;
}

// optional uint32 downparam = 8;
inline bool CltStreamControlPolicy_FilterNode::has_downparam() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CltStreamControlPolicy_FilterNode::set_has_downparam() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CltStreamControlPolicy_FilterNode::clear_has_downparam() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CltStreamControlPolicy_FilterNode::clear_downparam() {
  downparam_ = 0u;
  clear_has_downparam();
}
inline ::google::protobuf::uint32 CltStreamControlPolicy_FilterNode::downparam() const {
  return downparam_;
}
inline void CltStreamControlPolicy_FilterNode::set_downparam(::google::protobuf::uint32 value) {
  set_has_downparam();
  downparam_ = value;
}

// -------------------------------------------------------------------

// CltStreamControlPolicy

// optional int32 id = 1;
inline bool CltStreamControlPolicy::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CltStreamControlPolicy::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CltStreamControlPolicy::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CltStreamControlPolicy::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 CltStreamControlPolicy::id() const {
  return id_;
}
inline void CltStreamControlPolicy::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 type = 2;
inline bool CltStreamControlPolicy::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CltStreamControlPolicy::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CltStreamControlPolicy::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CltStreamControlPolicy::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 CltStreamControlPolicy::type() const {
  return type_;
}
inline void CltStreamControlPolicy::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional double last_time = 3;
inline bool CltStreamControlPolicy::has_last_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CltStreamControlPolicy::set_has_last_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CltStreamControlPolicy::clear_has_last_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CltStreamControlPolicy::clear_last_time() {
  last_time_ = 0;
  clear_has_last_time();
}
inline double CltStreamControlPolicy::last_time() const {
  return last_time_;
}
inline void CltStreamControlPolicy::set_last_time(double value) {
  set_has_last_time();
  last_time_ = value;
}

// optional int32 inuse = 15;
inline bool CltStreamControlPolicy::has_inuse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CltStreamControlPolicy::set_has_inuse() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CltStreamControlPolicy::clear_has_inuse() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CltStreamControlPolicy::clear_inuse() {
  inuse_ = 0;
  clear_has_inuse();
}
inline ::google::protobuf::int32 CltStreamControlPolicy::inuse() const {
  return inuse_;
}
inline void CltStreamControlPolicy::set_inuse(::google::protobuf::int32 value) {
  set_has_inuse();
  inuse_ = value;
}

// optional .isafetec.FILTER_TYPE filter_type = 4;
inline bool CltStreamControlPolicy::has_filter_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CltStreamControlPolicy::set_has_filter_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CltStreamControlPolicy::clear_has_filter_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CltStreamControlPolicy::clear_filter_type() {
  filter_type_ = 0;
  clear_has_filter_type();
}
inline isafetec::FILTER_TYPE CltStreamControlPolicy::filter_type() const {
  return static_cast< isafetec::FILTER_TYPE >(filter_type_);
}
inline void CltStreamControlPolicy::set_filter_type(isafetec::FILTER_TYPE value) {
  GOOGLE_DCHECK(isafetec::FILTER_TYPE_IsValid(value));
  set_has_filter_type();
  filter_type_ = value;
}

// repeated .isafetec.CltStreamControlPolicy.FilterNode filterlist = 5;
inline int CltStreamControlPolicy::filterlist_size() const {
  return filterlist_.size();
}
inline void CltStreamControlPolicy::clear_filterlist() {
  filterlist_.Clear();
}
inline const ::isafetec::CltStreamControlPolicy_FilterNode& CltStreamControlPolicy::filterlist(int index) const {
  return filterlist_.Get(index);
}
inline ::isafetec::CltStreamControlPolicy_FilterNode* CltStreamControlPolicy::mutable_filterlist(int index) {
  return filterlist_.Mutable(index);
}
inline ::isafetec::CltStreamControlPolicy_FilterNode* CltStreamControlPolicy::filterlist_ReleaseAt(int index) {
  return filterlist_.ReleaseAt(index);
}
inline void CltStreamControlPolicy::filterlist_RemoveAt(int index) {
  filterlist_.RemoveAt(index);
}
inline ::isafetec::CltStreamControlPolicy_FilterNode* CltStreamControlPolicy::add_filterlist() {
  return filterlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::CltStreamControlPolicy_FilterNode >&
CltStreamControlPolicy::filterlist() const {
  return filterlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::CltStreamControlPolicy_FilterNode >*
CltStreamControlPolicy::mutable_filterlist() {
  return &filterlist_;
}

// optional .isafetec.TimeSpanList timelist = 6;
inline bool CltStreamControlPolicy::has_timelist() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CltStreamControlPolicy::set_has_timelist() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CltStreamControlPolicy::clear_has_timelist() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CltStreamControlPolicy::clear_timelist() {
  if (timelist_ != NULL) timelist_->::isafetec::TimeSpanList::Clear();
  clear_has_timelist();
}
inline const ::isafetec::TimeSpanList& CltStreamControlPolicy::timelist() const {
  return timelist_ != NULL ? *timelist_ : *default_instance_->timelist_;
}
inline ::isafetec::TimeSpanList* CltStreamControlPolicy::mutable_timelist() {
  set_has_timelist();
  if (timelist_ == NULL) timelist_ = new ::isafetec::TimeSpanList;
  return timelist_;
}
inline ::isafetec::TimeSpanList* CltStreamControlPolicy::release_timelist() {
  clear_has_timelist();
  ::isafetec::TimeSpanList* temp = timelist_;
  timelist_ = NULL;
  return temp;
}

// optional .isafetec.FILTER_MODE filter_mode = 7;
inline bool CltStreamControlPolicy::has_filter_mode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CltStreamControlPolicy::set_has_filter_mode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CltStreamControlPolicy::clear_has_filter_mode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CltStreamControlPolicy::clear_filter_mode() {
  filter_mode_ = 0;
  clear_has_filter_mode();
}
inline isafetec::FILTER_MODE CltStreamControlPolicy::filter_mode() const {
  return static_cast< isafetec::FILTER_MODE >(filter_mode_);
}
inline void CltStreamControlPolicy::set_filter_mode(isafetec::FILTER_MODE value) {
  GOOGLE_DCHECK(isafetec::FILTER_MODE_IsValid(value));
  set_has_filter_mode();
  filter_mode_ = value;
}

// optional double usetimeF = 13;
inline bool CltStreamControlPolicy::has_usetimef() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CltStreamControlPolicy::set_has_usetimef() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CltStreamControlPolicy::clear_has_usetimef() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CltStreamControlPolicy::clear_usetimef() {
  usetimef_ = 0;
  clear_has_usetimef();
}
inline double CltStreamControlPolicy::usetimef() const {
  return usetimef_;
}
inline void CltStreamControlPolicy::set_usetimef(double value) {
  set_has_usetimef();
  usetimef_ = value;
}

// optional double usetimeE = 14;
inline bool CltStreamControlPolicy::has_usetimee() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CltStreamControlPolicy::set_has_usetimee() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CltStreamControlPolicy::clear_has_usetimee() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CltStreamControlPolicy::clear_usetimee() {
  usetimee_ = 0;
  clear_has_usetimee();
}
inline double CltStreamControlPolicy::usetimee() const {
  return usetimee_;
}
inline void CltStreamControlPolicy::set_usetimee(double value) {
  set_has_usetimee();
  usetimee_ = value;
}

// optional string hints = 16;
inline bool CltStreamControlPolicy::has_hints() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CltStreamControlPolicy::set_has_hints() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CltStreamControlPolicy::clear_has_hints() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CltStreamControlPolicy::clear_hints() {
  if (hints_ != &::google::protobuf::internal::kEmptyString) {
    hints_->clear();
  }
  clear_has_hints();
}
inline const ::std::string& CltStreamControlPolicy::hints() const {
  return *hints_;
}
inline void CltStreamControlPolicy::set_hints(const ::std::string& value) {
  set_has_hints();
  if (hints_ == &::google::protobuf::internal::kEmptyString) {
    hints_ = new ::std::string;
  }
  hints_->assign(value);
}
inline void CltStreamControlPolicy::set_hints(const char* value) {
  set_has_hints();
  if (hints_ == &::google::protobuf::internal::kEmptyString) {
    hints_ = new ::std::string;
  }
  hints_->assign(value);
}
inline void CltStreamControlPolicy::set_hints(const char* value, size_t size) {
  set_has_hints();
  if (hints_ == &::google::protobuf::internal::kEmptyString) {
    hints_ = new ::std::string;
  }
  hints_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CltStreamControlPolicy::mutable_hints() {
  set_has_hints();
  if (hints_ == &::google::protobuf::internal::kEmptyString) {
    hints_ = new ::std::string;
  }
  return hints_;
}
inline ::std::string* CltStreamControlPolicy::release_hints() {
  clear_has_hints();
  if (hints_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hints_;
    hints_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 index = 19;
inline bool CltStreamControlPolicy::has_index() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CltStreamControlPolicy::set_has_index() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CltStreamControlPolicy::clear_has_index() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CltStreamControlPolicy::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 CltStreamControlPolicy::index() const {
  return index_;
}
inline void CltStreamControlPolicy::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 week_day_mask = 20;
inline bool CltStreamControlPolicy::has_week_day_mask() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CltStreamControlPolicy::set_has_week_day_mask() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CltStreamControlPolicy::clear_has_week_day_mask() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CltStreamControlPolicy::clear_week_day_mask() {
  week_day_mask_ = 0;
  clear_has_week_day_mask();
}
inline ::google::protobuf::int32 CltStreamControlPolicy::week_day_mask() const {
  return week_day_mask_;
}
inline void CltStreamControlPolicy::set_week_day_mask(::google::protobuf::int32 value) {
  set_has_week_day_mask();
  week_day_mask_ = value;
}

// -------------------------------------------------------------------

// CltStreamControlPolicyList

// repeated .isafetec.CltStreamControlPolicy list = 1;
inline int CltStreamControlPolicyList::list_size() const {
  return list_.size();
}
inline void CltStreamControlPolicyList::clear_list() {
  list_.Clear();
}
inline const ::isafetec::CltStreamControlPolicy& CltStreamControlPolicyList::list(int index) const {
  return list_.Get(index);
}
inline ::isafetec::CltStreamControlPolicy* CltStreamControlPolicyList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::isafetec::CltStreamControlPolicy* CltStreamControlPolicyList::list_ReleaseAt(int index) {
  return list_.ReleaseAt(index);
}
inline void CltStreamControlPolicyList::list_RemoveAt(int index) {
  list_.RemoveAt(index);
}
inline ::isafetec::CltStreamControlPolicy* CltStreamControlPolicyList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::CltStreamControlPolicy >&
CltStreamControlPolicyList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::CltStreamControlPolicy >*
CltStreamControlPolicyList::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// CltCommonPolicy_ResScan

// optional int32 type = 1;
inline bool CltCommonPolicy_ResScan::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CltCommonPolicy_ResScan::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CltCommonPolicy_ResScan::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CltCommonPolicy_ResScan::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 CltCommonPolicy_ResScan::type() const {
  return type_;
}
inline void CltCommonPolicy_ResScan::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional double time = 2;
inline bool CltCommonPolicy_ResScan::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CltCommonPolicy_ResScan::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CltCommonPolicy_ResScan::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CltCommonPolicy_ResScan::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline double CltCommonPolicy_ResScan::time() const {
  return time_;
}
inline void CltCommonPolicy_ResScan::set_time(double value) {
  set_has_time();
  time_ = value;
}

// optional int32 param = 3;
inline bool CltCommonPolicy_ResScan::has_param() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CltCommonPolicy_ResScan::set_has_param() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CltCommonPolicy_ResScan::clear_has_param() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CltCommonPolicy_ResScan::clear_param() {
  param_ = 0;
  clear_has_param();
}
inline ::google::protobuf::int32 CltCommonPolicy_ResScan::param() const {
  return param_;
}
inline void CltCommonPolicy_ResScan::set_param(::google::protobuf::int32 value) {
  set_has_param();
  param_ = value;
}

// -------------------------------------------------------------------

// CltCommonPolicy

// optional int32 id = 1;
inline bool CltCommonPolicy::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CltCommonPolicy::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CltCommonPolicy::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CltCommonPolicy::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 CltCommonPolicy::id() const {
  return id_;
}
inline void CltCommonPolicy::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 type = 2;
inline bool CltCommonPolicy::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CltCommonPolicy::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CltCommonPolicy::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CltCommonPolicy::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 CltCommonPolicy::type() const {
  return type_;
}
inline void CltCommonPolicy::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional double last_time = 3;
inline bool CltCommonPolicy::has_last_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CltCommonPolicy::set_has_last_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CltCommonPolicy::clear_has_last_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CltCommonPolicy::clear_last_time() {
  last_time_ = 0;
  clear_has_last_time();
}
inline double CltCommonPolicy::last_time() const {
  return last_time_;
}
inline void CltCommonPolicy::set_last_time(double value) {
  set_has_last_time();
  last_time_ = value;
}

// optional int32 inuse = 14;
inline bool CltCommonPolicy::has_inuse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CltCommonPolicy::set_has_inuse() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CltCommonPolicy::clear_has_inuse() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CltCommonPolicy::clear_inuse() {
  inuse_ = 0;
  clear_has_inuse();
}
inline ::google::protobuf::int32 CltCommonPolicy::inuse() const {
  return inuse_;
}
inline void CltCommonPolicy::set_inuse(::google::protobuf::int32 value) {
  set_has_inuse();
  inuse_ = value;
}

// repeated int32 stateon = 4;
inline int CltCommonPolicy::stateon_size() const {
  return stateon_.size();
}
inline void CltCommonPolicy::clear_stateon() {
  stateon_.Clear();
}
inline ::google::protobuf::int32 CltCommonPolicy::stateon(int index) const {
  return stateon_.Get(index);
}
inline void CltCommonPolicy::set_stateon(int index, ::google::protobuf::int32 value) {
  stateon_.Set(index, value);
}
inline void CltCommonPolicy::add_stateon(::google::protobuf::int32 value) {
  stateon_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CltCommonPolicy::stateon() const {
  return stateon_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CltCommonPolicy::mutable_stateon() {
  return &stateon_;
}

// optional int32 scan_type = 5;
inline bool CltCommonPolicy::has_scan_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CltCommonPolicy::set_has_scan_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CltCommonPolicy::clear_has_scan_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CltCommonPolicy::clear_scan_type() {
  scan_type_ = 0;
  clear_has_scan_type();
}
inline ::google::protobuf::int32 CltCommonPolicy::scan_type() const {
  return scan_type_;
}
inline void CltCommonPolicy::set_scan_type(::google::protobuf::int32 value) {
  set_has_scan_type();
  scan_type_ = value;
}

// optional .isafetec.FILTER_TYPE filter_type = 8;
inline bool CltCommonPolicy::has_filter_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CltCommonPolicy::set_has_filter_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CltCommonPolicy::clear_has_filter_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CltCommonPolicy::clear_filter_type() {
  filter_type_ = 0;
  clear_has_filter_type();
}
inline isafetec::FILTER_TYPE CltCommonPolicy::filter_type() const {
  return static_cast< isafetec::FILTER_TYPE >(filter_type_);
}
inline void CltCommonPolicy::set_filter_type(isafetec::FILTER_TYPE value) {
  GOOGLE_DCHECK(isafetec::FILTER_TYPE_IsValid(value));
  set_has_filter_type();
  filter_type_ = value;
}

// optional double do_at_time = 6;
inline bool CltCommonPolicy::has_do_at_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CltCommonPolicy::set_has_do_at_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CltCommonPolicy::clear_has_do_at_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CltCommonPolicy::clear_do_at_time() {
  do_at_time_ = 0;
  clear_has_do_at_time();
}
inline double CltCommonPolicy::do_at_time() const {
  return do_at_time_;
}
inline void CltCommonPolicy::set_do_at_time(double value) {
  set_has_do_at_time();
  do_at_time_ = value;
}

// optional .isafetec.CltCommonPolicy.ResScan res_param = 7;
inline bool CltCommonPolicy::has_res_param() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CltCommonPolicy::set_has_res_param() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CltCommonPolicy::clear_has_res_param() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CltCommonPolicy::clear_res_param() {
  if (res_param_ != NULL) res_param_->::isafetec::CltCommonPolicy_ResScan::Clear();
  clear_has_res_param();
}
inline const ::isafetec::CltCommonPolicy_ResScan& CltCommonPolicy::res_param() const {
  return res_param_ != NULL ? *res_param_ : *default_instance_->res_param_;
}
inline ::isafetec::CltCommonPolicy_ResScan* CltCommonPolicy::mutable_res_param() {
  set_has_res_param();
  if (res_param_ == NULL) res_param_ = new ::isafetec::CltCommonPolicy_ResScan;
  return res_param_;
}
inline ::isafetec::CltCommonPolicy_ResScan* CltCommonPolicy::release_res_param() {
  clear_has_res_param();
  ::isafetec::CltCommonPolicy_ResScan* temp = res_param_;
  res_param_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// CltCommonPolicyList

// repeated .isafetec.CltCommonPolicy list = 1;
inline int CltCommonPolicyList::list_size() const {
  return list_.size();
}
inline void CltCommonPolicyList::clear_list() {
  list_.Clear();
}
inline const ::isafetec::CltCommonPolicy& CltCommonPolicyList::list(int index) const {
  return list_.Get(index);
}
inline ::isafetec::CltCommonPolicy* CltCommonPolicyList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::isafetec::CltCommonPolicy* CltCommonPolicyList::list_ReleaseAt(int index) {
  return list_.ReleaseAt(index);
}
inline void CltCommonPolicyList::list_RemoveAt(int index) {
  list_.RemoveAt(index);
}
inline ::isafetec::CltCommonPolicy* CltCommonPolicyList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::CltCommonPolicy >&
CltCommonPolicyList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::CltCommonPolicy >*
CltCommonPolicyList::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// CltCheckPCIdlePolicy

// optional int32 id = 1;
inline bool CltCheckPCIdlePolicy::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CltCheckPCIdlePolicy::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CltCheckPCIdlePolicy::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CltCheckPCIdlePolicy::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 CltCheckPCIdlePolicy::id() const {
  return id_;
}
inline void CltCheckPCIdlePolicy::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 type = 2;
inline bool CltCheckPCIdlePolicy::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CltCheckPCIdlePolicy::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CltCheckPCIdlePolicy::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CltCheckPCIdlePolicy::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 CltCheckPCIdlePolicy::type() const {
  return type_;
}
inline void CltCheckPCIdlePolicy::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional double last_time = 3;
inline bool CltCheckPCIdlePolicy::has_last_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CltCheckPCIdlePolicy::set_has_last_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CltCheckPCIdlePolicy::clear_has_last_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CltCheckPCIdlePolicy::clear_last_time() {
  last_time_ = 0;
  clear_has_last_time();
}
inline double CltCheckPCIdlePolicy::last_time() const {
  return last_time_;
}
inline void CltCheckPCIdlePolicy::set_last_time(double value) {
  set_has_last_time();
  last_time_ = value;
}

// optional int32 max_minute = 4;
inline bool CltCheckPCIdlePolicy::has_max_minute() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CltCheckPCIdlePolicy::set_has_max_minute() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CltCheckPCIdlePolicy::clear_has_max_minute() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CltCheckPCIdlePolicy::clear_max_minute() {
  max_minute_ = 0;
  clear_has_max_minute();
}
inline ::google::protobuf::int32 CltCheckPCIdlePolicy::max_minute() const {
  return max_minute_;
}
inline void CltCheckPCIdlePolicy::set_max_minute(::google::protobuf::int32 value) {
  set_has_max_minute();
  max_minute_ = value;
}

// -------------------------------------------------------------------

// CltAlarmPolicy

// optional int32 id = 1;
inline bool CltAlarmPolicy::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CltAlarmPolicy::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CltAlarmPolicy::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CltAlarmPolicy::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 CltAlarmPolicy::id() const {
  return id_;
}
inline void CltAlarmPolicy::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 type = 2;
inline bool CltAlarmPolicy::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CltAlarmPolicy::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CltAlarmPolicy::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CltAlarmPolicy::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 CltAlarmPolicy::type() const {
  return type_;
}
inline void CltAlarmPolicy::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional double last_time = 3;
inline bool CltAlarmPolicy::has_last_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CltAlarmPolicy::set_has_last_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CltAlarmPolicy::clear_has_last_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CltAlarmPolicy::clear_last_time() {
  last_time_ = 0;
  clear_has_last_time();
}
inline double CltAlarmPolicy::last_time() const {
  return last_time_;
}
inline void CltAlarmPolicy::set_last_time(double value) {
  set_has_last_time();
  last_time_ = value;
}

// optional int32 inuse = 14;
inline bool CltAlarmPolicy::has_inuse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CltAlarmPolicy::set_has_inuse() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CltAlarmPolicy::clear_has_inuse() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CltAlarmPolicy::clear_inuse() {
  inuse_ = 0;
  clear_has_inuse();
}
inline ::google::protobuf::int32 CltAlarmPolicy::inuse() const {
  return inuse_;
}
inline void CltAlarmPolicy::set_inuse(::google::protobuf::int32 value) {
  set_has_inuse();
  inuse_ = value;
}

// repeated int32 stateon = 4;
inline int CltAlarmPolicy::stateon_size() const {
  return stateon_.size();
}
inline void CltAlarmPolicy::clear_stateon() {
  stateon_.Clear();
}
inline ::google::protobuf::int32 CltAlarmPolicy::stateon(int index) const {
  return stateon_.Get(index);
}
inline void CltAlarmPolicy::set_stateon(int index, ::google::protobuf::int32 value) {
  stateon_.Set(index, value);
}
inline void CltAlarmPolicy::add_stateon(::google::protobuf::int32 value) {
  stateon_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CltAlarmPolicy::stateon() const {
  return stateon_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CltAlarmPolicy::mutable_stateon() {
  return &stateon_;
}

// optional .isafetec.TimeSpanList timelist = 6;
inline bool CltAlarmPolicy::has_timelist() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CltAlarmPolicy::set_has_timelist() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CltAlarmPolicy::clear_has_timelist() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CltAlarmPolicy::clear_timelist() {
  if (timelist_ != NULL) timelist_->::isafetec::TimeSpanList::Clear();
  clear_has_timelist();
}
inline const ::isafetec::TimeSpanList& CltAlarmPolicy::timelist() const {
  return timelist_ != NULL ? *timelist_ : *default_instance_->timelist_;
}
inline ::isafetec::TimeSpanList* CltAlarmPolicy::mutable_timelist() {
  set_has_timelist();
  if (timelist_ == NULL) timelist_ = new ::isafetec::TimeSpanList;
  return timelist_;
}
inline ::isafetec::TimeSpanList* CltAlarmPolicy::release_timelist() {
  clear_has_timelist();
  ::isafetec::TimeSpanList* temp = timelist_;
  timelist_ = NULL;
  return temp;
}

// optional double usetimeF = 12;
inline bool CltAlarmPolicy::has_usetimef() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CltAlarmPolicy::set_has_usetimef() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CltAlarmPolicy::clear_has_usetimef() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CltAlarmPolicy::clear_usetimef() {
  usetimef_ = 0;
  clear_has_usetimef();
}
inline double CltAlarmPolicy::usetimef() const {
  return usetimef_;
}
inline void CltAlarmPolicy::set_usetimef(double value) {
  set_has_usetimef();
  usetimef_ = value;
}

// optional double usetimeE = 13;
inline bool CltAlarmPolicy::has_usetimee() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CltAlarmPolicy::set_has_usetimee() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CltAlarmPolicy::clear_has_usetimee() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CltAlarmPolicy::clear_usetimee() {
  usetimee_ = 0;
  clear_has_usetimee();
}
inline double CltAlarmPolicy::usetimee() const {
  return usetimee_;
}
inline void CltAlarmPolicy::set_usetimee(double value) {
  set_has_usetimee();
  usetimee_ = value;
}

// optional int32 index = 18;
inline bool CltAlarmPolicy::has_index() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CltAlarmPolicy::set_has_index() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CltAlarmPolicy::clear_has_index() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CltAlarmPolicy::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 CltAlarmPolicy::index() const {
  return index_;
}
inline void CltAlarmPolicy::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 week_day_mask = 19;
inline bool CltAlarmPolicy::has_week_day_mask() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CltAlarmPolicy::set_has_week_day_mask() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CltAlarmPolicy::clear_has_week_day_mask() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CltAlarmPolicy::clear_week_day_mask() {
  week_day_mask_ = 0;
  clear_has_week_day_mask();
}
inline ::google::protobuf::int32 CltAlarmPolicy::week_day_mask() const {
  return week_day_mask_;
}
inline void CltAlarmPolicy::set_week_day_mask(::google::protobuf::int32 value) {
  set_has_week_day_mask();
  week_day_mask_ = value;
}

// -------------------------------------------------------------------

// CltAlarmPolicyList

// repeated .isafetec.CltAlarmPolicy list = 1;
inline int CltAlarmPolicyList::list_size() const {
  return list_.size();
}
inline void CltAlarmPolicyList::clear_list() {
  list_.Clear();
}
inline const ::isafetec::CltAlarmPolicy& CltAlarmPolicyList::list(int index) const {
  return list_.Get(index);
}
inline ::isafetec::CltAlarmPolicy* CltAlarmPolicyList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::isafetec::CltAlarmPolicy* CltAlarmPolicyList::list_ReleaseAt(int index) {
  return list_.ReleaseAt(index);
}
inline void CltAlarmPolicyList::list_RemoveAt(int index) {
  list_.RemoveAt(index);
}
inline ::isafetec::CltAlarmPolicy* CltAlarmPolicyList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::CltAlarmPolicy >&
CltAlarmPolicyList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::CltAlarmPolicy >*
CltAlarmPolicyList::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// CltQQFilterPolicy_FilterNode

// optional string qqnumber = 1;
inline bool CltQQFilterPolicy_FilterNode::has_qqnumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CltQQFilterPolicy_FilterNode::set_has_qqnumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CltQQFilterPolicy_FilterNode::clear_has_qqnumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CltQQFilterPolicy_FilterNode::clear_qqnumber() {
  if (qqnumber_ != &::google::protobuf::internal::kEmptyString) {
    qqnumber_->clear();
  }
  clear_has_qqnumber();
}
inline const ::std::string& CltQQFilterPolicy_FilterNode::qqnumber() const {
  return *qqnumber_;
}
inline void CltQQFilterPolicy_FilterNode::set_qqnumber(const ::std::string& value) {
  set_has_qqnumber();
  if (qqnumber_ == &::google::protobuf::internal::kEmptyString) {
    qqnumber_ = new ::std::string;
  }
  qqnumber_->assign(value);
}
inline void CltQQFilterPolicy_FilterNode::set_qqnumber(const char* value) {
  set_has_qqnumber();
  if (qqnumber_ == &::google::protobuf::internal::kEmptyString) {
    qqnumber_ = new ::std::string;
  }
  qqnumber_->assign(value);
}
inline void CltQQFilterPolicy_FilterNode::set_qqnumber(const char* value, size_t size) {
  set_has_qqnumber();
  if (qqnumber_ == &::google::protobuf::internal::kEmptyString) {
    qqnumber_ = new ::std::string;
  }
  qqnumber_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CltQQFilterPolicy_FilterNode::mutable_qqnumber() {
  set_has_qqnumber();
  if (qqnumber_ == &::google::protobuf::internal::kEmptyString) {
    qqnumber_ = new ::std::string;
  }
  return qqnumber_;
}
inline ::std::string* CltQQFilterPolicy_FilterNode::release_qqnumber() {
  clear_has_qqnumber();
  if (qqnumber_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = qqnumber_;
    qqnumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CltQQFilterPolicy

// optional int32 id = 1;
inline bool CltQQFilterPolicy::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CltQQFilterPolicy::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CltQQFilterPolicy::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CltQQFilterPolicy::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 CltQQFilterPolicy::id() const {
  return id_;
}
inline void CltQQFilterPolicy::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 type = 2;
inline bool CltQQFilterPolicy::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CltQQFilterPolicy::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CltQQFilterPolicy::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CltQQFilterPolicy::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 CltQQFilterPolicy::type() const {
  return type_;
}
inline void CltQQFilterPolicy::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional double last_time = 3;
inline bool CltQQFilterPolicy::has_last_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CltQQFilterPolicy::set_has_last_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CltQQFilterPolicy::clear_has_last_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CltQQFilterPolicy::clear_last_time() {
  last_time_ = 0;
  clear_has_last_time();
}
inline double CltQQFilterPolicy::last_time() const {
  return last_time_;
}
inline void CltQQFilterPolicy::set_last_time(double value) {
  set_has_last_time();
  last_time_ = value;
}

// optional int32 inuse = 14;
inline bool CltQQFilterPolicy::has_inuse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CltQQFilterPolicy::set_has_inuse() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CltQQFilterPolicy::clear_has_inuse() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CltQQFilterPolicy::clear_inuse() {
  inuse_ = 0;
  clear_has_inuse();
}
inline ::google::protobuf::int32 CltQQFilterPolicy::inuse() const {
  return inuse_;
}
inline void CltQQFilterPolicy::set_inuse(::google::protobuf::int32 value) {
  set_has_inuse();
  inuse_ = value;
}

// optional .isafetec.FILTER_TYPE filter_type = 4;
inline bool CltQQFilterPolicy::has_filter_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CltQQFilterPolicy::set_has_filter_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CltQQFilterPolicy::clear_has_filter_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CltQQFilterPolicy::clear_filter_type() {
  filter_type_ = 0;
  clear_has_filter_type();
}
inline isafetec::FILTER_TYPE CltQQFilterPolicy::filter_type() const {
  return static_cast< isafetec::FILTER_TYPE >(filter_type_);
}
inline void CltQQFilterPolicy::set_filter_type(isafetec::FILTER_TYPE value) {
  GOOGLE_DCHECK(isafetec::FILTER_TYPE_IsValid(value));
  set_has_filter_type();
  filter_type_ = value;
}

// optional .isafetec.FILTERLIST_TYPE filterlist_type = 5;
inline bool CltQQFilterPolicy::has_filterlist_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CltQQFilterPolicy::set_has_filterlist_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CltQQFilterPolicy::clear_has_filterlist_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CltQQFilterPolicy::clear_filterlist_type() {
  filterlist_type_ = 0;
  clear_has_filterlist_type();
}
inline isafetec::FILTERLIST_TYPE CltQQFilterPolicy::filterlist_type() const {
  return static_cast< isafetec::FILTERLIST_TYPE >(filterlist_type_);
}
inline void CltQQFilterPolicy::set_filterlist_type(isafetec::FILTERLIST_TYPE value) {
  GOOGLE_DCHECK(isafetec::FILTERLIST_TYPE_IsValid(value));
  set_has_filterlist_type();
  filterlist_type_ = value;
}

// repeated .isafetec.CltQQFilterPolicy.FilterNode filterlist = 6;
inline int CltQQFilterPolicy::filterlist_size() const {
  return filterlist_.size();
}
inline void CltQQFilterPolicy::clear_filterlist() {
  filterlist_.Clear();
}
inline const ::isafetec::CltQQFilterPolicy_FilterNode& CltQQFilterPolicy::filterlist(int index) const {
  return filterlist_.Get(index);
}
inline ::isafetec::CltQQFilterPolicy_FilterNode* CltQQFilterPolicy::mutable_filterlist(int index) {
  return filterlist_.Mutable(index);
}
inline ::isafetec::CltQQFilterPolicy_FilterNode* CltQQFilterPolicy::filterlist_ReleaseAt(int index) {
  return filterlist_.ReleaseAt(index);
}
inline void CltQQFilterPolicy::filterlist_RemoveAt(int index) {
  filterlist_.RemoveAt(index);
}
inline ::isafetec::CltQQFilterPolicy_FilterNode* CltQQFilterPolicy::add_filterlist() {
  return filterlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::CltQQFilterPolicy_FilterNode >&
CltQQFilterPolicy::filterlist() const {
  return filterlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::CltQQFilterPolicy_FilterNode >*
CltQQFilterPolicy::mutable_filterlist() {
  return &filterlist_;
}

// optional .isafetec.TimeSpanList timelist = 7;
inline bool CltQQFilterPolicy::has_timelist() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CltQQFilterPolicy::set_has_timelist() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CltQQFilterPolicy::clear_has_timelist() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CltQQFilterPolicy::clear_timelist() {
  if (timelist_ != NULL) timelist_->::isafetec::TimeSpanList::Clear();
  clear_has_timelist();
}
inline const ::isafetec::TimeSpanList& CltQQFilterPolicy::timelist() const {
  return timelist_ != NULL ? *timelist_ : *default_instance_->timelist_;
}
inline ::isafetec::TimeSpanList* CltQQFilterPolicy::mutable_timelist() {
  set_has_timelist();
  if (timelist_ == NULL) timelist_ = new ::isafetec::TimeSpanList;
  return timelist_;
}
inline ::isafetec::TimeSpanList* CltQQFilterPolicy::release_timelist() {
  clear_has_timelist();
  ::isafetec::TimeSpanList* temp = timelist_;
  timelist_ = NULL;
  return temp;
}

// optional .isafetec.FILTER_MODE filter_mode = 8;
inline bool CltQQFilterPolicy::has_filter_mode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CltQQFilterPolicy::set_has_filter_mode() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CltQQFilterPolicy::clear_has_filter_mode() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CltQQFilterPolicy::clear_filter_mode() {
  filter_mode_ = 0;
  clear_has_filter_mode();
}
inline isafetec::FILTER_MODE CltQQFilterPolicy::filter_mode() const {
  return static_cast< isafetec::FILTER_MODE >(filter_mode_);
}
inline void CltQQFilterPolicy::set_filter_mode(isafetec::FILTER_MODE value) {
  GOOGLE_DCHECK(isafetec::FILTER_MODE_IsValid(value));
  set_has_filter_mode();
  filter_mode_ = value;
}

// optional double usetimeF = 9;
inline bool CltQQFilterPolicy::has_usetimef() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CltQQFilterPolicy::set_has_usetimef() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CltQQFilterPolicy::clear_has_usetimef() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CltQQFilterPolicy::clear_usetimef() {
  usetimef_ = 0;
  clear_has_usetimef();
}
inline double CltQQFilterPolicy::usetimef() const {
  return usetimef_;
}
inline void CltQQFilterPolicy::set_usetimef(double value) {
  set_has_usetimef();
  usetimef_ = value;
}

// optional double usetimeE = 10;
inline bool CltQQFilterPolicy::has_usetimee() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CltQQFilterPolicy::set_has_usetimee() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CltQQFilterPolicy::clear_has_usetimee() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CltQQFilterPolicy::clear_usetimee() {
  usetimee_ = 0;
  clear_has_usetimee();
}
inline double CltQQFilterPolicy::usetimee() const {
  return usetimee_;
}
inline void CltQQFilterPolicy::set_usetimee(double value) {
  set_has_usetimee();
  usetimee_ = value;
}

// optional string hints = 11;
inline bool CltQQFilterPolicy::has_hints() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CltQQFilterPolicy::set_has_hints() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CltQQFilterPolicy::clear_has_hints() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CltQQFilterPolicy::clear_hints() {
  if (hints_ != &::google::protobuf::internal::kEmptyString) {
    hints_->clear();
  }
  clear_has_hints();
}
inline const ::std::string& CltQQFilterPolicy::hints() const {
  return *hints_;
}
inline void CltQQFilterPolicy::set_hints(const ::std::string& value) {
  set_has_hints();
  if (hints_ == &::google::protobuf::internal::kEmptyString) {
    hints_ = new ::std::string;
  }
  hints_->assign(value);
}
inline void CltQQFilterPolicy::set_hints(const char* value) {
  set_has_hints();
  if (hints_ == &::google::protobuf::internal::kEmptyString) {
    hints_ = new ::std::string;
  }
  hints_->assign(value);
}
inline void CltQQFilterPolicy::set_hints(const char* value, size_t size) {
  set_has_hints();
  if (hints_ == &::google::protobuf::internal::kEmptyString) {
    hints_ = new ::std::string;
  }
  hints_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CltQQFilterPolicy::mutable_hints() {
  set_has_hints();
  if (hints_ == &::google::protobuf::internal::kEmptyString) {
    hints_ = new ::std::string;
  }
  return hints_;
}
inline ::std::string* CltQQFilterPolicy::release_hints() {
  clear_has_hints();
  if (hints_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hints_;
    hints_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 index = 12;
inline bool CltQQFilterPolicy::has_index() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CltQQFilterPolicy::set_has_index() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CltQQFilterPolicy::clear_has_index() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CltQQFilterPolicy::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 CltQQFilterPolicy::index() const {
  return index_;
}
inline void CltQQFilterPolicy::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 week_day_mask = 13;
inline bool CltQQFilterPolicy::has_week_day_mask() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CltQQFilterPolicy::set_has_week_day_mask() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CltQQFilterPolicy::clear_has_week_day_mask() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CltQQFilterPolicy::clear_week_day_mask() {
  week_day_mask_ = 0;
  clear_has_week_day_mask();
}
inline ::google::protobuf::int32 CltQQFilterPolicy::week_day_mask() const {
  return week_day_mask_;
}
inline void CltQQFilterPolicy::set_week_day_mask(::google::protobuf::int32 value) {
  set_has_week_day_mask();
  week_day_mask_ = value;
}

// -------------------------------------------------------------------

// CltQQFilterPolicyList

// repeated .isafetec.CltQQFilterPolicy list = 1;
inline int CltQQFilterPolicyList::list_size() const {
  return list_.size();
}
inline void CltQQFilterPolicyList::clear_list() {
  list_.Clear();
}
inline const ::isafetec::CltQQFilterPolicy& CltQQFilterPolicyList::list(int index) const {
  return list_.Get(index);
}
inline ::isafetec::CltQQFilterPolicy* CltQQFilterPolicyList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::isafetec::CltQQFilterPolicy* CltQQFilterPolicyList::list_ReleaseAt(int index) {
  return list_.ReleaseAt(index);
}
inline void CltQQFilterPolicyList::list_RemoveAt(int index) {
  list_.RemoveAt(index);
}
inline ::isafetec::CltQQFilterPolicy* CltQQFilterPolicyList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::CltQQFilterPolicy >&
CltQQFilterPolicyList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::CltQQFilterPolicy >*
CltQQFilterPolicyList::mutable_list() {
  return &list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace isafetec

// @@protoc_insertion_point(global_scope)
