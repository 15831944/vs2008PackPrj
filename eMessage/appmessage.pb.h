// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: appmessage.proto

#ifndef PROTOBUF_appmessage_2eproto__INCLUDED
#define PROTOBUF_appmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace isafetec {

// Internal implementation detail -- do not call these.
void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
void protobuf_AssignDesc_appmessage_2eproto();
void protobuf_ShutdownFile_appmessage_2eproto();

class CPUInfo;
class CPUInfoList;
class BIOSInfo;
class BIOSInfoList;
class CDRomDriveInfo;
class CDRomDriveInfoList;
class ComputerSystemInfo;
class ComputerSystemInfoList;
class ComputerSystemProductInfo;
class ComputerSystemProductInfoList;
class DiskPartitionInfo;
class DiskPartitionInfoList;
class DisplayConfigurationInfo;
class DisplayConfigurationInfoList;
class IDEControllerInfo;
class IDEControllerInfoList;
class InstalledSofteware;
class InstalledSoftewareList;
class KeyboardInfo;
class KeyboardInfoList;
class LogicalDiskInfo;
class LogicalDiskInfoList;
class MainBoardInfo;
class MainBoardInfoList;
class MemoryDeviceInfo;
class MemoryDeviceInfoList;
class MemoryInfo;
class MemoryInfoList;
class MouseInfo;
class MouseInfoList;
class NetWorkAdapterInfo;
class NetWorkAdapterInfoList;
class PhysicalDiskDriversInfo;
class PhysicalDiskDriversInfoList;
class PhysicalMediaInfo;
class PhysicalMediaInfoList;
class USBControllerInfo;
class USBControllerInfoList;
class VideoDisplayDeviceInfo;
class VideoDisplayDeviceInfoList;
class CltServiceInfo;
class CltServiceList;
class CltProcessInfo;
class CltProcessList;
class CltUser;
class CltUserList;
class CltGroup;
class CltGroupList;
class CltShareInfo;
class CltShareList;
class CltStartItem;
class CltStartList;
class CltDiskInfo;
class CltDiskList;
class DeviceControlInfo;
class DeviceControlClassInfo;
class DeviceControlClassList;
class FireWallInfo;
class DataBaseInfo;
class DataBaseInfoList;
class ODBCSourceInfo;
class ODBCSourceInfoList;
class ODBCDriverInfo;
class ODBCDriverInfoList;
class AntiVirusSoftWareInfo;
class AntiVirusSoftWareInfoList;
class DisposeSoftInfo;
class DisposeSoftInfoList;

// ===================================================================

class LIBPROTOBUF_EXPORT CPUInfo : public ::google::protobuf::Message {
 public:
  CPUInfo();
  virtual ~CPUInfo();
  
  CPUInfo(const CPUInfo& from);
  
  inline CPUInfo& operator=(const CPUInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CPUInfo& default_instance();
  
  void Swap(CPUInfo* other);
  
  // implements Message ----------------------------------------------
  
  CPUInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CPUInfo& from);
  void MergeFrom(const CPUInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string package_code = 1;
  inline bool has_package_code() const;
  inline void clear_package_code();
  static const int kPackageCodeFieldNumber = 1;
  inline const ::std::string& package_code() const;
  inline void set_package_code(const ::std::string& value);
  inline void set_package_code(const char* value);
  inline void set_package_code(const char* value, size_t size);
  inline ::std::string* mutable_package_code();
  inline ::std::string* release_package_code();
  
  // optional int32 checktype = 2;
  inline bool has_checktype() const;
  inline void clear_checktype();
  static const int kChecktypeFieldNumber = 2;
  inline ::google::protobuf::int32 checktype() const;
  inline void set_checktype(::google::protobuf::int32 value);
  
  // optional double scan_time = 3;
  inline bool has_scan_time() const;
  inline void clear_scan_time();
  static const int kScanTimeFieldNumber = 3;
  inline double scan_time() const;
  inline void set_scan_time(double value);
  
  // optional double addtime = 50;
  inline bool has_addtime() const;
  inline void clear_addtime();
  static const int kAddtimeFieldNumber = 50;
  inline double addtime() const;
  inline void set_addtime(double value);
  
  // optional int32 Architecture = 4;
  inline bool has_architecture() const;
  inline void clear_architecture();
  static const int kArchitectureFieldNumber = 4;
  inline ::google::protobuf::int32 architecture() const;
  inline void set_architecture(::google::protobuf::int32 value);
  
  // optional int32 Availability = 5;
  inline bool has_availability() const;
  inline void clear_availability();
  static const int kAvailabilityFieldNumber = 5;
  inline ::google::protobuf::int32 availability() const;
  inline void set_availability(::google::protobuf::int32 value);
  
  // optional int32 CurrentClockSpeed = 6;
  inline bool has_currentclockspeed() const;
  inline void clear_currentclockspeed();
  static const int kCurrentClockSpeedFieldNumber = 6;
  inline ::google::protobuf::int32 currentclockspeed() const;
  inline void set_currentclockspeed(::google::protobuf::int32 value);
  
  // optional int32 CurrentVoltage = 7;
  inline bool has_currentvoltage() const;
  inline void clear_currentvoltage();
  static const int kCurrentVoltageFieldNumber = 7;
  inline ::google::protobuf::int32 currentvoltage() const;
  inline void set_currentvoltage(::google::protobuf::int32 value);
  
  // optional int32 DataWidth = 8;
  inline bool has_datawidth() const;
  inline void clear_datawidth();
  static const int kDataWidthFieldNumber = 8;
  inline ::google::protobuf::int32 datawidth() const;
  inline void set_datawidth(::google::protobuf::int32 value);
  
  // optional int32 ExtClock = 9;
  inline bool has_extclock() const;
  inline void clear_extclock();
  static const int kExtClockFieldNumber = 9;
  inline ::google::protobuf::int32 extclock() const;
  inline void set_extclock(::google::protobuf::int32 value);
  
  // optional int32 Family = 10;
  inline bool has_family() const;
  inline void clear_family();
  static const int kFamilyFieldNumber = 10;
  inline ::google::protobuf::int32 family() const;
  inline void set_family(::google::protobuf::int32 value);
  
  // optional int32 L2CacheSpeed = 11;
  inline bool has_l2cachespeed() const;
  inline void clear_l2cachespeed();
  static const int kL2CacheSpeedFieldNumber = 11;
  inline ::google::protobuf::int32 l2cachespeed() const;
  inline void set_l2cachespeed(::google::protobuf::int32 value);
  
  // optional int32 L3CacheSize = 12;
  inline bool has_l3cachesize() const;
  inline void clear_l3cachesize();
  static const int kL3CacheSizeFieldNumber = 12;
  inline ::google::protobuf::int32 l3cachesize() const;
  inline void set_l3cachesize(::google::protobuf::int32 value);
  
  // optional int32 L3CacheSpeed = 13;
  inline bool has_l3cachespeed() const;
  inline void clear_l3cachespeed();
  static const int kL3CacheSpeedFieldNumber = 13;
  inline ::google::protobuf::int32 l3cachespeed() const;
  inline void set_l3cachespeed(::google::protobuf::int32 value);
  
  // optional int32 MaxClockSpeed = 14;
  inline bool has_maxclockspeed() const;
  inline void clear_maxclockspeed();
  static const int kMaxClockSpeedFieldNumber = 14;
  inline ::google::protobuf::int32 maxclockspeed() const;
  inline void set_maxclockspeed(::google::protobuf::int32 value);
  
  // optional int32 LoadPercentage = 15;
  inline bool has_loadpercentage() const;
  inline void clear_loadpercentage();
  static const int kLoadPercentageFieldNumber = 15;
  inline ::google::protobuf::int32 loadpercentage() const;
  inline void set_loadpercentage(::google::protobuf::int32 value);
  
  // optional int32 ProcessorType = 16;
  inline bool has_processortype() const;
  inline void clear_processortype();
  static const int kProcessorTypeFieldNumber = 16;
  inline ::google::protobuf::int32 processortype() const;
  inline void set_processortype(::google::protobuf::int32 value);
  
  // optional int32 L2CacheSize = 17;
  inline bool has_l2cachesize() const;
  inline void clear_l2cachesize();
  static const int kL2CacheSizeFieldNumber = 17;
  inline ::google::protobuf::int32 l2cachesize() const;
  inline void set_l2cachesize(::google::protobuf::int32 value);
  
  // optional string Version = 18;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 18;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  
  // optional string Description = 19;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 19;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  
  // optional int32 AddressWidth = 20;
  inline bool has_addresswidth() const;
  inline void clear_addresswidth();
  static const int kAddressWidthFieldNumber = 20;
  inline ::google::protobuf::int32 addresswidth() const;
  inline void set_addresswidth(::google::protobuf::int32 value);
  
  // optional string Manufacturer = 21;
  inline bool has_manufacturer() const;
  inline void clear_manufacturer();
  static const int kManufacturerFieldNumber = 21;
  inline const ::std::string& manufacturer() const;
  inline void set_manufacturer(const ::std::string& value);
  inline void set_manufacturer(const char* value);
  inline void set_manufacturer(const char* value, size_t size);
  inline ::std::string* mutable_manufacturer();
  inline ::std::string* release_manufacturer();
  
  // optional string Name = 22;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 22;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string ProcessorId = 23;
  inline bool has_processorid() const;
  inline void clear_processorid();
  static const int kProcessorIdFieldNumber = 23;
  inline const ::std::string& processorid() const;
  inline void set_processorid(const ::std::string& value);
  inline void set_processorid(const char* value);
  inline void set_processorid(const char* value, size_t size);
  inline ::std::string* mutable_processorid();
  inline ::std::string* release_processorid();
  
  // optional string Role = 24;
  inline bool has_role() const;
  inline void clear_role();
  static const int kRoleFieldNumber = 24;
  inline const ::std::string& role() const;
  inline void set_role(const ::std::string& value);
  inline void set_role(const char* value);
  inline void set_role(const char* value, size_t size);
  inline ::std::string* mutable_role();
  inline ::std::string* release_role();
  
  // optional string SocketDesignation = 25;
  inline bool has_socketdesignation() const;
  inline void clear_socketdesignation();
  static const int kSocketDesignationFieldNumber = 25;
  inline const ::std::string& socketdesignation() const;
  inline void set_socketdesignation(const ::std::string& value);
  inline void set_socketdesignation(const char* value);
  inline void set_socketdesignation(const char* value, size_t size);
  inline ::std::string* mutable_socketdesignation();
  inline ::std::string* release_socketdesignation();
  
  // optional string Status = 26;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 26;
  inline const ::std::string& status() const;
  inline void set_status(const ::std::string& value);
  inline void set_status(const char* value);
  inline void set_status(const char* value, size_t size);
  inline ::std::string* mutable_status();
  inline ::std::string* release_status();
  
  // optional string Stepping = 27;
  inline bool has_stepping() const;
  inline void clear_stepping();
  static const int kSteppingFieldNumber = 27;
  inline const ::std::string& stepping() const;
  inline void set_stepping(const ::std::string& value);
  inline void set_stepping(const char* value);
  inline void set_stepping(const char* value, size_t size);
  inline ::std::string* mutable_stepping();
  inline ::std::string* release_stepping();
  
  // optional double BuyTime = 28;
  inline bool has_buytime() const;
  inline void clear_buytime();
  static const int kBuyTimeFieldNumber = 28;
  inline double buytime() const;
  inline void set_buytime(double value);
  
  // optional string BuyPrice = 29;
  inline bool has_buyprice() const;
  inline void clear_buyprice();
  static const int kBuyPriceFieldNumber = 29;
  inline const ::std::string& buyprice() const;
  inline void set_buyprice(const ::std::string& value);
  inline void set_buyprice(const char* value);
  inline void set_buyprice(const char* value, size_t size);
  inline ::std::string* mutable_buyprice();
  inline ::std::string* release_buyprice();
  
  // optional double DCheckTime = 30;
  inline bool has_dchecktime() const;
  inline void clear_dchecktime();
  static const int kDCheckTimeFieldNumber = 30;
  inline double dchecktime() const;
  inline void set_dchecktime(double value);
  
  // optional string OtherInfo = 31;
  inline bool has_otherinfo() const;
  inline void clear_otherinfo();
  static const int kOtherInfoFieldNumber = 31;
  inline const ::std::string& otherinfo() const;
  inline void set_otherinfo(const ::std::string& value);
  inline void set_otherinfo(const char* value);
  inline void set_otherinfo(const char* value, size_t size);
  inline ::std::string* mutable_otherinfo();
  inline ::std::string* release_otherinfo();
  
  // optional string BuyName = 32;
  inline bool has_buyname() const;
  inline void clear_buyname();
  static const int kBuyNameFieldNumber = 32;
  inline const ::std::string& buyname() const;
  inline void set_buyname(const ::std::string& value);
  inline void set_buyname(const char* value);
  inline void set_buyname(const char* value, size_t size);
  inline ::std::string* mutable_buyname();
  inline ::std::string* release_buyname();
  
  // @@protoc_insertion_point(class_scope:isafetec.CPUInfo)
 private:
  inline void set_has_package_code();
  inline void clear_has_package_code();
  inline void set_has_checktype();
  inline void clear_has_checktype();
  inline void set_has_scan_time();
  inline void clear_has_scan_time();
  inline void set_has_addtime();
  inline void clear_has_addtime();
  inline void set_has_architecture();
  inline void clear_has_architecture();
  inline void set_has_availability();
  inline void clear_has_availability();
  inline void set_has_currentclockspeed();
  inline void clear_has_currentclockspeed();
  inline void set_has_currentvoltage();
  inline void clear_has_currentvoltage();
  inline void set_has_datawidth();
  inline void clear_has_datawidth();
  inline void set_has_extclock();
  inline void clear_has_extclock();
  inline void set_has_family();
  inline void clear_has_family();
  inline void set_has_l2cachespeed();
  inline void clear_has_l2cachespeed();
  inline void set_has_l3cachesize();
  inline void clear_has_l3cachesize();
  inline void set_has_l3cachespeed();
  inline void clear_has_l3cachespeed();
  inline void set_has_maxclockspeed();
  inline void clear_has_maxclockspeed();
  inline void set_has_loadpercentage();
  inline void clear_has_loadpercentage();
  inline void set_has_processortype();
  inline void clear_has_processortype();
  inline void set_has_l2cachesize();
  inline void clear_has_l2cachesize();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_addresswidth();
  inline void clear_has_addresswidth();
  inline void set_has_manufacturer();
  inline void clear_has_manufacturer();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_processorid();
  inline void clear_has_processorid();
  inline void set_has_role();
  inline void clear_has_role();
  inline void set_has_socketdesignation();
  inline void clear_has_socketdesignation();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_stepping();
  inline void clear_has_stepping();
  inline void set_has_buytime();
  inline void clear_has_buytime();
  inline void set_has_buyprice();
  inline void clear_has_buyprice();
  inline void set_has_dchecktime();
  inline void clear_has_dchecktime();
  inline void set_has_otherinfo();
  inline void clear_has_otherinfo();
  inline void set_has_buyname();
  inline void clear_has_buyname();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* package_code_;
  double scan_time_;
  ::google::protobuf::int32 checktype_;
  ::google::protobuf::int32 architecture_;
  double addtime_;
  ::google::protobuf::int32 availability_;
  ::google::protobuf::int32 currentclockspeed_;
  ::google::protobuf::int32 currentvoltage_;
  ::google::protobuf::int32 datawidth_;
  ::google::protobuf::int32 extclock_;
  ::google::protobuf::int32 family_;
  ::google::protobuf::int32 l2cachespeed_;
  ::google::protobuf::int32 l3cachesize_;
  ::google::protobuf::int32 l3cachespeed_;
  ::google::protobuf::int32 maxclockspeed_;
  ::google::protobuf::int32 loadpercentage_;
  ::google::protobuf::int32 processortype_;
  ::std::string* version_;
  ::google::protobuf::int32 l2cachesize_;
  ::google::protobuf::int32 addresswidth_;
  ::std::string* description_;
  ::std::string* manufacturer_;
  ::std::string* name_;
  ::std::string* processorid_;
  ::std::string* role_;
  ::std::string* socketdesignation_;
  ::std::string* status_;
  ::std::string* stepping_;
  double buytime_;
  ::std::string* buyprice_;
  double dchecktime_;
  ::std::string* otherinfo_;
  ::std::string* buyname_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(33 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static CPUInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT CPUInfoList : public ::google::protobuf::Message {
 public:
  CPUInfoList();
  virtual ~CPUInfoList();
  
  CPUInfoList(const CPUInfoList& from);
  
  inline CPUInfoList& operator=(const CPUInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CPUInfoList& default_instance();
  
  void Swap(CPUInfoList* other);
  
  // implements Message ----------------------------------------------
  
  CPUInfoList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CPUInfoList& from);
  void MergeFrom(const CPUInfoList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .isafetec.CPUInfo list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::isafetec::CPUInfo& list(int index) const;
  inline ::isafetec::CPUInfo* mutable_list(int index);
  inline ::isafetec::CPUInfo* CPUInfoList::list_ReleaseAt(int index); 
  inline void CPUInfoList::list_RemoveAt(int index); 
  inline ::isafetec::CPUInfo* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::isafetec::CPUInfo >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::isafetec::CPUInfo >*
      mutable_list();
  
  // optional int32 alarmed = 2;
  inline bool has_alarmed() const;
  inline void clear_alarmed();
  static const int kAlarmedFieldNumber = 2;
  inline ::google::protobuf::int32 alarmed() const;
  inline void set_alarmed(::google::protobuf::int32 value);
  
  // optional string winuser = 3;
  inline bool has_winuser() const;
  inline void clear_winuser();
  static const int kWinuserFieldNumber = 3;
  inline const ::std::string& winuser() const;
  inline void set_winuser(const ::std::string& value);
  inline void set_winuser(const char* value);
  inline void set_winuser(const char* value, size_t size);
  inline ::std::string* mutable_winuser();
  inline ::std::string* release_winuser();
  
  // @@protoc_insertion_point(class_scope:isafetec.CPUInfoList)
 private:
  inline void set_has_alarmed();
  inline void clear_has_alarmed();
  inline void set_has_winuser();
  inline void clear_has_winuser();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::isafetec::CPUInfo > list_;
  ::std::string* winuser_;
  ::google::protobuf::int32 alarmed_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static CPUInfoList* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT BIOSInfo : public ::google::protobuf::Message {
 public:
  BIOSInfo();
  virtual ~BIOSInfo();
  
  BIOSInfo(const BIOSInfo& from);
  
  inline BIOSInfo& operator=(const BIOSInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BIOSInfo& default_instance();
  
  void Swap(BIOSInfo* other);
  
  // implements Message ----------------------------------------------
  
  BIOSInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BIOSInfo& from);
  void MergeFrom(const BIOSInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string package_code = 1;
  inline bool has_package_code() const;
  inline void clear_package_code();
  static const int kPackageCodeFieldNumber = 1;
  inline const ::std::string& package_code() const;
  inline void set_package_code(const ::std::string& value);
  inline void set_package_code(const char* value);
  inline void set_package_code(const char* value, size_t size);
  inline ::std::string* mutable_package_code();
  inline ::std::string* release_package_code();
  
  // optional int32 checktype = 2;
  inline bool has_checktype() const;
  inline void clear_checktype();
  static const int kChecktypeFieldNumber = 2;
  inline ::google::protobuf::int32 checktype() const;
  inline void set_checktype(::google::protobuf::int32 value);
  
  // optional double scan_time = 3;
  inline bool has_scan_time() const;
  inline void clear_scan_time();
  static const int kScanTimeFieldNumber = 3;
  inline double scan_time() const;
  inline void set_scan_time(double value);
  
  // optional double addtime = 50;
  inline bool has_addtime() const;
  inline void clear_addtime();
  static const int kAddtimeFieldNumber = 50;
  inline double addtime() const;
  inline void set_addtime(double value);
  
  // optional int32 TargetOperatingSystem = 4;
  inline bool has_targetoperatingsystem() const;
  inline void clear_targetoperatingsystem();
  static const int kTargetOperatingSystemFieldNumber = 4;
  inline ::google::protobuf::int32 targetoperatingsystem() const;
  inline void set_targetoperatingsystem(::google::protobuf::int32 value);
  
  // optional int32 SoftwareElementState = 5;
  inline bool has_softwareelementstate() const;
  inline void clear_softwareelementstate();
  static const int kSoftwareElementStateFieldNumber = 5;
  inline ::google::protobuf::int32 softwareelementstate() const;
  inline void set_softwareelementstate(::google::protobuf::int32 value);
  
  // optional int32 PrimaryBIOS = 6;
  inline bool has_primarybios() const;
  inline void clear_primarybios();
  static const int kPrimaryBIOSFieldNumber = 6;
  inline ::google::protobuf::int32 primarybios() const;
  inline void set_primarybios(::google::protobuf::int32 value);
  
  // optional int32 SMBIOSPresent = 7;
  inline bool has_smbiospresent() const;
  inline void clear_smbiospresent();
  static const int kSMBIOSPresentFieldNumber = 7;
  inline ::google::protobuf::int32 smbiospresent() const;
  inline void set_smbiospresent(::google::protobuf::int32 value);
  
  // optional string BuildNumber = 8;
  inline bool has_buildnumber() const;
  inline void clear_buildnumber();
  static const int kBuildNumberFieldNumber = 8;
  inline const ::std::string& buildnumber() const;
  inline void set_buildnumber(const ::std::string& value);
  inline void set_buildnumber(const char* value);
  inline void set_buildnumber(const char* value, size_t size);
  inline ::std::string* mutable_buildnumber();
  inline ::std::string* release_buildnumber();
  
  // optional string CodeSet = 9;
  inline bool has_codeset() const;
  inline void clear_codeset();
  static const int kCodeSetFieldNumber = 9;
  inline const ::std::string& codeset() const;
  inline void set_codeset(const ::std::string& value);
  inline void set_codeset(const char* value);
  inline void set_codeset(const char* value, size_t size);
  inline ::std::string* mutable_codeset();
  inline ::std::string* release_codeset();
  
  // optional string CurrentLanguage = 10;
  inline bool has_currentlanguage() const;
  inline void clear_currentlanguage();
  static const int kCurrentLanguageFieldNumber = 10;
  inline const ::std::string& currentlanguage() const;
  inline void set_currentlanguage(const ::std::string& value);
  inline void set_currentlanguage(const char* value);
  inline void set_currentlanguage(const char* value, size_t size);
  inline ::std::string* mutable_currentlanguage();
  inline ::std::string* release_currentlanguage();
  
  // optional string Description = 11;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 11;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  
  // optional string IdentificationCode = 12;
  inline bool has_identificationcode() const;
  inline void clear_identificationcode();
  static const int kIdentificationCodeFieldNumber = 12;
  inline const ::std::string& identificationcode() const;
  inline void set_identificationcode(const ::std::string& value);
  inline void set_identificationcode(const char* value);
  inline void set_identificationcode(const char* value, size_t size);
  inline ::std::string* mutable_identificationcode();
  inline ::std::string* release_identificationcode();
  
  // optional string LanguageEdition = 13;
  inline bool has_languageedition() const;
  inline void clear_languageedition();
  static const int kLanguageEditionFieldNumber = 13;
  inline const ::std::string& languageedition() const;
  inline void set_languageedition(const ::std::string& value);
  inline void set_languageedition(const char* value);
  inline void set_languageedition(const char* value, size_t size);
  inline ::std::string* mutable_languageedition();
  inline ::std::string* release_languageedition();
  
  // optional string Manufacturer = 14;
  inline bool has_manufacturer() const;
  inline void clear_manufacturer();
  static const int kManufacturerFieldNumber = 14;
  inline const ::std::string& manufacturer() const;
  inline void set_manufacturer(const ::std::string& value);
  inline void set_manufacturer(const char* value);
  inline void set_manufacturer(const char* value, size_t size);
  inline ::std::string* mutable_manufacturer();
  inline ::std::string* release_manufacturer();
  
  // optional string OtherTargetOS = 15;
  inline bool has_othertargetos() const;
  inline void clear_othertargetos();
  static const int kOtherTargetOSFieldNumber = 15;
  inline const ::std::string& othertargetos() const;
  inline void set_othertargetos(const ::std::string& value);
  inline void set_othertargetos(const char* value);
  inline void set_othertargetos(const char* value, size_t size);
  inline ::std::string* mutable_othertargetos();
  inline ::std::string* release_othertargetos();
  
  // optional string SerialNumber = 16;
  inline bool has_serialnumber() const;
  inline void clear_serialnumber();
  static const int kSerialNumberFieldNumber = 16;
  inline const ::std::string& serialnumber() const;
  inline void set_serialnumber(const ::std::string& value);
  inline void set_serialnumber(const char* value);
  inline void set_serialnumber(const char* value, size_t size);
  inline ::std::string* mutable_serialnumber();
  inline ::std::string* release_serialnumber();
  
  // optional string SMBIOSBIOSVersion = 17;
  inline bool has_smbiosbiosversion() const;
  inline void clear_smbiosbiosversion();
  static const int kSMBIOSBIOSVersionFieldNumber = 17;
  inline const ::std::string& smbiosbiosversion() const;
  inline void set_smbiosbiosversion(const ::std::string& value);
  inline void set_smbiosbiosversion(const char* value);
  inline void set_smbiosbiosversion(const char* value, size_t size);
  inline ::std::string* mutable_smbiosbiosversion();
  inline ::std::string* release_smbiosbiosversion();
  
  // optional string SoftwareElementID = 18;
  inline bool has_softwareelementid() const;
  inline void clear_softwareelementid();
  static const int kSoftwareElementIDFieldNumber = 18;
  inline const ::std::string& softwareelementid() const;
  inline void set_softwareelementid(const ::std::string& value);
  inline void set_softwareelementid(const char* value);
  inline void set_softwareelementid(const char* value, size_t size);
  inline ::std::string* mutable_softwareelementid();
  inline ::std::string* release_softwareelementid();
  
  // optional string Status = 19;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 19;
  inline const ::std::string& status() const;
  inline void set_status(const ::std::string& value);
  inline void set_status(const char* value);
  inline void set_status(const char* value, size_t size);
  inline ::std::string* mutable_status();
  inline ::std::string* release_status();
  
  // optional string Version = 20;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 20;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  
  // optional int32 SMBIOSMajorVersion = 21;
  inline bool has_smbiosmajorversion() const;
  inline void clear_smbiosmajorversion();
  static const int kSMBIOSMajorVersionFieldNumber = 21;
  inline ::google::protobuf::int32 smbiosmajorversion() const;
  inline void set_smbiosmajorversion(::google::protobuf::int32 value);
  
  // optional int32 SMBIOSMinorVersion = 22;
  inline bool has_smbiosminorversion() const;
  inline void clear_smbiosminorversion();
  static const int kSMBIOSMinorVersionFieldNumber = 22;
  inline ::google::protobuf::int32 smbiosminorversion() const;
  inline void set_smbiosminorversion(::google::protobuf::int32 value);
  
  // optional double BuyTime = 23;
  inline bool has_buytime() const;
  inline void clear_buytime();
  static const int kBuyTimeFieldNumber = 23;
  inline double buytime() const;
  inline void set_buytime(double value);
  
  // optional string BuyPrice = 24;
  inline bool has_buyprice() const;
  inline void clear_buyprice();
  static const int kBuyPriceFieldNumber = 24;
  inline const ::std::string& buyprice() const;
  inline void set_buyprice(const ::std::string& value);
  inline void set_buyprice(const char* value);
  inline void set_buyprice(const char* value, size_t size);
  inline ::std::string* mutable_buyprice();
  inline ::std::string* release_buyprice();
  
  // optional double DCheckTime = 25;
  inline bool has_dchecktime() const;
  inline void clear_dchecktime();
  static const int kDCheckTimeFieldNumber = 25;
  inline double dchecktime() const;
  inline void set_dchecktime(double value);
  
  // optional string OtherInfo = 26;
  inline bool has_otherinfo() const;
  inline void clear_otherinfo();
  static const int kOtherInfoFieldNumber = 26;
  inline const ::std::string& otherinfo() const;
  inline void set_otherinfo(const ::std::string& value);
  inline void set_otherinfo(const char* value);
  inline void set_otherinfo(const char* value, size_t size);
  inline ::std::string* mutable_otherinfo();
  inline ::std::string* release_otherinfo();
  
  // optional string BuyName = 27;
  inline bool has_buyname() const;
  inline void clear_buyname();
  static const int kBuyNameFieldNumber = 27;
  inline const ::std::string& buyname() const;
  inline void set_buyname(const ::std::string& value);
  inline void set_buyname(const char* value);
  inline void set_buyname(const char* value, size_t size);
  inline ::std::string* mutable_buyname();
  inline ::std::string* release_buyname();
  
  // @@protoc_insertion_point(class_scope:isafetec.BIOSInfo)
 private:
  inline void set_has_package_code();
  inline void clear_has_package_code();
  inline void set_has_checktype();
  inline void clear_has_checktype();
  inline void set_has_scan_time();
  inline void clear_has_scan_time();
  inline void set_has_addtime();
  inline void clear_has_addtime();
  inline void set_has_targetoperatingsystem();
  inline void clear_has_targetoperatingsystem();
  inline void set_has_softwareelementstate();
  inline void clear_has_softwareelementstate();
  inline void set_has_primarybios();
  inline void clear_has_primarybios();
  inline void set_has_smbiospresent();
  inline void clear_has_smbiospresent();
  inline void set_has_buildnumber();
  inline void clear_has_buildnumber();
  inline void set_has_codeset();
  inline void clear_has_codeset();
  inline void set_has_currentlanguage();
  inline void clear_has_currentlanguage();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_identificationcode();
  inline void clear_has_identificationcode();
  inline void set_has_languageedition();
  inline void clear_has_languageedition();
  inline void set_has_manufacturer();
  inline void clear_has_manufacturer();
  inline void set_has_othertargetos();
  inline void clear_has_othertargetos();
  inline void set_has_serialnumber();
  inline void clear_has_serialnumber();
  inline void set_has_smbiosbiosversion();
  inline void clear_has_smbiosbiosversion();
  inline void set_has_softwareelementid();
  inline void clear_has_softwareelementid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_smbiosmajorversion();
  inline void clear_has_smbiosmajorversion();
  inline void set_has_smbiosminorversion();
  inline void clear_has_smbiosminorversion();
  inline void set_has_buytime();
  inline void clear_has_buytime();
  inline void set_has_buyprice();
  inline void clear_has_buyprice();
  inline void set_has_dchecktime();
  inline void clear_has_dchecktime();
  inline void set_has_otherinfo();
  inline void clear_has_otherinfo();
  inline void set_has_buyname();
  inline void clear_has_buyname();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* package_code_;
  double scan_time_;
  ::google::protobuf::int32 checktype_;
  ::google::protobuf::int32 targetoperatingsystem_;
  double addtime_;
  ::google::protobuf::int32 softwareelementstate_;
  ::google::protobuf::int32 primarybios_;
  ::std::string* buildnumber_;
  ::std::string* codeset_;
  ::std::string* currentlanguage_;
  ::std::string* description_;
  ::std::string* identificationcode_;
  ::std::string* languageedition_;
  ::std::string* manufacturer_;
  ::google::protobuf::int32 smbiospresent_;
  ::google::protobuf::int32 smbiosmajorversion_;
  ::std::string* othertargetos_;
  ::std::string* serialnumber_;
  ::std::string* smbiosbiosversion_;
  ::std::string* softwareelementid_;
  ::std::string* status_;
  ::std::string* version_;
  double buytime_;
  ::std::string* buyprice_;
  double dchecktime_;
  ::std::string* otherinfo_;
  ::std::string* buyname_;
  ::google::protobuf::int32 smbiosminorversion_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(28 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static BIOSInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT BIOSInfoList : public ::google::protobuf::Message {
 public:
  BIOSInfoList();
  virtual ~BIOSInfoList();
  
  BIOSInfoList(const BIOSInfoList& from);
  
  inline BIOSInfoList& operator=(const BIOSInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BIOSInfoList& default_instance();
  
  void Swap(BIOSInfoList* other);
  
  // implements Message ----------------------------------------------
  
  BIOSInfoList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BIOSInfoList& from);
  void MergeFrom(const BIOSInfoList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .isafetec.BIOSInfo list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::isafetec::BIOSInfo& list(int index) const;
  inline ::isafetec::BIOSInfo* mutable_list(int index);
  inline ::isafetec::BIOSInfo* BIOSInfoList::list_ReleaseAt(int index); 
  inline void BIOSInfoList::list_RemoveAt(int index); 
  inline ::isafetec::BIOSInfo* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::isafetec::BIOSInfo >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::isafetec::BIOSInfo >*
      mutable_list();
  
  // optional int32 alarmed = 2;
  inline bool has_alarmed() const;
  inline void clear_alarmed();
  static const int kAlarmedFieldNumber = 2;
  inline ::google::protobuf::int32 alarmed() const;
  inline void set_alarmed(::google::protobuf::int32 value);
  
  // optional string winuser = 3;
  inline bool has_winuser() const;
  inline void clear_winuser();
  static const int kWinuserFieldNumber = 3;
  inline const ::std::string& winuser() const;
  inline void set_winuser(const ::std::string& value);
  inline void set_winuser(const char* value);
  inline void set_winuser(const char* value, size_t size);
  inline ::std::string* mutable_winuser();
  inline ::std::string* release_winuser();
  
  // @@protoc_insertion_point(class_scope:isafetec.BIOSInfoList)
 private:
  inline void set_has_alarmed();
  inline void clear_has_alarmed();
  inline void set_has_winuser();
  inline void clear_has_winuser();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::isafetec::BIOSInfo > list_;
  ::std::string* winuser_;
  ::google::protobuf::int32 alarmed_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static BIOSInfoList* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT CDRomDriveInfo : public ::google::protobuf::Message {
 public:
  CDRomDriveInfo();
  virtual ~CDRomDriveInfo();
  
  CDRomDriveInfo(const CDRomDriveInfo& from);
  
  inline CDRomDriveInfo& operator=(const CDRomDriveInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDRomDriveInfo& default_instance();
  
  void Swap(CDRomDriveInfo* other);
  
  // implements Message ----------------------------------------------
  
  CDRomDriveInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDRomDriveInfo& from);
  void MergeFrom(const CDRomDriveInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string package_code = 1;
  inline bool has_package_code() const;
  inline void clear_package_code();
  static const int kPackageCodeFieldNumber = 1;
  inline const ::std::string& package_code() const;
  inline void set_package_code(const ::std::string& value);
  inline void set_package_code(const char* value);
  inline void set_package_code(const char* value, size_t size);
  inline ::std::string* mutable_package_code();
  inline ::std::string* release_package_code();
  
  // optional int32 checktype = 2;
  inline bool has_checktype() const;
  inline void clear_checktype();
  static const int kChecktypeFieldNumber = 2;
  inline ::google::protobuf::int32 checktype() const;
  inline void set_checktype(::google::protobuf::int32 value);
  
  // optional double scan_time = 3;
  inline bool has_scan_time() const;
  inline void clear_scan_time();
  static const int kScanTimeFieldNumber = 3;
  inline double scan_time() const;
  inline void set_scan_time(double value);
  
  // optional double addtime = 50;
  inline bool has_addtime() const;
  inline void clear_addtime();
  static const int kAddtimeFieldNumber = 50;
  inline double addtime() const;
  inline void set_addtime(double value);
  
  // optional int32 FileSystemFlagsEx = 4;
  inline bool has_filesystemflagsex() const;
  inline void clear_filesystemflagsex();
  static const int kFileSystemFlagsExFieldNumber = 4;
  inline ::google::protobuf::int32 filesystemflagsex() const;
  inline void set_filesystemflagsex(::google::protobuf::int32 value);
  
  // optional uint64 MaxBlockSize = 5;
  inline bool has_maxblocksize() const;
  inline void clear_maxblocksize();
  static const int kMaxBlockSizeFieldNumber = 5;
  inline ::google::protobuf::uint64 maxblocksize() const;
  inline void set_maxblocksize(::google::protobuf::uint64 value);
  
  // optional int32 MaximumComponentLength = 6;
  inline bool has_maximumcomponentlength() const;
  inline void clear_maximumcomponentlength();
  static const int kMaximumComponentLengthFieldNumber = 6;
  inline ::google::protobuf::int32 maximumcomponentlength() const;
  inline void set_maximumcomponentlength(::google::protobuf::int32 value);
  
  // optional uint64 MaxMediaSize = 7;
  inline bool has_maxmediasize() const;
  inline void clear_maxmediasize();
  static const int kMaxMediaSizeFieldNumber = 7;
  inline ::google::protobuf::uint64 maxmediasize() const;
  inline void set_maxmediasize(::google::protobuf::uint64 value);
  
  // optional uint64 MinBlockSize = 8;
  inline bool has_minblocksize() const;
  inline void clear_minblocksize();
  static const int kMinBlockSizeFieldNumber = 8;
  inline ::google::protobuf::uint64 minblocksize() const;
  inline void set_minblocksize(::google::protobuf::uint64 value);
  
  // optional int32 NumberOfMediaSupported = 9;
  inline bool has_numberofmediasupported() const;
  inline void clear_numberofmediasupported();
  static const int kNumberOfMediaSupportedFieldNumber = 9;
  inline ::google::protobuf::int32 numberofmediasupported() const;
  inline void set_numberofmediasupported(::google::protobuf::int32 value);
  
  // optional int32 SCSIBus = 10;
  inline bool has_scsibus() const;
  inline void clear_scsibus();
  static const int kSCSIBusFieldNumber = 10;
  inline ::google::protobuf::int32 scsibus() const;
  inline void set_scsibus(::google::protobuf::int32 value);
  
  // optional int32 SCSILogicalUnit = 11;
  inline bool has_scsilogicalunit() const;
  inline void clear_scsilogicalunit();
  static const int kSCSILogicalUnitFieldNumber = 11;
  inline ::google::protobuf::int32 scsilogicalunit() const;
  inline void set_scsilogicalunit(::google::protobuf::int32 value);
  
  // optional int32 SCSIPort = 12;
  inline bool has_scsiport() const;
  inline void clear_scsiport();
  static const int kSCSIPortFieldNumber = 12;
  inline ::google::protobuf::int32 scsiport() const;
  inline void set_scsiport(::google::protobuf::int32 value);
  
  // optional int32 SCSITargetId = 13;
  inline bool has_scsitargetid() const;
  inline void clear_scsitargetid();
  static const int kSCSITargetIdFieldNumber = 13;
  inline ::google::protobuf::int32 scsitargetid() const;
  inline void set_scsitargetid(::google::protobuf::int32 value);
  
  // optional int32 SerialNumber = 14;
  inline bool has_serialnumber() const;
  inline void clear_serialnumber();
  static const int kSerialNumberFieldNumber = 14;
  inline ::google::protobuf::int32 serialnumber() const;
  inline void set_serialnumber(::google::protobuf::int32 value);
  
  // optional uint64 Size = 15;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 15;
  inline ::google::protobuf::uint64 size() const;
  inline void set_size(::google::protobuf::uint64 value);
  
  // optional int32 TransferRate = 17;
  inline bool has_transferrate() const;
  inline void clear_transferrate();
  static const int kTransferRateFieldNumber = 17;
  inline ::google::protobuf::int32 transferrate() const;
  inline void set_transferrate(::google::protobuf::int32 value);
  
  // optional int32 DriveIntegrity = 18;
  inline bool has_driveintegrity() const;
  inline void clear_driveintegrity();
  static const int kDriveIntegrityFieldNumber = 18;
  inline ::google::protobuf::int32 driveintegrity() const;
  inline void set_driveintegrity(::google::protobuf::int32 value);
  
  // optional int32 MediaLoaded = 19;
  inline bool has_medialoaded() const;
  inline void clear_medialoaded();
  static const int kMediaLoadedFieldNumber = 19;
  inline ::google::protobuf::int32 medialoaded() const;
  inline void set_medialoaded(::google::protobuf::int32 value);
  
  // optional int32 NeedsCleaning = 20;
  inline bool has_needscleaning() const;
  inline void clear_needscleaning();
  static const int kNeedsCleaningFieldNumber = 20;
  inline ::google::protobuf::int32 needscleaning() const;
  inline void set_needscleaning(::google::protobuf::int32 value);
  
  // optional string CompressionMethod = 21;
  inline bool has_compressionmethod() const;
  inline void clear_compressionmethod();
  static const int kCompressionMethodFieldNumber = 21;
  inline const ::std::string& compressionmethod() const;
  inline void set_compressionmethod(const ::std::string& value);
  inline void set_compressionmethod(const char* value);
  inline void set_compressionmethod(const char* value, size_t size);
  inline ::std::string* mutable_compressionmethod();
  inline ::std::string* release_compressionmethod();
  
  // optional string Description = 22;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 22;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  
  // optional string Drive = 23;
  inline bool has_drive() const;
  inline void clear_drive();
  static const int kDriveFieldNumber = 23;
  inline const ::std::string& drive() const;
  inline void set_drive(const ::std::string& value);
  inline void set_drive(const char* value);
  inline void set_drive(const char* value, size_t size);
  inline ::std::string* mutable_drive();
  inline ::std::string* release_drive();
  
  // optional string Manufacturer = 24;
  inline bool has_manufacturer() const;
  inline void clear_manufacturer();
  static const int kManufacturerFieldNumber = 24;
  inline const ::std::string& manufacturer() const;
  inline void set_manufacturer(const ::std::string& value);
  inline void set_manufacturer(const char* value);
  inline void set_manufacturer(const char* value, size_t size);
  inline ::std::string* mutable_manufacturer();
  inline ::std::string* release_manufacturer();
  
  // optional string MediaType = 25;
  inline bool has_mediatype() const;
  inline void clear_mediatype();
  static const int kMediaTypeFieldNumber = 25;
  inline const ::std::string& mediatype() const;
  inline void set_mediatype(const ::std::string& value);
  inline void set_mediatype(const char* value);
  inline void set_mediatype(const char* value, size_t size);
  inline ::std::string* mutable_mediatype();
  inline ::std::string* release_mediatype();
  
  // optional string PNPDeviceID = 26;
  inline bool has_pnpdeviceid() const;
  inline void clear_pnpdeviceid();
  static const int kPNPDeviceIDFieldNumber = 26;
  inline const ::std::string& pnpdeviceid() const;
  inline void set_pnpdeviceid(const ::std::string& value);
  inline void set_pnpdeviceid(const char* value);
  inline void set_pnpdeviceid(const char* value, size_t size);
  inline ::std::string* mutable_pnpdeviceid();
  inline ::std::string* release_pnpdeviceid();
  
  // optional string RevisionLevel = 27;
  inline bool has_revisionlevel() const;
  inline void clear_revisionlevel();
  static const int kRevisionLevelFieldNumber = 27;
  inline const ::std::string& revisionlevel() const;
  inline void set_revisionlevel(const ::std::string& value);
  inline void set_revisionlevel(const char* value);
  inline void set_revisionlevel(const char* value, size_t size);
  inline ::std::string* mutable_revisionlevel();
  inline ::std::string* release_revisionlevel();
  
  // optional string Status = 28;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 28;
  inline const ::std::string& status() const;
  inline void set_status(const ::std::string& value);
  inline void set_status(const char* value);
  inline void set_status(const char* value, size_t size);
  inline ::std::string* mutable_status();
  inline ::std::string* release_status();
  
  // optional string VolumeName = 29;
  inline bool has_volumename() const;
  inline void clear_volumename();
  static const int kVolumeNameFieldNumber = 29;
  inline const ::std::string& volumename() const;
  inline void set_volumename(const ::std::string& value);
  inline void set_volumename(const char* value);
  inline void set_volumename(const char* value, size_t size);
  inline ::std::string* mutable_volumename();
  inline ::std::string* release_volumename();
  
  // optional string VolumeSerialNumber = 30;
  inline bool has_volumeserialnumber() const;
  inline void clear_volumeserialnumber();
  static const int kVolumeSerialNumberFieldNumber = 30;
  inline const ::std::string& volumeserialnumber() const;
  inline void set_volumeserialnumber(const ::std::string& value);
  inline void set_volumeserialnumber(const char* value);
  inline void set_volumeserialnumber(const char* value, size_t size);
  inline ::std::string* mutable_volumeserialnumber();
  inline ::std::string* release_volumeserialnumber();
  
  // optional int32 Availability = 31;
  inline bool has_availability() const;
  inline void clear_availability();
  static const int kAvailabilityFieldNumber = 31;
  inline ::google::protobuf::int32 availability() const;
  inline void set_availability(::google::protobuf::int32 value);
  
  // optional int32 DefaultBlockSize = 32;
  inline bool has_defaultblocksize() const;
  inline void clear_defaultblocksize();
  static const int kDefaultBlockSizeFieldNumber = 32;
  inline ::google::protobuf::int32 defaultblocksize() const;
  inline void set_defaultblocksize(::google::protobuf::int32 value);
  
  // optional double BuyTime = 33;
  inline bool has_buytime() const;
  inline void clear_buytime();
  static const int kBuyTimeFieldNumber = 33;
  inline double buytime() const;
  inline void set_buytime(double value);
  
  // optional string BuyPrice = 34;
  inline bool has_buyprice() const;
  inline void clear_buyprice();
  static const int kBuyPriceFieldNumber = 34;
  inline const ::std::string& buyprice() const;
  inline void set_buyprice(const ::std::string& value);
  inline void set_buyprice(const char* value);
  inline void set_buyprice(const char* value, size_t size);
  inline ::std::string* mutable_buyprice();
  inline ::std::string* release_buyprice();
  
  // optional double DCheckTime = 35;
  inline bool has_dchecktime() const;
  inline void clear_dchecktime();
  static const int kDCheckTimeFieldNumber = 35;
  inline double dchecktime() const;
  inline void set_dchecktime(double value);
  
  // optional string OtherInfo = 36;
  inline bool has_otherinfo() const;
  inline void clear_otherinfo();
  static const int kOtherInfoFieldNumber = 36;
  inline const ::std::string& otherinfo() const;
  inline void set_otherinfo(const ::std::string& value);
  inline void set_otherinfo(const char* value);
  inline void set_otherinfo(const char* value, size_t size);
  inline ::std::string* mutable_otherinfo();
  inline ::std::string* release_otherinfo();
  
  // optional string BuyName = 37;
  inline bool has_buyname() const;
  inline void clear_buyname();
  static const int kBuyNameFieldNumber = 37;
  inline const ::std::string& buyname() const;
  inline void set_buyname(const ::std::string& value);
  inline void set_buyname(const char* value);
  inline void set_buyname(const char* value, size_t size);
  inline ::std::string* mutable_buyname();
  inline ::std::string* release_buyname();
  
  // @@protoc_insertion_point(class_scope:isafetec.CDRomDriveInfo)
 private:
  inline void set_has_package_code();
  inline void clear_has_package_code();
  inline void set_has_checktype();
  inline void clear_has_checktype();
  inline void set_has_scan_time();
  inline void clear_has_scan_time();
  inline void set_has_addtime();
  inline void clear_has_addtime();
  inline void set_has_filesystemflagsex();
  inline void clear_has_filesystemflagsex();
  inline void set_has_maxblocksize();
  inline void clear_has_maxblocksize();
  inline void set_has_maximumcomponentlength();
  inline void clear_has_maximumcomponentlength();
  inline void set_has_maxmediasize();
  inline void clear_has_maxmediasize();
  inline void set_has_minblocksize();
  inline void clear_has_minblocksize();
  inline void set_has_numberofmediasupported();
  inline void clear_has_numberofmediasupported();
  inline void set_has_scsibus();
  inline void clear_has_scsibus();
  inline void set_has_scsilogicalunit();
  inline void clear_has_scsilogicalunit();
  inline void set_has_scsiport();
  inline void clear_has_scsiport();
  inline void set_has_scsitargetid();
  inline void clear_has_scsitargetid();
  inline void set_has_serialnumber();
  inline void clear_has_serialnumber();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_transferrate();
  inline void clear_has_transferrate();
  inline void set_has_driveintegrity();
  inline void clear_has_driveintegrity();
  inline void set_has_medialoaded();
  inline void clear_has_medialoaded();
  inline void set_has_needscleaning();
  inline void clear_has_needscleaning();
  inline void set_has_compressionmethod();
  inline void clear_has_compressionmethod();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_drive();
  inline void clear_has_drive();
  inline void set_has_manufacturer();
  inline void clear_has_manufacturer();
  inline void set_has_mediatype();
  inline void clear_has_mediatype();
  inline void set_has_pnpdeviceid();
  inline void clear_has_pnpdeviceid();
  inline void set_has_revisionlevel();
  inline void clear_has_revisionlevel();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_volumename();
  inline void clear_has_volumename();
  inline void set_has_volumeserialnumber();
  inline void clear_has_volumeserialnumber();
  inline void set_has_availability();
  inline void clear_has_availability();
  inline void set_has_defaultblocksize();
  inline void clear_has_defaultblocksize();
  inline void set_has_buytime();
  inline void clear_has_buytime();
  inline void set_has_buyprice();
  inline void clear_has_buyprice();
  inline void set_has_dchecktime();
  inline void clear_has_dchecktime();
  inline void set_has_otherinfo();
  inline void clear_has_otherinfo();
  inline void set_has_buyname();
  inline void clear_has_buyname();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* package_code_;
  double scan_time_;
  ::google::protobuf::int32 checktype_;
  ::google::protobuf::int32 filesystemflagsex_;
  double addtime_;
  ::google::protobuf::uint64 maxblocksize_;
  ::google::protobuf::uint64 maxmediasize_;
  ::google::protobuf::int32 maximumcomponentlength_;
  ::google::protobuf::int32 numberofmediasupported_;
  ::google::protobuf::uint64 minblocksize_;
  ::google::protobuf::int32 scsibus_;
  ::google::protobuf::int32 scsilogicalunit_;
  ::google::protobuf::int32 scsiport_;
  ::google::protobuf::int32 scsitargetid_;
  ::google::protobuf::uint64 size_;
  ::google::protobuf::int32 serialnumber_;
  ::google::protobuf::int32 transferrate_;
  ::google::protobuf::int32 driveintegrity_;
  ::google::protobuf::int32 medialoaded_;
  ::std::string* compressionmethod_;
  ::std::string* description_;
  ::std::string* drive_;
  ::std::string* manufacturer_;
  ::std::string* mediatype_;
  ::google::protobuf::int32 needscleaning_;
  ::google::protobuf::int32 availability_;
  ::std::string* pnpdeviceid_;
  ::std::string* revisionlevel_;
  ::std::string* status_;
  ::std::string* volumename_;
  ::std::string* volumeserialnumber_;
  double buytime_;
  ::std::string* buyprice_;
  double dchecktime_;
  ::std::string* otherinfo_;
  ::std::string* buyname_;
  ::google::protobuf::int32 defaultblocksize_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(37 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static CDRomDriveInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT CDRomDriveInfoList : public ::google::protobuf::Message {
 public:
  CDRomDriveInfoList();
  virtual ~CDRomDriveInfoList();
  
  CDRomDriveInfoList(const CDRomDriveInfoList& from);
  
  inline CDRomDriveInfoList& operator=(const CDRomDriveInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDRomDriveInfoList& default_instance();
  
  void Swap(CDRomDriveInfoList* other);
  
  // implements Message ----------------------------------------------
  
  CDRomDriveInfoList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDRomDriveInfoList& from);
  void MergeFrom(const CDRomDriveInfoList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .isafetec.CDRomDriveInfo list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::isafetec::CDRomDriveInfo& list(int index) const;
  inline ::isafetec::CDRomDriveInfo* mutable_list(int index);
  inline ::isafetec::CDRomDriveInfo* CDRomDriveInfoList::list_ReleaseAt(int index); 
  inline void CDRomDriveInfoList::list_RemoveAt(int index); 
  inline ::isafetec::CDRomDriveInfo* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::isafetec::CDRomDriveInfo >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::isafetec::CDRomDriveInfo >*
      mutable_list();
  
  // optional int32 alarmed = 2;
  inline bool has_alarmed() const;
  inline void clear_alarmed();
  static const int kAlarmedFieldNumber = 2;
  inline ::google::protobuf::int32 alarmed() const;
  inline void set_alarmed(::google::protobuf::int32 value);
  
  // optional string winuser = 3;
  inline bool has_winuser() const;
  inline void clear_winuser();
  static const int kWinuserFieldNumber = 3;
  inline const ::std::string& winuser() const;
  inline void set_winuser(const ::std::string& value);
  inline void set_winuser(const char* value);
  inline void set_winuser(const char* value, size_t size);
  inline ::std::string* mutable_winuser();
  inline ::std::string* release_winuser();
  
  // @@protoc_insertion_point(class_scope:isafetec.CDRomDriveInfoList)
 private:
  inline void set_has_alarmed();
  inline void clear_has_alarmed();
  inline void set_has_winuser();
  inline void clear_has_winuser();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::isafetec::CDRomDriveInfo > list_;
  ::std::string* winuser_;
  ::google::protobuf::int32 alarmed_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static CDRomDriveInfoList* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT ComputerSystemInfo : public ::google::protobuf::Message {
 public:
  ComputerSystemInfo();
  virtual ~ComputerSystemInfo();
  
  ComputerSystemInfo(const ComputerSystemInfo& from);
  
  inline ComputerSystemInfo& operator=(const ComputerSystemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ComputerSystemInfo& default_instance();
  
  void Swap(ComputerSystemInfo* other);
  
  // implements Message ----------------------------------------------
  
  ComputerSystemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ComputerSystemInfo& from);
  void MergeFrom(const ComputerSystemInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string package_code = 1;
  inline bool has_package_code() const;
  inline void clear_package_code();
  static const int kPackageCodeFieldNumber = 1;
  inline const ::std::string& package_code() const;
  inline void set_package_code(const ::std::string& value);
  inline void set_package_code(const char* value);
  inline void set_package_code(const char* value, size_t size);
  inline ::std::string* mutable_package_code();
  inline ::std::string* release_package_code();
  
  // optional int32 checktype = 2;
  inline bool has_checktype() const;
  inline void clear_checktype();
  static const int kChecktypeFieldNumber = 2;
  inline ::google::protobuf::int32 checktype() const;
  inline void set_checktype(::google::protobuf::int32 value);
  
  // optional double scan_time = 3;
  inline bool has_scan_time() const;
  inline void clear_scan_time();
  static const int kScanTimeFieldNumber = 3;
  inline double scan_time() const;
  inline void set_scan_time(double value);
  
  // optional double addtime = 50;
  inline bool has_addtime() const;
  inline void clear_addtime();
  static const int kAddtimeFieldNumber = 50;
  inline double addtime() const;
  inline void set_addtime(double value);
  
  // optional int32 DomainRole = 4;
  inline bool has_domainrole() const;
  inline void clear_domainrole();
  static const int kDomainRoleFieldNumber = 4;
  inline ::google::protobuf::int32 domainrole() const;
  inline void set_domainrole(::google::protobuf::int32 value);
  
  // optional int32 FrontPanelResetStatus = 5;
  inline bool has_frontpanelresetstatus() const;
  inline void clear_frontpanelresetstatus();
  static const int kFrontPanelResetStatusFieldNumber = 5;
  inline ::google::protobuf::int32 frontpanelresetstatus() const;
  inline void set_frontpanelresetstatus(::google::protobuf::int32 value);
  
  // optional int32 KeyboardPasswordStatus = 6;
  inline bool has_keyboardpasswordstatus() const;
  inline void clear_keyboardpasswordstatus();
  static const int kKeyboardPasswordStatusFieldNumber = 6;
  inline ::google::protobuf::int32 keyboardpasswordstatus() const;
  inline void set_keyboardpasswordstatus(::google::protobuf::int32 value);
  
  // optional int32 PowerOnPasswordStatus = 7;
  inline bool has_poweronpasswordstatus() const;
  inline void clear_poweronpasswordstatus();
  static const int kPowerOnPasswordStatusFieldNumber = 7;
  inline ::google::protobuf::int32 poweronpasswordstatus() const;
  inline void set_poweronpasswordstatus(::google::protobuf::int32 value);
  
  // optional int32 PowerState = 8;
  inline bool has_powerstate() const;
  inline void clear_powerstate();
  static const int kPowerStateFieldNumber = 8;
  inline ::google::protobuf::int32 powerstate() const;
  inline void set_powerstate(::google::protobuf::int32 value);
  
  // optional int32 PowerSupplyState = 9;
  inline bool has_powersupplystate() const;
  inline void clear_powersupplystate();
  static const int kPowerSupplyStateFieldNumber = 9;
  inline ::google::protobuf::int32 powersupplystate() const;
  inline void set_powersupplystate(::google::protobuf::int32 value);
  
  // optional int32 ResetCapability = 10;
  inline bool has_resetcapability() const;
  inline void clear_resetcapability();
  static const int kResetCapabilityFieldNumber = 10;
  inline ::google::protobuf::int32 resetcapability() const;
  inline void set_resetcapability(::google::protobuf::int32 value);
  
  // optional int32 SystemStartupDelay = 11;
  inline bool has_systemstartupdelay() const;
  inline void clear_systemstartupdelay();
  static const int kSystemStartupDelayFieldNumber = 11;
  inline ::google::protobuf::int32 systemstartupdelay() const;
  inline void set_systemstartupdelay(::google::protobuf::int32 value);
  
  // optional int32 ThermalState = 12;
  inline bool has_thermalstate() const;
  inline void clear_thermalstate();
  static const int kThermalStateFieldNumber = 12;
  inline ::google::protobuf::int32 thermalstate() const;
  inline void set_thermalstate(::google::protobuf::int32 value);
  
  // optional int32 WakeUpType = 13;
  inline bool has_wakeuptype() const;
  inline void clear_wakeuptype();
  static const int kWakeUpTypeFieldNumber = 13;
  inline ::google::protobuf::int32 wakeuptype() const;
  inline void set_wakeuptype(::google::protobuf::int32 value);
  
  // optional int32 CurrentTimeZone = 14;
  inline bool has_currenttimezone() const;
  inline void clear_currenttimezone();
  static const int kCurrentTimeZoneFieldNumber = 14;
  inline ::google::protobuf::int32 currenttimezone() const;
  inline void set_currenttimezone(::google::protobuf::int32 value);
  
  // optional int32 ResetCount = 15;
  inline bool has_resetcount() const;
  inline void clear_resetcount();
  static const int kResetCountFieldNumber = 15;
  inline ::google::protobuf::int32 resetcount() const;
  inline void set_resetcount(::google::protobuf::int32 value);
  
  // optional int32 ResetLimit = 16;
  inline bool has_resetlimit() const;
  inline void clear_resetlimit();
  static const int kResetLimitFieldNumber = 16;
  inline ::google::protobuf::int32 resetlimit() const;
  inline void set_resetlimit(::google::protobuf::int32 value);
  
  // optional int32 NumberOfProcessors = 17;
  inline bool has_numberofprocessors() const;
  inline void clear_numberofprocessors();
  static const int kNumberOfProcessorsFieldNumber = 17;
  inline ::google::protobuf::int32 numberofprocessors() const;
  inline void set_numberofprocessors(::google::protobuf::int32 value);
  
  // optional uint64 TotalPhysicalMemory = 18;
  inline bool has_totalphysicalmemory() const;
  inline void clear_totalphysicalmemory();
  static const int kTotalPhysicalMemoryFieldNumber = 18;
  inline ::google::protobuf::uint64 totalphysicalmemory() const;
  inline void set_totalphysicalmemory(::google::protobuf::uint64 value);
  
  // optional int64 PauseAfterReset = 19;
  inline bool has_pauseafterreset() const;
  inline void clear_pauseafterreset();
  static const int kPauseAfterResetFieldNumber = 19;
  inline ::google::protobuf::int64 pauseafterreset() const;
  inline void set_pauseafterreset(::google::protobuf::int64 value);
  
  // optional int32 AutomaticResetBootOption = 20;
  inline bool has_automaticresetbootoption() const;
  inline void clear_automaticresetbootoption();
  static const int kAutomaticResetBootOptionFieldNumber = 20;
  inline ::google::protobuf::int32 automaticresetbootoption() const;
  inline void set_automaticresetbootoption(::google::protobuf::int32 value);
  
  // optional int32 AutomaticResetCapability = 21;
  inline bool has_automaticresetcapability() const;
  inline void clear_automaticresetcapability();
  static const int kAutomaticResetCapabilityFieldNumber = 21;
  inline ::google::protobuf::int32 automaticresetcapability() const;
  inline void set_automaticresetcapability(::google::protobuf::int32 value);
  
  // optional int32 BootROMSupported = 22;
  inline bool has_bootromsupported() const;
  inline void clear_bootromsupported();
  static const int kBootROMSupportedFieldNumber = 22;
  inline ::google::protobuf::int32 bootromsupported() const;
  inline void set_bootromsupported(::google::protobuf::int32 value);
  
  // optional int32 EnableDaylightSavingsTime = 23;
  inline bool has_enabledaylightsavingstime() const;
  inline void clear_enabledaylightsavingstime();
  static const int kEnableDaylightSavingsTimeFieldNumber = 23;
  inline ::google::protobuf::int32 enabledaylightsavingstime() const;
  inline void set_enabledaylightsavingstime(::google::protobuf::int32 value);
  
  // optional int32 InfraredSupported = 24;
  inline bool has_infraredsupported() const;
  inline void clear_infraredsupported();
  static const int kInfraredSupportedFieldNumber = 24;
  inline ::google::protobuf::int32 infraredsupported() const;
  inline void set_infraredsupported(::google::protobuf::int32 value);
  
  // optional int32 NetworkServerModeEnabled = 25;
  inline bool has_networkservermodeenabled() const;
  inline void clear_networkservermodeenabled();
  static const int kNetworkServerModeEnabledFieldNumber = 25;
  inline ::google::protobuf::int32 networkservermodeenabled() const;
  inline void set_networkservermodeenabled(::google::protobuf::int32 value);
  
  // optional int32 PartOfDomain = 26;
  inline bool has_partofdomain() const;
  inline void clear_partofdomain();
  static const int kPartOfDomainFieldNumber = 26;
  inline ::google::protobuf::int32 partofdomain() const;
  inline void set_partofdomain(::google::protobuf::int32 value);
  
  // optional int32 SystemStartupSetting = 27;
  inline bool has_systemstartupsetting() const;
  inline void clear_systemstartupsetting();
  static const int kSystemStartupSettingFieldNumber = 27;
  inline ::google::protobuf::int32 systemstartupsetting() const;
  inline void set_systemstartupsetting(::google::protobuf::int32 value);
  
  // optional string BootupState = 28;
  inline bool has_bootupstate() const;
  inline void clear_bootupstate();
  static const int kBootupStateFieldNumber = 28;
  inline const ::std::string& bootupstate() const;
  inline void set_bootupstate(const ::std::string& value);
  inline void set_bootupstate(const char* value);
  inline void set_bootupstate(const char* value, size_t size);
  inline ::std::string* mutable_bootupstate();
  inline ::std::string* release_bootupstate();
  
  // optional string Description = 30;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 30;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  
  // optional string DNSHostName = 31;
  inline bool has_dnshostname() const;
  inline void clear_dnshostname();
  static const int kDNSHostNameFieldNumber = 31;
  inline const ::std::string& dnshostname() const;
  inline void set_dnshostname(const ::std::string& value);
  inline void set_dnshostname(const char* value);
  inline void set_dnshostname(const char* value, size_t size);
  inline ::std::string* mutable_dnshostname();
  inline ::std::string* release_dnshostname();
  
  // optional string Domain = 33;
  inline bool has_domain() const;
  inline void clear_domain();
  static const int kDomainFieldNumber = 33;
  inline const ::std::string& domain() const;
  inline void set_domain(const ::std::string& value);
  inline void set_domain(const char* value);
  inline void set_domain(const char* value, size_t size);
  inline ::std::string* mutable_domain();
  inline ::std::string* release_domain();
  
  // optional string Manufacturer = 34;
  inline bool has_manufacturer() const;
  inline void clear_manufacturer();
  static const int kManufacturerFieldNumber = 34;
  inline const ::std::string& manufacturer() const;
  inline void set_manufacturer(const ::std::string& value);
  inline void set_manufacturer(const char* value);
  inline void set_manufacturer(const char* value, size_t size);
  inline ::std::string* mutable_manufacturer();
  inline ::std::string* release_manufacturer();
  
  // optional string Model = 35;
  inline bool has_model() const;
  inline void clear_model();
  static const int kModelFieldNumber = 35;
  inline const ::std::string& model() const;
  inline void set_model(const ::std::string& value);
  inline void set_model(const char* value);
  inline void set_model(const char* value, size_t size);
  inline ::std::string* mutable_model();
  inline ::std::string* release_model();
  
  // optional string PrimaryOwnerName = 36;
  inline bool has_primaryownername() const;
  inline void clear_primaryownername();
  static const int kPrimaryOwnerNameFieldNumber = 36;
  inline const ::std::string& primaryownername() const;
  inline void set_primaryownername(const ::std::string& value);
  inline void set_primaryownername(const char* value);
  inline void set_primaryownername(const char* value, size_t size);
  inline ::std::string* mutable_primaryownername();
  inline ::std::string* release_primaryownername();
  
  // optional string Roles = 37;
  inline bool has_roles() const;
  inline void clear_roles();
  static const int kRolesFieldNumber = 37;
  inline const ::std::string& roles() const;
  inline void set_roles(const ::std::string& value);
  inline void set_roles(const char* value);
  inline void set_roles(const char* value, size_t size);
  inline ::std::string* mutable_roles();
  inline ::std::string* release_roles();
  
  // optional string Status = 38;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 38;
  inline const ::std::string& status() const;
  inline void set_status(const ::std::string& value);
  inline void set_status(const char* value);
  inline void set_status(const char* value, size_t size);
  inline ::std::string* mutable_status();
  inline ::std::string* release_status();
  
  // optional string SystemStartupOptions = 39;
  inline bool has_systemstartupoptions() const;
  inline void clear_systemstartupoptions();
  static const int kSystemStartupOptionsFieldNumber = 39;
  inline const ::std::string& systemstartupoptions() const;
  inline void set_systemstartupoptions(const ::std::string& value);
  inline void set_systemstartupoptions(const char* value);
  inline void set_systemstartupoptions(const char* value, size_t size);
  inline ::std::string* mutable_systemstartupoptions();
  inline ::std::string* release_systemstartupoptions();
  
  // optional string SystemType = 40;
  inline bool has_systemtype() const;
  inline void clear_systemtype();
  static const int kSystemTypeFieldNumber = 40;
  inline const ::std::string& systemtype() const;
  inline void set_systemtype(const ::std::string& value);
  inline void set_systemtype(const char* value);
  inline void set_systemtype(const char* value, size_t size);
  inline ::std::string* mutable_systemtype();
  inline ::std::string* release_systemtype();
  
  // optional string UserName = 41;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 41;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  
  // optional int32 AdminPasswordStatus = 42;
  inline bool has_adminpasswordstatus() const;
  inline void clear_adminpasswordstatus();
  static const int kAdminPasswordStatusFieldNumber = 42;
  inline ::google::protobuf::int32 adminpasswordstatus() const;
  inline void set_adminpasswordstatus(::google::protobuf::int32 value);
  
  // optional int32 ChassisBootupState = 43;
  inline bool has_chassisbootupstate() const;
  inline void clear_chassisbootupstate();
  static const int kChassisBootupStateFieldNumber = 43;
  inline ::google::protobuf::int32 chassisbootupstate() const;
  inline void set_chassisbootupstate(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:isafetec.ComputerSystemInfo)
 private:
  inline void set_has_package_code();
  inline void clear_has_package_code();
  inline void set_has_checktype();
  inline void clear_has_checktype();
  inline void set_has_scan_time();
  inline void clear_has_scan_time();
  inline void set_has_addtime();
  inline void clear_has_addtime();
  inline void set_has_domainrole();
  inline void clear_has_domainrole();
  inline void set_has_frontpanelresetstatus();
  inline void clear_has_frontpanelresetstatus();
  inline void set_has_keyboardpasswordstatus();
  inline void clear_has_keyboardpasswordstatus();
  inline void set_has_poweronpasswordstatus();
  inline void clear_has_poweronpasswordstatus();
  inline void set_has_powerstate();
  inline void clear_has_powerstate();
  inline void set_has_powersupplystate();
  inline void clear_has_powersupplystate();
  inline void set_has_resetcapability();
  inline void clear_has_resetcapability();
  inline void set_has_systemstartupdelay();
  inline void clear_has_systemstartupdelay();
  inline void set_has_thermalstate();
  inline void clear_has_thermalstate();
  inline void set_has_wakeuptype();
  inline void clear_has_wakeuptype();
  inline void set_has_currenttimezone();
  inline void clear_has_currenttimezone();
  inline void set_has_resetcount();
  inline void clear_has_resetcount();
  inline void set_has_resetlimit();
  inline void clear_has_resetlimit();
  inline void set_has_numberofprocessors();
  inline void clear_has_numberofprocessors();
  inline void set_has_totalphysicalmemory();
  inline void clear_has_totalphysicalmemory();
  inline void set_has_pauseafterreset();
  inline void clear_has_pauseafterreset();
  inline void set_has_automaticresetbootoption();
  inline void clear_has_automaticresetbootoption();
  inline void set_has_automaticresetcapability();
  inline void clear_has_automaticresetcapability();
  inline void set_has_bootromsupported();
  inline void clear_has_bootromsupported();
  inline void set_has_enabledaylightsavingstime();
  inline void clear_has_enabledaylightsavingstime();
  inline void set_has_infraredsupported();
  inline void clear_has_infraredsupported();
  inline void set_has_networkservermodeenabled();
  inline void clear_has_networkservermodeenabled();
  inline void set_has_partofdomain();
  inline void clear_has_partofdomain();
  inline void set_has_systemstartupsetting();
  inline void clear_has_systemstartupsetting();
  inline void set_has_bootupstate();
  inline void clear_has_bootupstate();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_dnshostname();
  inline void clear_has_dnshostname();
  inline void set_has_domain();
  inline void clear_has_domain();
  inline void set_has_manufacturer();
  inline void clear_has_manufacturer();
  inline void set_has_model();
  inline void clear_has_model();
  inline void set_has_primaryownername();
  inline void clear_has_primaryownername();
  inline void set_has_roles();
  inline void clear_has_roles();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_systemstartupoptions();
  inline void clear_has_systemstartupoptions();
  inline void set_has_systemtype();
  inline void clear_has_systemtype();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_adminpasswordstatus();
  inline void clear_has_adminpasswordstatus();
  inline void set_has_chassisbootupstate();
  inline void clear_has_chassisbootupstate();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* package_code_;
  double scan_time_;
  ::google::protobuf::int32 checktype_;
  ::google::protobuf::int32 domainrole_;
  double addtime_;
  ::google::protobuf::int32 frontpanelresetstatus_;
  ::google::protobuf::int32 keyboardpasswordstatus_;
  ::google::protobuf::int32 poweronpasswordstatus_;
  ::google::protobuf::int32 powerstate_;
  ::google::protobuf::int32 powersupplystate_;
  ::google::protobuf::int32 resetcapability_;
  ::google::protobuf::int32 systemstartupdelay_;
  ::google::protobuf::int32 thermalstate_;
  ::google::protobuf::int32 wakeuptype_;
  ::google::protobuf::int32 currenttimezone_;
  ::google::protobuf::int32 resetcount_;
  ::google::protobuf::int32 resetlimit_;
  ::google::protobuf::uint64 totalphysicalmemory_;
  ::google::protobuf::int32 numberofprocessors_;
  ::google::protobuf::int32 automaticresetbootoption_;
  ::google::protobuf::int64 pauseafterreset_;
  ::google::protobuf::int32 automaticresetcapability_;
  ::google::protobuf::int32 bootromsupported_;
  ::google::protobuf::int32 enabledaylightsavingstime_;
  ::google::protobuf::int32 infraredsupported_;
  ::google::protobuf::int32 networkservermodeenabled_;
  ::google::protobuf::int32 partofdomain_;
  ::std::string* bootupstate_;
  ::std::string* description_;
  ::std::string* dnshostname_;
  ::std::string* domain_;
  ::std::string* manufacturer_;
  ::std::string* model_;
  ::google::protobuf::int32 systemstartupsetting_;
  ::google::protobuf::int32 adminpasswordstatus_;
  ::std::string* primaryownername_;
  ::std::string* roles_;
  ::std::string* status_;
  ::std::string* systemstartupoptions_;
  ::std::string* systemtype_;
  ::std::string* username_;
  ::google::protobuf::int32 chassisbootupstate_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(42 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static ComputerSystemInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT ComputerSystemInfoList : public ::google::protobuf::Message {
 public:
  ComputerSystemInfoList();
  virtual ~ComputerSystemInfoList();
  
  ComputerSystemInfoList(const ComputerSystemInfoList& from);
  
  inline ComputerSystemInfoList& operator=(const ComputerSystemInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ComputerSystemInfoList& default_instance();
  
  void Swap(ComputerSystemInfoList* other);
  
  // implements Message ----------------------------------------------
  
  ComputerSystemInfoList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ComputerSystemInfoList& from);
  void MergeFrom(const ComputerSystemInfoList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .isafetec.ComputerSystemInfo list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::isafetec::ComputerSystemInfo& list(int index) const;
  inline ::isafetec::ComputerSystemInfo* mutable_list(int index);
  inline ::isafetec::ComputerSystemInfo* ComputerSystemInfoList::list_ReleaseAt(int index); 
  inline void ComputerSystemInfoList::list_RemoveAt(int index); 
  inline ::isafetec::ComputerSystemInfo* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::isafetec::ComputerSystemInfo >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::isafetec::ComputerSystemInfo >*
      mutable_list();
  
  // optional int32 alarmed = 2;
  inline bool has_alarmed() const;
  inline void clear_alarmed();
  static const int kAlarmedFieldNumber = 2;
  inline ::google::protobuf::int32 alarmed() const;
  inline void set_alarmed(::google::protobuf::int32 value);
  
  // optional string winuser = 3;
  inline bool has_winuser() const;
  inline void clear_winuser();
  static const int kWinuserFieldNumber = 3;
  inline const ::std::string& winuser() const;
  inline void set_winuser(const ::std::string& value);
  inline void set_winuser(const char* value);
  inline void set_winuser(const char* value, size_t size);
  inline ::std::string* mutable_winuser();
  inline ::std::string* release_winuser();
  
  // @@protoc_insertion_point(class_scope:isafetec.ComputerSystemInfoList)
 private:
  inline void set_has_alarmed();
  inline void clear_has_alarmed();
  inline void set_has_winuser();
  inline void clear_has_winuser();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::isafetec::ComputerSystemInfo > list_;
  ::std::string* winuser_;
  ::google::protobuf::int32 alarmed_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static ComputerSystemInfoList* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT ComputerSystemProductInfo : public ::google::protobuf::Message {
 public:
  ComputerSystemProductInfo();
  virtual ~ComputerSystemProductInfo();
  
  ComputerSystemProductInfo(const ComputerSystemProductInfo& from);
  
  inline ComputerSystemProductInfo& operator=(const ComputerSystemProductInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ComputerSystemProductInfo& default_instance();
  
  void Swap(ComputerSystemProductInfo* other);
  
  // implements Message ----------------------------------------------
  
  ComputerSystemProductInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ComputerSystemProductInfo& from);
  void MergeFrom(const ComputerSystemProductInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string package_code = 1;
  inline bool has_package_code() const;
  inline void clear_package_code();
  static const int kPackageCodeFieldNumber = 1;
  inline const ::std::string& package_code() const;
  inline void set_package_code(const ::std::string& value);
  inline void set_package_code(const char* value);
  inline void set_package_code(const char* value, size_t size);
  inline ::std::string* mutable_package_code();
  inline ::std::string* release_package_code();
  
  // optional int32 checktype = 2;
  inline bool has_checktype() const;
  inline void clear_checktype();
  static const int kChecktypeFieldNumber = 2;
  inline ::google::protobuf::int32 checktype() const;
  inline void set_checktype(::google::protobuf::int32 value);
  
  // optional double scan_time = 3;
  inline bool has_scan_time() const;
  inline void clear_scan_time();
  static const int kScanTimeFieldNumber = 3;
  inline double scan_time() const;
  inline void set_scan_time(double value);
  
  // optional double addtime = 50;
  inline bool has_addtime() const;
  inline void clear_addtime();
  static const int kAddtimeFieldNumber = 50;
  inline double addtime() const;
  inline void set_addtime(double value);
  
  // optional string IdentifyingNumber = 4;
  inline bool has_identifyingnumber() const;
  inline void clear_identifyingnumber();
  static const int kIdentifyingNumberFieldNumber = 4;
  inline const ::std::string& identifyingnumber() const;
  inline void set_identifyingnumber(const ::std::string& value);
  inline void set_identifyingnumber(const char* value);
  inline void set_identifyingnumber(const char* value, size_t size);
  inline ::std::string* mutable_identifyingnumber();
  inline ::std::string* release_identifyingnumber();
  
  // optional string Name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string Vendor = 6;
  inline bool has_vendor() const;
  inline void clear_vendor();
  static const int kVendorFieldNumber = 6;
  inline const ::std::string& vendor() const;
  inline void set_vendor(const ::std::string& value);
  inline void set_vendor(const char* value);
  inline void set_vendor(const char* value, size_t size);
  inline ::std::string* mutable_vendor();
  inline ::std::string* release_vendor();
  
  // optional string Version = 7;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 7;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  
  // optional string Description = 8;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 8;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  
  // @@protoc_insertion_point(class_scope:isafetec.ComputerSystemProductInfo)
 private:
  inline void set_has_package_code();
  inline void clear_has_package_code();
  inline void set_has_checktype();
  inline void clear_has_checktype();
  inline void set_has_scan_time();
  inline void clear_has_scan_time();
  inline void set_has_addtime();
  inline void clear_has_addtime();
  inline void set_has_identifyingnumber();
  inline void clear_has_identifyingnumber();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_vendor();
  inline void clear_has_vendor();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_description();
  inline void clear_has_description();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* package_code_;
  double scan_time_;
  double addtime_;
  ::std::string* identifyingnumber_;
  ::std::string* name_;
  ::std::string* vendor_;
  ::std::string* version_;
  ::std::string* description_;
  ::google::protobuf::int32 checktype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static ComputerSystemProductInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT ComputerSystemProductInfoList : public ::google::protobuf::Message {
 public:
  ComputerSystemProductInfoList();
  virtual ~ComputerSystemProductInfoList();
  
  ComputerSystemProductInfoList(const ComputerSystemProductInfoList& from);
  
  inline ComputerSystemProductInfoList& operator=(const ComputerSystemProductInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ComputerSystemProductInfoList& default_instance();
  
  void Swap(ComputerSystemProductInfoList* other);
  
  // implements Message ----------------------------------------------
  
  ComputerSystemProductInfoList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ComputerSystemProductInfoList& from);
  void MergeFrom(const ComputerSystemProductInfoList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .isafetec.ComputerSystemProductInfo list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::isafetec::ComputerSystemProductInfo& list(int index) const;
  inline ::isafetec::ComputerSystemProductInfo* mutable_list(int index);
  inline ::isafetec::ComputerSystemProductInfo* ComputerSystemProductInfoList::list_ReleaseAt(int index); 
  inline void ComputerSystemProductInfoList::list_RemoveAt(int index); 
  inline ::isafetec::ComputerSystemProductInfo* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::isafetec::ComputerSystemProductInfo >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::isafetec::ComputerSystemProductInfo >*
      mutable_list();
  
  // optional int32 alarmed = 2;
  inline bool has_alarmed() const;
  inline void clear_alarmed();
  static const int kAlarmedFieldNumber = 2;
  inline ::google::protobuf::int32 alarmed() const;
  inline void set_alarmed(::google::protobuf::int32 value);
  
  // optional string winuser = 3;
  inline bool has_winuser() const;
  inline void clear_winuser();
  static const int kWinuserFieldNumber = 3;
  inline const ::std::string& winuser() const;
  inline void set_winuser(const ::std::string& value);
  inline void set_winuser(const char* value);
  inline void set_winuser(const char* value, size_t size);
  inline ::std::string* mutable_winuser();
  inline ::std::string* release_winuser();
  
  // @@protoc_insertion_point(class_scope:isafetec.ComputerSystemProductInfoList)
 private:
  inline void set_has_alarmed();
  inline void clear_has_alarmed();
  inline void set_has_winuser();
  inline void clear_has_winuser();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::isafetec::ComputerSystemProductInfo > list_;
  ::std::string* winuser_;
  ::google::protobuf::int32 alarmed_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static ComputerSystemProductInfoList* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT DiskPartitionInfo : public ::google::protobuf::Message {
 public:
  DiskPartitionInfo();
  virtual ~DiskPartitionInfo();
  
  DiskPartitionInfo(const DiskPartitionInfo& from);
  
  inline DiskPartitionInfo& operator=(const DiskPartitionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DiskPartitionInfo& default_instance();
  
  void Swap(DiskPartitionInfo* other);
  
  // implements Message ----------------------------------------------
  
  DiskPartitionInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DiskPartitionInfo& from);
  void MergeFrom(const DiskPartitionInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string package_code = 1;
  inline bool has_package_code() const;
  inline void clear_package_code();
  static const int kPackageCodeFieldNumber = 1;
  inline const ::std::string& package_code() const;
  inline void set_package_code(const ::std::string& value);
  inline void set_package_code(const char* value);
  inline void set_package_code(const char* value, size_t size);
  inline ::std::string* mutable_package_code();
  inline ::std::string* release_package_code();
  
  // optional int32 checktype = 2;
  inline bool has_checktype() const;
  inline void clear_checktype();
  static const int kChecktypeFieldNumber = 2;
  inline ::google::protobuf::int32 checktype() const;
  inline void set_checktype(::google::protobuf::int32 value);
  
  // optional double scan_time = 3;
  inline bool has_scan_time() const;
  inline void clear_scan_time();
  static const int kScanTimeFieldNumber = 3;
  inline double scan_time() const;
  inline void set_scan_time(double value);
  
  // optional double addtime = 50;
  inline bool has_addtime() const;
  inline void clear_addtime();
  static const int kAddtimeFieldNumber = 50;
  inline double addtime() const;
  inline void set_addtime(double value);
  
  // optional uint64 BlockSize = 4;
  inline bool has_blocksize() const;
  inline void clear_blocksize();
  static const int kBlockSizeFieldNumber = 4;
  inline ::google::protobuf::uint64 blocksize() const;
  inline void set_blocksize(::google::protobuf::uint64 value);
  
  // optional uint64 NumberOfBlocks = 5;
  inline bool has_numberofblocks() const;
  inline void clear_numberofblocks();
  static const int kNumberOfBlocksFieldNumber = 5;
  inline ::google::protobuf::uint64 numberofblocks() const;
  inline void set_numberofblocks(::google::protobuf::uint64 value);
  
  // optional uint64 Size = 6;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 6;
  inline ::google::protobuf::uint64 size() const;
  inline void set_size(::google::protobuf::uint64 value);
  
  // optional uint64 StartingOffset = 7;
  inline bool has_startingoffset() const;
  inline void clear_startingoffset();
  static const int kStartingOffsetFieldNumber = 7;
  inline ::google::protobuf::uint64 startingoffset() const;
  inline void set_startingoffset(::google::protobuf::uint64 value);
  
  // optional string Description = 10;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 10;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  
  // optional string Name = 11;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 11;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional int32 DiskIndex = 12;
  inline bool has_diskindex() const;
  inline void clear_diskindex();
  static const int kDiskIndexFieldNumber = 12;
  inline ::google::protobuf::int32 diskindex() const;
  inline void set_diskindex(::google::protobuf::int32 value);
  
  // optional int32 Index = 13;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 13;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // optional double BuyTime = 14;
  inline bool has_buytime() const;
  inline void clear_buytime();
  static const int kBuyTimeFieldNumber = 14;
  inline double buytime() const;
  inline void set_buytime(double value);
  
  // optional string BuyPrice = 15;
  inline bool has_buyprice() const;
  inline void clear_buyprice();
  static const int kBuyPriceFieldNumber = 15;
  inline const ::std::string& buyprice() const;
  inline void set_buyprice(const ::std::string& value);
  inline void set_buyprice(const char* value);
  inline void set_buyprice(const char* value, size_t size);
  inline ::std::string* mutable_buyprice();
  inline ::std::string* release_buyprice();
  
  // optional double DCheckTime = 16;
  inline bool has_dchecktime() const;
  inline void clear_dchecktime();
  static const int kDCheckTimeFieldNumber = 16;
  inline double dchecktime() const;
  inline void set_dchecktime(double value);
  
  // optional string OtherInfo = 17;
  inline bool has_otherinfo() const;
  inline void clear_otherinfo();
  static const int kOtherInfoFieldNumber = 17;
  inline const ::std::string& otherinfo() const;
  inline void set_otherinfo(const ::std::string& value);
  inline void set_otherinfo(const char* value);
  inline void set_otherinfo(const char* value, size_t size);
  inline ::std::string* mutable_otherinfo();
  inline ::std::string* release_otherinfo();
  
  // optional string BuyName = 18;
  inline bool has_buyname() const;
  inline void clear_buyname();
  static const int kBuyNameFieldNumber = 18;
  inline const ::std::string& buyname() const;
  inline void set_buyname(const ::std::string& value);
  inline void set_buyname(const char* value);
  inline void set_buyname(const char* value, size_t size);
  inline ::std::string* mutable_buyname();
  inline ::std::string* release_buyname();
  
  // @@protoc_insertion_point(class_scope:isafetec.DiskPartitionInfo)
 private:
  inline void set_has_package_code();
  inline void clear_has_package_code();
  inline void set_has_checktype();
  inline void clear_has_checktype();
  inline void set_has_scan_time();
  inline void clear_has_scan_time();
  inline void set_has_addtime();
  inline void clear_has_addtime();
  inline void set_has_blocksize();
  inline void clear_has_blocksize();
  inline void set_has_numberofblocks();
  inline void clear_has_numberofblocks();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_startingoffset();
  inline void clear_has_startingoffset();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_diskindex();
  inline void clear_has_diskindex();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_buytime();
  inline void clear_has_buytime();
  inline void set_has_buyprice();
  inline void clear_has_buyprice();
  inline void set_has_dchecktime();
  inline void clear_has_dchecktime();
  inline void set_has_otherinfo();
  inline void clear_has_otherinfo();
  inline void set_has_buyname();
  inline void clear_has_buyname();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* package_code_;
  double scan_time_;
  double addtime_;
  ::google::protobuf::uint64 blocksize_;
  ::google::protobuf::uint64 numberofblocks_;
  ::google::protobuf::int32 checktype_;
  ::google::protobuf::int32 diskindex_;
  ::google::protobuf::uint64 size_;
  ::google::protobuf::uint64 startingoffset_;
  ::std::string* description_;
  ::std::string* name_;
  double buytime_;
  ::std::string* buyprice_;
  double dchecktime_;
  ::std::string* otherinfo_;
  ::std::string* buyname_;
  ::google::protobuf::int32 index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static DiskPartitionInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT DiskPartitionInfoList : public ::google::protobuf::Message {
 public:
  DiskPartitionInfoList();
  virtual ~DiskPartitionInfoList();
  
  DiskPartitionInfoList(const DiskPartitionInfoList& from);
  
  inline DiskPartitionInfoList& operator=(const DiskPartitionInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DiskPartitionInfoList& default_instance();
  
  void Swap(DiskPartitionInfoList* other);
  
  // implements Message ----------------------------------------------
  
  DiskPartitionInfoList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DiskPartitionInfoList& from);
  void MergeFrom(const DiskPartitionInfoList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .isafetec.DiskPartitionInfo list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::isafetec::DiskPartitionInfo& list(int index) const;
  inline ::isafetec::DiskPartitionInfo* mutable_list(int index);
  inline ::isafetec::DiskPartitionInfo* DiskPartitionInfoList::list_ReleaseAt(int index); 
  inline void DiskPartitionInfoList::list_RemoveAt(int index); 
  inline ::isafetec::DiskPartitionInfo* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::isafetec::DiskPartitionInfo >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::isafetec::DiskPartitionInfo >*
      mutable_list();
  
  // optional int32 alarmed = 2;
  inline bool has_alarmed() const;
  inline void clear_alarmed();
  static const int kAlarmedFieldNumber = 2;
  inline ::google::protobuf::int32 alarmed() const;
  inline void set_alarmed(::google::protobuf::int32 value);
  
  // optional string winuser = 3;
  inline bool has_winuser() const;
  inline void clear_winuser();
  static const int kWinuserFieldNumber = 3;
  inline const ::std::string& winuser() const;
  inline void set_winuser(const ::std::string& value);
  inline void set_winuser(const char* value);
  inline void set_winuser(const char* value, size_t size);
  inline ::std::string* mutable_winuser();
  inline ::std::string* release_winuser();
  
  // @@protoc_insertion_point(class_scope:isafetec.DiskPartitionInfoList)
 private:
  inline void set_has_alarmed();
  inline void clear_has_alarmed();
  inline void set_has_winuser();
  inline void clear_has_winuser();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::isafetec::DiskPartitionInfo > list_;
  ::std::string* winuser_;
  ::google::protobuf::int32 alarmed_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static DiskPartitionInfoList* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT DisplayConfigurationInfo : public ::google::protobuf::Message {
 public:
  DisplayConfigurationInfo();
  virtual ~DisplayConfigurationInfo();
  
  DisplayConfigurationInfo(const DisplayConfigurationInfo& from);
  
  inline DisplayConfigurationInfo& operator=(const DisplayConfigurationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DisplayConfigurationInfo& default_instance();
  
  void Swap(DisplayConfigurationInfo* other);
  
  // implements Message ----------------------------------------------
  
  DisplayConfigurationInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DisplayConfigurationInfo& from);
  void MergeFrom(const DisplayConfigurationInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string package_code = 1;
  inline bool has_package_code() const;
  inline void clear_package_code();
  static const int kPackageCodeFieldNumber = 1;
  inline const ::std::string& package_code() const;
  inline void set_package_code(const ::std::string& value);
  inline void set_package_code(const char* value);
  inline void set_package_code(const char* value, size_t size);
  inline ::std::string* mutable_package_code();
  inline ::std::string* release_package_code();
  
  // optional int32 checktype = 2;
  inline bool has_checktype() const;
  inline void clear_checktype();
  static const int kChecktypeFieldNumber = 2;
  inline ::google::protobuf::int32 checktype() const;
  inline void set_checktype(::google::protobuf::int32 value);
  
  // optional double scan_time = 3;
  inline bool has_scan_time() const;
  inline void clear_scan_time();
  static const int kScanTimeFieldNumber = 3;
  inline double scan_time() const;
  inline void set_scan_time(double value);
  
  // optional double addtime = 50;
  inline bool has_addtime() const;
  inline void clear_addtime();
  static const int kAddtimeFieldNumber = 50;
  inline double addtime() const;
  inline void set_addtime(double value);
  
  // optional int32 DisplayFrequency = 4;
  inline bool has_displayfrequency() const;
  inline void clear_displayfrequency();
  static const int kDisplayFrequencyFieldNumber = 4;
  inline ::google::protobuf::int32 displayfrequency() const;
  inline void set_displayfrequency(::google::protobuf::int32 value);
  
  // optional int32 DitherType = 5;
  inline bool has_dithertype() const;
  inline void clear_dithertype();
  static const int kDitherTypeFieldNumber = 5;
  inline ::google::protobuf::int32 dithertype() const;
  inline void set_dithertype(::google::protobuf::int32 value);
  
  // optional int32 ICMIntent = 6;
  inline bool has_icmintent() const;
  inline void clear_icmintent();
  static const int kICMIntentFieldNumber = 6;
  inline ::google::protobuf::int32 icmintent() const;
  inline void set_icmintent(::google::protobuf::int32 value);
  
  // optional int32 ICMMethod = 7;
  inline bool has_icmmethod() const;
  inline void clear_icmmethod();
  static const int kICMMethodFieldNumber = 7;
  inline ::google::protobuf::int32 icmmethod() const;
  inline void set_icmmethod(::google::protobuf::int32 value);
  
  // optional int32 LogPixels = 8;
  inline bool has_logpixels() const;
  inline void clear_logpixels();
  static const int kLogPixelsFieldNumber = 8;
  inline ::google::protobuf::int32 logpixels() const;
  inline void set_logpixels(::google::protobuf::int32 value);
  
  // optional int32 PelsHeight = 9;
  inline bool has_pelsheight() const;
  inline void clear_pelsheight();
  static const int kPelsHeightFieldNumber = 9;
  inline ::google::protobuf::int32 pelsheight() const;
  inline void set_pelsheight(::google::protobuf::int32 value);
  
  // optional int32 PelsWidth = 10;
  inline bool has_pelswidth() const;
  inline void clear_pelswidth();
  static const int kPelsWidthFieldNumber = 10;
  inline ::google::protobuf::int32 pelswidth() const;
  inline void set_pelswidth(::google::protobuf::int32 value);
  
  // optional int32 SpecificationVersion = 11;
  inline bool has_specificationversion() const;
  inline void clear_specificationversion();
  static const int kSpecificationVersionFieldNumber = 11;
  inline ::google::protobuf::int32 specificationversion() const;
  inline void set_specificationversion(::google::protobuf::int32 value);
  
  // optional string Description = 13;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 13;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  
  // optional string DeviceName = 14;
  inline bool has_devicename() const;
  inline void clear_devicename();
  static const int kDeviceNameFieldNumber = 14;
  inline const ::std::string& devicename() const;
  inline void set_devicename(const ::std::string& value);
  inline void set_devicename(const char* value);
  inline void set_devicename(const char* value, size_t size);
  inline ::std::string* mutable_devicename();
  inline ::std::string* release_devicename();
  
  // optional string DriverVersion = 15;
  inline bool has_driverversion() const;
  inline void clear_driverversion();
  static const int kDriverVersionFieldNumber = 15;
  inline const ::std::string& driverversion() const;
  inline void set_driverversion(const ::std::string& value);
  inline void set_driverversion(const char* value);
  inline void set_driverversion(const char* value, size_t size);
  inline ::std::string* mutable_driverversion();
  inline ::std::string* release_driverversion();
  
  // optional int32 BitsPerPerl = 16;
  inline bool has_bitsperperl() const;
  inline void clear_bitsperperl();
  static const int kBitsPerPerlFieldNumber = 16;
  inline ::google::protobuf::int32 bitsperperl() const;
  inline void set_bitsperperl(::google::protobuf::int32 value);
  
  // optional int32 DisplayFlags = 17;
  inline bool has_displayflags() const;
  inline void clear_displayflags();
  static const int kDisplayFlagsFieldNumber = 17;
  inline ::google::protobuf::int32 displayflags() const;
  inline void set_displayflags(::google::protobuf::int32 value);
  
  // optional double BuyTime = 18;
  inline bool has_buytime() const;
  inline void clear_buytime();
  static const int kBuyTimeFieldNumber = 18;
  inline double buytime() const;
  inline void set_buytime(double value);
  
  // optional string BuyPrice = 19;
  inline bool has_buyprice() const;
  inline void clear_buyprice();
  static const int kBuyPriceFieldNumber = 19;
  inline const ::std::string& buyprice() const;
  inline void set_buyprice(const ::std::string& value);
  inline void set_buyprice(const char* value);
  inline void set_buyprice(const char* value, size_t size);
  inline ::std::string* mutable_buyprice();
  inline ::std::string* release_buyprice();
  
  // optional double DCheckTime = 20;
  inline bool has_dchecktime() const;
  inline void clear_dchecktime();
  static const int kDCheckTimeFieldNumber = 20;
  inline double dchecktime() const;
  inline void set_dchecktime(double value);
  
  // optional string OtherInfo = 21;
  inline bool has_otherinfo() const;
  inline void clear_otherinfo();
  static const int kOtherInfoFieldNumber = 21;
  inline const ::std::string& otherinfo() const;
  inline void set_otherinfo(const ::std::string& value);
  inline void set_otherinfo(const char* value);
  inline void set_otherinfo(const char* value, size_t size);
  inline ::std::string* mutable_otherinfo();
  inline ::std::string* release_otherinfo();
  
  // optional string BuyName = 22;
  inline bool has_buyname() const;
  inline void clear_buyname();
  static const int kBuyNameFieldNumber = 22;
  inline const ::std::string& buyname() const;
  inline void set_buyname(const ::std::string& value);
  inline void set_buyname(const char* value);
  inline void set_buyname(const char* value, size_t size);
  inline ::std::string* mutable_buyname();
  inline ::std::string* release_buyname();
  
  // @@protoc_insertion_point(class_scope:isafetec.DisplayConfigurationInfo)
 private:
  inline void set_has_package_code();
  inline void clear_has_package_code();
  inline void set_has_checktype();
  inline void clear_has_checktype();
  inline void set_has_scan_time();
  inline void clear_has_scan_time();
  inline void set_has_addtime();
  inline void clear_has_addtime();
  inline void set_has_displayfrequency();
  inline void clear_has_displayfrequency();
  inline void set_has_dithertype();
  inline void clear_has_dithertype();
  inline void set_has_icmintent();
  inline void clear_has_icmintent();
  inline void set_has_icmmethod();
  inline void clear_has_icmmethod();
  inline void set_has_logpixels();
  inline void clear_has_logpixels();
  inline void set_has_pelsheight();
  inline void clear_has_pelsheight();
  inline void set_has_pelswidth();
  inline void clear_has_pelswidth();
  inline void set_has_specificationversion();
  inline void clear_has_specificationversion();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_devicename();
  inline void clear_has_devicename();
  inline void set_has_driverversion();
  inline void clear_has_driverversion();
  inline void set_has_bitsperperl();
  inline void clear_has_bitsperperl();
  inline void set_has_displayflags();
  inline void clear_has_displayflags();
  inline void set_has_buytime();
  inline void clear_has_buytime();
  inline void set_has_buyprice();
  inline void clear_has_buyprice();
  inline void set_has_dchecktime();
  inline void clear_has_dchecktime();
  inline void set_has_otherinfo();
  inline void clear_has_otherinfo();
  inline void set_has_buyname();
  inline void clear_has_buyname();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* package_code_;
  double scan_time_;
  ::google::protobuf::int32 checktype_;
  ::google::protobuf::int32 displayfrequency_;
  double addtime_;
  ::google::protobuf::int32 dithertype_;
  ::google::protobuf::int32 icmintent_;
  ::google::protobuf::int32 icmmethod_;
  ::google::protobuf::int32 logpixels_;
  ::google::protobuf::int32 pelsheight_;
  ::google::protobuf::int32 pelswidth_;
  ::std::string* description_;
  ::std::string* devicename_;
  ::google::protobuf::int32 specificationversion_;
  ::google::protobuf::int32 bitsperperl_;
  ::std::string* driverversion_;
  double buytime_;
  ::std::string* buyprice_;
  double dchecktime_;
  ::std::string* otherinfo_;
  ::std::string* buyname_;
  ::google::protobuf::int32 displayflags_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(22 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static DisplayConfigurationInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT DisplayConfigurationInfoList : public ::google::protobuf::Message {
 public:
  DisplayConfigurationInfoList();
  virtual ~DisplayConfigurationInfoList();
  
  DisplayConfigurationInfoList(const DisplayConfigurationInfoList& from);
  
  inline DisplayConfigurationInfoList& operator=(const DisplayConfigurationInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DisplayConfigurationInfoList& default_instance();
  
  void Swap(DisplayConfigurationInfoList* other);
  
  // implements Message ----------------------------------------------
  
  DisplayConfigurationInfoList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DisplayConfigurationInfoList& from);
  void MergeFrom(const DisplayConfigurationInfoList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .isafetec.DisplayConfigurationInfo list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::isafetec::DisplayConfigurationInfo& list(int index) const;
  inline ::isafetec::DisplayConfigurationInfo* mutable_list(int index);
  inline ::isafetec::DisplayConfigurationInfo* DisplayConfigurationInfoList::list_ReleaseAt(int index); 
  inline void DisplayConfigurationInfoList::list_RemoveAt(int index); 
  inline ::isafetec::DisplayConfigurationInfo* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::isafetec::DisplayConfigurationInfo >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::isafetec::DisplayConfigurationInfo >*
      mutable_list();
  
  // optional int32 alarmed = 2;
  inline bool has_alarmed() const;
  inline void clear_alarmed();
  static const int kAlarmedFieldNumber = 2;
  inline ::google::protobuf::int32 alarmed() const;
  inline void set_alarmed(::google::protobuf::int32 value);
  
  // optional string winuser = 3;
  inline bool has_winuser() const;
  inline void clear_winuser();
  static const int kWinuserFieldNumber = 3;
  inline const ::std::string& winuser() const;
  inline void set_winuser(const ::std::string& value);
  inline void set_winuser(const char* value);
  inline void set_winuser(const char* value, size_t size);
  inline ::std::string* mutable_winuser();
  inline ::std::string* release_winuser();
  
  // @@protoc_insertion_point(class_scope:isafetec.DisplayConfigurationInfoList)
 private:
  inline void set_has_alarmed();
  inline void clear_has_alarmed();
  inline void set_has_winuser();
  inline void clear_has_winuser();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::isafetec::DisplayConfigurationInfo > list_;
  ::std::string* winuser_;
  ::google::protobuf::int32 alarmed_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static DisplayConfigurationInfoList* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT IDEControllerInfo : public ::google::protobuf::Message {
 public:
  IDEControllerInfo();
  virtual ~IDEControllerInfo();
  
  IDEControllerInfo(const IDEControllerInfo& from);
  
  inline IDEControllerInfo& operator=(const IDEControllerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IDEControllerInfo& default_instance();
  
  void Swap(IDEControllerInfo* other);
  
  // implements Message ----------------------------------------------
  
  IDEControllerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IDEControllerInfo& from);
  void MergeFrom(const IDEControllerInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string package_code = 1;
  inline bool has_package_code() const;
  inline void clear_package_code();
  static const int kPackageCodeFieldNumber = 1;
  inline const ::std::string& package_code() const;
  inline void set_package_code(const ::std::string& value);
  inline void set_package_code(const char* value);
  inline void set_package_code(const char* value, size_t size);
  inline ::std::string* mutable_package_code();
  inline ::std::string* release_package_code();
  
  // optional int32 checktype = 2;
  inline bool has_checktype() const;
  inline void clear_checktype();
  static const int kChecktypeFieldNumber = 2;
  inline ::google::protobuf::int32 checktype() const;
  inline void set_checktype(::google::protobuf::int32 value);
  
  // optional double scan_time = 3;
  inline bool has_scan_time() const;
  inline void clear_scan_time();
  static const int kScanTimeFieldNumber = 3;
  inline double scan_time() const;
  inline void set_scan_time(double value);
  
  // optional double addtime = 50;
  inline bool has_addtime() const;
  inline void clear_addtime();
  static const int kAddtimeFieldNumber = 50;
  inline double addtime() const;
  inline void set_addtime(double value);
  
  // optional int32 MaxNumberControlled = 7;
  inline bool has_maxnumbercontrolled() const;
  inline void clear_maxnumbercontrolled();
  static const int kMaxNumberControlledFieldNumber = 7;
  inline ::google::protobuf::int32 maxnumbercontrolled() const;
  inline void set_maxnumbercontrolled(::google::protobuf::int32 value);
  
  // optional string Description = 10;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 10;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  
  // optional string Manufacturer = 12;
  inline bool has_manufacturer() const;
  inline void clear_manufacturer();
  static const int kManufacturerFieldNumber = 12;
  inline const ::std::string& manufacturer() const;
  inline void set_manufacturer(const ::std::string& value);
  inline void set_manufacturer(const char* value);
  inline void set_manufacturer(const char* value, size_t size);
  inline ::std::string* mutable_manufacturer();
  inline ::std::string* release_manufacturer();
  
  // optional string Name = 13;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 13;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string PNPDeviceID = 14;
  inline bool has_pnpdeviceid() const;
  inline void clear_pnpdeviceid();
  static const int kPNPDeviceIDFieldNumber = 14;
  inline const ::std::string& pnpdeviceid() const;
  inline void set_pnpdeviceid(const ::std::string& value);
  inline void set_pnpdeviceid(const char* value);
  inline void set_pnpdeviceid(const char* value, size_t size);
  inline ::std::string* mutable_pnpdeviceid();
  inline ::std::string* release_pnpdeviceid();
  
  // optional string Status = 15;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 15;
  inline const ::std::string& status() const;
  inline void set_status(const ::std::string& value);
  inline void set_status(const char* value);
  inline void set_status(const char* value, size_t size);
  inline ::std::string* mutable_status();
  inline ::std::string* release_status();
  
  // optional int32 Availability = 16;
  inline bool has_availability() const;
  inline void clear_availability();
  static const int kAvailabilityFieldNumber = 16;
  inline ::google::protobuf::int32 availability() const;
  inline void set_availability(::google::protobuf::int32 value);
  
  // optional int32 ProtocolSupported = 17;
  inline bool has_protocolsupported() const;
  inline void clear_protocolsupported();
  static const int kProtocolSupportedFieldNumber = 17;
  inline ::google::protobuf::int32 protocolsupported() const;
  inline void set_protocolsupported(::google::protobuf::int32 value);
  
  // optional double BuyTime = 18;
  inline bool has_buytime() const;
  inline void clear_buytime();
  static const int kBuyTimeFieldNumber = 18;
  inline double buytime() const;
  inline void set_buytime(double value);
  
  // optional string BuyPrice = 19;
  inline bool has_buyprice() const;
  inline void clear_buyprice();
  static const int kBuyPriceFieldNumber = 19;
  inline const ::std::string& buyprice() const;
  inline void set_buyprice(const ::std::string& value);
  inline void set_buyprice(const char* value);
  inline void set_buyprice(const char* value, size_t size);
  inline ::std::string* mutable_buyprice();
  inline ::std::string* release_buyprice();
  
  // optional double DCheckTime = 20;
  inline bool has_dchecktime() const;
  inline void clear_dchecktime();
  static const int kDCheckTimeFieldNumber = 20;
  inline double dchecktime() const;
  inline void set_dchecktime(double value);
  
  // optional string OtherInfo = 21;
  inline bool has_otherinfo() const;
  inline void clear_otherinfo();
  static const int kOtherInfoFieldNumber = 21;
  inline const ::std::string& otherinfo() const;
  inline void set_otherinfo(const ::std::string& value);
  inline void set_otherinfo(const char* value);
  inline void set_otherinfo(const char* value, size_t size);
  inline ::std::string* mutable_otherinfo();
  inline ::std::string* release_otherinfo();
  
  // optional string BuyName = 22;
  inline bool has_buyname() const;
  inline void clear_buyname();
  static const int kBuyNameFieldNumber = 22;
  inline const ::std::string& buyname() const;
  inline void set_buyname(const ::std::string& value);
  inline void set_buyname(const char* value);
  inline void set_buyname(const char* value, size_t size);
  inline ::std::string* mutable_buyname();
  inline ::std::string* release_buyname();
  
  // @@protoc_insertion_point(class_scope:isafetec.IDEControllerInfo)
 private:
  inline void set_has_package_code();
  inline void clear_has_package_code();
  inline void set_has_checktype();
  inline void clear_has_checktype();
  inline void set_has_scan_time();
  inline void clear_has_scan_time();
  inline void set_has_addtime();
  inline void clear_has_addtime();
  inline void set_has_maxnumbercontrolled();
  inline void clear_has_maxnumbercontrolled();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_manufacturer();
  inline void clear_has_manufacturer();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_pnpdeviceid();
  inline void clear_has_pnpdeviceid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_availability();
  inline void clear_has_availability();
  inline void set_has_protocolsupported();
  inline void clear_has_protocolsupported();
  inline void set_has_buytime();
  inline void clear_has_buytime();
  inline void set_has_buyprice();
  inline void clear_has_buyprice();
  inline void set_has_dchecktime();
  inline void clear_has_dchecktime();
  inline void set_has_otherinfo();
  inline void clear_has_otherinfo();
  inline void set_has_buyname();
  inline void clear_has_buyname();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* package_code_;
  double scan_time_;
  ::google::protobuf::int32 checktype_;
  ::google::protobuf::int32 maxnumbercontrolled_;
  double addtime_;
  ::std::string* description_;
  ::std::string* manufacturer_;
  ::std::string* name_;
  ::std::string* pnpdeviceid_;
  ::std::string* status_;
  ::google::protobuf::int32 availability_;
  ::google::protobuf::int32 protocolsupported_;
  double buytime_;
  ::std::string* buyprice_;
  double dchecktime_;
  ::std::string* otherinfo_;
  ::std::string* buyname_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static IDEControllerInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT IDEControllerInfoList : public ::google::protobuf::Message {
 public:
  IDEControllerInfoList();
  virtual ~IDEControllerInfoList();
  
  IDEControllerInfoList(const IDEControllerInfoList& from);
  
  inline IDEControllerInfoList& operator=(const IDEControllerInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const IDEControllerInfoList& default_instance();
  
  void Swap(IDEControllerInfoList* other);
  
  // implements Message ----------------------------------------------
  
  IDEControllerInfoList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IDEControllerInfoList& from);
  void MergeFrom(const IDEControllerInfoList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .isafetec.IDEControllerInfo list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::isafetec::IDEControllerInfo& list(int index) const;
  inline ::isafetec::IDEControllerInfo* mutable_list(int index);
  inline ::isafetec::IDEControllerInfo* IDEControllerInfoList::list_ReleaseAt(int index); 
  inline void IDEControllerInfoList::list_RemoveAt(int index); 
  inline ::isafetec::IDEControllerInfo* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::isafetec::IDEControllerInfo >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::isafetec::IDEControllerInfo >*
      mutable_list();
  
  // optional int32 alarmed = 2;
  inline bool has_alarmed() const;
  inline void clear_alarmed();
  static const int kAlarmedFieldNumber = 2;
  inline ::google::protobuf::int32 alarmed() const;
  inline void set_alarmed(::google::protobuf::int32 value);
  
  // optional string winuser = 3;
  inline bool has_winuser() const;
  inline void clear_winuser();
  static const int kWinuserFieldNumber = 3;
  inline const ::std::string& winuser() const;
  inline void set_winuser(const ::std::string& value);
  inline void set_winuser(const char* value);
  inline void set_winuser(const char* value, size_t size);
  inline ::std::string* mutable_winuser();
  inline ::std::string* release_winuser();
  
  // @@protoc_insertion_point(class_scope:isafetec.IDEControllerInfoList)
 private:
  inline void set_has_alarmed();
  inline void clear_has_alarmed();
  inline void set_has_winuser();
  inline void clear_has_winuser();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::isafetec::IDEControllerInfo > list_;
  ::std::string* winuser_;
  ::google::protobuf::int32 alarmed_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static IDEControllerInfoList* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT InstalledSofteware : public ::google::protobuf::Message {
 public:
  InstalledSofteware();
  virtual ~InstalledSofteware();
  
  InstalledSofteware(const InstalledSofteware& from);
  
  inline InstalledSofteware& operator=(const InstalledSofteware& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const InstalledSofteware& default_instance();
  
  void Swap(InstalledSofteware* other);
  
  // implements Message ----------------------------------------------
  
  InstalledSofteware* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InstalledSofteware& from);
  void MergeFrom(const InstalledSofteware& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string package_code = 1;
  inline bool has_package_code() const;
  inline void clear_package_code();
  static const int kPackageCodeFieldNumber = 1;
  inline const ::std::string& package_code() const;
  inline void set_package_code(const ::std::string& value);
  inline void set_package_code(const char* value);
  inline void set_package_code(const char* value, size_t size);
  inline ::std::string* mutable_package_code();
  inline ::std::string* release_package_code();
  
  // optional int32 checktype = 2;
  inline bool has_checktype() const;
  inline void clear_checktype();
  static const int kChecktypeFieldNumber = 2;
  inline ::google::protobuf::int32 checktype() const;
  inline void set_checktype(::google::protobuf::int32 value);
  
  // optional double scan_time = 3;
  inline bool has_scan_time() const;
  inline void clear_scan_time();
  static const int kScanTimeFieldNumber = 3;
  inline double scan_time() const;
  inline void set_scan_time(double value);
  
  // optional double addtime = 50;
  inline bool has_addtime() const;
  inline void clear_addtime();
  static const int kAddtimeFieldNumber = 50;
  inline double addtime() const;
  inline void set_addtime(double value);
  
  // optional string manufacturer = 4;
  inline bool has_manufacturer() const;
  inline void clear_manufacturer();
  static const int kManufacturerFieldNumber = 4;
  inline const ::std::string& manufacturer() const;
  inline void set_manufacturer(const ::std::string& value);
  inline void set_manufacturer(const char* value);
  inline void set_manufacturer(const char* value, size_t size);
  inline ::std::string* mutable_manufacturer();
  inline ::std::string* release_manufacturer();
  
  // optional string installed_path = 5;
  inline bool has_installed_path() const;
  inline void clear_installed_path();
  static const int kInstalledPathFieldNumber = 5;
  inline const ::std::string& installed_path() const;
  inline void set_installed_path(const ::std::string& value);
  inline void set_installed_path(const char* value);
  inline void set_installed_path(const char* value, size_t size);
  inline ::std::string* mutable_installed_path();
  inline ::std::string* release_installed_path();
  
  // optional string version = 6;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 6;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  
  // optional string installed_time = 7;
  inline bool has_installed_time() const;
  inline void clear_installed_time();
  static const int kInstalledTimeFieldNumber = 7;
  inline const ::std::string& installed_time() const;
  inline void set_installed_time(const ::std::string& value);
  inline void set_installed_time(const char* value);
  inline void set_installed_time(const char* value, size_t size);
  inline ::std::string* mutable_installed_time();
  inline ::std::string* release_installed_time();
  
  // optional string help_link = 8;
  inline bool has_help_link() const;
  inline void clear_help_link();
  static const int kHelpLinkFieldNumber = 8;
  inline const ::std::string& help_link() const;
  inline void set_help_link(const ::std::string& value);
  inline void set_help_link(const char* value);
  inline void set_help_link(const char* value, size_t size);
  inline ::std::string* mutable_help_link();
  inline ::std::string* release_help_link();
  
  // optional string name = 9;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 9;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string description = 10;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 10;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  
  // @@protoc_insertion_point(class_scope:isafetec.InstalledSofteware)
 private:
  inline void set_has_package_code();
  inline void clear_has_package_code();
  inline void set_has_checktype();
  inline void clear_has_checktype();
  inline void set_has_scan_time();
  inline void clear_has_scan_time();
  inline void set_has_addtime();
  inline void clear_has_addtime();
  inline void set_has_manufacturer();
  inline void clear_has_manufacturer();
  inline void set_has_installed_path();
  inline void clear_has_installed_path();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_installed_time();
  inline void clear_has_installed_time();
  inline void set_has_help_link();
  inline void clear_has_help_link();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_description();
  inline void clear_has_description();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* package_code_;
  double scan_time_;
  double addtime_;
  ::std::string* manufacturer_;
  ::std::string* installed_path_;
  ::std::string* version_;
  ::std::string* installed_time_;
  ::std::string* help_link_;
  ::std::string* name_;
  ::std::string* description_;
  ::google::protobuf::int32 checktype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static InstalledSofteware* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT InstalledSoftewareList : public ::google::protobuf::Message {
 public:
  InstalledSoftewareList();
  virtual ~InstalledSoftewareList();
  
  InstalledSoftewareList(const InstalledSoftewareList& from);
  
  inline InstalledSoftewareList& operator=(const InstalledSoftewareList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const InstalledSoftewareList& default_instance();
  
  void Swap(InstalledSoftewareList* other);
  
  // implements Message ----------------------------------------------
  
  InstalledSoftewareList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InstalledSoftewareList& from);
  void MergeFrom(const InstalledSoftewareList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .isafetec.InstalledSofteware list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::isafetec::InstalledSofteware& list(int index) const;
  inline ::isafetec::InstalledSofteware* mutable_list(int index);
  inline ::isafetec::InstalledSofteware* InstalledSoftewareList::list_ReleaseAt(int index); 
  inline void InstalledSoftewareList::list_RemoveAt(int index); 
  inline ::isafetec::InstalledSofteware* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::isafetec::InstalledSofteware >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::isafetec::InstalledSofteware >*
      mutable_list();
  
  // optional int32 alarmed = 2;
  inline bool has_alarmed() const;
  inline void clear_alarmed();
  static const int kAlarmedFieldNumber = 2;
  inline ::google::protobuf::int32 alarmed() const;
  inline void set_alarmed(::google::protobuf::int32 value);
  
  // optional string winuser = 3;
  inline bool has_winuser() const;
  inline void clear_winuser();
  static const int kWinuserFieldNumber = 3;
  inline const ::std::string& winuser() const;
  inline void set_winuser(const ::std::string& value);
  inline void set_winuser(const char* value);
  inline void set_winuser(const char* value, size_t size);
  inline ::std::string* mutable_winuser();
  inline ::std::string* release_winuser();
  
  // @@protoc_insertion_point(class_scope:isafetec.InstalledSoftewareList)
 private:
  inline void set_has_alarmed();
  inline void clear_has_alarmed();
  inline void set_has_winuser();
  inline void clear_has_winuser();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::isafetec::InstalledSofteware > list_;
  ::std::string* winuser_;
  ::google::protobuf::int32 alarmed_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static InstalledSoftewareList* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT KeyboardInfo : public ::google::protobuf::Message {
 public:
  KeyboardInfo();
  virtual ~KeyboardInfo();
  
  KeyboardInfo(const KeyboardInfo& from);
  
  inline KeyboardInfo& operator=(const KeyboardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyboardInfo& default_instance();
  
  void Swap(KeyboardInfo* other);
  
  // implements Message ----------------------------------------------
  
  KeyboardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeyboardInfo& from);
  void MergeFrom(const KeyboardInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string package_code = 1;
  inline bool has_package_code() const;
  inline void clear_package_code();
  static const int kPackageCodeFieldNumber = 1;
  inline const ::std::string& package_code() const;
  inline void set_package_code(const ::std::string& value);
  inline void set_package_code(const char* value);
  inline void set_package_code(const char* value, size_t size);
  inline ::std::string* mutable_package_code();
  inline ::std::string* release_package_code();
  
  // optional int32 checktype = 2;
  inline bool has_checktype() const;
  inline void clear_checktype();
  static const int kChecktypeFieldNumber = 2;
  inline ::google::protobuf::int32 checktype() const;
  inline void set_checktype(::google::protobuf::int32 value);
  
  // optional double scan_time = 3;
  inline bool has_scan_time() const;
  inline void clear_scan_time();
  static const int kScanTimeFieldNumber = 3;
  inline double scan_time() const;
  inline void set_scan_time(double value);
  
  // optional double addtime = 50;
  inline bool has_addtime() const;
  inline void clear_addtime();
  static const int kAddtimeFieldNumber = 50;
  inline double addtime() const;
  inline void set_addtime(double value);
  
  // optional int32 Password = 4;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 4;
  inline ::google::protobuf::int32 password() const;
  inline void set_password(::google::protobuf::int32 value);
  
  // optional int32 IsLocked = 6;
  inline bool has_islocked() const;
  inline void clear_islocked();
  static const int kIsLockedFieldNumber = 6;
  inline ::google::protobuf::int32 islocked() const;
  inline void set_islocked(::google::protobuf::int32 value);
  
  // optional string Description = 7;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 7;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  
  // optional string Layout = 8;
  inline bool has_layout() const;
  inline void clear_layout();
  static const int kLayoutFieldNumber = 8;
  inline const ::std::string& layout() const;
  inline void set_layout(const ::std::string& value);
  inline void set_layout(const char* value);
  inline void set_layout(const char* value, size_t size);
  inline ::std::string* mutable_layout();
  inline ::std::string* release_layout();
  
  // optional string Name = 9;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 9;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string PNPDeviceID = 10;
  inline bool has_pnpdeviceid() const;
  inline void clear_pnpdeviceid();
  static const int kPNPDeviceIDFieldNumber = 10;
  inline const ::std::string& pnpdeviceid() const;
  inline void set_pnpdeviceid(const ::std::string& value);
  inline void set_pnpdeviceid(const char* value);
  inline void set_pnpdeviceid(const char* value, size_t size);
  inline ::std::string* mutable_pnpdeviceid();
  inline ::std::string* release_pnpdeviceid();
  
  // optional string Status = 11;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 11;
  inline const ::std::string& status() const;
  inline void set_status(const ::std::string& value);
  inline void set_status(const char* value);
  inline void set_status(const char* value, size_t size);
  inline ::std::string* mutable_status();
  inline ::std::string* release_status();
  
  // optional int32 Availability = 12;
  inline bool has_availability() const;
  inline void clear_availability();
  static const int kAvailabilityFieldNumber = 12;
  inline ::google::protobuf::int32 availability() const;
  inline void set_availability(::google::protobuf::int32 value);
  
  // optional int32 NumberOfFunctionKeys = 13;
  inline bool has_numberoffunctionkeys() const;
  inline void clear_numberoffunctionkeys();
  static const int kNumberOfFunctionKeysFieldNumber = 13;
  inline ::google::protobuf::int32 numberoffunctionkeys() const;
  inline void set_numberoffunctionkeys(::google::protobuf::int32 value);
  
  // optional double BuyTime = 14;
  inline bool has_buytime() const;
  inline void clear_buytime();
  static const int kBuyTimeFieldNumber = 14;
  inline double buytime() const;
  inline void set_buytime(double value);
  
  // optional string BuyPrice = 15;
  inline bool has_buyprice() const;
  inline void clear_buyprice();
  static const int kBuyPriceFieldNumber = 15;
  inline const ::std::string& buyprice() const;
  inline void set_buyprice(const ::std::string& value);
  inline void set_buyprice(const char* value);
  inline void set_buyprice(const char* value, size_t size);
  inline ::std::string* mutable_buyprice();
  inline ::std::string* release_buyprice();
  
  // optional double DCheckTime = 16;
  inline bool has_dchecktime() const;
  inline void clear_dchecktime();
  static const int kDCheckTimeFieldNumber = 16;
  inline double dchecktime() const;
  inline void set_dchecktime(double value);
  
  // optional string OtherInfo = 17;
  inline bool has_otherinfo() const;
  inline void clear_otherinfo();
  static const int kOtherInfoFieldNumber = 17;
  inline const ::std::string& otherinfo() const;
  inline void set_otherinfo(const ::std::string& value);
  inline void set_otherinfo(const char* value);
  inline void set_otherinfo(const char* value, size_t size);
  inline ::std::string* mutable_otherinfo();
  inline ::std::string* release_otherinfo();
  
  // optional string BuyName = 18;
  inline bool has_buyname() const;
  inline void clear_buyname();
  static const int kBuyNameFieldNumber = 18;
  inline const ::std::string& buyname() const;
  inline void set_buyname(const ::std::string& value);
  inline void set_buyname(const char* value);
  inline void set_buyname(const char* value, size_t size);
  inline ::std::string* mutable_buyname();
  inline ::std::string* release_buyname();
  
  // @@protoc_insertion_point(class_scope:isafetec.KeyboardInfo)
 private:
  inline void set_has_package_code();
  inline void clear_has_package_code();
  inline void set_has_checktype();
  inline void clear_has_checktype();
  inline void set_has_scan_time();
  inline void clear_has_scan_time();
  inline void set_has_addtime();
  inline void clear_has_addtime();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_islocked();
  inline void clear_has_islocked();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_layout();
  inline void clear_has_layout();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_pnpdeviceid();
  inline void clear_has_pnpdeviceid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_availability();
  inline void clear_has_availability();
  inline void set_has_numberoffunctionkeys();
  inline void clear_has_numberoffunctionkeys();
  inline void set_has_buytime();
  inline void clear_has_buytime();
  inline void set_has_buyprice();
  inline void clear_has_buyprice();
  inline void set_has_dchecktime();
  inline void clear_has_dchecktime();
  inline void set_has_otherinfo();
  inline void clear_has_otherinfo();
  inline void set_has_buyname();
  inline void clear_has_buyname();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* package_code_;
  double scan_time_;
  ::google::protobuf::int32 checktype_;
  ::google::protobuf::int32 password_;
  double addtime_;
  ::std::string* description_;
  ::std::string* layout_;
  ::std::string* name_;
  ::google::protobuf::int32 islocked_;
  ::google::protobuf::int32 availability_;
  ::std::string* pnpdeviceid_;
  ::std::string* status_;
  double buytime_;
  ::std::string* buyprice_;
  double dchecktime_;
  ::std::string* otherinfo_;
  ::std::string* buyname_;
  ::google::protobuf::int32 numberoffunctionkeys_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static KeyboardInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT KeyboardInfoList : public ::google::protobuf::Message {
 public:
  KeyboardInfoList();
  virtual ~KeyboardInfoList();
  
  KeyboardInfoList(const KeyboardInfoList& from);
  
  inline KeyboardInfoList& operator=(const KeyboardInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyboardInfoList& default_instance();
  
  void Swap(KeyboardInfoList* other);
  
  // implements Message ----------------------------------------------
  
  KeyboardInfoList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeyboardInfoList& from);
  void MergeFrom(const KeyboardInfoList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .isafetec.KeyboardInfo list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::isafetec::KeyboardInfo& list(int index) const;
  inline ::isafetec::KeyboardInfo* mutable_list(int index);
  inline ::isafetec::KeyboardInfo* KeyboardInfoList::list_ReleaseAt(int index); 
  inline void KeyboardInfoList::list_RemoveAt(int index); 
  inline ::isafetec::KeyboardInfo* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::isafetec::KeyboardInfo >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::isafetec::KeyboardInfo >*
      mutable_list();
  
  // optional int32 alarmed = 2;
  inline bool has_alarmed() const;
  inline void clear_alarmed();
  static const int kAlarmedFieldNumber = 2;
  inline ::google::protobuf::int32 alarmed() const;
  inline void set_alarmed(::google::protobuf::int32 value);
  
  // optional string winuser = 3;
  inline bool has_winuser() const;
  inline void clear_winuser();
  static const int kWinuserFieldNumber = 3;
  inline const ::std::string& winuser() const;
  inline void set_winuser(const ::std::string& value);
  inline void set_winuser(const char* value);
  inline void set_winuser(const char* value, size_t size);
  inline ::std::string* mutable_winuser();
  inline ::std::string* release_winuser();
  
  // @@protoc_insertion_point(class_scope:isafetec.KeyboardInfoList)
 private:
  inline void set_has_alarmed();
  inline void clear_has_alarmed();
  inline void set_has_winuser();
  inline void clear_has_winuser();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::isafetec::KeyboardInfo > list_;
  ::std::string* winuser_;
  ::google::protobuf::int32 alarmed_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static KeyboardInfoList* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT LogicalDiskInfo : public ::google::protobuf::Message {
 public:
  LogicalDiskInfo();
  virtual ~LogicalDiskInfo();
  
  LogicalDiskInfo(const LogicalDiskInfo& from);
  
  inline LogicalDiskInfo& operator=(const LogicalDiskInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogicalDiskInfo& default_instance();
  
  void Swap(LogicalDiskInfo* other);
  
  // implements Message ----------------------------------------------
  
  LogicalDiskInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogicalDiskInfo& from);
  void MergeFrom(const LogicalDiskInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string package_code = 1;
  inline bool has_package_code() const;
  inline void clear_package_code();
  static const int kPackageCodeFieldNumber = 1;
  inline const ::std::string& package_code() const;
  inline void set_package_code(const ::std::string& value);
  inline void set_package_code(const char* value);
  inline void set_package_code(const char* value, size_t size);
  inline ::std::string* mutable_package_code();
  inline ::std::string* release_package_code();
  
  // optional int32 checktype = 2;
  inline bool has_checktype() const;
  inline void clear_checktype();
  static const int kChecktypeFieldNumber = 2;
  inline ::google::protobuf::int32 checktype() const;
  inline void set_checktype(::google::protobuf::int32 value);
  
  // optional double scan_time = 3;
  inline bool has_scan_time() const;
  inline void clear_scan_time();
  static const int kScanTimeFieldNumber = 3;
  inline double scan_time() const;
  inline void set_scan_time(double value);
  
  // optional double addtime = 50;
  inline bool has_addtime() const;
  inline void clear_addtime();
  static const int kAddtimeFieldNumber = 50;
  inline double addtime() const;
  inline void set_addtime(double value);
  
  // optional int32 MediaType = 4;
  inline bool has_mediatype() const;
  inline void clear_mediatype();
  static const int kMediaTypeFieldNumber = 4;
  inline ::google::protobuf::int32 mediatype() const;
  inline void set_mediatype(::google::protobuf::int32 value);
  
  // optional uint64 FreeSpace = 5;
  inline bool has_freespace() const;
  inline void clear_freespace();
  static const int kFreeSpaceFieldNumber = 5;
  inline ::google::protobuf::uint64 freespace() const;
  inline void set_freespace(::google::protobuf::uint64 value);
  
  // optional uint64 Size = 6;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 6;
  inline ::google::protobuf::uint64 size() const;
  inline void set_size(::google::protobuf::uint64 value);
  
  // optional int32 QuotasDisabled = 7;
  inline bool has_quotasdisabled() const;
  inline void clear_quotasdisabled();
  static const int kQuotasDisabledFieldNumber = 7;
  inline ::google::protobuf::int32 quotasdisabled() const;
  inline void set_quotasdisabled(::google::protobuf::int32 value);
  
  // optional int32 QuotasIncomplete = 8;
  inline bool has_quotasincomplete() const;
  inline void clear_quotasincomplete();
  static const int kQuotasIncompleteFieldNumber = 8;
  inline ::google::protobuf::int32 quotasincomplete() const;
  inline void set_quotasincomplete(::google::protobuf::int32 value);
  
  // optional int32 QuotasRebuilding = 9;
  inline bool has_quotasrebuilding() const;
  inline void clear_quotasrebuilding();
  static const int kQuotasRebuildingFieldNumber = 9;
  inline ::google::protobuf::int32 quotasrebuilding() const;
  inline void set_quotasrebuilding(::google::protobuf::int32 value);
  
  // optional int32 SupportsDiskQuotas = 10;
  inline bool has_supportsdiskquotas() const;
  inline void clear_supportsdiskquotas();
  static const int kSupportsDiskQuotasFieldNumber = 10;
  inline ::google::protobuf::int32 supportsdiskquotas() const;
  inline void set_supportsdiskquotas(::google::protobuf::int32 value);
  
  // optional int32 SupportsFileBasedCompression = 11;
  inline bool has_supportsfilebasedcompression() const;
  inline void clear_supportsfilebasedcompression();
  static const int kSupportsFileBasedCompressionFieldNumber = 11;
  inline ::google::protobuf::int32 supportsfilebasedcompression() const;
  inline void set_supportsfilebasedcompression(::google::protobuf::int32 value);
  
  // optional string Description = 14;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 14;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  
  // optional string FileSystem = 15;
  inline bool has_filesystem() const;
  inline void clear_filesystem();
  static const int kFileSystemFieldNumber = 15;
  inline const ::std::string& filesystem() const;
  inline void set_filesystem(const ::std::string& value);
  inline void set_filesystem(const char* value);
  inline void set_filesystem(const char* value, size_t size);
  inline ::std::string* mutable_filesystem();
  inline ::std::string* release_filesystem();
  
  // optional string Name = 16;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 16;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string VolumeName = 19;
  inline bool has_volumename() const;
  inline void clear_volumename();
  static const int kVolumeNameFieldNumber = 19;
  inline const ::std::string& volumename() const;
  inline void set_volumename(const ::std::string& value);
  inline void set_volumename(const char* value);
  inline void set_volumename(const char* value, size_t size);
  inline ::std::string* mutable_volumename();
  inline ::std::string* release_volumename();
  
  // optional string VolumeSerialNumber = 20;
  inline bool has_volumeserialnumber() const;
  inline void clear_volumeserialnumber();
  static const int kVolumeSerialNumberFieldNumber = 20;
  inline const ::std::string& volumeserialnumber() const;
  inline void set_volumeserialnumber(const ::std::string& value);
  inline void set_volumeserialnumber(const char* value);
  inline void set_volumeserialnumber(const char* value, size_t size);
  inline ::std::string* mutable_volumeserialnumber();
  inline ::std::string* release_volumeserialnumber();
  
  // optional int32 DriveType = 21;
  inline bool has_drivetype() const;
  inline void clear_drivetype();
  static const int kDriveTypeFieldNumber = 21;
  inline ::google::protobuf::int32 drivetype() const;
  inline void set_drivetype(::google::protobuf::int32 value);
  
  // optional int32 MaximumComponentLength = 22;
  inline bool has_maximumcomponentlength() const;
  inline void clear_maximumcomponentlength();
  static const int kMaximumComponentLengthFieldNumber = 22;
  inline ::google::protobuf::int32 maximumcomponentlength() const;
  inline void set_maximumcomponentlength(::google::protobuf::int32 value);
  
  // optional double BuyTime = 23;
  inline bool has_buytime() const;
  inline void clear_buytime();
  static const int kBuyTimeFieldNumber = 23;
  inline double buytime() const;
  inline void set_buytime(double value);
  
  // optional string BuyPrice = 24;
  inline bool has_buyprice() const;
  inline void clear_buyprice();
  static const int kBuyPriceFieldNumber = 24;
  inline const ::std::string& buyprice() const;
  inline void set_buyprice(const ::std::string& value);
  inline void set_buyprice(const char* value);
  inline void set_buyprice(const char* value, size_t size);
  inline ::std::string* mutable_buyprice();
  inline ::std::string* release_buyprice();
  
  // optional double DCheckTime = 25;
  inline bool has_dchecktime() const;
  inline void clear_dchecktime();
  static const int kDCheckTimeFieldNumber = 25;
  inline double dchecktime() const;
  inline void set_dchecktime(double value);
  
  // optional string OtherInfo = 26;
  inline bool has_otherinfo() const;
  inline void clear_otherinfo();
  static const int kOtherInfoFieldNumber = 26;
  inline const ::std::string& otherinfo() const;
  inline void set_otherinfo(const ::std::string& value);
  inline void set_otherinfo(const char* value);
  inline void set_otherinfo(const char* value, size_t size);
  inline ::std::string* mutable_otherinfo();
  inline ::std::string* release_otherinfo();
  
  // optional string BuyName = 27;
  inline bool has_buyname() const;
  inline void clear_buyname();
  static const int kBuyNameFieldNumber = 27;
  inline const ::std::string& buyname() const;
  inline void set_buyname(const ::std::string& value);
  inline void set_buyname(const char* value);
  inline void set_buyname(const char* value, size_t size);
  inline ::std::string* mutable_buyname();
  inline ::std::string* release_buyname();
  
  // @@protoc_insertion_point(class_scope:isafetec.LogicalDiskInfo)
 private:
  inline void set_has_package_code();
  inline void clear_has_package_code();
  inline void set_has_checktype();
  inline void clear_has_checktype();
  inline void set_has_scan_time();
  inline void clear_has_scan_time();
  inline void set_has_addtime();
  inline void clear_has_addtime();
  inline void set_has_mediatype();
  inline void clear_has_mediatype();
  inline void set_has_freespace();
  inline void clear_has_freespace();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_quotasdisabled();
  inline void clear_has_quotasdisabled();
  inline void set_has_quotasincomplete();
  inline void clear_has_quotasincomplete();
  inline void set_has_quotasrebuilding();
  inline void clear_has_quotasrebuilding();
  inline void set_has_supportsdiskquotas();
  inline void clear_has_supportsdiskquotas();
  inline void set_has_supportsfilebasedcompression();
  inline void clear_has_supportsfilebasedcompression();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_filesystem();
  inline void clear_has_filesystem();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_volumename();
  inline void clear_has_volumename();
  inline void set_has_volumeserialnumber();
  inline void clear_has_volumeserialnumber();
  inline void set_has_drivetype();
  inline void clear_has_drivetype();
  inline void set_has_maximumcomponentlength();
  inline void clear_has_maximumcomponentlength();
  inline void set_has_buytime();
  inline void clear_has_buytime();
  inline void set_has_buyprice();
  inline void clear_has_buyprice();
  inline void set_has_dchecktime();
  inline void clear_has_dchecktime();
  inline void set_has_otherinfo();
  inline void clear_has_otherinfo();
  inline void set_has_buyname();
  inline void clear_has_buyname();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* package_code_;
  double scan_time_;
  ::google::protobuf::int32 checktype_;
  ::google::protobuf::int32 mediatype_;
  double addtime_;
  ::google::protobuf::uint64 freespace_;
  ::google::protobuf::uint64 size_;
  ::google::protobuf::int32 quotasdisabled_;
  ::google::protobuf::int32 quotasincomplete_;
  ::google::protobuf::int32 quotasrebuilding_;
  ::google::protobuf::int32 supportsdiskquotas_;
  ::std::string* description_;
  ::std::string* filesystem_;
  ::std::string* name_;
  ::google::protobuf::int32 supportsfilebasedcompression_;
  ::google::protobuf::int32 drivetype_;
  ::std::string* volumename_;
  ::std::string* volumeserialnumber_;
  double buytime_;
  ::std::string* buyprice_;
  double dchecktime_;
  ::std::string* otherinfo_;
  ::std::string* buyname_;
  ::google::protobuf::int32 maximumcomponentlength_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(24 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static LogicalDiskInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT LogicalDiskInfoList : public ::google::protobuf::Message {
 public:
  LogicalDiskInfoList();
  virtual ~LogicalDiskInfoList();
  
  LogicalDiskInfoList(const LogicalDiskInfoList& from);
  
  inline LogicalDiskInfoList& operator=(const LogicalDiskInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogicalDiskInfoList& default_instance();
  
  void Swap(LogicalDiskInfoList* other);
  
  // implements Message ----------------------------------------------
  
  LogicalDiskInfoList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogicalDiskInfoList& from);
  void MergeFrom(const LogicalDiskInfoList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .isafetec.LogicalDiskInfo list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::isafetec::LogicalDiskInfo& list(int index) const;
  inline ::isafetec::LogicalDiskInfo* mutable_list(int index);
  inline ::isafetec::LogicalDiskInfo* LogicalDiskInfoList::list_ReleaseAt(int index); 
  inline void LogicalDiskInfoList::list_RemoveAt(int index); 
  inline ::isafetec::LogicalDiskInfo* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::isafetec::LogicalDiskInfo >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::isafetec::LogicalDiskInfo >*
      mutable_list();
  
  // optional int32 alarmed = 2;
  inline bool has_alarmed() const;
  inline void clear_alarmed();
  static const int kAlarmedFieldNumber = 2;
  inline ::google::protobuf::int32 alarmed() const;
  inline void set_alarmed(::google::protobuf::int32 value);
  
  // optional string winuser = 3;
  inline bool has_winuser() const;
  inline void clear_winuser();
  static const int kWinuserFieldNumber = 3;
  inline const ::std::string& winuser() const;
  inline void set_winuser(const ::std::string& value);
  inline void set_winuser(const char* value);
  inline void set_winuser(const char* value, size_t size);
  inline ::std::string* mutable_winuser();
  inline ::std::string* release_winuser();
  
  // @@protoc_insertion_point(class_scope:isafetec.LogicalDiskInfoList)
 private:
  inline void set_has_alarmed();
  inline void clear_has_alarmed();
  inline void set_has_winuser();
  inline void clear_has_winuser();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::isafetec::LogicalDiskInfo > list_;
  ::std::string* winuser_;
  ::google::protobuf::int32 alarmed_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static LogicalDiskInfoList* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT MainBoardInfo : public ::google::protobuf::Message {
 public:
  MainBoardInfo();
  virtual ~MainBoardInfo();
  
  MainBoardInfo(const MainBoardInfo& from);
  
  inline MainBoardInfo& operator=(const MainBoardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MainBoardInfo& default_instance();
  
  void Swap(MainBoardInfo* other);
  
  // implements Message ----------------------------------------------
  
  MainBoardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MainBoardInfo& from);
  void MergeFrom(const MainBoardInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string package_code = 1;
  inline bool has_package_code() const;
  inline void clear_package_code();
  static const int kPackageCodeFieldNumber = 1;
  inline const ::std::string& package_code() const;
  inline void set_package_code(const ::std::string& value);
  inline void set_package_code(const char* value);
  inline void set_package_code(const char* value, size_t size);
  inline ::std::string* mutable_package_code();
  inline ::std::string* release_package_code();
  
  // optional int32 checktype = 2;
  inline bool has_checktype() const;
  inline void clear_checktype();
  static const int kChecktypeFieldNumber = 2;
  inline ::google::protobuf::int32 checktype() const;
  inline void set_checktype(::google::protobuf::int32 value);
  
  // optional double scan_time = 3;
  inline bool has_scan_time() const;
  inline void clear_scan_time();
  static const int kScanTimeFieldNumber = 3;
  inline double scan_time() const;
  inline void set_scan_time(double value);
  
  // optional double addtime = 50;
  inline bool has_addtime() const;
  inline void clear_addtime();
  static const int kAddtimeFieldNumber = 50;
  inline double addtime() const;
  inline void set_addtime(double value);
  
  // optional string Model = 4;
  inline bool has_model() const;
  inline void clear_model();
  static const int kModelFieldNumber = 4;
  inline const ::std::string& model() const;
  inline void set_model(const ::std::string& value);
  inline void set_model(const char* value);
  inline void set_model(const char* value, size_t size);
  inline ::std::string* mutable_model();
  inline ::std::string* release_model();
  
  // optional string OtherIdentifyingInfo = 5;
  inline bool has_otheridentifyinginfo() const;
  inline void clear_otheridentifyinginfo();
  static const int kOtherIdentifyingInfoFieldNumber = 5;
  inline const ::std::string& otheridentifyinginfo() const;
  inline void set_otheridentifyinginfo(const ::std::string& value);
  inline void set_otheridentifyinginfo(const char* value);
  inline void set_otheridentifyinginfo(const char* value, size_t size);
  inline ::std::string* mutable_otheridentifyinginfo();
  inline ::std::string* release_otheridentifyinginfo();
  
  // optional string PartNumber = 6;
  inline bool has_partnumber() const;
  inline void clear_partnumber();
  static const int kPartNumberFieldNumber = 6;
  inline const ::std::string& partnumber() const;
  inline void set_partnumber(const ::std::string& value);
  inline void set_partnumber(const char* value);
  inline void set_partnumber(const char* value, size_t size);
  inline ::std::string* mutable_partnumber();
  inline ::std::string* release_partnumber();
  
  // optional string Product = 7;
  inline bool has_product() const;
  inline void clear_product();
  static const int kProductFieldNumber = 7;
  inline const ::std::string& product() const;
  inline void set_product(const ::std::string& value);
  inline void set_product(const char* value);
  inline void set_product(const char* value, size_t size);
  inline ::std::string* mutable_product();
  inline ::std::string* release_product();
  
  // optional string RequirementsDescription = 8;
  inline bool has_requirementsdescription() const;
  inline void clear_requirementsdescription();
  static const int kRequirementsDescriptionFieldNumber = 8;
  inline const ::std::string& requirementsdescription() const;
  inline void set_requirementsdescription(const ::std::string& value);
  inline void set_requirementsdescription(const char* value);
  inline void set_requirementsdescription(const char* value, size_t size);
  inline ::std::string* mutable_requirementsdescription();
  inline ::std::string* release_requirementsdescription();
  
  // optional string SerialNumber = 9;
  inline bool has_serialnumber() const;
  inline void clear_serialnumber();
  static const int kSerialNumberFieldNumber = 9;
  inline const ::std::string& serialnumber() const;
  inline void set_serialnumber(const ::std::string& value);
  inline void set_serialnumber(const char* value);
  inline void set_serialnumber(const char* value, size_t size);
  inline ::std::string* mutable_serialnumber();
  inline ::std::string* release_serialnumber();
  
  // optional string SKU = 10;
  inline bool has_sku() const;
  inline void clear_sku();
  static const int kSKUFieldNumber = 10;
  inline const ::std::string& sku() const;
  inline void set_sku(const ::std::string& value);
  inline void set_sku(const char* value);
  inline void set_sku(const char* value, size_t size);
  inline ::std::string* mutable_sku();
  inline ::std::string* release_sku();
  
  // optional string SlotLayout = 11;
  inline bool has_slotlayout() const;
  inline void clear_slotlayout();
  static const int kSlotLayoutFieldNumber = 11;
  inline const ::std::string& slotlayout() const;
  inline void set_slotlayout(const ::std::string& value);
  inline void set_slotlayout(const char* value);
  inline void set_slotlayout(const char* value, size_t size);
  inline ::std::string* mutable_slotlayout();
  inline ::std::string* release_slotlayout();
  
  // optional string Status = 12;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 12;
  inline const ::std::string& status() const;
  inline void set_status(const ::std::string& value);
  inline void set_status(const char* value);
  inline void set_status(const char* value, size_t size);
  inline ::std::string* mutable_status();
  inline ::std::string* release_status();
  
  // optional string Version = 13;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 13;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  
  // optional string Name = 14;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 14;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string Description = 15;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 15;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  
  // optional string Manufacturer = 16;
  inline bool has_manufacturer() const;
  inline void clear_manufacturer();
  static const int kManufacturerFieldNumber = 16;
  inline const ::std::string& manufacturer() const;
  inline void set_manufacturer(const ::std::string& value);
  inline void set_manufacturer(const char* value);
  inline void set_manufacturer(const char* value, size_t size);
  inline ::std::string* mutable_manufacturer();
  inline ::std::string* release_manufacturer();
  
  // optional double BuyTime = 17;
  inline bool has_buytime() const;
  inline void clear_buytime();
  static const int kBuyTimeFieldNumber = 17;
  inline double buytime() const;
  inline void set_buytime(double value);
  
  // optional string BuyPrice = 18;
  inline bool has_buyprice() const;
  inline void clear_buyprice();
  static const int kBuyPriceFieldNumber = 18;
  inline const ::std::string& buyprice() const;
  inline void set_buyprice(const ::std::string& value);
  inline void set_buyprice(const char* value);
  inline void set_buyprice(const char* value, size_t size);
  inline ::std::string* mutable_buyprice();
  inline ::std::string* release_buyprice();
  
  // optional double DCheckTime = 19;
  inline bool has_dchecktime() const;
  inline void clear_dchecktime();
  static const int kDCheckTimeFieldNumber = 19;
  inline double dchecktime() const;
  inline void set_dchecktime(double value);
  
  // optional string OtherInfo = 20;
  inline bool has_otherinfo() const;
  inline void clear_otherinfo();
  static const int kOtherInfoFieldNumber = 20;
  inline const ::std::string& otherinfo() const;
  inline void set_otherinfo(const ::std::string& value);
  inline void set_otherinfo(const char* value);
  inline void set_otherinfo(const char* value, size_t size);
  inline ::std::string* mutable_otherinfo();
  inline ::std::string* release_otherinfo();
  
  // optional string BuyName = 21;
  inline bool has_buyname() const;
  inline void clear_buyname();
  static const int kBuyNameFieldNumber = 21;
  inline const ::std::string& buyname() const;
  inline void set_buyname(const ::std::string& value);
  inline void set_buyname(const char* value);
  inline void set_buyname(const char* value, size_t size);
  inline ::std::string* mutable_buyname();
  inline ::std::string* release_buyname();
  
  // @@protoc_insertion_point(class_scope:isafetec.MainBoardInfo)
 private:
  inline void set_has_package_code();
  inline void clear_has_package_code();
  inline void set_has_checktype();
  inline void clear_has_checktype();
  inline void set_has_scan_time();
  inline void clear_has_scan_time();
  inline void set_has_addtime();
  inline void clear_has_addtime();
  inline void set_has_model();
  inline void clear_has_model();
  inline void set_has_otheridentifyinginfo();
  inline void clear_has_otheridentifyinginfo();
  inline void set_has_partnumber();
  inline void clear_has_partnumber();
  inline void set_has_product();
  inline void clear_has_product();
  inline void set_has_requirementsdescription();
  inline void clear_has_requirementsdescription();
  inline void set_has_serialnumber();
  inline void clear_has_serialnumber();
  inline void set_has_sku();
  inline void clear_has_sku();
  inline void set_has_slotlayout();
  inline void clear_has_slotlayout();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_manufacturer();
  inline void clear_has_manufacturer();
  inline void set_has_buytime();
  inline void clear_has_buytime();
  inline void set_has_buyprice();
  inline void clear_has_buyprice();
  inline void set_has_dchecktime();
  inline void clear_has_dchecktime();
  inline void set_has_otherinfo();
  inline void clear_has_otherinfo();
  inline void set_has_buyname();
  inline void clear_has_buyname();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* package_code_;
  double scan_time_;
  double addtime_;
  ::std::string* model_;
  ::std::string* otheridentifyinginfo_;
  ::std::string* partnumber_;
  ::std::string* product_;
  ::std::string* requirementsdescription_;
  ::std::string* serialnumber_;
  ::std::string* sku_;
  ::std::string* slotlayout_;
  ::std::string* status_;
  ::std::string* version_;
  ::std::string* name_;
  ::std::string* description_;
  ::std::string* manufacturer_;
  double buytime_;
  ::std::string* buyprice_;
  double dchecktime_;
  ::std::string* otherinfo_;
  ::std::string* buyname_;
  ::google::protobuf::int32 checktype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(22 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static MainBoardInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT MainBoardInfoList : public ::google::protobuf::Message {
 public:
  MainBoardInfoList();
  virtual ~MainBoardInfoList();
  
  MainBoardInfoList(const MainBoardInfoList& from);
  
  inline MainBoardInfoList& operator=(const MainBoardInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MainBoardInfoList& default_instance();
  
  void Swap(MainBoardInfoList* other);
  
  // implements Message ----------------------------------------------
  
  MainBoardInfoList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MainBoardInfoList& from);
  void MergeFrom(const MainBoardInfoList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .isafetec.MainBoardInfo list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::isafetec::MainBoardInfo& list(int index) const;
  inline ::isafetec::MainBoardInfo* mutable_list(int index);
  inline ::isafetec::MainBoardInfo* MainBoardInfoList::list_ReleaseAt(int index); 
  inline void MainBoardInfoList::list_RemoveAt(int index); 
  inline ::isafetec::MainBoardInfo* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::isafetec::MainBoardInfo >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::isafetec::MainBoardInfo >*
      mutable_list();
  
  // optional int32 alarmed = 2;
  inline bool has_alarmed() const;
  inline void clear_alarmed();
  static const int kAlarmedFieldNumber = 2;
  inline ::google::protobuf::int32 alarmed() const;
  inline void set_alarmed(::google::protobuf::int32 value);
  
  // optional string winuser = 3;
  inline bool has_winuser() const;
  inline void clear_winuser();
  static const int kWinuserFieldNumber = 3;
  inline const ::std::string& winuser() const;
  inline void set_winuser(const ::std::string& value);
  inline void set_winuser(const char* value);
  inline void set_winuser(const char* value, size_t size);
  inline ::std::string* mutable_winuser();
  inline ::std::string* release_winuser();
  
  // @@protoc_insertion_point(class_scope:isafetec.MainBoardInfoList)
 private:
  inline void set_has_alarmed();
  inline void clear_has_alarmed();
  inline void set_has_winuser();
  inline void clear_has_winuser();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::isafetec::MainBoardInfo > list_;
  ::std::string* winuser_;
  ::google::protobuf::int32 alarmed_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static MainBoardInfoList* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT MemoryDeviceInfo : public ::google::protobuf::Message {
 public:
  MemoryDeviceInfo();
  virtual ~MemoryDeviceInfo();
  
  MemoryDeviceInfo(const MemoryDeviceInfo& from);
  
  inline MemoryDeviceInfo& operator=(const MemoryDeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MemoryDeviceInfo& default_instance();
  
  void Swap(MemoryDeviceInfo* other);
  
  // implements Message ----------------------------------------------
  
  MemoryDeviceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MemoryDeviceInfo& from);
  void MergeFrom(const MemoryDeviceInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string package_code = 1;
  inline bool has_package_code() const;
  inline void clear_package_code();
  static const int kPackageCodeFieldNumber = 1;
  inline const ::std::string& package_code() const;
  inline void set_package_code(const ::std::string& value);
  inline void set_package_code(const char* value);
  inline void set_package_code(const char* value, size_t size);
  inline ::std::string* mutable_package_code();
  inline ::std::string* release_package_code();
  
  // optional int32 checktype = 2;
  inline bool has_checktype() const;
  inline void clear_checktype();
  static const int kChecktypeFieldNumber = 2;
  inline ::google::protobuf::int32 checktype() const;
  inline void set_checktype(::google::protobuf::int32 value);
  
  // optional double scan_time = 3;
  inline bool has_scan_time() const;
  inline void clear_scan_time();
  static const int kScanTimeFieldNumber = 3;
  inline double scan_time() const;
  inline void set_scan_time(double value);
  
  // optional double addtime = 50;
  inline bool has_addtime() const;
  inline void clear_addtime();
  static const int kAddtimeFieldNumber = 50;
  inline double addtime() const;
  inline void set_addtime(double value);
  
  // optional uint64 EndingAddress = 4;
  inline bool has_endingaddress() const;
  inline void clear_endingaddress();
  static const int kEndingAddressFieldNumber = 4;
  inline ::google::protobuf::uint64 endingaddress() const;
  inline void set_endingaddress(::google::protobuf::uint64 value);
  
  // optional uint64 StartingAddress = 5;
  inline bool has_startingaddress() const;
  inline void clear_startingaddress();
  static const int kStartingAddressFieldNumber = 5;
  inline ::google::protobuf::uint64 startingaddress() const;
  inline void set_startingaddress(::google::protobuf::uint64 value);
  
  // optional string Description = 6;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 6;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  
  // optional string Name = 7;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 7;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional double BuyTime = 8;
  inline bool has_buytime() const;
  inline void clear_buytime();
  static const int kBuyTimeFieldNumber = 8;
  inline double buytime() const;
  inline void set_buytime(double value);
  
  // optional string BuyPrice = 9;
  inline bool has_buyprice() const;
  inline void clear_buyprice();
  static const int kBuyPriceFieldNumber = 9;
  inline const ::std::string& buyprice() const;
  inline void set_buyprice(const ::std::string& value);
  inline void set_buyprice(const char* value);
  inline void set_buyprice(const char* value, size_t size);
  inline ::std::string* mutable_buyprice();
  inline ::std::string* release_buyprice();
  
  // optional double DCheckTime = 10;
  inline bool has_dchecktime() const;
  inline void clear_dchecktime();
  static const int kDCheckTimeFieldNumber = 10;
  inline double dchecktime() const;
  inline void set_dchecktime(double value);
  
  // optional string OtherInfo = 11;
  inline bool has_otherinfo() const;
  inline void clear_otherinfo();
  static const int kOtherInfoFieldNumber = 11;
  inline const ::std::string& otherinfo() const;
  inline void set_otherinfo(const ::std::string& value);
  inline void set_otherinfo(const char* value);
  inline void set_otherinfo(const char* value, size_t size);
  inline ::std::string* mutable_otherinfo();
  inline ::std::string* release_otherinfo();
  
  // optional string BuyName = 12;
  inline bool has_buyname() const;
  inline void clear_buyname();
  static const int kBuyNameFieldNumber = 12;
  inline const ::std::string& buyname() const;
  inline void set_buyname(const ::std::string& value);
  inline void set_buyname(const char* value);
  inline void set_buyname(const char* value, size_t size);
  inline ::std::string* mutable_buyname();
  inline ::std::string* release_buyname();
  
  // @@protoc_insertion_point(class_scope:isafetec.MemoryDeviceInfo)
 private:
  inline void set_has_package_code();
  inline void clear_has_package_code();
  inline void set_has_checktype();
  inline void clear_has_checktype();
  inline void set_has_scan_time();
  inline void clear_has_scan_time();
  inline void set_has_addtime();
  inline void clear_has_addtime();
  inline void set_has_endingaddress();
  inline void clear_has_endingaddress();
  inline void set_has_startingaddress();
  inline void clear_has_startingaddress();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_buytime();
  inline void clear_has_buytime();
  inline void set_has_buyprice();
  inline void clear_has_buyprice();
  inline void set_has_dchecktime();
  inline void clear_has_dchecktime();
  inline void set_has_otherinfo();
  inline void clear_has_otherinfo();
  inline void set_has_buyname();
  inline void clear_has_buyname();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* package_code_;
  double scan_time_;
  double addtime_;
  ::google::protobuf::uint64 endingaddress_;
  ::google::protobuf::uint64 startingaddress_;
  ::std::string* description_;
  ::std::string* name_;
  double buytime_;
  ::std::string* buyprice_;
  double dchecktime_;
  ::std::string* otherinfo_;
  ::std::string* buyname_;
  ::google::protobuf::int32 checktype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static MemoryDeviceInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT MemoryDeviceInfoList : public ::google::protobuf::Message {
 public:
  MemoryDeviceInfoList();
  virtual ~MemoryDeviceInfoList();
  
  MemoryDeviceInfoList(const MemoryDeviceInfoList& from);
  
  inline MemoryDeviceInfoList& operator=(const MemoryDeviceInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MemoryDeviceInfoList& default_instance();
  
  void Swap(MemoryDeviceInfoList* other);
  
  // implements Message ----------------------------------------------
  
  MemoryDeviceInfoList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MemoryDeviceInfoList& from);
  void MergeFrom(const MemoryDeviceInfoList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .isafetec.MemoryDeviceInfo list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::isafetec::MemoryDeviceInfo& list(int index) const;
  inline ::isafetec::MemoryDeviceInfo* mutable_list(int index);
  inline ::isafetec::MemoryDeviceInfo* MemoryDeviceInfoList::list_ReleaseAt(int index); 
  inline void MemoryDeviceInfoList::list_RemoveAt(int index); 
  inline ::isafetec::MemoryDeviceInfo* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::isafetec::MemoryDeviceInfo >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::isafetec::MemoryDeviceInfo >*
      mutable_list();
  
  // optional int32 alarmed = 2;
  inline bool has_alarmed() const;
  inline void clear_alarmed();
  static const int kAlarmedFieldNumber = 2;
  inline ::google::protobuf::int32 alarmed() const;
  inline void set_alarmed(::google::protobuf::int32 value);
  
  // optional string winuser = 3;
  inline bool has_winuser() const;
  inline void clear_winuser();
  static const int kWinuserFieldNumber = 3;
  inline const ::std::string& winuser() const;
  inline void set_winuser(const ::std::string& value);
  inline void set_winuser(const char* value);
  inline void set_winuser(const char* value, size_t size);
  inline ::std::string* mutable_winuser();
  inline ::std::string* release_winuser();
  
  // @@protoc_insertion_point(class_scope:isafetec.MemoryDeviceInfoList)
 private:
  inline void set_has_alarmed();
  inline void clear_has_alarmed();
  inline void set_has_winuser();
  inline void clear_has_winuser();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::isafetec::MemoryDeviceInfo > list_;
  ::std::string* winuser_;
  ::google::protobuf::int32 alarmed_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static MemoryDeviceInfoList* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT MemoryInfo : public ::google::protobuf::Message {
 public:
  MemoryInfo();
  virtual ~MemoryInfo();
  
  MemoryInfo(const MemoryInfo& from);
  
  inline MemoryInfo& operator=(const MemoryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MemoryInfo& default_instance();
  
  void Swap(MemoryInfo* other);
  
  // implements Message ----------------------------------------------
  
  MemoryInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MemoryInfo& from);
  void MergeFrom(const MemoryInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string package_code = 1;
  inline bool has_package_code() const;
  inline void clear_package_code();
  static const int kPackageCodeFieldNumber = 1;
  inline const ::std::string& package_code() const;
  inline void set_package_code(const ::std::string& value);
  inline void set_package_code(const char* value);
  inline void set_package_code(const char* value, size_t size);
  inline ::std::string* mutable_package_code();
  inline ::std::string* release_package_code();
  
  // optional int32 checktype = 2;
  inline bool has_checktype() const;
  inline void clear_checktype();
  static const int kChecktypeFieldNumber = 2;
  inline ::google::protobuf::int32 checktype() const;
  inline void set_checktype(::google::protobuf::int32 value);
  
  // optional double scan_time = 3;
  inline bool has_scan_time() const;
  inline void clear_scan_time();
  static const int kScanTimeFieldNumber = 3;
  inline double scan_time() const;
  inline void set_scan_time(double value);
  
  // optional double addtime = 50;
  inline bool has_addtime() const;
  inline void clear_addtime();
  static const int kAddtimeFieldNumber = 50;
  inline double addtime() const;
  inline void set_addtime(double value);
  
  // optional int32 FormFactor = 4;
  inline bool has_formfactor() const;
  inline void clear_formfactor();
  static const int kFormFactorFieldNumber = 4;
  inline ::google::protobuf::int32 formfactor() const;
  inline void set_formfactor(::google::protobuf::int32 value);
  
  // optional int32 InterleaveDataDepth = 5;
  inline bool has_interleavedatadepth() const;
  inline void clear_interleavedatadepth();
  static const int kInterleaveDataDepthFieldNumber = 5;
  inline ::google::protobuf::int32 interleavedatadepth() const;
  inline void set_interleavedatadepth(::google::protobuf::int32 value);
  
  // optional int32 InterleavePosition = 6;
  inline bool has_interleaveposition() const;
  inline void clear_interleaveposition();
  static const int kInterleavePositionFieldNumber = 6;
  inline ::google::protobuf::int32 interleaveposition() const;
  inline void set_interleaveposition(::google::protobuf::int32 value);
  
  // optional int32 MemoryType = 7;
  inline bool has_memorytype() const;
  inline void clear_memorytype();
  static const int kMemoryTypeFieldNumber = 7;
  inline ::google::protobuf::int32 memorytype() const;
  inline void set_memorytype(::google::protobuf::int32 value);
  
  // optional int32 PositionInRow = 8;
  inline bool has_positioninrow() const;
  inline void clear_positioninrow();
  static const int kPositionInRowFieldNumber = 8;
  inline ::google::protobuf::int32 positioninrow() const;
  inline void set_positioninrow(::google::protobuf::int32 value);
  
  // optional int32 Speed = 9;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 9;
  inline ::google::protobuf::int32 speed() const;
  inline void set_speed(::google::protobuf::int32 value);
  
  // optional int32 TotalWidth = 10;
  inline bool has_totalwidth() const;
  inline void clear_totalwidth();
  static const int kTotalWidthFieldNumber = 10;
  inline ::google::protobuf::int32 totalwidth() const;
  inline void set_totalwidth(::google::protobuf::int32 value);
  
  // optional int32 TypeDetail = 11;
  inline bool has_typedetail() const;
  inline void clear_typedetail();
  static const int kTypeDetailFieldNumber = 11;
  inline ::google::protobuf::int32 typedetail() const;
  inline void set_typedetail(::google::protobuf::int32 value);
  
  // optional int32 PoweredOn = 12;
  inline bool has_poweredon() const;
  inline void clear_poweredon();
  static const int kPoweredOnFieldNumber = 12;
  inline ::google::protobuf::int32 poweredon() const;
  inline void set_poweredon(::google::protobuf::int32 value);
  
  // optional string BankLabel = 13;
  inline bool has_banklabel() const;
  inline void clear_banklabel();
  static const int kBankLabelFieldNumber = 13;
  inline const ::std::string& banklabel() const;
  inline void set_banklabel(const ::std::string& value);
  inline void set_banklabel(const char* value);
  inline void set_banklabel(const char* value, size_t size);
  inline ::std::string* mutable_banklabel();
  inline ::std::string* release_banklabel();
  
  // optional string Description = 14;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 14;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  
  // optional string DeviceLocator = 15;
  inline bool has_devicelocator() const;
  inline void clear_devicelocator();
  static const int kDeviceLocatorFieldNumber = 15;
  inline const ::std::string& devicelocator() const;
  inline void set_devicelocator(const ::std::string& value);
  inline void set_devicelocator(const char* value);
  inline void set_devicelocator(const char* value, size_t size);
  inline ::std::string* mutable_devicelocator();
  inline ::std::string* release_devicelocator();
  
  // optional string Manufacturer = 16;
  inline bool has_manufacturer() const;
  inline void clear_manufacturer();
  static const int kManufacturerFieldNumber = 16;
  inline const ::std::string& manufacturer() const;
  inline void set_manufacturer(const ::std::string& value);
  inline void set_manufacturer(const char* value);
  inline void set_manufacturer(const char* value, size_t size);
  inline ::std::string* mutable_manufacturer();
  inline ::std::string* release_manufacturer();
  
  // optional string Model = 17;
  inline bool has_model() const;
  inline void clear_model();
  static const int kModelFieldNumber = 17;
  inline const ::std::string& model() const;
  inline void set_model(const ::std::string& value);
  inline void set_model(const char* value);
  inline void set_model(const char* value, size_t size);
  inline ::std::string* mutable_model();
  inline ::std::string* release_model();
  
  // optional string Name = 18;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 18;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string OtherIdentifyingInfo = 19;
  inline bool has_otheridentifyinginfo() const;
  inline void clear_otheridentifyinginfo();
  static const int kOtherIdentifyingInfoFieldNumber = 19;
  inline const ::std::string& otheridentifyinginfo() const;
  inline void set_otheridentifyinginfo(const ::std::string& value);
  inline void set_otheridentifyinginfo(const char* value);
  inline void set_otheridentifyinginfo(const char* value, size_t size);
  inline ::std::string* mutable_otheridentifyinginfo();
  inline ::std::string* release_otheridentifyinginfo();
  
  // optional string PartNumber = 20;
  inline bool has_partnumber() const;
  inline void clear_partnumber();
  static const int kPartNumberFieldNumber = 20;
  inline const ::std::string& partnumber() const;
  inline void set_partnumber(const ::std::string& value);
  inline void set_partnumber(const char* value);
  inline void set_partnumber(const char* value, size_t size);
  inline ::std::string* mutable_partnumber();
  inline ::std::string* release_partnumber();
  
  // optional string SerialNumber = 21;
  inline bool has_serialnumber() const;
  inline void clear_serialnumber();
  static const int kSerialNumberFieldNumber = 21;
  inline const ::std::string& serialnumber() const;
  inline void set_serialnumber(const ::std::string& value);
  inline void set_serialnumber(const char* value);
  inline void set_serialnumber(const char* value, size_t size);
  inline ::std::string* mutable_serialnumber();
  inline ::std::string* release_serialnumber();
  
  // optional string SKU = 22;
  inline bool has_sku() const;
  inline void clear_sku();
  static const int kSKUFieldNumber = 22;
  inline const ::std::string& sku() const;
  inline void set_sku(const ::std::string& value);
  inline void set_sku(const char* value);
  inline void set_sku(const char* value, size_t size);
  inline ::std::string* mutable_sku();
  inline ::std::string* release_sku();
  
  // optional string Status = 23;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 23;
  inline const ::std::string& status() const;
  inline void set_status(const ::std::string& value);
  inline void set_status(const char* value);
  inline void set_status(const char* value, size_t size);
  inline ::std::string* mutable_status();
  inline ::std::string* release_status();
  
  // optional string Version = 24;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 24;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  
  // optional uint64 Capacity = 25;
  inline bool has_capacity() const;
  inline void clear_capacity();
  static const int kCapacityFieldNumber = 25;
  inline ::google::protobuf::uint64 capacity() const;
  inline void set_capacity(::google::protobuf::uint64 value);
  
  // optional int32 DataWidth = 26;
  inline bool has_datawidth() const;
  inline void clear_datawidth();
  static const int kDataWidthFieldNumber = 26;
  inline ::google::protobuf::int32 datawidth() const;
  inline void set_datawidth(::google::protobuf::int32 value);
  
  // optional double BuyTime = 27;
  inline bool has_buytime() const;
  inline void clear_buytime();
  static const int kBuyTimeFieldNumber = 27;
  inline double buytime() const;
  inline void set_buytime(double value);
  
  // optional string BuyPrice = 28;
  inline bool has_buyprice() const;
  inline void clear_buyprice();
  static const int kBuyPriceFieldNumber = 28;
  inline const ::std::string& buyprice() const;
  inline void set_buyprice(const ::std::string& value);
  inline void set_buyprice(const char* value);
  inline void set_buyprice(const char* value, size_t size);
  inline ::std::string* mutable_buyprice();
  inline ::std::string* release_buyprice();
  
  // optional double DCheckTime = 29;
  inline bool has_dchecktime() const;
  inline void clear_dchecktime();
  static const int kDCheckTimeFieldNumber = 29;
  inline double dchecktime() const;
  inline void set_dchecktime(double value);
  
  // optional string OtherInfo = 30;
  inline bool has_otherinfo() const;
  inline void clear_otherinfo();
  static const int kOtherInfoFieldNumber = 30;
  inline const ::std::string& otherinfo() const;
  inline void set_otherinfo(const ::std::string& value);
  inline void set_otherinfo(const char* value);
  inline void set_otherinfo(const char* value, size_t size);
  inline ::std::string* mutable_otherinfo();
  inline ::std::string* release_otherinfo();
  
  // optional string BuyName = 31;
  inline bool has_buyname() const;
  inline void clear_buyname();
  static const int kBuyNameFieldNumber = 31;
  inline const ::std::string& buyname() const;
  inline void set_buyname(const ::std::string& value);
  inline void set_buyname(const char* value);
  inline void set_buyname(const char* value, size_t size);
  inline ::std::string* mutable_buyname();
  inline ::std::string* release_buyname();
  
  // @@protoc_insertion_point(class_scope:isafetec.MemoryInfo)
 private:
  inline void set_has_package_code();
  inline void clear_has_package_code();
  inline void set_has_checktype();
  inline void clear_has_checktype();
  inline void set_has_scan_time();
  inline void clear_has_scan_time();
  inline void set_has_addtime();
  inline void clear_has_addtime();
  inline void set_has_formfactor();
  inline void clear_has_formfactor();
  inline void set_has_interleavedatadepth();
  inline void clear_has_interleavedatadepth();
  inline void set_has_interleaveposition();
  inline void clear_has_interleaveposition();
  inline void set_has_memorytype();
  inline void clear_has_memorytype();
  inline void set_has_positioninrow();
  inline void clear_has_positioninrow();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_totalwidth();
  inline void clear_has_totalwidth();
  inline void set_has_typedetail();
  inline void clear_has_typedetail();
  inline void set_has_poweredon();
  inline void clear_has_poweredon();
  inline void set_has_banklabel();
  inline void clear_has_banklabel();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_devicelocator();
  inline void clear_has_devicelocator();
  inline void set_has_manufacturer();
  inline void clear_has_manufacturer();
  inline void set_has_model();
  inline void clear_has_model();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_otheridentifyinginfo();
  inline void clear_has_otheridentifyinginfo();
  inline void set_has_partnumber();
  inline void clear_has_partnumber();
  inline void set_has_serialnumber();
  inline void clear_has_serialnumber();
  inline void set_has_sku();
  inline void clear_has_sku();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_capacity();
  inline void clear_has_capacity();
  inline void set_has_datawidth();
  inline void clear_has_datawidth();
  inline void set_has_buytime();
  inline void clear_has_buytime();
  inline void set_has_buyprice();
  inline void clear_has_buyprice();
  inline void set_has_dchecktime();
  inline void clear_has_dchecktime();
  inline void set_has_otherinfo();
  inline void clear_has_otherinfo();
  inline void set_has_buyname();
  inline void clear_has_buyname();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* package_code_;
  double scan_time_;
  ::google::protobuf::int32 checktype_;
  ::google::protobuf::int32 formfactor_;
  double addtime_;
  ::google::protobuf::int32 interleavedatadepth_;
  ::google::protobuf::int32 interleaveposition_;
  ::google::protobuf::int32 memorytype_;
  ::google::protobuf::int32 positioninrow_;
  ::google::protobuf::int32 speed_;
  ::google::protobuf::int32 totalwidth_;
  ::google::protobuf::int32 typedetail_;
  ::google::protobuf::int32 poweredon_;
  ::std::string* banklabel_;
  ::std::string* description_;
  ::std::string* devicelocator_;
  ::std::string* manufacturer_;
  ::std::string* model_;
  ::std::string* name_;
  ::std::string* otheridentifyinginfo_;
  ::std::string* partnumber_;
  ::std::string* serialnumber_;
  ::std::string* sku_;
  ::std::string* status_;
  ::std::string* version_;
  ::google::protobuf::uint64 capacity_;
  double buytime_;
  ::std::string* buyprice_;
  double dchecktime_;
  ::std::string* otherinfo_;
  ::std::string* buyname_;
  ::google::protobuf::int32 datawidth_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(32 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static MemoryInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT MemoryInfoList : public ::google::protobuf::Message {
 public:
  MemoryInfoList();
  virtual ~MemoryInfoList();
  
  MemoryInfoList(const MemoryInfoList& from);
  
  inline MemoryInfoList& operator=(const MemoryInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MemoryInfoList& default_instance();
  
  void Swap(MemoryInfoList* other);
  
  // implements Message ----------------------------------------------
  
  MemoryInfoList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MemoryInfoList& from);
  void MergeFrom(const MemoryInfoList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .isafetec.MemoryInfo list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::isafetec::MemoryInfo& list(int index) const;
  inline ::isafetec::MemoryInfo* mutable_list(int index);
  inline ::isafetec::MemoryInfo* MemoryInfoList::list_ReleaseAt(int index); 
  inline void MemoryInfoList::list_RemoveAt(int index); 
  inline ::isafetec::MemoryInfo* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::isafetec::MemoryInfo >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::isafetec::MemoryInfo >*
      mutable_list();
  
  // optional int32 alarmed = 2;
  inline bool has_alarmed() const;
  inline void clear_alarmed();
  static const int kAlarmedFieldNumber = 2;
  inline ::google::protobuf::int32 alarmed() const;
  inline void set_alarmed(::google::protobuf::int32 value);
  
  // optional string winuser = 3;
  inline bool has_winuser() const;
  inline void clear_winuser();
  static const int kWinuserFieldNumber = 3;
  inline const ::std::string& winuser() const;
  inline void set_winuser(const ::std::string& value);
  inline void set_winuser(const char* value);
  inline void set_winuser(const char* value, size_t size);
  inline ::std::string* mutable_winuser();
  inline ::std::string* release_winuser();
  
  // @@protoc_insertion_point(class_scope:isafetec.MemoryInfoList)
 private:
  inline void set_has_alarmed();
  inline void clear_has_alarmed();
  inline void set_has_winuser();
  inline void clear_has_winuser();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::isafetec::MemoryInfo > list_;
  ::std::string* winuser_;
  ::google::protobuf::int32 alarmed_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static MemoryInfoList* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT MouseInfo : public ::google::protobuf::Message {
 public:
  MouseInfo();
  virtual ~MouseInfo();
  
  MouseInfo(const MouseInfo& from);
  
  inline MouseInfo& operator=(const MouseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MouseInfo& default_instance();
  
  void Swap(MouseInfo* other);
  
  // implements Message ----------------------------------------------
  
  MouseInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MouseInfo& from);
  void MergeFrom(const MouseInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string package_code = 1;
  inline bool has_package_code() const;
  inline void clear_package_code();
  static const int kPackageCodeFieldNumber = 1;
  inline const ::std::string& package_code() const;
  inline void set_package_code(const ::std::string& value);
  inline void set_package_code(const char* value);
  inline void set_package_code(const char* value, size_t size);
  inline ::std::string* mutable_package_code();
  inline ::std::string* release_package_code();
  
  // optional int32 checktype = 2;
  inline bool has_checktype() const;
  inline void clear_checktype();
  static const int kChecktypeFieldNumber = 2;
  inline ::google::protobuf::int32 checktype() const;
  inline void set_checktype(::google::protobuf::int32 value);
  
  // optional double scan_time = 3;
  inline bool has_scan_time() const;
  inline void clear_scan_time();
  static const int kScanTimeFieldNumber = 3;
  inline double scan_time() const;
  inline void set_scan_time(double value);
  
  // optional double addtime = 50;
  inline bool has_addtime() const;
  inline void clear_addtime();
  static const int kAddtimeFieldNumber = 50;
  inline double addtime() const;
  inline void set_addtime(double value);
  
  // optional int32 DoubleSpeedThreshold = 4;
  inline bool has_doublespeedthreshold() const;
  inline void clear_doublespeedthreshold();
  static const int kDoubleSpeedThresholdFieldNumber = 4;
  inline ::google::protobuf::int32 doublespeedthreshold() const;
  inline void set_doublespeedthreshold(::google::protobuf::int32 value);
  
  // optional int32 Handedness = 5;
  inline bool has_handedness() const;
  inline void clear_handedness();
  static const int kHandednessFieldNumber = 5;
  inline ::google::protobuf::int32 handedness() const;
  inline void set_handedness(::google::protobuf::int32 value);
  
  // optional int32 NumberOfButtons = 6;
  inline bool has_numberofbuttons() const;
  inline void clear_numberofbuttons();
  static const int kNumberOfButtonsFieldNumber = 6;
  inline ::google::protobuf::int32 numberofbuttons() const;
  inline void set_numberofbuttons(::google::protobuf::int32 value);
  
  // optional int32 PointingType = 7;
  inline bool has_pointingtype() const;
  inline void clear_pointingtype();
  static const int kPointingTypeFieldNumber = 7;
  inline ::google::protobuf::int32 pointingtype() const;
  inline void set_pointingtype(::google::protobuf::int32 value);
  
  // optional int32 QuadSpeedThreshold = 8;
  inline bool has_quadspeedthreshold() const;
  inline void clear_quadspeedthreshold();
  static const int kQuadSpeedThresholdFieldNumber = 8;
  inline ::google::protobuf::int32 quadspeedthreshold() const;
  inline void set_quadspeedthreshold(::google::protobuf::int32 value);
  
  // optional int32 Resolution = 9;
  inline bool has_resolution() const;
  inline void clear_resolution();
  static const int kResolutionFieldNumber = 9;
  inline ::google::protobuf::int32 resolution() const;
  inline void set_resolution(::google::protobuf::int32 value);
  
  // optional int32 SampleRate = 10;
  inline bool has_samplerate() const;
  inline void clear_samplerate();
  static const int kSampleRateFieldNumber = 10;
  inline ::google::protobuf::int32 samplerate() const;
  inline void set_samplerate(::google::protobuf::int32 value);
  
  // optional int32 Synch = 12;
  inline bool has_synch() const;
  inline void clear_synch();
  static const int kSynchFieldNumber = 12;
  inline ::google::protobuf::int32 synch() const;
  inline void set_synch(::google::protobuf::int32 value);
  
  // optional int32 IsLocked = 13;
  inline bool has_islocked() const;
  inline void clear_islocked();
  static const int kIsLockedFieldNumber = 13;
  inline ::google::protobuf::int32 islocked() const;
  inline void set_islocked(::google::protobuf::int32 value);
  
  // optional string Description = 14;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 14;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  
  // optional string HardwareType = 16;
  inline bool has_hardwaretype() const;
  inline void clear_hardwaretype();
  static const int kHardwareTypeFieldNumber = 16;
  inline const ::std::string& hardwaretype() const;
  inline void set_hardwaretype(const ::std::string& value);
  inline void set_hardwaretype(const char* value);
  inline void set_hardwaretype(const char* value, size_t size);
  inline ::std::string* mutable_hardwaretype();
  inline ::std::string* release_hardwaretype();
  
  // optional string InfFileName = 17;
  inline bool has_inffilename() const;
  inline void clear_inffilename();
  static const int kInfFileNameFieldNumber = 17;
  inline const ::std::string& inffilename() const;
  inline void set_inffilename(const ::std::string& value);
  inline void set_inffilename(const char* value);
  inline void set_inffilename(const char* value, size_t size);
  inline ::std::string* mutable_inffilename();
  inline ::std::string* release_inffilename();
  
  // optional string InfSection = 18;
  inline bool has_infsection() const;
  inline void clear_infsection();
  static const int kInfSectionFieldNumber = 18;
  inline const ::std::string& infsection() const;
  inline void set_infsection(const ::std::string& value);
  inline void set_infsection(const char* value);
  inline void set_infsection(const char* value, size_t size);
  inline ::std::string* mutable_infsection();
  inline ::std::string* release_infsection();
  
  // optional string Manufacturer = 19;
  inline bool has_manufacturer() const;
  inline void clear_manufacturer();
  static const int kManufacturerFieldNumber = 19;
  inline const ::std::string& manufacturer() const;
  inline void set_manufacturer(const ::std::string& value);
  inline void set_manufacturer(const char* value);
  inline void set_manufacturer(const char* value, size_t size);
  inline ::std::string* mutable_manufacturer();
  inline ::std::string* release_manufacturer();
  
  // optional string Name = 20;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 20;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string PNPDeviceID = 21;
  inline bool has_pnpdeviceid() const;
  inline void clear_pnpdeviceid();
  static const int kPNPDeviceIDFieldNumber = 21;
  inline const ::std::string& pnpdeviceid() const;
  inline void set_pnpdeviceid(const ::std::string& value);
  inline void set_pnpdeviceid(const char* value);
  inline void set_pnpdeviceid(const char* value, size_t size);
  inline ::std::string* mutable_pnpdeviceid();
  inline ::std::string* release_pnpdeviceid();
  
  // optional string Status = 22;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 22;
  inline const ::std::string& status() const;
  inline void set_status(const ::std::string& value);
  inline void set_status(const char* value);
  inline void set_status(const char* value, size_t size);
  inline ::std::string* mutable_status();
  inline ::std::string* release_status();
  
  // optional int32 Availability = 23;
  inline bool has_availability() const;
  inline void clear_availability();
  static const int kAvailabilityFieldNumber = 23;
  inline ::google::protobuf::int32 availability() const;
  inline void set_availability(::google::protobuf::int32 value);
  
  // optional int32 DeviceInterface = 24;
  inline bool has_deviceinterface() const;
  inline void clear_deviceinterface();
  static const int kDeviceInterfaceFieldNumber = 24;
  inline ::google::protobuf::int32 deviceinterface() const;
  inline void set_deviceinterface(::google::protobuf::int32 value);
  
  // optional double BuyTime = 25;
  inline bool has_buytime() const;
  inline void clear_buytime();
  static const int kBuyTimeFieldNumber = 25;
  inline double buytime() const;
  inline void set_buytime(double value);
  
  // optional string BuyPrice = 26;
  inline bool has_buyprice() const;
  inline void clear_buyprice();
  static const int kBuyPriceFieldNumber = 26;
  inline const ::std::string& buyprice() const;
  inline void set_buyprice(const ::std::string& value);
  inline void set_buyprice(const char* value);
  inline void set_buyprice(const char* value, size_t size);
  inline ::std::string* mutable_buyprice();
  inline ::std::string* release_buyprice();
  
  // optional double DCheckTime = 27;
  inline bool has_dchecktime() const;
  inline void clear_dchecktime();
  static const int kDCheckTimeFieldNumber = 27;
  inline double dchecktime() const;
  inline void set_dchecktime(double value);
  
  // optional string OtherInfo = 28;
  inline bool has_otherinfo() const;
  inline void clear_otherinfo();
  static const int kOtherInfoFieldNumber = 28;
  inline const ::std::string& otherinfo() const;
  inline void set_otherinfo(const ::std::string& value);
  inline void set_otherinfo(const char* value);
  inline void set_otherinfo(const char* value, size_t size);
  inline ::std::string* mutable_otherinfo();
  inline ::std::string* release_otherinfo();
  
  // optional string BuyName = 29;
  inline bool has_buyname() const;
  inline void clear_buyname();
  static const int kBuyNameFieldNumber = 29;
  inline const ::std::string& buyname() const;
  inline void set_buyname(const ::std::string& value);
  inline void set_buyname(const char* value);
  inline void set_buyname(const char* value, size_t size);
  inline ::std::string* mutable_buyname();
  inline ::std::string* release_buyname();
  
  // @@protoc_insertion_point(class_scope:isafetec.MouseInfo)
 private:
  inline void set_has_package_code();
  inline void clear_has_package_code();
  inline void set_has_checktype();
  inline void clear_has_checktype();
  inline void set_has_scan_time();
  inline void clear_has_scan_time();
  inline void set_has_addtime();
  inline void clear_has_addtime();
  inline void set_has_doublespeedthreshold();
  inline void clear_has_doublespeedthreshold();
  inline void set_has_handedness();
  inline void clear_has_handedness();
  inline void set_has_numberofbuttons();
  inline void clear_has_numberofbuttons();
  inline void set_has_pointingtype();
  inline void clear_has_pointingtype();
  inline void set_has_quadspeedthreshold();
  inline void clear_has_quadspeedthreshold();
  inline void set_has_resolution();
  inline void clear_has_resolution();
  inline void set_has_samplerate();
  inline void clear_has_samplerate();
  inline void set_has_synch();
  inline void clear_has_synch();
  inline void set_has_islocked();
  inline void clear_has_islocked();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_hardwaretype();
  inline void clear_has_hardwaretype();
  inline void set_has_inffilename();
  inline void clear_has_inffilename();
  inline void set_has_infsection();
  inline void clear_has_infsection();
  inline void set_has_manufacturer();
  inline void clear_has_manufacturer();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_pnpdeviceid();
  inline void clear_has_pnpdeviceid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_availability();
  inline void clear_has_availability();
  inline void set_has_deviceinterface();
  inline void clear_has_deviceinterface();
  inline void set_has_buytime();
  inline void clear_has_buytime();
  inline void set_has_buyprice();
  inline void clear_has_buyprice();
  inline void set_has_dchecktime();
  inline void clear_has_dchecktime();
  inline void set_has_otherinfo();
  inline void clear_has_otherinfo();
  inline void set_has_buyname();
  inline void clear_has_buyname();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* package_code_;
  double scan_time_;
  ::google::protobuf::int32 checktype_;
  ::google::protobuf::int32 doublespeedthreshold_;
  double addtime_;
  ::google::protobuf::int32 handedness_;
  ::google::protobuf::int32 numberofbuttons_;
  ::google::protobuf::int32 pointingtype_;
  ::google::protobuf::int32 quadspeedthreshold_;
  ::google::protobuf::int32 resolution_;
  ::google::protobuf::int32 samplerate_;
  ::google::protobuf::int32 synch_;
  ::google::protobuf::int32 islocked_;
  ::std::string* description_;
  ::std::string* hardwaretype_;
  ::std::string* inffilename_;
  ::std::string* infsection_;
  ::std::string* manufacturer_;
  ::std::string* name_;
  ::std::string* pnpdeviceid_;
  ::std::string* status_;
  ::google::protobuf::int32 availability_;
  ::google::protobuf::int32 deviceinterface_;
  double buytime_;
  ::std::string* buyprice_;
  double dchecktime_;
  ::std::string* otherinfo_;
  ::std::string* buyname_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(28 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static MouseInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT MouseInfoList : public ::google::protobuf::Message {
 public:
  MouseInfoList();
  virtual ~MouseInfoList();
  
  MouseInfoList(const MouseInfoList& from);
  
  inline MouseInfoList& operator=(const MouseInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MouseInfoList& default_instance();
  
  void Swap(MouseInfoList* other);
  
  // implements Message ----------------------------------------------
  
  MouseInfoList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MouseInfoList& from);
  void MergeFrom(const MouseInfoList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .isafetec.MouseInfo list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::isafetec::MouseInfo& list(int index) const;
  inline ::isafetec::MouseInfo* mutable_list(int index);
  inline ::isafetec::MouseInfo* MouseInfoList::list_ReleaseAt(int index); 
  inline void MouseInfoList::list_RemoveAt(int index); 
  inline ::isafetec::MouseInfo* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::isafetec::MouseInfo >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::isafetec::MouseInfo >*
      mutable_list();
  
  // optional int32 alarmed = 2;
  inline bool has_alarmed() const;
  inline void clear_alarmed();
  static const int kAlarmedFieldNumber = 2;
  inline ::google::protobuf::int32 alarmed() const;
  inline void set_alarmed(::google::protobuf::int32 value);
  
  // optional string winuser = 3;
  inline bool has_winuser() const;
  inline void clear_winuser();
  static const int kWinuserFieldNumber = 3;
  inline const ::std::string& winuser() const;
  inline void set_winuser(const ::std::string& value);
  inline void set_winuser(const char* value);
  inline void set_winuser(const char* value, size_t size);
  inline ::std::string* mutable_winuser();
  inline ::std::string* release_winuser();
  
  // @@protoc_insertion_point(class_scope:isafetec.MouseInfoList)
 private:
  inline void set_has_alarmed();
  inline void clear_has_alarmed();
  inline void set_has_winuser();
  inline void clear_has_winuser();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::isafetec::MouseInfo > list_;
  ::std::string* winuser_;
  ::google::protobuf::int32 alarmed_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static MouseInfoList* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT NetWorkAdapterInfo : public ::google::protobuf::Message {
 public:
  NetWorkAdapterInfo();
  virtual ~NetWorkAdapterInfo();
  
  NetWorkAdapterInfo(const NetWorkAdapterInfo& from);
  
  inline NetWorkAdapterInfo& operator=(const NetWorkAdapterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetWorkAdapterInfo& default_instance();
  
  void Swap(NetWorkAdapterInfo* other);
  
  // implements Message ----------------------------------------------
  
  NetWorkAdapterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetWorkAdapterInfo& from);
  void MergeFrom(const NetWorkAdapterInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string package_code = 1;
  inline bool has_package_code() const;
  inline void clear_package_code();
  static const int kPackageCodeFieldNumber = 1;
  inline const ::std::string& package_code() const;
  inline void set_package_code(const ::std::string& value);
  inline void set_package_code(const char* value);
  inline void set_package_code(const char* value, size_t size);
  inline ::std::string* mutable_package_code();
  inline ::std::string* release_package_code();
  
  // optional int32 checktype = 2;
  inline bool has_checktype() const;
  inline void clear_checktype();
  static const int kChecktypeFieldNumber = 2;
  inline ::google::protobuf::int32 checktype() const;
  inline void set_checktype(::google::protobuf::int32 value);
  
  // optional double scan_time = 3;
  inline bool has_scan_time() const;
  inline void clear_scan_time();
  static const int kScanTimeFieldNumber = 3;
  inline double scan_time() const;
  inline void set_scan_time(double value);
  
  // optional double addtime = 50;
  inline bool has_addtime() const;
  inline void clear_addtime();
  static const int kAddtimeFieldNumber = 50;
  inline double addtime() const;
  inline void set_addtime(double value);
  
  // optional int32 MaxNumberControlled = 4;
  inline bool has_maxnumbercontrolled() const;
  inline void clear_maxnumbercontrolled();
  static const int kMaxNumberControlledFieldNumber = 4;
  inline ::google::protobuf::int32 maxnumbercontrolled() const;
  inline void set_maxnumbercontrolled(::google::protobuf::int32 value);
  
  // optional string AdapterType = 5;
  inline bool has_adaptertype() const;
  inline void clear_adaptertype();
  static const int kAdapterTypeFieldNumber = 5;
  inline const ::std::string& adaptertype() const;
  inline void set_adaptertype(const ::std::string& value);
  inline void set_adaptertype(const char* value);
  inline void set_adaptertype(const char* value, size_t size);
  inline ::std::string* mutable_adaptertype();
  inline ::std::string* release_adaptertype();
  
  // optional string Description = 7;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 7;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  
  // optional string Name = 8;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 8;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string MACAddress = 10;
  inline bool has_macaddress() const;
  inline void clear_macaddress();
  static const int kMACAddressFieldNumber = 10;
  inline const ::std::string& macaddress() const;
  inline void set_macaddress(const ::std::string& value);
  inline void set_macaddress(const char* value);
  inline void set_macaddress(const char* value, size_t size);
  inline ::std::string* mutable_macaddress();
  inline ::std::string* release_macaddress();
  
  // optional string ProductName = 11;
  inline bool has_productname() const;
  inline void clear_productname();
  static const int kProductNameFieldNumber = 11;
  inline const ::std::string& productname() const;
  inline void set_productname(const ::std::string& value);
  inline void set_productname(const char* value);
  inline void set_productname(const char* value, size_t size);
  inline ::std::string* mutable_productname();
  inline ::std::string* release_productname();
  
  // optional string ServiceName = 12;
  inline bool has_servicename() const;
  inline void clear_servicename();
  static const int kServiceNameFieldNumber = 12;
  inline const ::std::string& servicename() const;
  inline void set_servicename(const ::std::string& value);
  inline void set_servicename(const char* value);
  inline void set_servicename(const char* value, size_t size);
  inline ::std::string* mutable_servicename();
  inline ::std::string* release_servicename();
  
  // optional string PNPDeviceID = 15;
  inline bool has_pnpdeviceid() const;
  inline void clear_pnpdeviceid();
  static const int kPNPDeviceIDFieldNumber = 15;
  inline const ::std::string& pnpdeviceid() const;
  inline void set_pnpdeviceid(const ::std::string& value);
  inline void set_pnpdeviceid(const char* value);
  inline void set_pnpdeviceid(const char* value, size_t size);
  inline ::std::string* mutable_pnpdeviceid();
  inline ::std::string* release_pnpdeviceid();
  
  // optional int32 AdapterTypeID = 16;
  inline bool has_adaptertypeid() const;
  inline void clear_adaptertypeid();
  static const int kAdapterTypeIDFieldNumber = 16;
  inline ::google::protobuf::int32 adaptertypeid() const;
  inline void set_adaptertypeid(::google::protobuf::int32 value);
  
  // optional int32 Index = 17;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 17;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // optional double BuyTime = 18;
  inline bool has_buytime() const;
  inline void clear_buytime();
  static const int kBuyTimeFieldNumber = 18;
  inline double buytime() const;
  inline void set_buytime(double value);
  
  // optional string BuyPrice = 19;
  inline bool has_buyprice() const;
  inline void clear_buyprice();
  static const int kBuyPriceFieldNumber = 19;
  inline const ::std::string& buyprice() const;
  inline void set_buyprice(const ::std::string& value);
  inline void set_buyprice(const char* value);
  inline void set_buyprice(const char* value, size_t size);
  inline ::std::string* mutable_buyprice();
  inline ::std::string* release_buyprice();
  
  // optional double DCheckTime = 20;
  inline bool has_dchecktime() const;
  inline void clear_dchecktime();
  static const int kDCheckTimeFieldNumber = 20;
  inline double dchecktime() const;
  inline void set_dchecktime(double value);
  
  // optional string OtherInfo = 21;
  inline bool has_otherinfo() const;
  inline void clear_otherinfo();
  static const int kOtherInfoFieldNumber = 21;
  inline const ::std::string& otherinfo() const;
  inline void set_otherinfo(const ::std::string& value);
  inline void set_otherinfo(const char* value);
  inline void set_otherinfo(const char* value, size_t size);
  inline ::std::string* mutable_otherinfo();
  inline ::std::string* release_otherinfo();
  
  // optional string BuyName = 22;
  inline bool has_buyname() const;
  inline void clear_buyname();
  static const int kBuyNameFieldNumber = 22;
  inline const ::std::string& buyname() const;
  inline void set_buyname(const ::std::string& value);
  inline void set_buyname(const char* value);
  inline void set_buyname(const char* value, size_t size);
  inline ::std::string* mutable_buyname();
  inline ::std::string* release_buyname();
  
  // @@protoc_insertion_point(class_scope:isafetec.NetWorkAdapterInfo)
 private:
  inline void set_has_package_code();
  inline void clear_has_package_code();
  inline void set_has_checktype();
  inline void clear_has_checktype();
  inline void set_has_scan_time();
  inline void clear_has_scan_time();
  inline void set_has_addtime();
  inline void clear_has_addtime();
  inline void set_has_maxnumbercontrolled();
  inline void clear_has_maxnumbercontrolled();
  inline void set_has_adaptertype();
  inline void clear_has_adaptertype();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_macaddress();
  inline void clear_has_macaddress();
  inline void set_has_productname();
  inline void clear_has_productname();
  inline void set_has_servicename();
  inline void clear_has_servicename();
  inline void set_has_pnpdeviceid();
  inline void clear_has_pnpdeviceid();
  inline void set_has_adaptertypeid();
  inline void clear_has_adaptertypeid();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_buytime();
  inline void clear_has_buytime();
  inline void set_has_buyprice();
  inline void clear_has_buyprice();
  inline void set_has_dchecktime();
  inline void clear_has_dchecktime();
  inline void set_has_otherinfo();
  inline void clear_has_otherinfo();
  inline void set_has_buyname();
  inline void clear_has_buyname();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* package_code_;
  double scan_time_;
  ::google::protobuf::int32 checktype_;
  ::google::protobuf::int32 maxnumbercontrolled_;
  double addtime_;
  ::std::string* adaptertype_;
  ::std::string* description_;
  ::std::string* name_;
  ::std::string* macaddress_;
  ::std::string* productname_;
  ::std::string* servicename_;
  ::std::string* pnpdeviceid_;
  ::google::protobuf::int32 adaptertypeid_;
  ::google::protobuf::int32 index_;
  double buytime_;
  ::std::string* buyprice_;
  double dchecktime_;
  ::std::string* otherinfo_;
  ::std::string* buyname_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static NetWorkAdapterInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT NetWorkAdapterInfoList : public ::google::protobuf::Message {
 public:
  NetWorkAdapterInfoList();
  virtual ~NetWorkAdapterInfoList();
  
  NetWorkAdapterInfoList(const NetWorkAdapterInfoList& from);
  
  inline NetWorkAdapterInfoList& operator=(const NetWorkAdapterInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetWorkAdapterInfoList& default_instance();
  
  void Swap(NetWorkAdapterInfoList* other);
  
  // implements Message ----------------------------------------------
  
  NetWorkAdapterInfoList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetWorkAdapterInfoList& from);
  void MergeFrom(const NetWorkAdapterInfoList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .isafetec.NetWorkAdapterInfo list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::isafetec::NetWorkAdapterInfo& list(int index) const;
  inline ::isafetec::NetWorkAdapterInfo* mutable_list(int index);
  inline ::isafetec::NetWorkAdapterInfo* NetWorkAdapterInfoList::list_ReleaseAt(int index); 
  inline void NetWorkAdapterInfoList::list_RemoveAt(int index); 
  inline ::isafetec::NetWorkAdapterInfo* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::isafetec::NetWorkAdapterInfo >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::isafetec::NetWorkAdapterInfo >*
      mutable_list();
  
  // optional int32 alarmed = 2;
  inline bool has_alarmed() const;
  inline void clear_alarmed();
  static const int kAlarmedFieldNumber = 2;
  inline ::google::protobuf::int32 alarmed() const;
  inline void set_alarmed(::google::protobuf::int32 value);
  
  // optional string winuser = 3;
  inline bool has_winuser() const;
  inline void clear_winuser();
  static const int kWinuserFieldNumber = 3;
  inline const ::std::string& winuser() const;
  inline void set_winuser(const ::std::string& value);
  inline void set_winuser(const char* value);
  inline void set_winuser(const char* value, size_t size);
  inline ::std::string* mutable_winuser();
  inline ::std::string* release_winuser();
  
  // @@protoc_insertion_point(class_scope:isafetec.NetWorkAdapterInfoList)
 private:
  inline void set_has_alarmed();
  inline void clear_has_alarmed();
  inline void set_has_winuser();
  inline void clear_has_winuser();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::isafetec::NetWorkAdapterInfo > list_;
  ::std::string* winuser_;
  ::google::protobuf::int32 alarmed_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static NetWorkAdapterInfoList* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT PhysicalDiskDriversInfo : public ::google::protobuf::Message {
 public:
  PhysicalDiskDriversInfo();
  virtual ~PhysicalDiskDriversInfo();
  
  PhysicalDiskDriversInfo(const PhysicalDiskDriversInfo& from);
  
  inline PhysicalDiskDriversInfo& operator=(const PhysicalDiskDriversInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PhysicalDiskDriversInfo& default_instance();
  
  void Swap(PhysicalDiskDriversInfo* other);
  
  // implements Message ----------------------------------------------
  
  PhysicalDiskDriversInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PhysicalDiskDriversInfo& from);
  void MergeFrom(const PhysicalDiskDriversInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string package_code = 1;
  inline bool has_package_code() const;
  inline void clear_package_code();
  static const int kPackageCodeFieldNumber = 1;
  inline const ::std::string& package_code() const;
  inline void set_package_code(const ::std::string& value);
  inline void set_package_code(const char* value);
  inline void set_package_code(const char* value, size_t size);
  inline ::std::string* mutable_package_code();
  inline ::std::string* release_package_code();
  
  // optional int32 checktype = 2;
  inline bool has_checktype() const;
  inline void clear_checktype();
  static const int kChecktypeFieldNumber = 2;
  inline ::google::protobuf::int32 checktype() const;
  inline void set_checktype(::google::protobuf::int32 value);
  
  // optional double scan_time = 3;
  inline bool has_scan_time() const;
  inline void clear_scan_time();
  static const int kScanTimeFieldNumber = 3;
  inline double scan_time() const;
  inline void set_scan_time(double value);
  
  // optional double addtime = 50;
  inline bool has_addtime() const;
  inline void clear_addtime();
  static const int kAddtimeFieldNumber = 50;
  inline double addtime() const;
  inline void set_addtime(double value);
  
  // optional uint64 DefaultBlockSize = 4;
  inline bool has_defaultblocksize() const;
  inline void clear_defaultblocksize();
  static const int kDefaultBlockSizeFieldNumber = 4;
  inline ::google::protobuf::uint64 defaultblocksize() const;
  inline void set_defaultblocksize(::google::protobuf::uint64 value);
  
  // optional int32 Index = 5;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 5;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // optional uint64 MaxBlockSize = 6;
  inline bool has_maxblocksize() const;
  inline void clear_maxblocksize();
  static const int kMaxBlockSizeFieldNumber = 6;
  inline ::google::protobuf::uint64 maxblocksize() const;
  inline void set_maxblocksize(::google::protobuf::uint64 value);
  
  // optional uint64 MaxMediaSize = 7;
  inline bool has_maxmediasize() const;
  inline void clear_maxmediasize();
  static const int kMaxMediaSizeFieldNumber = 7;
  inline ::google::protobuf::uint64 maxmediasize() const;
  inline void set_maxmediasize(::google::protobuf::uint64 value);
  
  // optional uint64 MinBlockSize = 8;
  inline bool has_minblocksize() const;
  inline void clear_minblocksize();
  static const int kMinBlockSizeFieldNumber = 8;
  inline ::google::protobuf::uint64 minblocksize() const;
  inline void set_minblocksize(::google::protobuf::uint64 value);
  
  // optional int32 NumberOfMediaSupported = 9;
  inline bool has_numberofmediasupported() const;
  inline void clear_numberofmediasupported();
  static const int kNumberOfMediaSupportedFieldNumber = 9;
  inline ::google::protobuf::int32 numberofmediasupported() const;
  inline void set_numberofmediasupported(::google::protobuf::int32 value);
  
  // optional int32 Partitions = 10;
  inline bool has_partitions() const;
  inline void clear_partitions();
  static const int kPartitionsFieldNumber = 10;
  inline ::google::protobuf::int32 partitions() const;
  inline void set_partitions(::google::protobuf::int32 value);
  
  // optional int32 SCSIBus = 11;
  inline bool has_scsibus() const;
  inline void clear_scsibus();
  static const int kSCSIBusFieldNumber = 11;
  inline ::google::protobuf::int32 scsibus() const;
  inline void set_scsibus(::google::protobuf::int32 value);
  
  // optional int32 SCSILogicalUnit = 12;
  inline bool has_scsilogicalunit() const;
  inline void clear_scsilogicalunit();
  static const int kSCSILogicalUnitFieldNumber = 12;
  inline ::google::protobuf::int32 scsilogicalunit() const;
  inline void set_scsilogicalunit(::google::protobuf::int32 value);
  
  // optional int32 SCSIPort = 13;
  inline bool has_scsiport() const;
  inline void clear_scsiport();
  static const int kSCSIPortFieldNumber = 13;
  inline ::google::protobuf::int32 scsiport() const;
  inline void set_scsiport(::google::protobuf::int32 value);
  
  // optional int32 SCSITargetId = 14;
  inline bool has_scsitargetid() const;
  inline void clear_scsitargetid();
  static const int kSCSITargetIdFieldNumber = 14;
  inline ::google::protobuf::int32 scsitargetid() const;
  inline void set_scsitargetid(::google::protobuf::int32 value);
  
  // optional int32 SectorsPerTrack = 15;
  inline bool has_sectorspertrack() const;
  inline void clear_sectorspertrack();
  static const int kSectorsPerTrackFieldNumber = 15;
  inline ::google::protobuf::int32 sectorspertrack() const;
  inline void set_sectorspertrack(::google::protobuf::int32 value);
  
  // optional int32 Signature = 16;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 16;
  inline ::google::protobuf::int32 signature() const;
  inline void set_signature(::google::protobuf::int32 value);
  
  // optional uint64 Size = 17;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 17;
  inline ::google::protobuf::uint64 size() const;
  inline void set_size(::google::protobuf::uint64 value);
  
  // optional uint64 TotalCylinders = 19;
  inline bool has_totalcylinders() const;
  inline void clear_totalcylinders();
  static const int kTotalCylindersFieldNumber = 19;
  inline ::google::protobuf::uint64 totalcylinders() const;
  inline void set_totalcylinders(::google::protobuf::uint64 value);
  
  // optional int32 TotalHeads = 20;
  inline bool has_totalheads() const;
  inline void clear_totalheads();
  static const int kTotalHeadsFieldNumber = 20;
  inline ::google::protobuf::int32 totalheads() const;
  inline void set_totalheads(::google::protobuf::int32 value);
  
  // optional uint64 TotalSectors = 21;
  inline bool has_totalsectors() const;
  inline void clear_totalsectors();
  static const int kTotalSectorsFieldNumber = 21;
  inline ::google::protobuf::uint64 totalsectors() const;
  inline void set_totalsectors(::google::protobuf::uint64 value);
  
  // optional uint64 TotalTracks = 22;
  inline bool has_totaltracks() const;
  inline void clear_totaltracks();
  static const int kTotalTracksFieldNumber = 22;
  inline ::google::protobuf::uint64 totaltracks() const;
  inline void set_totaltracks(::google::protobuf::uint64 value);
  
  // optional uint32 TracksPerCylinder = 23;
  inline bool has_trackspercylinder() const;
  inline void clear_trackspercylinder();
  static const int kTracksPerCylinderFieldNumber = 23;
  inline ::google::protobuf::uint32 trackspercylinder() const;
  inline void set_trackspercylinder(::google::protobuf::uint32 value);
  
  // optional uint32 MediaLoaded = 24;
  inline bool has_medialoaded() const;
  inline void clear_medialoaded();
  static const int kMediaLoadedFieldNumber = 24;
  inline ::google::protobuf::uint32 medialoaded() const;
  inline void set_medialoaded(::google::protobuf::uint32 value);
  
  // optional int32 NeedsCleaning = 25;
  inline bool has_needscleaning() const;
  inline void clear_needscleaning();
  static const int kNeedsCleaningFieldNumber = 25;
  inline ::google::protobuf::int32 needscleaning() const;
  inline void set_needscleaning(::google::protobuf::int32 value);
  
  // optional string CompressionMethod = 26;
  inline bool has_compressionmethod() const;
  inline void clear_compressionmethod();
  static const int kCompressionMethodFieldNumber = 26;
  inline const ::std::string& compressionmethod() const;
  inline void set_compressionmethod(const ::std::string& value);
  inline void set_compressionmethod(const char* value);
  inline void set_compressionmethod(const char* value, size_t size);
  inline ::std::string* mutable_compressionmethod();
  inline ::std::string* release_compressionmethod();
  
  // optional string Description = 27;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 27;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  
  // optional string FirmwareRevision = 28;
  inline bool has_firmwarerevision() const;
  inline void clear_firmwarerevision();
  static const int kFirmwareRevisionFieldNumber = 28;
  inline const ::std::string& firmwarerevision() const;
  inline void set_firmwarerevision(const ::std::string& value);
  inline void set_firmwarerevision(const char* value);
  inline void set_firmwarerevision(const char* value, size_t size);
  inline ::std::string* mutable_firmwarerevision();
  inline ::std::string* release_firmwarerevision();
  
  // optional string InterfaceType = 29;
  inline bool has_interfacetype() const;
  inline void clear_interfacetype();
  static const int kInterfaceTypeFieldNumber = 29;
  inline const ::std::string& interfacetype() const;
  inline void set_interfacetype(const ::std::string& value);
  inline void set_interfacetype(const char* value);
  inline void set_interfacetype(const char* value, size_t size);
  inline ::std::string* mutable_interfacetype();
  inline ::std::string* release_interfacetype();
  
  // optional string Manufacturer = 30;
  inline bool has_manufacturer() const;
  inline void clear_manufacturer();
  static const int kManufacturerFieldNumber = 30;
  inline const ::std::string& manufacturer() const;
  inline void set_manufacturer(const ::std::string& value);
  inline void set_manufacturer(const char* value);
  inline void set_manufacturer(const char* value, size_t size);
  inline ::std::string* mutable_manufacturer();
  inline ::std::string* release_manufacturer();
  
  // optional string MediaType = 31;
  inline bool has_mediatype() const;
  inline void clear_mediatype();
  static const int kMediaTypeFieldNumber = 31;
  inline const ::std::string& mediatype() const;
  inline void set_mediatype(const ::std::string& value);
  inline void set_mediatype(const char* value);
  inline void set_mediatype(const char* value, size_t size);
  inline ::std::string* mutable_mediatype();
  inline ::std::string* release_mediatype();
  
  // optional string Model = 32;
  inline bool has_model() const;
  inline void clear_model();
  static const int kModelFieldNumber = 32;
  inline const ::std::string& model() const;
  inline void set_model(const ::std::string& value);
  inline void set_model(const char* value);
  inline void set_model(const char* value, size_t size);
  inline ::std::string* mutable_model();
  inline ::std::string* release_model();
  
  // optional string Name = 33;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 33;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string PNPDeviceID = 34;
  inline bool has_pnpdeviceid() const;
  inline void clear_pnpdeviceid();
  static const int kPNPDeviceIDFieldNumber = 34;
  inline const ::std::string& pnpdeviceid() const;
  inline void set_pnpdeviceid(const ::std::string& value);
  inline void set_pnpdeviceid(const char* value);
  inline void set_pnpdeviceid(const char* value, size_t size);
  inline ::std::string* mutable_pnpdeviceid();
  inline ::std::string* release_pnpdeviceid();
  
  // optional string SerialNumber = 35;
  inline bool has_serialnumber() const;
  inline void clear_serialnumber();
  static const int kSerialNumberFieldNumber = 35;
  inline const ::std::string& serialnumber() const;
  inline void set_serialnumber(const ::std::string& value);
  inline void set_serialnumber(const char* value);
  inline void set_serialnumber(const char* value, size_t size);
  inline ::std::string* mutable_serialnumber();
  inline ::std::string* release_serialnumber();
  
  // optional string Status = 36;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 36;
  inline const ::std::string& status() const;
  inline void set_status(const ::std::string& value);
  inline void set_status(const char* value);
  inline void set_status(const char* value, size_t size);
  inline ::std::string* mutable_status();
  inline ::std::string* release_status();
  
  // optional int32 Availability = 37;
  inline bool has_availability() const;
  inline void clear_availability();
  static const int kAvailabilityFieldNumber = 37;
  inline ::google::protobuf::int32 availability() const;
  inline void set_availability(::google::protobuf::int32 value);
  
  // optional int32 BytesPerSector = 38;
  inline bool has_bytespersector() const;
  inline void clear_bytespersector();
  static const int kBytesPerSectorFieldNumber = 38;
  inline ::google::protobuf::int32 bytespersector() const;
  inline void set_bytespersector(::google::protobuf::int32 value);
  
  // optional double BuyTime = 39;
  inline bool has_buytime() const;
  inline void clear_buytime();
  static const int kBuyTimeFieldNumber = 39;
  inline double buytime() const;
  inline void set_buytime(double value);
  
  // optional string BuyPrice = 40;
  inline bool has_buyprice() const;
  inline void clear_buyprice();
  static const int kBuyPriceFieldNumber = 40;
  inline const ::std::string& buyprice() const;
  inline void set_buyprice(const ::std::string& value);
  inline void set_buyprice(const char* value);
  inline void set_buyprice(const char* value, size_t size);
  inline ::std::string* mutable_buyprice();
  inline ::std::string* release_buyprice();
  
  // optional double DCheckTime = 41;
  inline bool has_dchecktime() const;
  inline void clear_dchecktime();
  static const int kDCheckTimeFieldNumber = 41;
  inline double dchecktime() const;
  inline void set_dchecktime(double value);
  
  // optional string OtherInfo = 42;
  inline bool has_otherinfo() const;
  inline void clear_otherinfo();
  static const int kOtherInfoFieldNumber = 42;
  inline const ::std::string& otherinfo() const;
  inline void set_otherinfo(const ::std::string& value);
  inline void set_otherinfo(const char* value);
  inline void set_otherinfo(const char* value, size_t size);
  inline ::std::string* mutable_otherinfo();
  inline ::std::string* release_otherinfo();
  
  // optional string BuyName = 43;
  inline bool has_buyname() const;
  inline void clear_buyname();
  static const int kBuyNameFieldNumber = 43;
  inline const ::std::string& buyname() const;
  inline void set_buyname(const ::std::string& value);
  inline void set_buyname(const char* value);
  inline void set_buyname(const char* value, size_t size);
  inline ::std::string* mutable_buyname();
  inline ::std::string* release_buyname();
  
  // @@protoc_insertion_point(class_scope:isafetec.PhysicalDiskDriversInfo)
 private:
  inline void set_has_package_code();
  inline void clear_has_package_code();
  inline void set_has_checktype();
  inline void clear_has_checktype();
  inline void set_has_scan_time();
  inline void clear_has_scan_time();
  inline void set_has_addtime();
  inline void clear_has_addtime();
  inline void set_has_defaultblocksize();
  inline void clear_has_defaultblocksize();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_maxblocksize();
  inline void clear_has_maxblocksize();
  inline void set_has_maxmediasize();
  inline void clear_has_maxmediasize();
  inline void set_has_minblocksize();
  inline void clear_has_minblocksize();
  inline void set_has_numberofmediasupported();
  inline void clear_has_numberofmediasupported();
  inline void set_has_partitions();
  inline void clear_has_partitions();
  inline void set_has_scsibus();
  inline void clear_has_scsibus();
  inline void set_has_scsilogicalunit();
  inline void clear_has_scsilogicalunit();
  inline void set_has_scsiport();
  inline void clear_has_scsiport();
  inline void set_has_scsitargetid();
  inline void clear_has_scsitargetid();
  inline void set_has_sectorspertrack();
  inline void clear_has_sectorspertrack();
  inline void set_has_signature();
  inline void clear_has_signature();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_totalcylinders();
  inline void clear_has_totalcylinders();
  inline void set_has_totalheads();
  inline void clear_has_totalheads();
  inline void set_has_totalsectors();
  inline void clear_has_totalsectors();
  inline void set_has_totaltracks();
  inline void clear_has_totaltracks();
  inline void set_has_trackspercylinder();
  inline void clear_has_trackspercylinder();
  inline void set_has_medialoaded();
  inline void clear_has_medialoaded();
  inline void set_has_needscleaning();
  inline void clear_has_needscleaning();
  inline void set_has_compressionmethod();
  inline void clear_has_compressionmethod();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_firmwarerevision();
  inline void clear_has_firmwarerevision();
  inline void set_has_interfacetype();
  inline void clear_has_interfacetype();
  inline void set_has_manufacturer();
  inline void clear_has_manufacturer();
  inline void set_has_mediatype();
  inline void clear_has_mediatype();
  inline void set_has_model();
  inline void clear_has_model();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_pnpdeviceid();
  inline void clear_has_pnpdeviceid();
  inline void set_has_serialnumber();
  inline void clear_has_serialnumber();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_availability();
  inline void clear_has_availability();
  inline void set_has_bytespersector();
  inline void clear_has_bytespersector();
  inline void set_has_buytime();
  inline void clear_has_buytime();
  inline void set_has_buyprice();
  inline void clear_has_buyprice();
  inline void set_has_dchecktime();
  inline void clear_has_dchecktime();
  inline void set_has_otherinfo();
  inline void clear_has_otherinfo();
  inline void set_has_buyname();
  inline void clear_has_buyname();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* package_code_;
  double scan_time_;
  double addtime_;
  ::google::protobuf::int32 checktype_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::uint64 defaultblocksize_;
  ::google::protobuf::uint64 maxblocksize_;
  ::google::protobuf::uint64 maxmediasize_;
  ::google::protobuf::uint64 minblocksize_;
  ::google::protobuf::int32 numberofmediasupported_;
  ::google::protobuf::int32 partitions_;
  ::google::protobuf::int32 scsibus_;
  ::google::protobuf::int32 scsilogicalunit_;
  ::google::protobuf::int32 scsiport_;
  ::google::protobuf::int32 scsitargetid_;
  ::google::protobuf::int32 sectorspertrack_;
  ::google::protobuf::int32 signature_;
  ::google::protobuf::uint64 size_;
  ::google::protobuf::uint64 totalcylinders_;
  ::google::protobuf::uint64 totalsectors_;
  ::google::protobuf::int32 totalheads_;
  ::google::protobuf::uint32 trackspercylinder_;
  ::google::protobuf::uint64 totaltracks_;
  ::google::protobuf::uint32 medialoaded_;
  ::google::protobuf::int32 needscleaning_;
  ::std::string* compressionmethod_;
  ::std::string* description_;
  ::std::string* firmwarerevision_;
  ::std::string* interfacetype_;
  ::std::string* manufacturer_;
  ::std::string* mediatype_;
  ::std::string* model_;
  ::std::string* name_;
  ::std::string* pnpdeviceid_;
  ::std::string* serialnumber_;
  ::std::string* status_;
  ::google::protobuf::int32 availability_;
  ::google::protobuf::int32 bytespersector_;
  double buytime_;
  ::std::string* buyprice_;
  double dchecktime_;
  ::std::string* otherinfo_;
  ::std::string* buyname_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(43 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static PhysicalDiskDriversInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT PhysicalDiskDriversInfoList : public ::google::protobuf::Message {
 public:
  PhysicalDiskDriversInfoList();
  virtual ~PhysicalDiskDriversInfoList();
  
  PhysicalDiskDriversInfoList(const PhysicalDiskDriversInfoList& from);
  
  inline PhysicalDiskDriversInfoList& operator=(const PhysicalDiskDriversInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PhysicalDiskDriversInfoList& default_instance();
  
  void Swap(PhysicalDiskDriversInfoList* other);
  
  // implements Message ----------------------------------------------
  
  PhysicalDiskDriversInfoList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PhysicalDiskDriversInfoList& from);
  void MergeFrom(const PhysicalDiskDriversInfoList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .isafetec.PhysicalDiskDriversInfo list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::isafetec::PhysicalDiskDriversInfo& list(int index) const;
  inline ::isafetec::PhysicalDiskDriversInfo* mutable_list(int index);
  inline ::isafetec::PhysicalDiskDriversInfo* PhysicalDiskDriversInfoList::list_ReleaseAt(int index); 
  inline void PhysicalDiskDriversInfoList::list_RemoveAt(int index); 
  inline ::isafetec::PhysicalDiskDriversInfo* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::isafetec::PhysicalDiskDriversInfo >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::isafetec::PhysicalDiskDriversInfo >*
      mutable_list();
  
  // optional int32 alarmed = 2;
  inline bool has_alarmed() const;
  inline void clear_alarmed();
  static const int kAlarmedFieldNumber = 2;
  inline ::google::protobuf::int32 alarmed() const;
  inline void set_alarmed(::google::protobuf::int32 value);
  
  // optional string winuser = 3;
  inline bool has_winuser() const;
  inline void clear_winuser();
  static const int kWinuserFieldNumber = 3;
  inline const ::std::string& winuser() const;
  inline void set_winuser(const ::std::string& value);
  inline void set_winuser(const char* value);
  inline void set_winuser(const char* value, size_t size);
  inline ::std::string* mutable_winuser();
  inline ::std::string* release_winuser();
  
  // @@protoc_insertion_point(class_scope:isafetec.PhysicalDiskDriversInfoList)
 private:
  inline void set_has_alarmed();
  inline void clear_has_alarmed();
  inline void set_has_winuser();
  inline void clear_has_winuser();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::isafetec::PhysicalDiskDriversInfo > list_;
  ::std::string* winuser_;
  ::google::protobuf::int32 alarmed_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static PhysicalDiskDriversInfoList* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT PhysicalMediaInfo : public ::google::protobuf::Message {
 public:
  PhysicalMediaInfo();
  virtual ~PhysicalMediaInfo();
  
  PhysicalMediaInfo(const PhysicalMediaInfo& from);
  
  inline PhysicalMediaInfo& operator=(const PhysicalMediaInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PhysicalMediaInfo& default_instance();
  
  void Swap(PhysicalMediaInfo* other);
  
  // implements Message ----------------------------------------------
  
  PhysicalMediaInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PhysicalMediaInfo& from);
  void MergeFrom(const PhysicalMediaInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string package_code = 1;
  inline bool has_package_code() const;
  inline void clear_package_code();
  static const int kPackageCodeFieldNumber = 1;
  inline const ::std::string& package_code() const;
  inline void set_package_code(const ::std::string& value);
  inline void set_package_code(const char* value);
  inline void set_package_code(const char* value, size_t size);
  inline ::std::string* mutable_package_code();
  inline ::std::string* release_package_code();
  
  // optional int32 checktype = 2;
  inline bool has_checktype() const;
  inline void clear_checktype();
  static const int kChecktypeFieldNumber = 2;
  inline ::google::protobuf::int32 checktype() const;
  inline void set_checktype(::google::protobuf::int32 value);
  
  // optional double scan_time = 3;
  inline bool has_scan_time() const;
  inline void clear_scan_time();
  static const int kScanTimeFieldNumber = 3;
  inline double scan_time() const;
  inline void set_scan_time(double value);
  
  // optional double addtime = 50;
  inline bool has_addtime() const;
  inline void clear_addtime();
  static const int kAddtimeFieldNumber = 50;
  inline double addtime() const;
  inline void set_addtime(double value);
  
  // optional int32 CleanerMedia = 4;
  inline bool has_cleanermedia() const;
  inline void clear_cleanermedia();
  static const int kCleanerMediaFieldNumber = 4;
  inline ::google::protobuf::int32 cleanermedia() const;
  inline void set_cleanermedia(::google::protobuf::int32 value);
  
  // optional int32 HotSwappable = 5;
  inline bool has_hotswappable() const;
  inline void clear_hotswappable();
  static const int kHotSwappableFieldNumber = 5;
  inline ::google::protobuf::int32 hotswappable() const;
  inline void set_hotswappable(::google::protobuf::int32 value);
  
  // optional int32 PoweredOn = 6;
  inline bool has_poweredon() const;
  inline void clear_poweredon();
  static const int kPoweredOnFieldNumber = 6;
  inline ::google::protobuf::int32 poweredon() const;
  inline void set_poweredon(::google::protobuf::int32 value);
  
  // optional int32 Removable = 7;
  inline bool has_removable() const;
  inline void clear_removable();
  static const int kRemovableFieldNumber = 7;
  inline ::google::protobuf::int32 removable() const;
  inline void set_removable(::google::protobuf::int32 value);
  
  // optional int32 Replaceable = 8;
  inline bool has_replaceable() const;
  inline void clear_replaceable();
  static const int kReplaceableFieldNumber = 8;
  inline ::google::protobuf::int32 replaceable() const;
  inline void set_replaceable(::google::protobuf::int32 value);
  
  // optional int32 WriteProtectOn = 9;
  inline bool has_writeprotecton() const;
  inline void clear_writeprotecton();
  static const int kWriteProtectOnFieldNumber = 9;
  inline ::google::protobuf::int32 writeprotecton() const;
  inline void set_writeprotecton(::google::protobuf::int32 value);
  
  // optional string Description = 10;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 10;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  
  // optional string Manufacturer = 11;
  inline bool has_manufacturer() const;
  inline void clear_manufacturer();
  static const int kManufacturerFieldNumber = 11;
  inline const ::std::string& manufacturer() const;
  inline void set_manufacturer(const ::std::string& value);
  inline void set_manufacturer(const char* value);
  inline void set_manufacturer(const char* value, size_t size);
  inline ::std::string* mutable_manufacturer();
  inline ::std::string* release_manufacturer();
  
  // optional string MediaDescription = 12;
  inline bool has_mediadescription() const;
  inline void clear_mediadescription();
  static const int kMediaDescriptionFieldNumber = 12;
  inline const ::std::string& mediadescription() const;
  inline void set_mediadescription(const ::std::string& value);
  inline void set_mediadescription(const char* value);
  inline void set_mediadescription(const char* value, size_t size);
  inline ::std::string* mutable_mediadescription();
  inline ::std::string* release_mediadescription();
  
  // optional string Model = 13;
  inline bool has_model() const;
  inline void clear_model();
  static const int kModelFieldNumber = 13;
  inline const ::std::string& model() const;
  inline void set_model(const ::std::string& value);
  inline void set_model(const char* value);
  inline void set_model(const char* value, size_t size);
  inline ::std::string* mutable_model();
  inline ::std::string* release_model();
  
  // optional string Name = 14;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 14;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string OtherIdentifyingInfo = 15;
  inline bool has_otheridentifyinginfo() const;
  inline void clear_otheridentifyinginfo();
  static const int kOtherIdentifyingInfoFieldNumber = 15;
  inline const ::std::string& otheridentifyinginfo() const;
  inline void set_otheridentifyinginfo(const ::std::string& value);
  inline void set_otheridentifyinginfo(const char* value);
  inline void set_otheridentifyinginfo(const char* value, size_t size);
  inline ::std::string* mutable_otheridentifyinginfo();
  inline ::std::string* release_otheridentifyinginfo();
  
  // optional string PartNumber = 16;
  inline bool has_partnumber() const;
  inline void clear_partnumber();
  static const int kPartNumberFieldNumber = 16;
  inline const ::std::string& partnumber() const;
  inline void set_partnumber(const ::std::string& value);
  inline void set_partnumber(const char* value);
  inline void set_partnumber(const char* value, size_t size);
  inline ::std::string* mutable_partnumber();
  inline ::std::string* release_partnumber();
  
  // optional string SKU = 17;
  inline bool has_sku() const;
  inline void clear_sku();
  static const int kSKUFieldNumber = 17;
  inline const ::std::string& sku() const;
  inline void set_sku(const ::std::string& value);
  inline void set_sku(const char* value);
  inline void set_sku(const char* value, size_t size);
  inline ::std::string* mutable_sku();
  inline ::std::string* release_sku();
  
  // optional string Status = 18;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 18;
  inline const ::std::string& status() const;
  inline void set_status(const ::std::string& value);
  inline void set_status(const char* value);
  inline void set_status(const char* value, size_t size);
  inline ::std::string* mutable_status();
  inline ::std::string* release_status();
  
  // optional string Version = 19;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 19;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  
  // optional string SerialNumber = 20;
  inline bool has_serialnumber() const;
  inline void clear_serialnumber();
  static const int kSerialNumberFieldNumber = 20;
  inline const ::std::string& serialnumber() const;
  inline void set_serialnumber(const ::std::string& value);
  inline void set_serialnumber(const char* value);
  inline void set_serialnumber(const char* value, size_t size);
  inline ::std::string* mutable_serialnumber();
  inline ::std::string* release_serialnumber();
  
  // optional int32 Capacity = 21;
  inline bool has_capacity() const;
  inline void clear_capacity();
  static const int kCapacityFieldNumber = 21;
  inline ::google::protobuf::int32 capacity() const;
  inline void set_capacity(::google::protobuf::int32 value);
  
  // optional int32 MediaType = 22;
  inline bool has_mediatype() const;
  inline void clear_mediatype();
  static const int kMediaTypeFieldNumber = 22;
  inline ::google::protobuf::int32 mediatype() const;
  inline void set_mediatype(::google::protobuf::int32 value);
  
  // optional double BuyTime = 23;
  inline bool has_buytime() const;
  inline void clear_buytime();
  static const int kBuyTimeFieldNumber = 23;
  inline double buytime() const;
  inline void set_buytime(double value);
  
  // optional string BuyPrice = 24;
  inline bool has_buyprice() const;
  inline void clear_buyprice();
  static const int kBuyPriceFieldNumber = 24;
  inline const ::std::string& buyprice() const;
  inline void set_buyprice(const ::std::string& value);
  inline void set_buyprice(const char* value);
  inline void set_buyprice(const char* value, size_t size);
  inline ::std::string* mutable_buyprice();
  inline ::std::string* release_buyprice();
  
  // optional double DCheckTime = 25;
  inline bool has_dchecktime() const;
  inline void clear_dchecktime();
  static const int kDCheckTimeFieldNumber = 25;
  inline double dchecktime() const;
  inline void set_dchecktime(double value);
  
  // optional string OtherInfo = 26;
  inline bool has_otherinfo() const;
  inline void clear_otherinfo();
  static const int kOtherInfoFieldNumber = 26;
  inline const ::std::string& otherinfo() const;
  inline void set_otherinfo(const ::std::string& value);
  inline void set_otherinfo(const char* value);
  inline void set_otherinfo(const char* value, size_t size);
  inline ::std::string* mutable_otherinfo();
  inline ::std::string* release_otherinfo();
  
  // optional string BuyName = 27;
  inline bool has_buyname() const;
  inline void clear_buyname();
  static const int kBuyNameFieldNumber = 27;
  inline const ::std::string& buyname() const;
  inline void set_buyname(const ::std::string& value);
  inline void set_buyname(const char* value);
  inline void set_buyname(const char* value, size_t size);
  inline ::std::string* mutable_buyname();
  inline ::std::string* release_buyname();
  
  // @@protoc_insertion_point(class_scope:isafetec.PhysicalMediaInfo)
 private:
  inline void set_has_package_code();
  inline void clear_has_package_code();
  inline void set_has_checktype();
  inline void clear_has_checktype();
  inline void set_has_scan_time();
  inline void clear_has_scan_time();
  inline void set_has_addtime();
  inline void clear_has_addtime();
  inline void set_has_cleanermedia();
  inline void clear_has_cleanermedia();
  inline void set_has_hotswappable();
  inline void clear_has_hotswappable();
  inline void set_has_poweredon();
  inline void clear_has_poweredon();
  inline void set_has_removable();
  inline void clear_has_removable();
  inline void set_has_replaceable();
  inline void clear_has_replaceable();
  inline void set_has_writeprotecton();
  inline void clear_has_writeprotecton();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_manufacturer();
  inline void clear_has_manufacturer();
  inline void set_has_mediadescription();
  inline void clear_has_mediadescription();
  inline void set_has_model();
  inline void clear_has_model();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_otheridentifyinginfo();
  inline void clear_has_otheridentifyinginfo();
  inline void set_has_partnumber();
  inline void clear_has_partnumber();
  inline void set_has_sku();
  inline void clear_has_sku();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_serialnumber();
  inline void clear_has_serialnumber();
  inline void set_has_capacity();
  inline void clear_has_capacity();
  inline void set_has_mediatype();
  inline void clear_has_mediatype();
  inline void set_has_buytime();
  inline void clear_has_buytime();
  inline void set_has_buyprice();
  inline void clear_has_buyprice();
  inline void set_has_dchecktime();
  inline void clear_has_dchecktime();
  inline void set_has_otherinfo();
  inline void clear_has_otherinfo();
  inline void set_has_buyname();
  inline void clear_has_buyname();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* package_code_;
  double scan_time_;
  ::google::protobuf::int32 checktype_;
  ::google::protobuf::int32 cleanermedia_;
  double addtime_;
  ::google::protobuf::int32 hotswappable_;
  ::google::protobuf::int32 poweredon_;
  ::google::protobuf::int32 removable_;
  ::google::protobuf::int32 replaceable_;
  ::std::string* description_;
  ::std::string* manufacturer_;
  ::std::string* mediadescription_;
  ::std::string* model_;
  ::std::string* name_;
  ::std::string* otheridentifyinginfo_;
  ::google::protobuf::int32 writeprotecton_;
  ::google::protobuf::int32 capacity_;
  ::std::string* partnumber_;
  ::std::string* sku_;
  ::std::string* status_;
  ::std::string* version_;
  ::std::string* serialnumber_;
  double buytime_;
  ::std::string* buyprice_;
  double dchecktime_;
  ::std::string* otherinfo_;
  ::std::string* buyname_;
  ::google::protobuf::int32 mediatype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(28 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static PhysicalMediaInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT PhysicalMediaInfoList : public ::google::protobuf::Message {
 public:
  PhysicalMediaInfoList();
  virtual ~PhysicalMediaInfoList();
  
  PhysicalMediaInfoList(const PhysicalMediaInfoList& from);
  
  inline PhysicalMediaInfoList& operator=(const PhysicalMediaInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PhysicalMediaInfoList& default_instance();
  
  void Swap(PhysicalMediaInfoList* other);
  
  // implements Message ----------------------------------------------
  
  PhysicalMediaInfoList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PhysicalMediaInfoList& from);
  void MergeFrom(const PhysicalMediaInfoList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .isafetec.PhysicalMediaInfo list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::isafetec::PhysicalMediaInfo& list(int index) const;
  inline ::isafetec::PhysicalMediaInfo* mutable_list(int index);
  inline ::isafetec::PhysicalMediaInfo* PhysicalMediaInfoList::list_ReleaseAt(int index); 
  inline void PhysicalMediaInfoList::list_RemoveAt(int index); 
  inline ::isafetec::PhysicalMediaInfo* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::isafetec::PhysicalMediaInfo >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::isafetec::PhysicalMediaInfo >*
      mutable_list();
  
  // optional int32 alarmed = 2;
  inline bool has_alarmed() const;
  inline void clear_alarmed();
  static const int kAlarmedFieldNumber = 2;
  inline ::google::protobuf::int32 alarmed() const;
  inline void set_alarmed(::google::protobuf::int32 value);
  
  // optional string winuser = 3;
  inline bool has_winuser() const;
  inline void clear_winuser();
  static const int kWinuserFieldNumber = 3;
  inline const ::std::string& winuser() const;
  inline void set_winuser(const ::std::string& value);
  inline void set_winuser(const char* value);
  inline void set_winuser(const char* value, size_t size);
  inline ::std::string* mutable_winuser();
  inline ::std::string* release_winuser();
  
  // @@protoc_insertion_point(class_scope:isafetec.PhysicalMediaInfoList)
 private:
  inline void set_has_alarmed();
  inline void clear_has_alarmed();
  inline void set_has_winuser();
  inline void clear_has_winuser();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::isafetec::PhysicalMediaInfo > list_;
  ::std::string* winuser_;
  ::google::protobuf::int32 alarmed_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static PhysicalMediaInfoList* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT USBControllerInfo : public ::google::protobuf::Message {
 public:
  USBControllerInfo();
  virtual ~USBControllerInfo();
  
  USBControllerInfo(const USBControllerInfo& from);
  
  inline USBControllerInfo& operator=(const USBControllerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const USBControllerInfo& default_instance();
  
  void Swap(USBControllerInfo* other);
  
  // implements Message ----------------------------------------------
  
  USBControllerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const USBControllerInfo& from);
  void MergeFrom(const USBControllerInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string package_code = 1;
  inline bool has_package_code() const;
  inline void clear_package_code();
  static const int kPackageCodeFieldNumber = 1;
  inline const ::std::string& package_code() const;
  inline void set_package_code(const ::std::string& value);
  inline void set_package_code(const char* value);
  inline void set_package_code(const char* value, size_t size);
  inline ::std::string* mutable_package_code();
  inline ::std::string* release_package_code();
  
  // optional int32 checktype = 2;
  inline bool has_checktype() const;
  inline void clear_checktype();
  static const int kChecktypeFieldNumber = 2;
  inline ::google::protobuf::int32 checktype() const;
  inline void set_checktype(::google::protobuf::int32 value);
  
  // optional double scan_time = 3;
  inline bool has_scan_time() const;
  inline void clear_scan_time();
  static const int kScanTimeFieldNumber = 3;
  inline double scan_time() const;
  inline void set_scan_time(double value);
  
  // optional double addtime = 50;
  inline bool has_addtime() const;
  inline void clear_addtime();
  static const int kAddtimeFieldNumber = 50;
  inline double addtime() const;
  inline void set_addtime(double value);
  
  // optional int32 Availability = 4;
  inline bool has_availability() const;
  inline void clear_availability();
  static const int kAvailabilityFieldNumber = 4;
  inline ::google::protobuf::int32 availability() const;
  inline void set_availability(::google::protobuf::int32 value);
  
  // optional int32 ProtocolSupported = 5;
  inline bool has_protocolsupported() const;
  inline void clear_protocolsupported();
  static const int kProtocolSupportedFieldNumber = 5;
  inline ::google::protobuf::int32 protocolsupported() const;
  inline void set_protocolsupported(::google::protobuf::int32 value);
  
  // optional int32 MaxNumberControlled = 7;
  inline bool has_maxnumbercontrolled() const;
  inline void clear_maxnumbercontrolled();
  static const int kMaxNumberControlledFieldNumber = 7;
  inline ::google::protobuf::int32 maxnumbercontrolled() const;
  inline void set_maxnumbercontrolled(::google::protobuf::int32 value);
  
  // optional string Description = 10;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 10;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  
  // optional string Manufacturer = 11;
  inline bool has_manufacturer() const;
  inline void clear_manufacturer();
  static const int kManufacturerFieldNumber = 11;
  inline const ::std::string& manufacturer() const;
  inline void set_manufacturer(const ::std::string& value);
  inline void set_manufacturer(const char* value);
  inline void set_manufacturer(const char* value, size_t size);
  inline ::std::string* mutable_manufacturer();
  inline ::std::string* release_manufacturer();
  
  // optional string Name = 12;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 12;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string PNPDeviceID = 13;
  inline bool has_pnpdeviceid() const;
  inline void clear_pnpdeviceid();
  static const int kPNPDeviceIDFieldNumber = 13;
  inline const ::std::string& pnpdeviceid() const;
  inline void set_pnpdeviceid(const ::std::string& value);
  inline void set_pnpdeviceid(const char* value);
  inline void set_pnpdeviceid(const char* value, size_t size);
  inline ::std::string* mutable_pnpdeviceid();
  inline ::std::string* release_pnpdeviceid();
  
  // optional string Status = 14;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 14;
  inline const ::std::string& status() const;
  inline void set_status(const ::std::string& value);
  inline void set_status(const char* value);
  inline void set_status(const char* value, size_t size);
  inline ::std::string* mutable_status();
  inline ::std::string* release_status();
  
  // optional double BuyTime = 15;
  inline bool has_buytime() const;
  inline void clear_buytime();
  static const int kBuyTimeFieldNumber = 15;
  inline double buytime() const;
  inline void set_buytime(double value);
  
  // optional string BuyPrice = 16;
  inline bool has_buyprice() const;
  inline void clear_buyprice();
  static const int kBuyPriceFieldNumber = 16;
  inline const ::std::string& buyprice() const;
  inline void set_buyprice(const ::std::string& value);
  inline void set_buyprice(const char* value);
  inline void set_buyprice(const char* value, size_t size);
  inline ::std::string* mutable_buyprice();
  inline ::std::string* release_buyprice();
  
  // optional double DCheckTime = 17;
  inline bool has_dchecktime() const;
  inline void clear_dchecktime();
  static const int kDCheckTimeFieldNumber = 17;
  inline double dchecktime() const;
  inline void set_dchecktime(double value);
  
  // optional string OtherInfo = 18;
  inline bool has_otherinfo() const;
  inline void clear_otherinfo();
  static const int kOtherInfoFieldNumber = 18;
  inline const ::std::string& otherinfo() const;
  inline void set_otherinfo(const ::std::string& value);
  inline void set_otherinfo(const char* value);
  inline void set_otherinfo(const char* value, size_t size);
  inline ::std::string* mutable_otherinfo();
  inline ::std::string* release_otherinfo();
  
  // optional string BuyName = 19;
  inline bool has_buyname() const;
  inline void clear_buyname();
  static const int kBuyNameFieldNumber = 19;
  inline const ::std::string& buyname() const;
  inline void set_buyname(const ::std::string& value);
  inline void set_buyname(const char* value);
  inline void set_buyname(const char* value, size_t size);
  inline ::std::string* mutable_buyname();
  inline ::std::string* release_buyname();
  
  // @@protoc_insertion_point(class_scope:isafetec.USBControllerInfo)
 private:
  inline void set_has_package_code();
  inline void clear_has_package_code();
  inline void set_has_checktype();
  inline void clear_has_checktype();
  inline void set_has_scan_time();
  inline void clear_has_scan_time();
  inline void set_has_addtime();
  inline void clear_has_addtime();
  inline void set_has_availability();
  inline void clear_has_availability();
  inline void set_has_protocolsupported();
  inline void clear_has_protocolsupported();
  inline void set_has_maxnumbercontrolled();
  inline void clear_has_maxnumbercontrolled();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_manufacturer();
  inline void clear_has_manufacturer();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_pnpdeviceid();
  inline void clear_has_pnpdeviceid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_buytime();
  inline void clear_has_buytime();
  inline void set_has_buyprice();
  inline void clear_has_buyprice();
  inline void set_has_dchecktime();
  inline void clear_has_dchecktime();
  inline void set_has_otherinfo();
  inline void clear_has_otherinfo();
  inline void set_has_buyname();
  inline void clear_has_buyname();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* package_code_;
  double scan_time_;
  ::google::protobuf::int32 checktype_;
  ::google::protobuf::int32 availability_;
  double addtime_;
  ::google::protobuf::int32 protocolsupported_;
  ::google::protobuf::int32 maxnumbercontrolled_;
  ::std::string* description_;
  ::std::string* manufacturer_;
  ::std::string* name_;
  ::std::string* pnpdeviceid_;
  ::std::string* status_;
  double buytime_;
  ::std::string* buyprice_;
  double dchecktime_;
  ::std::string* otherinfo_;
  ::std::string* buyname_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static USBControllerInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT USBControllerInfoList : public ::google::protobuf::Message {
 public:
  USBControllerInfoList();
  virtual ~USBControllerInfoList();
  
  USBControllerInfoList(const USBControllerInfoList& from);
  
  inline USBControllerInfoList& operator=(const USBControllerInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const USBControllerInfoList& default_instance();
  
  void Swap(USBControllerInfoList* other);
  
  // implements Message ----------------------------------------------
  
  USBControllerInfoList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const USBControllerInfoList& from);
  void MergeFrom(const USBControllerInfoList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .isafetec.USBControllerInfo list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::isafetec::USBControllerInfo& list(int index) const;
  inline ::isafetec::USBControllerInfo* mutable_list(int index);
  inline ::isafetec::USBControllerInfo* USBControllerInfoList::list_ReleaseAt(int index); 
  inline void USBControllerInfoList::list_RemoveAt(int index); 
  inline ::isafetec::USBControllerInfo* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::isafetec::USBControllerInfo >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::isafetec::USBControllerInfo >*
      mutable_list();
  
  // optional int32 alarmed = 2;
  inline bool has_alarmed() const;
  inline void clear_alarmed();
  static const int kAlarmedFieldNumber = 2;
  inline ::google::protobuf::int32 alarmed() const;
  inline void set_alarmed(::google::protobuf::int32 value);
  
  // optional string winuser = 3;
  inline bool has_winuser() const;
  inline void clear_winuser();
  static const int kWinuserFieldNumber = 3;
  inline const ::std::string& winuser() const;
  inline void set_winuser(const ::std::string& value);
  inline void set_winuser(const char* value);
  inline void set_winuser(const char* value, size_t size);
  inline ::std::string* mutable_winuser();
  inline ::std::string* release_winuser();
  
  // @@protoc_insertion_point(class_scope:isafetec.USBControllerInfoList)
 private:
  inline void set_has_alarmed();
  inline void clear_has_alarmed();
  inline void set_has_winuser();
  inline void clear_has_winuser();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::isafetec::USBControllerInfo > list_;
  ::std::string* winuser_;
  ::google::protobuf::int32 alarmed_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static USBControllerInfoList* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT VideoDisplayDeviceInfo : public ::google::protobuf::Message {
 public:
  VideoDisplayDeviceInfo();
  virtual ~VideoDisplayDeviceInfo();
  
  VideoDisplayDeviceInfo(const VideoDisplayDeviceInfo& from);
  
  inline VideoDisplayDeviceInfo& operator=(const VideoDisplayDeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoDisplayDeviceInfo& default_instance();
  
  void Swap(VideoDisplayDeviceInfo* other);
  
  // implements Message ----------------------------------------------
  
  VideoDisplayDeviceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VideoDisplayDeviceInfo& from);
  void MergeFrom(const VideoDisplayDeviceInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string package_code = 1;
  inline bool has_package_code() const;
  inline void clear_package_code();
  static const int kPackageCodeFieldNumber = 1;
  inline const ::std::string& package_code() const;
  inline void set_package_code(const ::std::string& value);
  inline void set_package_code(const char* value);
  inline void set_package_code(const char* value, size_t size);
  inline ::std::string* mutable_package_code();
  inline ::std::string* release_package_code();
  
  // optional int32 checktype = 2;
  inline bool has_checktype() const;
  inline void clear_checktype();
  static const int kChecktypeFieldNumber = 2;
  inline ::google::protobuf::int32 checktype() const;
  inline void set_checktype(::google::protobuf::int32 value);
  
  // optional double scan_time = 3;
  inline bool has_scan_time() const;
  inline void clear_scan_time();
  static const int kScanTimeFieldNumber = 3;
  inline double scan_time() const;
  inline void set_scan_time(double value);
  
  // optional double addtime = 50;
  inline bool has_addtime() const;
  inline void clear_addtime();
  static const int kAddtimeFieldNumber = 50;
  inline double addtime() const;
  inline void set_addtime(double value);
  
  // optional int32 DisplayType = 4;
  inline bool has_displaytype() const;
  inline void clear_displaytype();
  static const int kDisplayTypeFieldNumber = 4;
  inline ::google::protobuf::int32 displaytype() const;
  inline void set_displaytype(::google::protobuf::int32 value);
  
  // optional int32 PixelsPerXLogicalInch = 5;
  inline bool has_pixelsperxlogicalinch() const;
  inline void clear_pixelsperxlogicalinch();
  static const int kPixelsPerXLogicalInchFieldNumber = 5;
  inline ::google::protobuf::int32 pixelsperxlogicalinch() const;
  inline void set_pixelsperxlogicalinch(::google::protobuf::int32 value);
  
  // optional int32 PixelsPerYLogicalInch = 6;
  inline bool has_pixelsperylogicalinch() const;
  inline void clear_pixelsperylogicalinch();
  static const int kPixelsPerYLogicalInchFieldNumber = 6;
  inline ::google::protobuf::int32 pixelsperylogicalinch() const;
  inline void set_pixelsperylogicalinch(::google::protobuf::int32 value);
  
  // optional int32 ScreenHeight = 7;
  inline bool has_screenheight() const;
  inline void clear_screenheight();
  static const int kScreenHeightFieldNumber = 7;
  inline ::google::protobuf::int32 screenheight() const;
  inline void set_screenheight(::google::protobuf::int32 value);
  
  // optional int32 ScreenWidth = 8;
  inline bool has_screenwidth() const;
  inline void clear_screenwidth();
  static const int kScreenWidthFieldNumber = 8;
  inline ::google::protobuf::int32 screenwidth() const;
  inline void set_screenwidth(::google::protobuf::int32 value);
  
  // optional int32 IsLocked = 10;
  inline bool has_islocked() const;
  inline void clear_islocked();
  static const int kIsLockedFieldNumber = 10;
  inline ::google::protobuf::int32 islocked() const;
  inline void set_islocked(::google::protobuf::int32 value);
  
  // optional string Description = 11;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 11;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  
  // optional string MonitorManufacturer = 12;
  inline bool has_monitormanufacturer() const;
  inline void clear_monitormanufacturer();
  static const int kMonitorManufacturerFieldNumber = 12;
  inline const ::std::string& monitormanufacturer() const;
  inline void set_monitormanufacturer(const ::std::string& value);
  inline void set_monitormanufacturer(const char* value);
  inline void set_monitormanufacturer(const char* value, size_t size);
  inline ::std::string* mutable_monitormanufacturer();
  inline ::std::string* release_monitormanufacturer();
  
  // optional string MonitorType = 13;
  inline bool has_monitortype() const;
  inline void clear_monitortype();
  static const int kMonitorTypeFieldNumber = 13;
  inline const ::std::string& monitortype() const;
  inline void set_monitortype(const ::std::string& value);
  inline void set_monitortype(const char* value);
  inline void set_monitortype(const char* value, size_t size);
  inline ::std::string* mutable_monitortype();
  inline ::std::string* release_monitortype();
  
  // optional string Name = 14;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 14;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string PNPDeviceID = 15;
  inline bool has_pnpdeviceid() const;
  inline void clear_pnpdeviceid();
  static const int kPNPDeviceIDFieldNumber = 15;
  inline const ::std::string& pnpdeviceid() const;
  inline void set_pnpdeviceid(const ::std::string& value);
  inline void set_pnpdeviceid(const char* value);
  inline void set_pnpdeviceid(const char* value, size_t size);
  inline ::std::string* mutable_pnpdeviceid();
  inline ::std::string* release_pnpdeviceid();
  
  // optional string Status = 16;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 16;
  inline const ::std::string& status() const;
  inline void set_status(const ::std::string& value);
  inline void set_status(const char* value);
  inline void set_status(const char* value, size_t size);
  inline ::std::string* mutable_status();
  inline ::std::string* release_status();
  
  // optional int32 Availability = 17;
  inline bool has_availability() const;
  inline void clear_availability();
  static const int kAvailabilityFieldNumber = 17;
  inline ::google::protobuf::int32 availability() const;
  inline void set_availability(::google::protobuf::int32 value);
  
  // optional int32 Bandwidth = 18;
  inline bool has_bandwidth() const;
  inline void clear_bandwidth();
  static const int kBandwidthFieldNumber = 18;
  inline ::google::protobuf::int32 bandwidth() const;
  inline void set_bandwidth(::google::protobuf::int32 value);
  
  // optional double BuyTime = 19;
  inline bool has_buytime() const;
  inline void clear_buytime();
  static const int kBuyTimeFieldNumber = 19;
  inline double buytime() const;
  inline void set_buytime(double value);
  
  // optional string BuyPrice = 20;
  inline bool has_buyprice() const;
  inline void clear_buyprice();
  static const int kBuyPriceFieldNumber = 20;
  inline const ::std::string& buyprice() const;
  inline void set_buyprice(const ::std::string& value);
  inline void set_buyprice(const char* value);
  inline void set_buyprice(const char* value, size_t size);
  inline ::std::string* mutable_buyprice();
  inline ::std::string* release_buyprice();
  
  // optional double DCheckTime = 21;
  inline bool has_dchecktime() const;
  inline void clear_dchecktime();
  static const int kDCheckTimeFieldNumber = 21;
  inline double dchecktime() const;
  inline void set_dchecktime(double value);
  
  // optional string OtherInfo = 22;
  inline bool has_otherinfo() const;
  inline void clear_otherinfo();
  static const int kOtherInfoFieldNumber = 22;
  inline const ::std::string& otherinfo() const;
  inline void set_otherinfo(const ::std::string& value);
  inline void set_otherinfo(const char* value);
  inline void set_otherinfo(const char* value, size_t size);
  inline ::std::string* mutable_otherinfo();
  inline ::std::string* release_otherinfo();
  
  // optional string BuyName = 23;
  inline bool has_buyname() const;
  inline void clear_buyname();
  static const int kBuyNameFieldNumber = 23;
  inline const ::std::string& buyname() const;
  inline void set_buyname(const ::std::string& value);
  inline void set_buyname(const char* value);
  inline void set_buyname(const char* value, size_t size);
  inline ::std::string* mutable_buyname();
  inline ::std::string* release_buyname();
  
  // @@protoc_insertion_point(class_scope:isafetec.VideoDisplayDeviceInfo)
 private:
  inline void set_has_package_code();
  inline void clear_has_package_code();
  inline void set_has_checktype();
  inline void clear_has_checktype();
  inline void set_has_scan_time();
  inline void clear_has_scan_time();
  inline void set_has_addtime();
  inline void clear_has_addtime();
  inline void set_has_displaytype();
  inline void clear_has_displaytype();
  inline void set_has_pixelsperxlogicalinch();
  inline void clear_has_pixelsperxlogicalinch();
  inline void set_has_pixelsperylogicalinch();
  inline void clear_has_pixelsperylogicalinch();
  inline void set_has_screenheight();
  inline void clear_has_screenheight();
  inline void set_has_screenwidth();
  inline void clear_has_screenwidth();
  inline void set_has_islocked();
  inline void clear_has_islocked();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_monitormanufacturer();
  inline void clear_has_monitormanufacturer();
  inline void set_has_monitortype();
  inline void clear_has_monitortype();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_pnpdeviceid();
  inline void clear_has_pnpdeviceid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_availability();
  inline void clear_has_availability();
  inline void set_has_bandwidth();
  inline void clear_has_bandwidth();
  inline void set_has_buytime();
  inline void clear_has_buytime();
  inline void set_has_buyprice();
  inline void clear_has_buyprice();
  inline void set_has_dchecktime();
  inline void clear_has_dchecktime();
  inline void set_has_otherinfo();
  inline void clear_has_otherinfo();
  inline void set_has_buyname();
  inline void clear_has_buyname();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* package_code_;
  double scan_time_;
  ::google::protobuf::int32 checktype_;
  ::google::protobuf::int32 displaytype_;
  double addtime_;
  ::google::protobuf::int32 pixelsperxlogicalinch_;
  ::google::protobuf::int32 pixelsperylogicalinch_;
  ::google::protobuf::int32 screenheight_;
  ::google::protobuf::int32 screenwidth_;
  ::std::string* description_;
  ::std::string* monitormanufacturer_;
  ::std::string* monitortype_;
  ::google::protobuf::int32 islocked_;
  ::google::protobuf::int32 availability_;
  ::std::string* name_;
  ::std::string* pnpdeviceid_;
  ::std::string* status_;
  double buytime_;
  ::std::string* buyprice_;
  double dchecktime_;
  ::std::string* otherinfo_;
  ::std::string* buyname_;
  ::google::protobuf::int32 bandwidth_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(23 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static VideoDisplayDeviceInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT VideoDisplayDeviceInfoList : public ::google::protobuf::Message {
 public:
  VideoDisplayDeviceInfoList();
  virtual ~VideoDisplayDeviceInfoList();
  
  VideoDisplayDeviceInfoList(const VideoDisplayDeviceInfoList& from);
  
  inline VideoDisplayDeviceInfoList& operator=(const VideoDisplayDeviceInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoDisplayDeviceInfoList& default_instance();
  
  void Swap(VideoDisplayDeviceInfoList* other);
  
  // implements Message ----------------------------------------------
  
  VideoDisplayDeviceInfoList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VideoDisplayDeviceInfoList& from);
  void MergeFrom(const VideoDisplayDeviceInfoList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .isafetec.VideoDisplayDeviceInfo list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::isafetec::VideoDisplayDeviceInfo& list(int index) const;
  inline ::isafetec::VideoDisplayDeviceInfo* mutable_list(int index);
  inline ::isafetec::VideoDisplayDeviceInfo* VideoDisplayDeviceInfoList::list_ReleaseAt(int index); 
  inline void VideoDisplayDeviceInfoList::list_RemoveAt(int index); 
  inline ::isafetec::VideoDisplayDeviceInfo* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::isafetec::VideoDisplayDeviceInfo >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::isafetec::VideoDisplayDeviceInfo >*
      mutable_list();
  
  // optional int32 alarmed = 2;
  inline bool has_alarmed() const;
  inline void clear_alarmed();
  static const int kAlarmedFieldNumber = 2;
  inline ::google::protobuf::int32 alarmed() const;
  inline void set_alarmed(::google::protobuf::int32 value);
  
  // optional string winuser = 3;
  inline bool has_winuser() const;
  inline void clear_winuser();
  static const int kWinuserFieldNumber = 3;
  inline const ::std::string& winuser() const;
  inline void set_winuser(const ::std::string& value);
  inline void set_winuser(const char* value);
  inline void set_winuser(const char* value, size_t size);
  inline ::std::string* mutable_winuser();
  inline ::std::string* release_winuser();
  
  // @@protoc_insertion_point(class_scope:isafetec.VideoDisplayDeviceInfoList)
 private:
  inline void set_has_alarmed();
  inline void clear_has_alarmed();
  inline void set_has_winuser();
  inline void clear_has_winuser();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::isafetec::VideoDisplayDeviceInfo > list_;
  ::std::string* winuser_;
  ::google::protobuf::int32 alarmed_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static VideoDisplayDeviceInfoList* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT CltServiceInfo : public ::google::protobuf::Message {
 public:
  CltServiceInfo();
  virtual ~CltServiceInfo();
  
  CltServiceInfo(const CltServiceInfo& from);
  
  inline CltServiceInfo& operator=(const CltServiceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CltServiceInfo& default_instance();
  
  void Swap(CltServiceInfo* other);
  
  // implements Message ----------------------------------------------
  
  CltServiceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CltServiceInfo& from);
  void MergeFrom(const CltServiceInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string service_name = 1;
  inline bool has_service_name() const;
  inline void clear_service_name();
  static const int kServiceNameFieldNumber = 1;
  inline const ::std::string& service_name() const;
  inline void set_service_name(const ::std::string& value);
  inline void set_service_name(const char* value);
  inline void set_service_name(const char* value, size_t size);
  inline ::std::string* mutable_service_name();
  inline ::std::string* release_service_name();
  
  // optional string dispaly_name = 2;
  inline bool has_dispaly_name() const;
  inline void clear_dispaly_name();
  static const int kDispalyNameFieldNumber = 2;
  inline const ::std::string& dispaly_name() const;
  inline void set_dispaly_name(const ::std::string& value);
  inline void set_dispaly_name(const char* value);
  inline void set_dispaly_name(const char* value, size_t size);
  inline ::std::string* mutable_dispaly_name();
  inline ::std::string* release_dispaly_name();
  
  // optional string binary_Path = 3;
  inline bool has_binary_path() const;
  inline void clear_binary_path();
  static const int kBinaryPathFieldNumber = 3;
  inline const ::std::string& binary_path() const;
  inline void set_binary_path(const ::std::string& value);
  inline void set_binary_path(const char* value);
  inline void set_binary_path(const char* value, size_t size);
  inline ::std::string* mutable_binary_path();
  inline ::std::string* release_binary_path();
  
  // optional string discription = 4;
  inline bool has_discription() const;
  inline void clear_discription();
  static const int kDiscriptionFieldNumber = 4;
  inline const ::std::string& discription() const;
  inline void set_discription(const ::std::string& value);
  inline void set_discription(const char* value);
  inline void set_discription(const char* value, size_t size);
  inline ::std::string* mutable_discription();
  inline ::std::string* release_discription();
  
  // optional uint32 service_type = 5;
  inline bool has_service_type() const;
  inline void clear_service_type();
  static const int kServiceTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 service_type() const;
  inline void set_service_type(::google::protobuf::uint32 value);
  
  // optional uint32 state = 6;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 6;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);
  
  // optional uint32 start_type = 7;
  inline bool has_start_type() const;
  inline void clear_start_type();
  static const int kStartTypeFieldNumber = 7;
  inline ::google::protobuf::uint32 start_type() const;
  inline void set_start_type(::google::protobuf::uint32 value);
  
  // optional uint32 controls_accepted = 8;
  inline bool has_controls_accepted() const;
  inline void clear_controls_accepted();
  static const int kControlsAcceptedFieldNumber = 8;
  inline ::google::protobuf::uint32 controls_accepted() const;
  inline void set_controls_accepted(::google::protobuf::uint32 value);
  
  // optional uint32 error_control = 9;
  inline bool has_error_control() const;
  inline void clear_error_control();
  static const int kErrorControlFieldNumber = 9;
  inline ::google::protobuf::uint32 error_control() const;
  inline void set_error_control(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:isafetec.CltServiceInfo)
 private:
  inline void set_has_service_name();
  inline void clear_has_service_name();
  inline void set_has_dispaly_name();
  inline void clear_has_dispaly_name();
  inline void set_has_binary_path();
  inline void clear_has_binary_path();
  inline void set_has_discription();
  inline void clear_has_discription();
  inline void set_has_service_type();
  inline void clear_has_service_type();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_start_type();
  inline void clear_has_start_type();
  inline void set_has_controls_accepted();
  inline void clear_has_controls_accepted();
  inline void set_has_error_control();
  inline void clear_has_error_control();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* service_name_;
  ::std::string* dispaly_name_;
  ::std::string* binary_path_;
  ::std::string* discription_;
  ::google::protobuf::uint32 service_type_;
  ::google::protobuf::uint32 state_;
  ::google::protobuf::uint32 start_type_;
  ::google::protobuf::uint32 controls_accepted_;
  ::google::protobuf::uint32 error_control_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static CltServiceInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT CltServiceList : public ::google::protobuf::Message {
 public:
  CltServiceList();
  virtual ~CltServiceList();
  
  CltServiceList(const CltServiceList& from);
  
  inline CltServiceList& operator=(const CltServiceList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CltServiceList& default_instance();
  
  void Swap(CltServiceList* other);
  
  // implements Message ----------------------------------------------
  
  CltServiceList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CltServiceList& from);
  void MergeFrom(const CltServiceList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .isafetec.CltServiceInfo list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::isafetec::CltServiceInfo& list(int index) const;
  inline ::isafetec::CltServiceInfo* mutable_list(int index);
  inline ::isafetec::CltServiceInfo* CltServiceList::list_ReleaseAt(int index); 
  inline void CltServiceList::list_RemoveAt(int index); 
  inline ::isafetec::CltServiceInfo* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::isafetec::CltServiceInfo >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::isafetec::CltServiceInfo >*
      mutable_list();
  
  // @@protoc_insertion_point(class_scope:isafetec.CltServiceList)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::isafetec::CltServiceInfo > list_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static CltServiceList* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT CltProcessInfo : public ::google::protobuf::Message {
 public:
  CltProcessInfo();
  virtual ~CltProcessInfo();
  
  CltProcessInfo(const CltProcessInfo& from);
  
  inline CltProcessInfo& operator=(const CltProcessInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CltProcessInfo& default_instance();
  
  void Swap(CltProcessInfo* other);
  
  // implements Message ----------------------------------------------
  
  CltProcessInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CltProcessInfo& from);
  void MergeFrom(const CltProcessInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 process_id = 1;
  inline bool has_process_id() const;
  inline void clear_process_id();
  static const int kProcessIdFieldNumber = 1;
  inline ::google::protobuf::int32 process_id() const;
  inline void set_process_id(::google::protobuf::int32 value);
  
  // optional int32 session_id = 2;
  inline bool has_session_id() const;
  inline void clear_session_id();
  static const int kSessionIdFieldNumber = 2;
  inline ::google::protobuf::int32 session_id() const;
  inline void set_session_id(::google::protobuf::int32 value);
  
  // optional string process_path = 3;
  inline bool has_process_path() const;
  inline void clear_process_path();
  static const int kProcessPathFieldNumber = 3;
  inline const ::std::string& process_path() const;
  inline void set_process_path(const ::std::string& value);
  inline void set_process_path(const char* value);
  inline void set_process_path(const char* value, size_t size);
  inline ::std::string* mutable_process_path();
  inline ::std::string* release_process_path();
  
  // optional string win_user = 4;
  inline bool has_win_user() const;
  inline void clear_win_user();
  static const int kWinUserFieldNumber = 4;
  inline const ::std::string& win_user() const;
  inline void set_win_user(const ::std::string& value);
  inline void set_win_user(const char* value);
  inline void set_win_user(const char* value, size_t size);
  inline ::std::string* mutable_win_user();
  inline ::std::string* release_win_user();
  
  // optional int32 thread_num = 5;
  inline bool has_thread_num() const;
  inline void clear_thread_num();
  static const int kThreadNumFieldNumber = 5;
  inline ::google::protobuf::int32 thread_num() const;
  inline void set_thread_num(::google::protobuf::int32 value);
  
  // optional int32 priority = 6;
  inline bool has_priority() const;
  inline void clear_priority();
  static const int kPriorityFieldNumber = 6;
  inline ::google::protobuf::int32 priority() const;
  inline void set_priority(::google::protobuf::int32 value);
  
  // optional int32 upRate = 7;
  inline bool has_uprate() const;
  inline void clear_uprate();
  static const int kUpRateFieldNumber = 7;
  inline ::google::protobuf::int32 uprate() const;
  inline void set_uprate(::google::protobuf::int32 value);
  
  // optional int32 downRate = 8;
  inline bool has_downrate() const;
  inline void clear_downrate();
  static const int kDownRateFieldNumber = 8;
  inline ::google::protobuf::int32 downrate() const;
  inline void set_downrate(::google::protobuf::int32 value);
  
  // optional int32 upCount = 9;
  inline bool has_upcount() const;
  inline void clear_upcount();
  static const int kUpCountFieldNumber = 9;
  inline ::google::protobuf::int32 upcount() const;
  inline void set_upcount(::google::protobuf::int32 value);
  
  // optional int32 downCount = 10;
  inline bool has_downcount() const;
  inline void clear_downcount();
  static const int kDownCountFieldNumber = 10;
  inline ::google::protobuf::int32 downcount() const;
  inline void set_downcount(::google::protobuf::int32 value);
  
  // optional int32 contCount = 11;
  inline bool has_contcount() const;
  inline void clear_contcount();
  static const int kContCountFieldNumber = 11;
  inline ::google::protobuf::int32 contcount() const;
  inline void set_contcount(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:isafetec.CltProcessInfo)
 private:
  inline void set_has_process_id();
  inline void clear_has_process_id();
  inline void set_has_session_id();
  inline void clear_has_session_id();
  inline void set_has_process_path();
  inline void clear_has_process_path();
  inline void set_has_win_user();
  inline void clear_has_win_user();
  inline void set_has_thread_num();
  inline void clear_has_thread_num();
  inline void set_has_priority();
  inline void clear_has_priority();
  inline void set_has_uprate();
  inline void clear_has_uprate();
  inline void set_has_downrate();
  inline void clear_has_downrate();
  inline void set_has_upcount();
  inline void clear_has_upcount();
  inline void set_has_downcount();
  inline void clear_has_downcount();
  inline void set_has_contcount();
  inline void clear_has_contcount();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 process_id_;
  ::google::protobuf::int32 session_id_;
  ::std::string* process_path_;
  ::std::string* win_user_;
  ::google::protobuf::int32 thread_num_;
  ::google::protobuf::int32 priority_;
  ::google::protobuf::int32 uprate_;
  ::google::protobuf::int32 downrate_;
  ::google::protobuf::int32 upcount_;
  ::google::protobuf::int32 downcount_;
  ::google::protobuf::int32 contcount_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static CltProcessInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT CltProcessList : public ::google::protobuf::Message {
 public:
  CltProcessList();
  virtual ~CltProcessList();
  
  CltProcessList(const CltProcessList& from);
  
  inline CltProcessList& operator=(const CltProcessList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CltProcessList& default_instance();
  
  void Swap(CltProcessList* other);
  
  // implements Message ----------------------------------------------
  
  CltProcessList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CltProcessList& from);
  void MergeFrom(const CltProcessList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .isafetec.CltProcessInfo list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::isafetec::CltProcessInfo& list(int index) const;
  inline ::isafetec::CltProcessInfo* mutable_list(int index);
  inline ::isafetec::CltProcessInfo* CltProcessList::list_ReleaseAt(int index); 
  inline void CltProcessList::list_RemoveAt(int index); 
  inline ::isafetec::CltProcessInfo* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::isafetec::CltProcessInfo >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::isafetec::CltProcessInfo >*
      mutable_list();
  
  // @@protoc_insertion_point(class_scope:isafetec.CltProcessList)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::isafetec::CltProcessInfo > list_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static CltProcessList* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT CltUser : public ::google::protobuf::Message {
 public:
  CltUser();
  virtual ~CltUser();
  
  CltUser(const CltUser& from);
  
  inline CltUser& operator=(const CltUser& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CltUser& default_instance();
  
  void Swap(CltUser* other);
  
  // implements Message ----------------------------------------------
  
  CltUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CltUser& from);
  void MergeFrom(const CltUser& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string desc = 2;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 2;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  
  // optional string full_name = 3;
  inline bool has_full_name() const;
  inline void clear_full_name();
  static const int kFullNameFieldNumber = 3;
  inline const ::std::string& full_name() const;
  inline void set_full_name(const ::std::string& value);
  inline void set_full_name(const char* value);
  inline void set_full_name(const char* value, size_t size);
  inline ::std::string* mutable_full_name();
  inline ::std::string* release_full_name();
  
  // optional string profile = 4;
  inline bool has_profile() const;
  inline void clear_profile();
  static const int kProfileFieldNumber = 4;
  inline const ::std::string& profile() const;
  inline void set_profile(const ::std::string& value);
  inline void set_profile(const char* value);
  inline void set_profile(const char* value, size_t size);
  inline ::std::string* mutable_profile();
  inline ::std::string* release_profile();
  
  // optional string group = 5;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 5;
  inline const ::std::string& group() const;
  inline void set_group(const ::std::string& value);
  inline void set_group(const char* value);
  inline void set_group(const char* value, size_t size);
  inline ::std::string* mutable_group();
  inline ::std::string* release_group();
  
  // optional int32 lock = 6;
  inline bool has_lock() const;
  inline void clear_lock();
  static const int kLockFieldNumber = 6;
  inline ::google::protobuf::int32 lock() const;
  inline void set_lock(::google::protobuf::int32 value);
  
  // optional int32 disable = 7;
  inline bool has_disable() const;
  inline void clear_disable();
  static const int kDisableFieldNumber = 7;
  inline ::google::protobuf::int32 disable() const;
  inline void set_disable(::google::protobuf::int32 value);
  
  // optional string userpsw = 8;
  inline bool has_userpsw() const;
  inline void clear_userpsw();
  static const int kUserpswFieldNumber = 8;
  inline const ::std::string& userpsw() const;
  inline void set_userpsw(const ::std::string& value);
  inline void set_userpsw(const char* value);
  inline void set_userpsw(const char* value, size_t size);
  inline ::std::string* mutable_userpsw();
  inline ::std::string* release_userpsw();
  
  // @@protoc_insertion_point(class_scope:isafetec.CltUser)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_full_name();
  inline void clear_has_full_name();
  inline void set_has_profile();
  inline void clear_has_profile();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_lock();
  inline void clear_has_lock();
  inline void set_has_disable();
  inline void clear_has_disable();
  inline void set_has_userpsw();
  inline void clear_has_userpsw();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* desc_;
  ::std::string* full_name_;
  ::std::string* profile_;
  ::std::string* group_;
  ::google::protobuf::int32 lock_;
  ::google::protobuf::int32 disable_;
  ::std::string* userpsw_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static CltUser* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT CltUserList : public ::google::protobuf::Message {
 public:
  CltUserList();
  virtual ~CltUserList();
  
  CltUserList(const CltUserList& from);
  
  inline CltUserList& operator=(const CltUserList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CltUserList& default_instance();
  
  void Swap(CltUserList* other);
  
  // implements Message ----------------------------------------------
  
  CltUserList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CltUserList& from);
  void MergeFrom(const CltUserList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .isafetec.CltUser list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::isafetec::CltUser& list(int index) const;
  inline ::isafetec::CltUser* mutable_list(int index);
  inline ::isafetec::CltUser* CltUserList::list_ReleaseAt(int index); 
  inline void CltUserList::list_RemoveAt(int index); 
  inline ::isafetec::CltUser* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::isafetec::CltUser >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::isafetec::CltUser >*
      mutable_list();
  
  // @@protoc_insertion_point(class_scope:isafetec.CltUserList)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::isafetec::CltUser > list_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static CltUserList* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT CltGroup : public ::google::protobuf::Message {
 public:
  CltGroup();
  virtual ~CltGroup();
  
  CltGroup(const CltGroup& from);
  
  inline CltGroup& operator=(const CltGroup& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CltGroup& default_instance();
  
  void Swap(CltGroup* other);
  
  // implements Message ----------------------------------------------
  
  CltGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CltGroup& from);
  void MergeFrom(const CltGroup& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string desc = 2;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 2;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  
  // @@protoc_insertion_point(class_scope:isafetec.CltGroup)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_desc();
  inline void clear_has_desc();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* desc_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static CltGroup* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT CltGroupList : public ::google::protobuf::Message {
 public:
  CltGroupList();
  virtual ~CltGroupList();
  
  CltGroupList(const CltGroupList& from);
  
  inline CltGroupList& operator=(const CltGroupList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CltGroupList& default_instance();
  
  void Swap(CltGroupList* other);
  
  // implements Message ----------------------------------------------
  
  CltGroupList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CltGroupList& from);
  void MergeFrom(const CltGroupList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .isafetec.CltGroup list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::isafetec::CltGroup& list(int index) const;
  inline ::isafetec::CltGroup* mutable_list(int index);
  inline ::isafetec::CltGroup* CltGroupList::list_ReleaseAt(int index); 
  inline void CltGroupList::list_RemoveAt(int index); 
  inline ::isafetec::CltGroup* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::isafetec::CltGroup >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::isafetec::CltGroup >*
      mutable_list();
  
  // @@protoc_insertion_point(class_scope:isafetec.CltGroupList)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::isafetec::CltGroup > list_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static CltGroupList* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT CltShareInfo : public ::google::protobuf::Message {
 public:
  CltShareInfo();
  virtual ~CltShareInfo();
  
  CltShareInfo(const CltShareInfo& from);
  
  inline CltShareInfo& operator=(const CltShareInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CltShareInfo& default_instance();
  
  void Swap(CltShareInfo* other);
  
  // implements Message ----------------------------------------------
  
  CltShareInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CltShareInfo& from);
  void MergeFrom(const CltShareInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string netname = 1;
  inline bool has_netname() const;
  inline void clear_netname();
  static const int kNetnameFieldNumber = 1;
  inline const ::std::string& netname() const;
  inline void set_netname(const ::std::string& value);
  inline void set_netname(const char* value);
  inline void set_netname(const char* value, size_t size);
  inline ::std::string* mutable_netname();
  inline ::std::string* release_netname();
  
  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional string remark = 3;
  inline bool has_remark() const;
  inline void clear_remark();
  static const int kRemarkFieldNumber = 3;
  inline const ::std::string& remark() const;
  inline void set_remark(const ::std::string& value);
  inline void set_remark(const char* value);
  inline void set_remark(const char* value, size_t size);
  inline ::std::string* mutable_remark();
  inline ::std::string* release_remark();
  
  // optional int32 current_uses = 4;
  inline bool has_current_uses() const;
  inline void clear_current_uses();
  static const int kCurrentUsesFieldNumber = 4;
  inline ::google::protobuf::int32 current_uses() const;
  inline void set_current_uses(::google::protobuf::int32 value);
  
  // optional string path = 5;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 5;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  
  // @@protoc_insertion_point(class_scope:isafetec.CltShareInfo)
 private:
  inline void set_has_netname();
  inline void clear_has_netname();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_remark();
  inline void clear_has_remark();
  inline void set_has_current_uses();
  inline void clear_has_current_uses();
  inline void set_has_path();
  inline void clear_has_path();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* netname_;
  ::std::string* remark_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 current_uses_;
  ::std::string* path_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static CltShareInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT CltShareList : public ::google::protobuf::Message {
 public:
  CltShareList();
  virtual ~CltShareList();
  
  CltShareList(const CltShareList& from);
  
  inline CltShareList& operator=(const CltShareList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CltShareList& default_instance();
  
  void Swap(CltShareList* other);
  
  // implements Message ----------------------------------------------
  
  CltShareList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CltShareList& from);
  void MergeFrom(const CltShareList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .isafetec.CltShareInfo list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::isafetec::CltShareInfo& list(int index) const;
  inline ::isafetec::CltShareInfo* mutable_list(int index);
  inline ::isafetec::CltShareInfo* CltShareList::list_ReleaseAt(int index); 
  inline void CltShareList::list_RemoveAt(int index); 
  inline ::isafetec::CltShareInfo* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::isafetec::CltShareInfo >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::isafetec::CltShareInfo >*
      mutable_list();
  
  // @@protoc_insertion_point(class_scope:isafetec.CltShareList)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::isafetec::CltShareInfo > list_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static CltShareList* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT CltStartItem : public ::google::protobuf::Message {
 public:
  CltStartItem();
  virtual ~CltStartItem();
  
  CltStartItem(const CltStartItem& from);
  
  inline CltStartItem& operator=(const CltStartItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CltStartItem& default_instance();
  
  void Swap(CltStartItem* other);
  
  // implements Message ----------------------------------------------
  
  CltStartItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CltStartItem& from);
  void MergeFrom(const CltStartItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string val = 2;
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 2;
  inline const ::std::string& val() const;
  inline void set_val(const ::std::string& value);
  inline void set_val(const char* value);
  inline void set_val(const char* value, size_t size);
  inline ::std::string* mutable_val();
  inline ::std::string* release_val();
  
  // optional string path = 3;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 3;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  
  // @@protoc_insertion_point(class_scope:isafetec.CltStartItem)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_val();
  inline void clear_has_val();
  inline void set_has_path();
  inline void clear_has_path();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* val_;
  ::std::string* path_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static CltStartItem* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT CltStartList : public ::google::protobuf::Message {
 public:
  CltStartList();
  virtual ~CltStartList();
  
  CltStartList(const CltStartList& from);
  
  inline CltStartList& operator=(const CltStartList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CltStartList& default_instance();
  
  void Swap(CltStartList* other);
  
  // implements Message ----------------------------------------------
  
  CltStartList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CltStartList& from);
  void MergeFrom(const CltStartList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .isafetec.CltStartItem list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::isafetec::CltStartItem& list(int index) const;
  inline ::isafetec::CltStartItem* mutable_list(int index);
  inline ::isafetec::CltStartItem* CltStartList::list_ReleaseAt(int index); 
  inline void CltStartList::list_RemoveAt(int index); 
  inline ::isafetec::CltStartItem* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::isafetec::CltStartItem >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::isafetec::CltStartItem >*
      mutable_list();
  
  // @@protoc_insertion_point(class_scope:isafetec.CltStartList)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::isafetec::CltStartItem > list_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static CltStartList* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT CltDiskInfo : public ::google::protobuf::Message {
 public:
  CltDiskInfo();
  virtual ~CltDiskInfo();
  
  CltDiskInfo(const CltDiskInfo& from);
  
  inline CltDiskInfo& operator=(const CltDiskInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CltDiskInfo& default_instance();
  
  void Swap(CltDiskInfo* other);
  
  // implements Message ----------------------------------------------
  
  CltDiskInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CltDiskInfo& from);
  void MergeFrom(const CltDiskInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string total_size = 2;
  inline bool has_total_size() const;
  inline void clear_total_size();
  static const int kTotalSizeFieldNumber = 2;
  inline const ::std::string& total_size() const;
  inline void set_total_size(const ::std::string& value);
  inline void set_total_size(const char* value);
  inline void set_total_size(const char* value, size_t size);
  inline ::std::string* mutable_total_size();
  inline ::std::string* release_total_size();
  
  // optional string free_size = 3;
  inline bool has_free_size() const;
  inline void clear_free_size();
  static const int kFreeSizeFieldNumber = 3;
  inline const ::std::string& free_size() const;
  inline void set_free_size(const ::std::string& value);
  inline void set_free_size(const char* value);
  inline void set_free_size(const char* value, size_t size);
  inline ::std::string* mutable_free_size();
  inline ::std::string* release_free_size();
  
  // optional uint32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);
  
  // optional string vol_name = 5;
  inline bool has_vol_name() const;
  inline void clear_vol_name();
  static const int kVolNameFieldNumber = 5;
  inline const ::std::string& vol_name() const;
  inline void set_vol_name(const ::std::string& value);
  inline void set_vol_name(const char* value);
  inline void set_vol_name(const char* value, size_t size);
  inline ::std::string* mutable_vol_name();
  inline ::std::string* release_vol_name();
  
  // optional string file_type = 6;
  inline bool has_file_type() const;
  inline void clear_file_type();
  static const int kFileTypeFieldNumber = 6;
  inline const ::std::string& file_type() const;
  inline void set_file_type(const ::std::string& value);
  inline void set_file_type(const char* value);
  inline void set_file_type(const char* value, size_t size);
  inline ::std::string* mutable_file_type();
  inline ::std::string* release_file_type();
  
  // optional uint32 file_sno = 7;
  inline bool has_file_sno() const;
  inline void clear_file_sno();
  static const int kFileSnoFieldNumber = 7;
  inline ::google::protobuf::uint32 file_sno() const;
  inline void set_file_sno(::google::protobuf::uint32 value);
  
  // optional uint32 file_max = 8;
  inline bool has_file_max() const;
  inline void clear_file_max();
  static const int kFileMaxFieldNumber = 8;
  inline ::google::protobuf::uint32 file_max() const;
  inline void set_file_max(::google::protobuf::uint32 value);
  
  // optional uint32 file_flag = 9;
  inline bool has_file_flag() const;
  inline void clear_file_flag();
  static const int kFileFlagFieldNumber = 9;
  inline ::google::protobuf::uint32 file_flag() const;
  inline void set_file_flag(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:isafetec.CltDiskInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_total_size();
  inline void clear_has_total_size();
  inline void set_has_free_size();
  inline void clear_has_free_size();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_vol_name();
  inline void clear_has_vol_name();
  inline void set_has_file_type();
  inline void clear_has_file_type();
  inline void set_has_file_sno();
  inline void clear_has_file_sno();
  inline void set_has_file_max();
  inline void clear_has_file_max();
  inline void set_has_file_flag();
  inline void clear_has_file_flag();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* total_size_;
  ::std::string* free_size_;
  ::std::string* vol_name_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 file_sno_;
  ::std::string* file_type_;
  ::google::protobuf::uint32 file_max_;
  ::google::protobuf::uint32 file_flag_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static CltDiskInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT CltDiskList : public ::google::protobuf::Message {
 public:
  CltDiskList();
  virtual ~CltDiskList();
  
  CltDiskList(const CltDiskList& from);
  
  inline CltDiskList& operator=(const CltDiskList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CltDiskList& default_instance();
  
  void Swap(CltDiskList* other);
  
  // implements Message ----------------------------------------------
  
  CltDiskList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CltDiskList& from);
  void MergeFrom(const CltDiskList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .isafetec.CltDiskInfo list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::isafetec::CltDiskInfo& list(int index) const;
  inline ::isafetec::CltDiskInfo* mutable_list(int index);
  inline ::isafetec::CltDiskInfo* CltDiskList::list_ReleaseAt(int index); 
  inline void CltDiskList::list_RemoveAt(int index); 
  inline ::isafetec::CltDiskInfo* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::isafetec::CltDiskInfo >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::isafetec::CltDiskInfo >*
      mutable_list();
  
  // @@protoc_insertion_point(class_scope:isafetec.CltDiskList)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::isafetec::CltDiskInfo > list_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static CltDiskList* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT DeviceControlInfo : public ::google::protobuf::Message {
 public:
  DeviceControlInfo();
  virtual ~DeviceControlInfo();
  
  DeviceControlInfo(const DeviceControlInfo& from);
  
  inline DeviceControlInfo& operator=(const DeviceControlInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceControlInfo& default_instance();
  
  void Swap(DeviceControlInfo* other);
  
  // implements Message ----------------------------------------------
  
  DeviceControlInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeviceControlInfo& from);
  void MergeFrom(const DeviceControlInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);
  
  // optional int32 enabled = 2;
  inline bool has_enabled() const;
  inline void clear_enabled();
  static const int kEnabledFieldNumber = 2;
  inline ::google::protobuf::int32 enabled() const;
  inline void set_enabled(::google::protobuf::int32 value);
  
  // optional string deviceDesc = 3;
  inline bool has_devicedesc() const;
  inline void clear_devicedesc();
  static const int kDeviceDescFieldNumber = 3;
  inline const ::std::string& devicedesc() const;
  inline void set_devicedesc(const ::std::string& value);
  inline void set_devicedesc(const char* value);
  inline void set_devicedesc(const char* value, size_t size);
  inline ::std::string* mutable_devicedesc();
  inline ::std::string* release_devicedesc();
  
  // optional int32 status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:isafetec.DeviceControlInfo)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_enabled();
  inline void clear_has_enabled();
  inline void set_has_devicedesc();
  inline void clear_has_devicedesc();
  inline void set_has_status();
  inline void clear_has_status();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 enabled_;
  ::std::string* devicedesc_;
  ::google::protobuf::int32 status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static DeviceControlInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT DeviceControlClassInfo : public ::google::protobuf::Message {
 public:
  DeviceControlClassInfo();
  virtual ~DeviceControlClassInfo();
  
  DeviceControlClassInfo(const DeviceControlClassInfo& from);
  
  inline DeviceControlClassInfo& operator=(const DeviceControlClassInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceControlClassInfo& default_instance();
  
  void Swap(DeviceControlClassInfo* other);
  
  // implements Message ----------------------------------------------
  
  DeviceControlClassInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeviceControlClassInfo& from);
  void MergeFrom(const DeviceControlClassInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string className = 1;
  inline bool has_classname() const;
  inline void clear_classname();
  static const int kClassNameFieldNumber = 1;
  inline const ::std::string& classname() const;
  inline void set_classname(const ::std::string& value);
  inline void set_classname(const char* value);
  inline void set_classname(const char* value, size_t size);
  inline ::std::string* mutable_classname();
  inline ::std::string* release_classname();
  
  // optional string guid = 2;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 2;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  
  // optional int32 imageIndex = 3;
  inline bool has_imageindex() const;
  inline void clear_imageindex();
  static const int kImageIndexFieldNumber = 3;
  inline ::google::protobuf::int32 imageindex() const;
  inline void set_imageindex(::google::protobuf::int32 value);
  
  // repeated .isafetec.DeviceControlInfo DeviceInfolist = 4;
  inline int deviceinfolist_size() const;
  inline void clear_deviceinfolist();
  static const int kDeviceInfolistFieldNumber = 4;
  inline const ::isafetec::DeviceControlInfo& deviceinfolist(int index) const;
  inline ::isafetec::DeviceControlInfo* mutable_deviceinfolist(int index);
  inline ::isafetec::DeviceControlInfo* DeviceControlClassInfo::deviceinfolist_ReleaseAt(int index); 
  inline void DeviceControlClassInfo::deviceinfolist_RemoveAt(int index); 
  inline ::isafetec::DeviceControlInfo* add_deviceinfolist();
  inline const ::google::protobuf::RepeatedPtrField< ::isafetec::DeviceControlInfo >&
      deviceinfolist() const;
  inline ::google::protobuf::RepeatedPtrField< ::isafetec::DeviceControlInfo >*
      mutable_deviceinfolist();
  
  // @@protoc_insertion_point(class_scope:isafetec.DeviceControlClassInfo)
 private:
  inline void set_has_classname();
  inline void clear_has_classname();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_imageindex();
  inline void clear_has_imageindex();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* classname_;
  ::std::string* guid_;
  ::google::protobuf::RepeatedPtrField< ::isafetec::DeviceControlInfo > deviceinfolist_;
  ::google::protobuf::int32 imageindex_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static DeviceControlClassInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT DeviceControlClassList : public ::google::protobuf::Message {
 public:
  DeviceControlClassList();
  virtual ~DeviceControlClassList();
  
  DeviceControlClassList(const DeviceControlClassList& from);
  
  inline DeviceControlClassList& operator=(const DeviceControlClassList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceControlClassList& default_instance();
  
  void Swap(DeviceControlClassList* other);
  
  // implements Message ----------------------------------------------
  
  DeviceControlClassList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeviceControlClassList& from);
  void MergeFrom(const DeviceControlClassList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string computerName = 1;
  inline bool has_computername() const;
  inline void clear_computername();
  static const int kComputerNameFieldNumber = 1;
  inline const ::std::string& computername() const;
  inline void set_computername(const ::std::string& value);
  inline void set_computername(const char* value);
  inline void set_computername(const char* value, size_t size);
  inline ::std::string* mutable_computername();
  inline ::std::string* release_computername();
  
  // repeated .isafetec.DeviceControlClassInfo DeviceClasslist = 2;
  inline int deviceclasslist_size() const;
  inline void clear_deviceclasslist();
  static const int kDeviceClasslistFieldNumber = 2;
  inline const ::isafetec::DeviceControlClassInfo& deviceclasslist(int index) const;
  inline ::isafetec::DeviceControlClassInfo* mutable_deviceclasslist(int index);
  inline ::isafetec::DeviceControlClassInfo* DeviceControlClassList::deviceclasslist_ReleaseAt(int index); 
  inline void DeviceControlClassList::deviceclasslist_RemoveAt(int index); 
  inline ::isafetec::DeviceControlClassInfo* add_deviceclasslist();
  inline const ::google::protobuf::RepeatedPtrField< ::isafetec::DeviceControlClassInfo >&
      deviceclasslist() const;
  inline ::google::protobuf::RepeatedPtrField< ::isafetec::DeviceControlClassInfo >*
      mutable_deviceclasslist();
  
  // @@protoc_insertion_point(class_scope:isafetec.DeviceControlClassList)
 private:
  inline void set_has_computername();
  inline void clear_has_computername();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* computername_;
  ::google::protobuf::RepeatedPtrField< ::isafetec::DeviceControlClassInfo > deviceclasslist_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static DeviceControlClassList* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT FireWallInfo : public ::google::protobuf::Message {
 public:
  FireWallInfo();
  virtual ~FireWallInfo();
  
  FireWallInfo(const FireWallInfo& from);
  
  inline FireWallInfo& operator=(const FireWallInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FireWallInfo& default_instance();
  
  void Swap(FireWallInfo* other);
  
  // implements Message ----------------------------------------------
  
  FireWallInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FireWallInfo& from);
  void MergeFrom(const FireWallInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 enabled = 1;
  inline bool has_enabled() const;
  inline void clear_enabled();
  static const int kEnabledFieldNumber = 1;
  inline ::google::protobuf::int32 enabled() const;
  inline void set_enabled(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:isafetec.FireWallInfo)
 private:
  inline void set_has_enabled();
  inline void clear_has_enabled();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 enabled_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static FireWallInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT DataBaseInfo : public ::google::protobuf::Message {
 public:
  DataBaseInfo();
  virtual ~DataBaseInfo();
  
  DataBaseInfo(const DataBaseInfo& from);
  
  inline DataBaseInfo& operator=(const DataBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataBaseInfo& default_instance();
  
  void Swap(DataBaseInfo* other);
  
  // implements Message ----------------------------------------------
  
  DataBaseInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataBaseInfo& from);
  void MergeFrom(const DataBaseInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string package_code = 1;
  inline bool has_package_code() const;
  inline void clear_package_code();
  static const int kPackageCodeFieldNumber = 1;
  inline const ::std::string& package_code() const;
  inline void set_package_code(const ::std::string& value);
  inline void set_package_code(const char* value);
  inline void set_package_code(const char* value, size_t size);
  inline ::std::string* mutable_package_code();
  inline ::std::string* release_package_code();
  
  // optional int32 checktype = 2;
  inline bool has_checktype() const;
  inline void clear_checktype();
  static const int kChecktypeFieldNumber = 2;
  inline ::google::protobuf::int32 checktype() const;
  inline void set_checktype(::google::protobuf::int32 value);
  
  // optional double scan_time = 3;
  inline bool has_scan_time() const;
  inline void clear_scan_time();
  static const int kScanTimeFieldNumber = 3;
  inline double scan_time() const;
  inline void set_scan_time(double value);
  
  // optional double addtime = 50;
  inline bool has_addtime() const;
  inline void clear_addtime();
  static const int kAddtimeFieldNumber = 50;
  inline double addtime() const;
  inline void set_addtime(double value);
  
  // optional string status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline const ::std::string& status() const;
  inline void set_status(const ::std::string& value);
  inline void set_status(const char* value);
  inline void set_status(const char* value, size_t size);
  inline ::std::string* mutable_status();
  inline ::std::string* release_status();
  
  // optional string version = 5;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 5;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  
  // @@protoc_insertion_point(class_scope:isafetec.DataBaseInfo)
 private:
  inline void set_has_package_code();
  inline void clear_has_package_code();
  inline void set_has_checktype();
  inline void clear_has_checktype();
  inline void set_has_scan_time();
  inline void clear_has_scan_time();
  inline void set_has_addtime();
  inline void clear_has_addtime();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_version();
  inline void clear_has_version();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* package_code_;
  double scan_time_;
  double addtime_;
  ::std::string* status_;
  ::std::string* version_;
  ::google::protobuf::int32 checktype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static DataBaseInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT DataBaseInfoList : public ::google::protobuf::Message {
 public:
  DataBaseInfoList();
  virtual ~DataBaseInfoList();
  
  DataBaseInfoList(const DataBaseInfoList& from);
  
  inline DataBaseInfoList& operator=(const DataBaseInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataBaseInfoList& default_instance();
  
  void Swap(DataBaseInfoList* other);
  
  // implements Message ----------------------------------------------
  
  DataBaseInfoList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataBaseInfoList& from);
  void MergeFrom(const DataBaseInfoList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .isafetec.DataBaseInfo list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::isafetec::DataBaseInfo& list(int index) const;
  inline ::isafetec::DataBaseInfo* mutable_list(int index);
  inline ::isafetec::DataBaseInfo* DataBaseInfoList::list_ReleaseAt(int index); 
  inline void DataBaseInfoList::list_RemoveAt(int index); 
  inline ::isafetec::DataBaseInfo* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::isafetec::DataBaseInfo >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::isafetec::DataBaseInfo >*
      mutable_list();
  
  // optional int32 alarmed = 2;
  inline bool has_alarmed() const;
  inline void clear_alarmed();
  static const int kAlarmedFieldNumber = 2;
  inline ::google::protobuf::int32 alarmed() const;
  inline void set_alarmed(::google::protobuf::int32 value);
  
  // optional string winuser = 3;
  inline bool has_winuser() const;
  inline void clear_winuser();
  static const int kWinuserFieldNumber = 3;
  inline const ::std::string& winuser() const;
  inline void set_winuser(const ::std::string& value);
  inline void set_winuser(const char* value);
  inline void set_winuser(const char* value, size_t size);
  inline ::std::string* mutable_winuser();
  inline ::std::string* release_winuser();
  
  // @@protoc_insertion_point(class_scope:isafetec.DataBaseInfoList)
 private:
  inline void set_has_alarmed();
  inline void clear_has_alarmed();
  inline void set_has_winuser();
  inline void clear_has_winuser();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::isafetec::DataBaseInfo > list_;
  ::std::string* winuser_;
  ::google::protobuf::int32 alarmed_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static DataBaseInfoList* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT ODBCSourceInfo : public ::google::protobuf::Message {
 public:
  ODBCSourceInfo();
  virtual ~ODBCSourceInfo();
  
  ODBCSourceInfo(const ODBCSourceInfo& from);
  
  inline ODBCSourceInfo& operator=(const ODBCSourceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ODBCSourceInfo& default_instance();
  
  void Swap(ODBCSourceInfo* other);
  
  // implements Message ----------------------------------------------
  
  ODBCSourceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ODBCSourceInfo& from);
  void MergeFrom(const ODBCSourceInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string package_code = 1;
  inline bool has_package_code() const;
  inline void clear_package_code();
  static const int kPackageCodeFieldNumber = 1;
  inline const ::std::string& package_code() const;
  inline void set_package_code(const ::std::string& value);
  inline void set_package_code(const char* value);
  inline void set_package_code(const char* value, size_t size);
  inline ::std::string* mutable_package_code();
  inline ::std::string* release_package_code();
  
  // optional int32 checktype = 2;
  inline bool has_checktype() const;
  inline void clear_checktype();
  static const int kChecktypeFieldNumber = 2;
  inline ::google::protobuf::int32 checktype() const;
  inline void set_checktype(::google::protobuf::int32 value);
  
  // optional double scan_time = 3;
  inline bool has_scan_time() const;
  inline void clear_scan_time();
  static const int kScanTimeFieldNumber = 3;
  inline double scan_time() const;
  inline void set_scan_time(double value);
  
  // optional double addtime = 50;
  inline bool has_addtime() const;
  inline void clear_addtime();
  static const int kAddtimeFieldNumber = 50;
  inline double addtime() const;
  inline void set_addtime(double value);
  
  // @@protoc_insertion_point(class_scope:isafetec.ODBCSourceInfo)
 private:
  inline void set_has_package_code();
  inline void clear_has_package_code();
  inline void set_has_checktype();
  inline void clear_has_checktype();
  inline void set_has_scan_time();
  inline void clear_has_scan_time();
  inline void set_has_addtime();
  inline void clear_has_addtime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* package_code_;
  double scan_time_;
  double addtime_;
  ::google::protobuf::int32 checktype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static ODBCSourceInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT ODBCSourceInfoList : public ::google::protobuf::Message {
 public:
  ODBCSourceInfoList();
  virtual ~ODBCSourceInfoList();
  
  ODBCSourceInfoList(const ODBCSourceInfoList& from);
  
  inline ODBCSourceInfoList& operator=(const ODBCSourceInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ODBCSourceInfoList& default_instance();
  
  void Swap(ODBCSourceInfoList* other);
  
  // implements Message ----------------------------------------------
  
  ODBCSourceInfoList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ODBCSourceInfoList& from);
  void MergeFrom(const ODBCSourceInfoList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .isafetec.ODBCSourceInfo list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::isafetec::ODBCSourceInfo& list(int index) const;
  inline ::isafetec::ODBCSourceInfo* mutable_list(int index);
  inline ::isafetec::ODBCSourceInfo* ODBCSourceInfoList::list_ReleaseAt(int index); 
  inline void ODBCSourceInfoList::list_RemoveAt(int index); 
  inline ::isafetec::ODBCSourceInfo* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::isafetec::ODBCSourceInfo >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::isafetec::ODBCSourceInfo >*
      mutable_list();
  
  // optional int32 alarmed = 2;
  inline bool has_alarmed() const;
  inline void clear_alarmed();
  static const int kAlarmedFieldNumber = 2;
  inline ::google::protobuf::int32 alarmed() const;
  inline void set_alarmed(::google::protobuf::int32 value);
  
  // optional string winuser = 3;
  inline bool has_winuser() const;
  inline void clear_winuser();
  static const int kWinuserFieldNumber = 3;
  inline const ::std::string& winuser() const;
  inline void set_winuser(const ::std::string& value);
  inline void set_winuser(const char* value);
  inline void set_winuser(const char* value, size_t size);
  inline ::std::string* mutable_winuser();
  inline ::std::string* release_winuser();
  
  // @@protoc_insertion_point(class_scope:isafetec.ODBCSourceInfoList)
 private:
  inline void set_has_alarmed();
  inline void clear_has_alarmed();
  inline void set_has_winuser();
  inline void clear_has_winuser();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::isafetec::ODBCSourceInfo > list_;
  ::std::string* winuser_;
  ::google::protobuf::int32 alarmed_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static ODBCSourceInfoList* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT ODBCDriverInfo : public ::google::protobuf::Message {
 public:
  ODBCDriverInfo();
  virtual ~ODBCDriverInfo();
  
  ODBCDriverInfo(const ODBCDriverInfo& from);
  
  inline ODBCDriverInfo& operator=(const ODBCDriverInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ODBCDriverInfo& default_instance();
  
  void Swap(ODBCDriverInfo* other);
  
  // implements Message ----------------------------------------------
  
  ODBCDriverInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ODBCDriverInfo& from);
  void MergeFrom(const ODBCDriverInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string package_code = 1;
  inline bool has_package_code() const;
  inline void clear_package_code();
  static const int kPackageCodeFieldNumber = 1;
  inline const ::std::string& package_code() const;
  inline void set_package_code(const ::std::string& value);
  inline void set_package_code(const char* value);
  inline void set_package_code(const char* value, size_t size);
  inline ::std::string* mutable_package_code();
  inline ::std::string* release_package_code();
  
  // optional int32 checktype = 2;
  inline bool has_checktype() const;
  inline void clear_checktype();
  static const int kChecktypeFieldNumber = 2;
  inline ::google::protobuf::int32 checktype() const;
  inline void set_checktype(::google::protobuf::int32 value);
  
  // optional double scan_time = 3;
  inline bool has_scan_time() const;
  inline void clear_scan_time();
  static const int kScanTimeFieldNumber = 3;
  inline double scan_time() const;
  inline void set_scan_time(double value);
  
  // optional double addtime = 50;
  inline bool has_addtime() const;
  inline void clear_addtime();
  static const int kAddtimeFieldNumber = 50;
  inline double addtime() const;
  inline void set_addtime(double value);
  
  // @@protoc_insertion_point(class_scope:isafetec.ODBCDriverInfo)
 private:
  inline void set_has_package_code();
  inline void clear_has_package_code();
  inline void set_has_checktype();
  inline void clear_has_checktype();
  inline void set_has_scan_time();
  inline void clear_has_scan_time();
  inline void set_has_addtime();
  inline void clear_has_addtime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* package_code_;
  double scan_time_;
  double addtime_;
  ::google::protobuf::int32 checktype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static ODBCDriverInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT ODBCDriverInfoList : public ::google::protobuf::Message {
 public:
  ODBCDriverInfoList();
  virtual ~ODBCDriverInfoList();
  
  ODBCDriverInfoList(const ODBCDriverInfoList& from);
  
  inline ODBCDriverInfoList& operator=(const ODBCDriverInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ODBCDriverInfoList& default_instance();
  
  void Swap(ODBCDriverInfoList* other);
  
  // implements Message ----------------------------------------------
  
  ODBCDriverInfoList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ODBCDriverInfoList& from);
  void MergeFrom(const ODBCDriverInfoList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .isafetec.ODBCDriverInfo list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::isafetec::ODBCDriverInfo& list(int index) const;
  inline ::isafetec::ODBCDriverInfo* mutable_list(int index);
  inline ::isafetec::ODBCDriverInfo* ODBCDriverInfoList::list_ReleaseAt(int index); 
  inline void ODBCDriverInfoList::list_RemoveAt(int index); 
  inline ::isafetec::ODBCDriverInfo* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::isafetec::ODBCDriverInfo >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::isafetec::ODBCDriverInfo >*
      mutable_list();
  
  // optional int32 alarmed = 2;
  inline bool has_alarmed() const;
  inline void clear_alarmed();
  static const int kAlarmedFieldNumber = 2;
  inline ::google::protobuf::int32 alarmed() const;
  inline void set_alarmed(::google::protobuf::int32 value);
  
  // optional string winuser = 3;
  inline bool has_winuser() const;
  inline void clear_winuser();
  static const int kWinuserFieldNumber = 3;
  inline const ::std::string& winuser() const;
  inline void set_winuser(const ::std::string& value);
  inline void set_winuser(const char* value);
  inline void set_winuser(const char* value, size_t size);
  inline ::std::string* mutable_winuser();
  inline ::std::string* release_winuser();
  
  // @@protoc_insertion_point(class_scope:isafetec.ODBCDriverInfoList)
 private:
  inline void set_has_alarmed();
  inline void clear_has_alarmed();
  inline void set_has_winuser();
  inline void clear_has_winuser();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::isafetec::ODBCDriverInfo > list_;
  ::std::string* winuser_;
  ::google::protobuf::int32 alarmed_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static ODBCDriverInfoList* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT AntiVirusSoftWareInfo : public ::google::protobuf::Message {
 public:
  AntiVirusSoftWareInfo();
  virtual ~AntiVirusSoftWareInfo();
  
  AntiVirusSoftWareInfo(const AntiVirusSoftWareInfo& from);
  
  inline AntiVirusSoftWareInfo& operator=(const AntiVirusSoftWareInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AntiVirusSoftWareInfo& default_instance();
  
  void Swap(AntiVirusSoftWareInfo* other);
  
  // implements Message ----------------------------------------------
  
  AntiVirusSoftWareInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AntiVirusSoftWareInfo& from);
  void MergeFrom(const AntiVirusSoftWareInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string package_code = 1;
  inline bool has_package_code() const;
  inline void clear_package_code();
  static const int kPackageCodeFieldNumber = 1;
  inline const ::std::string& package_code() const;
  inline void set_package_code(const ::std::string& value);
  inline void set_package_code(const char* value);
  inline void set_package_code(const char* value, size_t size);
  inline ::std::string* mutable_package_code();
  inline ::std::string* release_package_code();
  
  // optional int32 checktype = 2;
  inline bool has_checktype() const;
  inline void clear_checktype();
  static const int kChecktypeFieldNumber = 2;
  inline ::google::protobuf::int32 checktype() const;
  inline void set_checktype(::google::protobuf::int32 value);
  
  // optional double scan_time = 3;
  inline bool has_scan_time() const;
  inline void clear_scan_time();
  static const int kScanTimeFieldNumber = 3;
  inline double scan_time() const;
  inline void set_scan_time(double value);
  
  // optional double addtime = 50;
  inline bool has_addtime() const;
  inline void clear_addtime();
  static const int kAddtimeFieldNumber = 50;
  inline double addtime() const;
  inline void set_addtime(double value);
  
  // optional string versionNumber = 4;
  inline bool has_versionnumber() const;
  inline void clear_versionnumber();
  static const int kVersionNumberFieldNumber = 4;
  inline const ::std::string& versionnumber() const;
  inline void set_versionnumber(const ::std::string& value);
  inline void set_versionnumber(const char* value);
  inline void set_versionnumber(const char* value, size_t size);
  inline ::std::string* mutable_versionnumber();
  inline ::std::string* release_versionnumber();
  
  // optional string path = 5;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 5;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  
  // optional int32 status = 6;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 6;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:isafetec.AntiVirusSoftWareInfo)
 private:
  inline void set_has_package_code();
  inline void clear_has_package_code();
  inline void set_has_checktype();
  inline void clear_has_checktype();
  inline void set_has_scan_time();
  inline void clear_has_scan_time();
  inline void set_has_addtime();
  inline void clear_has_addtime();
  inline void set_has_versionnumber();
  inline void clear_has_versionnumber();
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_status();
  inline void clear_has_status();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* package_code_;
  double scan_time_;
  double addtime_;
  ::google::protobuf::int32 checktype_;
  ::google::protobuf::int32 status_;
  ::std::string* versionnumber_;
  ::std::string* path_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static AntiVirusSoftWareInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT AntiVirusSoftWareInfoList : public ::google::protobuf::Message {
 public:
  AntiVirusSoftWareInfoList();
  virtual ~AntiVirusSoftWareInfoList();
  
  AntiVirusSoftWareInfoList(const AntiVirusSoftWareInfoList& from);
  
  inline AntiVirusSoftWareInfoList& operator=(const AntiVirusSoftWareInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AntiVirusSoftWareInfoList& default_instance();
  
  void Swap(AntiVirusSoftWareInfoList* other);
  
  // implements Message ----------------------------------------------
  
  AntiVirusSoftWareInfoList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AntiVirusSoftWareInfoList& from);
  void MergeFrom(const AntiVirusSoftWareInfoList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .isafetec.AntiVirusSoftWareInfo list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::isafetec::AntiVirusSoftWareInfo& list(int index) const;
  inline ::isafetec::AntiVirusSoftWareInfo* mutable_list(int index);
  inline ::isafetec::AntiVirusSoftWareInfo* AntiVirusSoftWareInfoList::list_ReleaseAt(int index); 
  inline void AntiVirusSoftWareInfoList::list_RemoveAt(int index); 
  inline ::isafetec::AntiVirusSoftWareInfo* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::isafetec::AntiVirusSoftWareInfo >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::isafetec::AntiVirusSoftWareInfo >*
      mutable_list();
  
  // optional int32 alarmed = 2;
  inline bool has_alarmed() const;
  inline void clear_alarmed();
  static const int kAlarmedFieldNumber = 2;
  inline ::google::protobuf::int32 alarmed() const;
  inline void set_alarmed(::google::protobuf::int32 value);
  
  // optional string winuser = 3;
  inline bool has_winuser() const;
  inline void clear_winuser();
  static const int kWinuserFieldNumber = 3;
  inline const ::std::string& winuser() const;
  inline void set_winuser(const ::std::string& value);
  inline void set_winuser(const char* value);
  inline void set_winuser(const char* value, size_t size);
  inline ::std::string* mutable_winuser();
  inline ::std::string* release_winuser();
  
  // @@protoc_insertion_point(class_scope:isafetec.AntiVirusSoftWareInfoList)
 private:
  inline void set_has_alarmed();
  inline void clear_has_alarmed();
  inline void set_has_winuser();
  inline void clear_has_winuser();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::isafetec::AntiVirusSoftWareInfo > list_;
  ::std::string* winuser_;
  ::google::protobuf::int32 alarmed_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static AntiVirusSoftWareInfoList* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT DisposeSoftInfo : public ::google::protobuf::Message {
 public:
  DisposeSoftInfo();
  virtual ~DisposeSoftInfo();
  
  DisposeSoftInfo(const DisposeSoftInfo& from);
  
  inline DisposeSoftInfo& operator=(const DisposeSoftInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DisposeSoftInfo& default_instance();
  
  void Swap(DisposeSoftInfo* other);
  
  // implements Message ----------------------------------------------
  
  DisposeSoftInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DisposeSoftInfo& from);
  void MergeFrom(const DisposeSoftInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional string zipPackname = 2;
  inline bool has_zippackname() const;
  inline void clear_zippackname();
  static const int kZipPacknameFieldNumber = 2;
  inline const ::std::string& zippackname() const;
  inline void set_zippackname(const ::std::string& value);
  inline void set_zippackname(const char* value);
  inline void set_zippackname(const char* value, size_t size);
  inline ::std::string* mutable_zippackname();
  inline ::std::string* release_zippackname();
  
  // optional string unzipPath = 3;
  inline bool has_unzippath() const;
  inline void clear_unzippath();
  static const int kUnzipPathFieldNumber = 3;
  inline const ::std::string& unzippath() const;
  inline void set_unzippath(const ::std::string& value);
  inline void set_unzippath(const char* value);
  inline void set_unzippath(const char* value, size_t size);
  inline ::std::string* mutable_unzippath();
  inline ::std::string* release_unzippath();
  
  // optional string runFileName = 4;
  inline bool has_runfilename() const;
  inline void clear_runfilename();
  static const int kRunFileNameFieldNumber = 4;
  inline const ::std::string& runfilename() const;
  inline void set_runfilename(const ::std::string& value);
  inline void set_runfilename(const char* value);
  inline void set_runfilename(const char* value, size_t size);
  inline ::std::string* mutable_runfilename();
  inline ::std::string* release_runfilename();
  
  // @@protoc_insertion_point(class_scope:isafetec.DisposeSoftInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_zippackname();
  inline void clear_has_zippackname();
  inline void set_has_unzippath();
  inline void clear_has_unzippath();
  inline void set_has_runfilename();
  inline void clear_has_runfilename();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* zippackname_;
  ::std::string* unzippath_;
  ::std::string* runfilename_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static DisposeSoftInfo* default_instance_;
};
// -------------------------------------------------------------------

class LIBPROTOBUF_EXPORT DisposeSoftInfoList : public ::google::protobuf::Message {
 public:
  DisposeSoftInfoList();
  virtual ~DisposeSoftInfoList();
  
  DisposeSoftInfoList(const DisposeSoftInfoList& from);
  
  inline DisposeSoftInfoList& operator=(const DisposeSoftInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DisposeSoftInfoList& default_instance();
  
  void Swap(DisposeSoftInfoList* other);
  
  // implements Message ----------------------------------------------
  
  DisposeSoftInfoList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DisposeSoftInfoList& from);
  void MergeFrom(const DisposeSoftInfoList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .isafetec.DisposeSoftInfo list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::isafetec::DisposeSoftInfo& list(int index) const;
  inline ::isafetec::DisposeSoftInfo* mutable_list(int index);
  inline ::isafetec::DisposeSoftInfo* DisposeSoftInfoList::list_ReleaseAt(int index); 
  inline void DisposeSoftInfoList::list_RemoveAt(int index); 
  inline ::isafetec::DisposeSoftInfo* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::isafetec::DisposeSoftInfo >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::isafetec::DisposeSoftInfo >*
      mutable_list();
  
  // @@protoc_insertion_point(class_scope:isafetec.DisposeSoftInfoList)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::isafetec::DisposeSoftInfo > list_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void LIBPROTOBUF_EXPORT protobuf_AddDesc_appmessage_2eproto();
  friend void protobuf_AssignDesc_appmessage_2eproto();
  friend void protobuf_ShutdownFile_appmessage_2eproto();
  
  void InitAsDefaultInstance();
  static DisposeSoftInfoList* default_instance_;
};
// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace isafetec

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_appmessage_2eproto__INCLUDED
