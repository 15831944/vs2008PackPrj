// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cmmmessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace isafetec {

namespace {

const ::google::protobuf::Descriptor* BaseEquipInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaseEquipInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BaseEquipInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaseEquipInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimplePolicy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimplePolicy_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimplePolicyList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimplePolicyList_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimeSpan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeSpan_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimeSpanList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeSpanList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientSpan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientSpan_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientSpanList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientSpanList_reflection_ = NULL;
const ::google::protobuf::Descriptor* SortType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SortType_reflection_ = NULL;
const ::google::protobuf::Descriptor* SortTypeList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SortTypeList_reflection_ = NULL;
const ::google::protobuf::Descriptor* RelationShip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RelationShip_reflection_ = NULL;
const ::google::protobuf::Descriptor* RelationShipList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RelationShipList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FILTER_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FILTERLIST_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FILTER_MODE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_cmmmessage_2eproto() {
  protobuf_AddDesc_cmmmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cmmmessage.proto");
  GOOGLE_CHECK(file != NULL);
  BaseEquipInfo_descriptor_ = file->message_type(0);
  static const int BaseEquipInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseEquipInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseEquipInfo, hddnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseEquipInfo, mac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseEquipInfo, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseEquipInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseEquipInfo, equiptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseEquipInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseEquipInfo, createon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseEquipInfo, lasthwscanon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseEquipInfo, lastswscanon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseEquipInfo, createby_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseEquipInfo, binduserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseEquipInfo, isonline_),
  };
  BaseEquipInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BaseEquipInfo_descriptor_,
      BaseEquipInfo::default_instance_,
      BaseEquipInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseEquipInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseEquipInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BaseEquipInfo));
  BaseEquipInfoList_descriptor_ = file->message_type(1);
  static const int BaseEquipInfoList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseEquipInfoList, list_),
  };
  BaseEquipInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BaseEquipInfoList_descriptor_,
      BaseEquipInfoList::default_instance_,
      BaseEquipInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseEquipInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseEquipInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BaseEquipInfoList));
  SimplePolicy_descriptor_ = file->message_type(2);
  static const int SimplePolicy_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimplePolicy, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimplePolicy, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimplePolicy, last_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimplePolicy, index_),
  };
  SimplePolicy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimplePolicy_descriptor_,
      SimplePolicy::default_instance_,
      SimplePolicy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimplePolicy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimplePolicy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimplePolicy));
  SimplePolicyList_descriptor_ = file->message_type(3);
  static const int SimplePolicyList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimplePolicyList, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimplePolicyList, list_),
  };
  SimplePolicyList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimplePolicyList_descriptor_,
      SimplePolicyList::default_instance_,
      SimplePolicyList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimplePolicyList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimplePolicyList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimplePolicyList));
  TimeSpan_descriptor_ = file->message_type(4);
  static const int TimeSpan_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSpan, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSpan, timedesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSpan, begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSpan, end_time_),
  };
  TimeSpan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimeSpan_descriptor_,
      TimeSpan::default_instance_,
      TimeSpan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSpan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSpan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimeSpan));
  TimeSpanList_descriptor_ = file->message_type(5);
  static const int TimeSpanList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSpanList, list_),
  };
  TimeSpanList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimeSpanList_descriptor_,
      TimeSpanList::default_instance_,
      TimeSpanList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSpanList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSpanList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimeSpanList));
  ClientSpan_descriptor_ = file->message_type(6);
  static const int ClientSpan_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSpan, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSpan, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSpan, policyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSpan, orderindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSpan, isinherit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSpan, allowedinherit_),
  };
  ClientSpan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientSpan_descriptor_,
      ClientSpan::default_instance_,
      ClientSpan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSpan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSpan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientSpan));
  ClientSpanList_descriptor_ = file->message_type(7);
  static const int ClientSpanList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSpanList, list_),
  };
  ClientSpanList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientSpanList_descriptor_,
      ClientSpanList::default_instance_,
      ClientSpanList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSpanList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSpanList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientSpanList));
  SortType_descriptor_ = file->message_type(8);
  static const int SortType_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortType, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortType, plytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortType, typedesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortType, exefilename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortType, filtertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortType, filterparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortType, modetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortType, fileoptype_),
  };
  SortType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SortType_descriptor_,
      SortType::default_instance_,
      SortType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SortType));
  SortTypeList_descriptor_ = file->message_type(9);
  static const int SortTypeList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortTypeList, list_),
  };
  SortTypeList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SortTypeList_descriptor_,
      SortTypeList::default_instance_,
      SortTypeList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortTypeList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SortTypeList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SortTypeList));
  RelationShip_descriptor_ = file->message_type(10);
  static const int RelationShip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationShip, sorttypeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationShip, inofid_),
  };
  RelationShip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RelationShip_descriptor_,
      RelationShip::default_instance_,
      RelationShip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationShip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationShip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RelationShip));
  RelationShipList_descriptor_ = file->message_type(11);
  static const int RelationShipList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationShipList, list_),
  };
  RelationShipList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RelationShipList_descriptor_,
      RelationShipList::default_instance_,
      RelationShipList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationShipList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationShipList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RelationShipList));
  FILTER_TYPE_descriptor_ = file->enum_type(0);
  FILTERLIST_TYPE_descriptor_ = file->enum_type(1);
  FILTER_MODE_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cmmmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BaseEquipInfo_descriptor_, &BaseEquipInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BaseEquipInfoList_descriptor_, &BaseEquipInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimplePolicy_descriptor_, &SimplePolicy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimplePolicyList_descriptor_, &SimplePolicyList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimeSpan_descriptor_, &TimeSpan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimeSpanList_descriptor_, &TimeSpanList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientSpan_descriptor_, &ClientSpan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientSpanList_descriptor_, &ClientSpanList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SortType_descriptor_, &SortType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SortTypeList_descriptor_, &SortTypeList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RelationShip_descriptor_, &RelationShip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RelationShipList_descriptor_, &RelationShipList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cmmmessage_2eproto() {
  delete BaseEquipInfo::default_instance_;
  delete BaseEquipInfo_reflection_;
  delete BaseEquipInfoList::default_instance_;
  delete BaseEquipInfoList_reflection_;
  delete SimplePolicy::default_instance_;
  delete SimplePolicy_reflection_;
  delete SimplePolicyList::default_instance_;
  delete SimplePolicyList_reflection_;
  delete TimeSpan::default_instance_;
  delete TimeSpan_reflection_;
  delete TimeSpanList::default_instance_;
  delete TimeSpanList_reflection_;
  delete ClientSpan::default_instance_;
  delete ClientSpan_reflection_;
  delete ClientSpanList::default_instance_;
  delete ClientSpanList_reflection_;
  delete SortType::default_instance_;
  delete SortType_reflection_;
  delete SortTypeList::default_instance_;
  delete SortTypeList_reflection_;
  delete RelationShip::default_instance_;
  delete RelationShip_reflection_;
  delete RelationShipList::default_instance_;
  delete RelationShipList_reflection_;
}

void protobuf_AddDesc_cmmmessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020cmmmessage.proto\022\010isafetec\"\356\001\n\rBaseEqu"
    "ipInfo\022\n\n\002id\030\001 \002(\005\022\016\n\006hddnum\030\002 \001(\t\022\013\n\003ma"
    "c\030\003 \001(\t\022\020\n\010hostname\030\004 \001(\t\022\n\n\002ip\030\005 \001(\t\022\021\n"
    "\tequiptype\030\006 \001(\005\022\r\n\005state\030\007 \001(\005\022\020\n\010creat"
    "eon\030\010 \001(\001\022\024\n\014lasthwscanon\030\t \001(\001\022\024\n\014lasts"
    "wscanon\030\n \001(\001\022\020\n\010createby\030\013 \001(\005\022\022\n\nBindU"
    "serID\030\014 \001(\005\022\020\n\010IsOnline\030\r \001(\005\":\n\021BaseEqu"
    "ipInfoList\022%\n\004list\030\001 \003(\0132\027.isafetec.Base"
    "EquipInfo\"J\n\014SimplePolicy\022\014\n\004type\030\001 \002(\005\022"
    "\n\n\002id\030\002 \002(\005\022\021\n\tlast_time\030\003 \001(\001\022\r\n\005index\030"
    "\004 \001(\005\"F\n\020SimplePolicyList\022\014\n\004type\030\001 \001(\005\022"
    "$\n\004list\030\002 \003(\0132\026.isafetec.SimplePolicy\"N\n"
    "\010TimeSpan\022\n\n\002id\030\001 \001(\005\022\020\n\010timeDesc\030\002 \001(\t\022"
    "\022\n\nbegin_time\030\003 \001(\001\022\020\n\010end_time\030\004 \001(\001\"0\n"
    "\014TimeSpanList\022 \n\004list\030\001 \003(\0132\022.isafetec.T"
    "imeSpan\"w\n\nClientSpan\022\014\n\004type\030\001 \002(\005\022\n\n\002i"
    "d\030\002 \002(\r\022\020\n\010policyid\030\003 \001(\005\022\022\n\norderindex\030"
    "\004 \001(\005\022\021\n\tisinherit\030\005 \001(\005\022\026\n\016allowedinher"
    "it\030\006 \001(\005\"4\n\016ClientSpanList\022\"\n\004list\030\001 \003(\013"
    "2\024.isafetec.ClientSpan\"\235\001\n\010SortType\022\n\n\002i"
    "d\030\001 \002(\005\022\017\n\007plyType\030\002 \002(\005\022\020\n\010TypeDesc\030\003 \001"
    "(\t\022\023\n\013ExeFileName\030\004 \001(\t\022\022\n\nFilterType\030\005 "
    "\001(\005\022\023\n\013FilterParam\030\006 \001(\t\022\020\n\010modetype\030\007 \001"
    "(\005\022\022\n\nfileopType\030\010 \001(\005\"0\n\014SortTypeList\022 "
    "\n\004list\030\001 \003(\0132\022.isafetec.SortType\"2\n\014Rela"
    "tionShip\022\022\n\nSortTypeID\030\001 \002(\005\022\016\n\006InofID\030\002"
    " \002(\005\"8\n\020RelationShipList\022$\n\004list\030\001 \003(\0132\026"
    ".isafetec.RelationShip*G\n\013FILTER_TYPE\022\021\n"
    "\rONLINE_POLICY\020\000\022\022\n\016OUTLINE_POLICY\020\001\022\021\n\r"
    "COMMON_POLICY\020\002*1\n\017FILTERLIST_TYPE\022\016\n\nBL"
    "ACK_TYPE\020\000\022\016\n\nWHITE_TYPE\020\001*B\n\013FILTER_MOD"
    "E\022\021\n\rLEARNING_MODE\020\000\022\017\n\013WARING_MODE\020\001\022\017\n"
    "\013FORBIT_MODE\020\002", 1294);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cmmmessage.proto", &protobuf_RegisterTypes);
  BaseEquipInfo::default_instance_ = new BaseEquipInfo();
  BaseEquipInfoList::default_instance_ = new BaseEquipInfoList();
  SimplePolicy::default_instance_ = new SimplePolicy();
  SimplePolicyList::default_instance_ = new SimplePolicyList();
  TimeSpan::default_instance_ = new TimeSpan();
  TimeSpanList::default_instance_ = new TimeSpanList();
  ClientSpan::default_instance_ = new ClientSpan();
  ClientSpanList::default_instance_ = new ClientSpanList();
  SortType::default_instance_ = new SortType();
  SortTypeList::default_instance_ = new SortTypeList();
  RelationShip::default_instance_ = new RelationShip();
  RelationShipList::default_instance_ = new RelationShipList();
  BaseEquipInfo::default_instance_->InitAsDefaultInstance();
  BaseEquipInfoList::default_instance_->InitAsDefaultInstance();
  SimplePolicy::default_instance_->InitAsDefaultInstance();
  SimplePolicyList::default_instance_->InitAsDefaultInstance();
  TimeSpan::default_instance_->InitAsDefaultInstance();
  TimeSpanList::default_instance_->InitAsDefaultInstance();
  ClientSpan::default_instance_->InitAsDefaultInstance();
  ClientSpanList::default_instance_->InitAsDefaultInstance();
  SortType::default_instance_->InitAsDefaultInstance();
  SortTypeList::default_instance_->InitAsDefaultInstance();
  RelationShip::default_instance_->InitAsDefaultInstance();
  RelationShipList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cmmmessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cmmmessage_2eproto {
  StaticDescriptorInitializer_cmmmessage_2eproto() {
    protobuf_AddDesc_cmmmessage_2eproto();
  }
} static_descriptor_initializer_cmmmessage_2eproto_;

const ::google::protobuf::EnumDescriptor* FILTER_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FILTER_TYPE_descriptor_;
}
bool FILTER_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FILTERLIST_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FILTERLIST_TYPE_descriptor_;
}
bool FILTERLIST_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FILTER_MODE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FILTER_MODE_descriptor_;
}
bool FILTER_MODE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int BaseEquipInfo::kIdFieldNumber;
const int BaseEquipInfo::kHddnumFieldNumber;
const int BaseEquipInfo::kMacFieldNumber;
const int BaseEquipInfo::kHostnameFieldNumber;
const int BaseEquipInfo::kIpFieldNumber;
const int BaseEquipInfo::kEquiptypeFieldNumber;
const int BaseEquipInfo::kStateFieldNumber;
const int BaseEquipInfo::kCreateonFieldNumber;
const int BaseEquipInfo::kLasthwscanonFieldNumber;
const int BaseEquipInfo::kLastswscanonFieldNumber;
const int BaseEquipInfo::kCreatebyFieldNumber;
const int BaseEquipInfo::kBindUserIDFieldNumber;
const int BaseEquipInfo::kIsOnlineFieldNumber;
#endif  // !_MSC_VER

BaseEquipInfo::BaseEquipInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BaseEquipInfo::InitAsDefaultInstance() {
}

BaseEquipInfo::BaseEquipInfo(const BaseEquipInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BaseEquipInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  hddnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  equiptype_ = 0;
  state_ = 0;
  createon_ = 0;
  lasthwscanon_ = 0;
  lastswscanon_ = 0;
  createby_ = 0;
  binduserid_ = 0;
  isonline_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BaseEquipInfo::~BaseEquipInfo() {
  SharedDtor();
}

void BaseEquipInfo::SharedDtor() {
  if (hddnum_ != &::google::protobuf::internal::kEmptyString) {
    delete hddnum_;
  }
  if (mac_ != &::google::protobuf::internal::kEmptyString) {
    delete mac_;
  }
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void BaseEquipInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseEquipInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseEquipInfo_descriptor_;
}

const BaseEquipInfo& BaseEquipInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cmmmessage_2eproto();  return *default_instance_;
}

BaseEquipInfo* BaseEquipInfo::default_instance_ = NULL;

BaseEquipInfo* BaseEquipInfo::New() const {
  return new BaseEquipInfo;
}

void BaseEquipInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_hddnum()) {
      if (hddnum_ != &::google::protobuf::internal::kEmptyString) {
        hddnum_->clear();
      }
    }
    if (has_mac()) {
      if (mac_ != &::google::protobuf::internal::kEmptyString) {
        mac_->clear();
      }
    }
    if (has_hostname()) {
      if (hostname_ != &::google::protobuf::internal::kEmptyString) {
        hostname_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    equiptype_ = 0;
    state_ = 0;
    createon_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    lasthwscanon_ = 0;
    lastswscanon_ = 0;
    createby_ = 0;
    binduserid_ = 0;
    isonline_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BaseEquipInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hddnum;
        break;
      }
      
      // optional string hddnum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hddnum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hddnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hddnum().data(), this->hddnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mac;
        break;
      }
      
      // optional string mac = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mac:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mac().data(), this->mac().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_hostname;
        break;
      }
      
      // optional string hostname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ip;
        break;
      }
      
      // optional string ip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_equiptype;
        break;
      }
      
      // optional int32 equiptype = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equiptype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equiptype_)));
          set_has_equiptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_state;
        break;
      }
      
      // optional int32 state = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_createon;
        break;
      }
      
      // optional double createon = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_createon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &createon_)));
          set_has_createon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_lasthwscanon;
        break;
      }
      
      // optional double lasthwscanon = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lasthwscanon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lasthwscanon_)));
          set_has_lasthwscanon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_lastswscanon;
        break;
      }
      
      // optional double lastswscanon = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_lastswscanon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lastswscanon_)));
          set_has_lastswscanon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_createby;
        break;
      }
      
      // optional int32 createby = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createby:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &createby_)));
          set_has_createby();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_BindUserID;
        break;
      }
      
      // optional int32 BindUserID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BindUserID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &binduserid_)));
          set_has_binduserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_IsOnline;
        break;
      }
      
      // optional int32 IsOnline = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsOnline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isonline_)));
          set_has_isonline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BaseEquipInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string hddnum = 2;
  if (has_hddnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hddnum().data(), this->hddnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->hddnum(), output);
  }
  
  // optional string mac = 3;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->mac(), output);
  }
  
  // optional string hostname = 4;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->hostname(), output);
  }
  
  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ip(), output);
  }
  
  // optional int32 equiptype = 6;
  if (has_equiptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->equiptype(), output);
  }
  
  // optional int32 state = 7;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->state(), output);
  }
  
  // optional double createon = 8;
  if (has_createon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->createon(), output);
  }
  
  // optional double lasthwscanon = 9;
  if (has_lasthwscanon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->lasthwscanon(), output);
  }
  
  // optional double lastswscanon = 10;
  if (has_lastswscanon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->lastswscanon(), output);
  }
  
  // optional int32 createby = 11;
  if (has_createby()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->createby(), output);
  }
  
  // optional int32 BindUserID = 12;
  if (has_binduserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->binduserid(), output);
  }
  
  // optional int32 IsOnline = 13;
  if (has_isonline()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->isonline(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BaseEquipInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string hddnum = 2;
  if (has_hddnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hddnum().data(), this->hddnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hddnum(), target);
  }
  
  // optional string mac = 3;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mac(), target);
  }
  
  // optional string hostname = 4;
  if (has_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->hostname(), target);
  }
  
  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ip(), target);
  }
  
  // optional int32 equiptype = 6;
  if (has_equiptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->equiptype(), target);
  }
  
  // optional int32 state = 7;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->state(), target);
  }
  
  // optional double createon = 8;
  if (has_createon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->createon(), target);
  }
  
  // optional double lasthwscanon = 9;
  if (has_lasthwscanon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->lasthwscanon(), target);
  }
  
  // optional double lastswscanon = 10;
  if (has_lastswscanon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->lastswscanon(), target);
  }
  
  // optional int32 createby = 11;
  if (has_createby()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->createby(), target);
  }
  
  // optional int32 BindUserID = 12;
  if (has_binduserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->binduserid(), target);
  }
  
  // optional int32 IsOnline = 13;
  if (has_isonline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->isonline(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BaseEquipInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string hddnum = 2;
    if (has_hddnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hddnum());
    }
    
    // optional string mac = 3;
    if (has_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mac());
    }
    
    // optional string hostname = 4;
    if (has_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hostname());
    }
    
    // optional string ip = 5;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // optional int32 equiptype = 6;
    if (has_equiptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equiptype());
    }
    
    // optional int32 state = 7;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }
    
    // optional double createon = 8;
    if (has_createon()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double lasthwscanon = 9;
    if (has_lasthwscanon()) {
      total_size += 1 + 8;
    }
    
    // optional double lastswscanon = 10;
    if (has_lastswscanon()) {
      total_size += 1 + 8;
    }
    
    // optional int32 createby = 11;
    if (has_createby()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->createby());
    }
    
    // optional int32 BindUserID = 12;
    if (has_binduserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->binduserid());
    }
    
    // optional int32 IsOnline = 13;
    if (has_isonline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isonline());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseEquipInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BaseEquipInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BaseEquipInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BaseEquipInfo::MergeFrom(const BaseEquipInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_hddnum()) {
      set_hddnum(from.hddnum());
    }
    if (from.has_mac()) {
      set_mac(from.mac());
    }
    if (from.has_hostname()) {
      set_hostname(from.hostname());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_equiptype()) {
      set_equiptype(from.equiptype());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_createon()) {
      set_createon(from.createon());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lasthwscanon()) {
      set_lasthwscanon(from.lasthwscanon());
    }
    if (from.has_lastswscanon()) {
      set_lastswscanon(from.lastswscanon());
    }
    if (from.has_createby()) {
      set_createby(from.createby());
    }
    if (from.has_binduserid()) {
      set_binduserid(from.binduserid());
    }
    if (from.has_isonline()) {
      set_isonline(from.isonline());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BaseEquipInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseEquipInfo::CopyFrom(const BaseEquipInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseEquipInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void BaseEquipInfo::Swap(BaseEquipInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(hddnum_, other->hddnum_);
    std::swap(mac_, other->mac_);
    std::swap(hostname_, other->hostname_);
    std::swap(ip_, other->ip_);
    std::swap(equiptype_, other->equiptype_);
    std::swap(state_, other->state_);
    std::swap(createon_, other->createon_);
    std::swap(lasthwscanon_, other->lasthwscanon_);
    std::swap(lastswscanon_, other->lastswscanon_);
    std::swap(createby_, other->createby_);
    std::swap(binduserid_, other->binduserid_);
    std::swap(isonline_, other->isonline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BaseEquipInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaseEquipInfo_descriptor_;
  metadata.reflection = BaseEquipInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BaseEquipInfoList::kListFieldNumber;
#endif  // !_MSC_VER

BaseEquipInfoList::BaseEquipInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BaseEquipInfoList::InitAsDefaultInstance() {
}

BaseEquipInfoList::BaseEquipInfoList(const BaseEquipInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BaseEquipInfoList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BaseEquipInfoList::~BaseEquipInfoList() {
  SharedDtor();
}

void BaseEquipInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BaseEquipInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseEquipInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseEquipInfoList_descriptor_;
}

const BaseEquipInfoList& BaseEquipInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cmmmessage_2eproto();  return *default_instance_;
}

BaseEquipInfoList* BaseEquipInfoList::default_instance_ = NULL;

BaseEquipInfoList* BaseEquipInfoList::New() const {
  return new BaseEquipInfoList;
}

void BaseEquipInfoList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BaseEquipInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .isafetec.BaseEquipInfo list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BaseEquipInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .isafetec.BaseEquipInfo list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BaseEquipInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .isafetec.BaseEquipInfo list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BaseEquipInfoList::ByteSize() const {
  int total_size = 0;
  
  // repeated .isafetec.BaseEquipInfo list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseEquipInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BaseEquipInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BaseEquipInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BaseEquipInfoList::MergeFrom(const BaseEquipInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BaseEquipInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseEquipInfoList::CopyFrom(const BaseEquipInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseEquipInfoList::IsInitialized() const {
  
  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void BaseEquipInfoList::Swap(BaseEquipInfoList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BaseEquipInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaseEquipInfoList_descriptor_;
  metadata.reflection = BaseEquipInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimplePolicy::kTypeFieldNumber;
const int SimplePolicy::kIdFieldNumber;
const int SimplePolicy::kLastTimeFieldNumber;
const int SimplePolicy::kIndexFieldNumber;
#endif  // !_MSC_VER

SimplePolicy::SimplePolicy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SimplePolicy::InitAsDefaultInstance() {
}

SimplePolicy::SimplePolicy(const SimplePolicy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SimplePolicy::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = 0;
  last_time_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimplePolicy::~SimplePolicy() {
  SharedDtor();
}

void SimplePolicy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SimplePolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimplePolicy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimplePolicy_descriptor_;
}

const SimplePolicy& SimplePolicy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cmmmessage_2eproto();  return *default_instance_;
}

SimplePolicy* SimplePolicy::default_instance_ = NULL;

SimplePolicy* SimplePolicy::New() const {
  return new SimplePolicy;
}

void SimplePolicy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    id_ = 0;
    last_time_ = 0;
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimplePolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_last_time;
        break;
      }
      
      // optional double last_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_last_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_time_)));
          set_has_last_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_index;
        break;
      }
      
      // optional int32 index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimplePolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // optional double last_time = 3;
  if (has_last_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->last_time(), output);
  }
  
  // optional int32 index = 4;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimplePolicy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // optional double last_time = 3;
  if (has_last_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->last_time(), target);
  }
  
  // optional int32 index = 4;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimplePolicy::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional double last_time = 3;
    if (has_last_time()) {
      total_size += 1 + 8;
    }
    
    // optional int32 index = 4;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimplePolicy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimplePolicy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimplePolicy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimplePolicy::MergeFrom(const SimplePolicy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_last_time()) {
      set_last_time(from.last_time());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimplePolicy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimplePolicy::CopyFrom(const SimplePolicy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimplePolicy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SimplePolicy::Swap(SimplePolicy* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(last_time_, other->last_time_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimplePolicy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimplePolicy_descriptor_;
  metadata.reflection = SimplePolicy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimplePolicyList::kTypeFieldNumber;
const int SimplePolicyList::kListFieldNumber;
#endif  // !_MSC_VER

SimplePolicyList::SimplePolicyList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SimplePolicyList::InitAsDefaultInstance() {
}

SimplePolicyList::SimplePolicyList(const SimplePolicyList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SimplePolicyList::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimplePolicyList::~SimplePolicyList() {
  SharedDtor();
}

void SimplePolicyList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SimplePolicyList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimplePolicyList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimplePolicyList_descriptor_;
}

const SimplePolicyList& SimplePolicyList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cmmmessage_2eproto();  return *default_instance_;
}

SimplePolicyList* SimplePolicyList::default_instance_ = NULL;

SimplePolicyList* SimplePolicyList::New() const {
  return new SimplePolicyList;
}

void SimplePolicyList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimplePolicyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list;
        break;
      }
      
      // repeated .isafetec.SimplePolicy list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimplePolicyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // repeated .isafetec.SimplePolicy list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimplePolicyList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // repeated .isafetec.SimplePolicy list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimplePolicyList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
  }
  // repeated .isafetec.SimplePolicy list = 2;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimplePolicyList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimplePolicyList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimplePolicyList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimplePolicyList::MergeFrom(const SimplePolicyList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimplePolicyList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimplePolicyList::CopyFrom(const SimplePolicyList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimplePolicyList::IsInitialized() const {
  
  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void SimplePolicyList::Swap(SimplePolicyList* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimplePolicyList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimplePolicyList_descriptor_;
  metadata.reflection = SimplePolicyList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TimeSpan::kIdFieldNumber;
const int TimeSpan::kTimeDescFieldNumber;
const int TimeSpan::kBeginTimeFieldNumber;
const int TimeSpan::kEndTimeFieldNumber;
#endif  // !_MSC_VER

TimeSpan::TimeSpan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TimeSpan::InitAsDefaultInstance() {
}

TimeSpan::TimeSpan(const TimeSpan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TimeSpan::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  timedesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  begin_time_ = 0;
  end_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeSpan::~TimeSpan() {
  SharedDtor();
}

void TimeSpan::SharedDtor() {
  if (timedesc_ != &::google::protobuf::internal::kEmptyString) {
    delete timedesc_;
  }
  if (this != default_instance_) {
  }
}

void TimeSpan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeSpan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeSpan_descriptor_;
}

const TimeSpan& TimeSpan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cmmmessage_2eproto();  return *default_instance_;
}

TimeSpan* TimeSpan::default_instance_ = NULL;

TimeSpan* TimeSpan::New() const {
  return new TimeSpan;
}

void TimeSpan::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_timedesc()) {
      if (timedesc_ != &::google::protobuf::internal::kEmptyString) {
        timedesc_->clear();
      }
    }
    begin_time_ = 0;
    end_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimeSpan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_timeDesc;
        break;
      }
      
      // optional string timeDesc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timeDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timedesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timedesc().data(), this->timedesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_begin_time;
        break;
      }
      
      // optional double begin_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &begin_time_)));
          set_has_begin_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_end_time;
        break;
      }
      
      // optional double end_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TimeSpan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string timeDesc = 2;
  if (has_timedesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timedesc().data(), this->timedesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->timedesc(), output);
  }
  
  // optional double begin_time = 3;
  if (has_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->begin_time(), output);
  }
  
  // optional double end_time = 4;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->end_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TimeSpan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string timeDesc = 2;
  if (has_timedesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timedesc().data(), this->timedesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->timedesc(), target);
  }
  
  // optional double begin_time = 3;
  if (has_begin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->begin_time(), target);
  }
  
  // optional double end_time = 4;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->end_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TimeSpan::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string timeDesc = 2;
    if (has_timedesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timedesc());
    }
    
    // optional double begin_time = 3;
    if (has_begin_time()) {
      total_size += 1 + 8;
    }
    
    // optional double end_time = 4;
    if (has_end_time()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeSpan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimeSpan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimeSpan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeSpan::MergeFrom(const TimeSpan& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_timedesc()) {
      set_timedesc(from.timedesc());
    }
    if (from.has_begin_time()) {
      set_begin_time(from.begin_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimeSpan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeSpan::CopyFrom(const TimeSpan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeSpan::IsInitialized() const {
  
  return true;
}

void TimeSpan::Swap(TimeSpan* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(timedesc_, other->timedesc_);
    std::swap(begin_time_, other->begin_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimeSpan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeSpan_descriptor_;
  metadata.reflection = TimeSpan_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TimeSpanList::kListFieldNumber;
#endif  // !_MSC_VER

TimeSpanList::TimeSpanList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TimeSpanList::InitAsDefaultInstance() {
}

TimeSpanList::TimeSpanList(const TimeSpanList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TimeSpanList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeSpanList::~TimeSpanList() {
  SharedDtor();
}

void TimeSpanList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimeSpanList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeSpanList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeSpanList_descriptor_;
}

const TimeSpanList& TimeSpanList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cmmmessage_2eproto();  return *default_instance_;
}

TimeSpanList* TimeSpanList::default_instance_ = NULL;

TimeSpanList* TimeSpanList::New() const {
  return new TimeSpanList;
}

void TimeSpanList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimeSpanList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .isafetec.TimeSpan list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TimeSpanList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .isafetec.TimeSpan list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TimeSpanList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .isafetec.TimeSpan list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TimeSpanList::ByteSize() const {
  int total_size = 0;
  
  // repeated .isafetec.TimeSpan list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeSpanList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimeSpanList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimeSpanList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeSpanList::MergeFrom(const TimeSpanList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimeSpanList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeSpanList::CopyFrom(const TimeSpanList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeSpanList::IsInitialized() const {
  
  return true;
}

void TimeSpanList::Swap(TimeSpanList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimeSpanList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeSpanList_descriptor_;
  metadata.reflection = TimeSpanList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientSpan::kTypeFieldNumber;
const int ClientSpan::kIdFieldNumber;
const int ClientSpan::kPolicyidFieldNumber;
const int ClientSpan::kOrderindexFieldNumber;
const int ClientSpan::kIsinheritFieldNumber;
const int ClientSpan::kAllowedinheritFieldNumber;
#endif  // !_MSC_VER

ClientSpan::ClientSpan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientSpan::InitAsDefaultInstance() {
}

ClientSpan::ClientSpan(const ClientSpan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientSpan::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = 0u;
  policyid_ = 0;
  orderindex_ = 0;
  isinherit_ = 0;
  allowedinherit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientSpan::~ClientSpan() {
  SharedDtor();
}

void ClientSpan::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientSpan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientSpan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientSpan_descriptor_;
}

const ClientSpan& ClientSpan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cmmmessage_2eproto();  return *default_instance_;
}

ClientSpan* ClientSpan::default_instance_ = NULL;

ClientSpan* ClientSpan::New() const {
  return new ClientSpan;
}

void ClientSpan::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    id_ = 0u;
    policyid_ = 0;
    orderindex_ = 0;
    isinherit_ = 0;
    allowedinherit_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientSpan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // required uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_policyid;
        break;
      }
      
      // optional int32 policyid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_policyid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &policyid_)));
          set_has_policyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_orderindex;
        break;
      }
      
      // optional int32 orderindex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_orderindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orderindex_)));
          set_has_orderindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isinherit;
        break;
      }
      
      // optional int32 isinherit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isinherit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isinherit_)));
          set_has_isinherit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_allowedinherit;
        break;
      }
      
      // optional int32 allowedinherit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allowedinherit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allowedinherit_)));
          set_has_allowedinherit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientSpan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }
  
  // optional int32 policyid = 3;
  if (has_policyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->policyid(), output);
  }
  
  // optional int32 orderindex = 4;
  if (has_orderindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->orderindex(), output);
  }
  
  // optional int32 isinherit = 5;
  if (has_isinherit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->isinherit(), output);
  }
  
  // optional int32 allowedinherit = 6;
  if (has_allowedinherit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->allowedinherit(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientSpan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }
  
  // optional int32 policyid = 3;
  if (has_policyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->policyid(), target);
  }
  
  // optional int32 orderindex = 4;
  if (has_orderindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->orderindex(), target);
  }
  
  // optional int32 isinherit = 5;
  if (has_isinherit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->isinherit(), target);
  }
  
  // optional int32 allowedinherit = 6;
  if (has_allowedinherit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->allowedinherit(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientSpan::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional int32 policyid = 3;
    if (has_policyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->policyid());
    }
    
    // optional int32 orderindex = 4;
    if (has_orderindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orderindex());
    }
    
    // optional int32 isinherit = 5;
    if (has_isinherit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isinherit());
    }
    
    // optional int32 allowedinherit = 6;
    if (has_allowedinherit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allowedinherit());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientSpan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientSpan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientSpan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientSpan::MergeFrom(const ClientSpan& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_policyid()) {
      set_policyid(from.policyid());
    }
    if (from.has_orderindex()) {
      set_orderindex(from.orderindex());
    }
    if (from.has_isinherit()) {
      set_isinherit(from.isinherit());
    }
    if (from.has_allowedinherit()) {
      set_allowedinherit(from.allowedinherit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientSpan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientSpan::CopyFrom(const ClientSpan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientSpan::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ClientSpan::Swap(ClientSpan* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(policyid_, other->policyid_);
    std::swap(orderindex_, other->orderindex_);
    std::swap(isinherit_, other->isinherit_);
    std::swap(allowedinherit_, other->allowedinherit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientSpan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientSpan_descriptor_;
  metadata.reflection = ClientSpan_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientSpanList::kListFieldNumber;
#endif  // !_MSC_VER

ClientSpanList::ClientSpanList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientSpanList::InitAsDefaultInstance() {
}

ClientSpanList::ClientSpanList(const ClientSpanList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientSpanList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientSpanList::~ClientSpanList() {
  SharedDtor();
}

void ClientSpanList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientSpanList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientSpanList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientSpanList_descriptor_;
}

const ClientSpanList& ClientSpanList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cmmmessage_2eproto();  return *default_instance_;
}

ClientSpanList* ClientSpanList::default_instance_ = NULL;

ClientSpanList* ClientSpanList::New() const {
  return new ClientSpanList;
}

void ClientSpanList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientSpanList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .isafetec.ClientSpan list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientSpanList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .isafetec.ClientSpan list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientSpanList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .isafetec.ClientSpan list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientSpanList::ByteSize() const {
  int total_size = 0;
  
  // repeated .isafetec.ClientSpan list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientSpanList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientSpanList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientSpanList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientSpanList::MergeFrom(const ClientSpanList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientSpanList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientSpanList::CopyFrom(const ClientSpanList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientSpanList::IsInitialized() const {
  
  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void ClientSpanList::Swap(ClientSpanList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientSpanList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientSpanList_descriptor_;
  metadata.reflection = ClientSpanList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SortType::kIdFieldNumber;
const int SortType::kPlyTypeFieldNumber;
const int SortType::kTypeDescFieldNumber;
const int SortType::kExeFileNameFieldNumber;
const int SortType::kFilterTypeFieldNumber;
const int SortType::kFilterParamFieldNumber;
const int SortType::kModetypeFieldNumber;
const int SortType::kFileopTypeFieldNumber;
#endif  // !_MSC_VER

SortType::SortType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SortType::InitAsDefaultInstance() {
}

SortType::SortType(const SortType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SortType::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  plytype_ = 0;
  typedesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exefilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filtertype_ = 0;
  filterparam_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  modetype_ = 0;
  fileoptype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SortType::~SortType() {
  SharedDtor();
}

void SortType::SharedDtor() {
  if (typedesc_ != &::google::protobuf::internal::kEmptyString) {
    delete typedesc_;
  }
  if (exefilename_ != &::google::protobuf::internal::kEmptyString) {
    delete exefilename_;
  }
  if (filterparam_ != &::google::protobuf::internal::kEmptyString) {
    delete filterparam_;
  }
  if (this != default_instance_) {
  }
}

void SortType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SortType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SortType_descriptor_;
}

const SortType& SortType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cmmmessage_2eproto();  return *default_instance_;
}

SortType* SortType::default_instance_ = NULL;

SortType* SortType::New() const {
  return new SortType;
}

void SortType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    plytype_ = 0;
    if (has_typedesc()) {
      if (typedesc_ != &::google::protobuf::internal::kEmptyString) {
        typedesc_->clear();
      }
    }
    if (has_exefilename()) {
      if (exefilename_ != &::google::protobuf::internal::kEmptyString) {
        exefilename_->clear();
      }
    }
    filtertype_ = 0;
    if (has_filterparam()) {
      if (filterparam_ != &::google::protobuf::internal::kEmptyString) {
        filterparam_->clear();
      }
    }
    modetype_ = 0;
    fileoptype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SortType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_plyType;
        break;
      }
      
      // required int32 plyType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_plyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plytype_)));
          set_has_plytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_TypeDesc;
        break;
      }
      
      // optional string TypeDesc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TypeDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_typedesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->typedesc().data(), this->typedesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ExeFileName;
        break;
      }
      
      // optional string ExeFileName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExeFileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exefilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exefilename().data(), this->exefilename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_FilterType;
        break;
      }
      
      // optional int32 FilterType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FilterType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &filtertype_)));
          set_has_filtertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_FilterParam;
        break;
      }
      
      // optional string FilterParam = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FilterParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filterparam()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filterparam().data(), this->filterparam().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_modetype;
        break;
      }
      
      // optional int32 modetype = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modetype_)));
          set_has_modetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_fileopType;
        break;
      }
      
      // optional int32 fileopType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fileopType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fileoptype_)));
          set_has_fileoptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SortType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required int32 plyType = 2;
  if (has_plytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->plytype(), output);
  }
  
  // optional string TypeDesc = 3;
  if (has_typedesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->typedesc().data(), this->typedesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->typedesc(), output);
  }
  
  // optional string ExeFileName = 4;
  if (has_exefilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exefilename().data(), this->exefilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->exefilename(), output);
  }
  
  // optional int32 FilterType = 5;
  if (has_filtertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->filtertype(), output);
  }
  
  // optional string FilterParam = 6;
  if (has_filterparam()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filterparam().data(), this->filterparam().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->filterparam(), output);
  }
  
  // optional int32 modetype = 7;
  if (has_modetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->modetype(), output);
  }
  
  // optional int32 fileopType = 8;
  if (has_fileoptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->fileoptype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SortType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required int32 plyType = 2;
  if (has_plytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->plytype(), target);
  }
  
  // optional string TypeDesc = 3;
  if (has_typedesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->typedesc().data(), this->typedesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->typedesc(), target);
  }
  
  // optional string ExeFileName = 4;
  if (has_exefilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exefilename().data(), this->exefilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->exefilename(), target);
  }
  
  // optional int32 FilterType = 5;
  if (has_filtertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->filtertype(), target);
  }
  
  // optional string FilterParam = 6;
  if (has_filterparam()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filterparam().data(), this->filterparam().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->filterparam(), target);
  }
  
  // optional int32 modetype = 7;
  if (has_modetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->modetype(), target);
  }
  
  // optional int32 fileopType = 8;
  if (has_fileoptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->fileoptype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SortType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required int32 plyType = 2;
    if (has_plytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plytype());
    }
    
    // optional string TypeDesc = 3;
    if (has_typedesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->typedesc());
    }
    
    // optional string ExeFileName = 4;
    if (has_exefilename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exefilename());
    }
    
    // optional int32 FilterType = 5;
    if (has_filtertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->filtertype());
    }
    
    // optional string FilterParam = 6;
    if (has_filterparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filterparam());
    }
    
    // optional int32 modetype = 7;
    if (has_modetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modetype());
    }
    
    // optional int32 fileopType = 8;
    if (has_fileoptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fileoptype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SortType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SortType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SortType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SortType::MergeFrom(const SortType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_plytype()) {
      set_plytype(from.plytype());
    }
    if (from.has_typedesc()) {
      set_typedesc(from.typedesc());
    }
    if (from.has_exefilename()) {
      set_exefilename(from.exefilename());
    }
    if (from.has_filtertype()) {
      set_filtertype(from.filtertype());
    }
    if (from.has_filterparam()) {
      set_filterparam(from.filterparam());
    }
    if (from.has_modetype()) {
      set_modetype(from.modetype());
    }
    if (from.has_fileoptype()) {
      set_fileoptype(from.fileoptype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SortType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SortType::CopyFrom(const SortType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SortType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void SortType::Swap(SortType* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(plytype_, other->plytype_);
    std::swap(typedesc_, other->typedesc_);
    std::swap(exefilename_, other->exefilename_);
    std::swap(filtertype_, other->filtertype_);
    std::swap(filterparam_, other->filterparam_);
    std::swap(modetype_, other->modetype_);
    std::swap(fileoptype_, other->fileoptype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SortType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SortType_descriptor_;
  metadata.reflection = SortType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SortTypeList::kListFieldNumber;
#endif  // !_MSC_VER

SortTypeList::SortTypeList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SortTypeList::InitAsDefaultInstance() {
}

SortTypeList::SortTypeList(const SortTypeList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SortTypeList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SortTypeList::~SortTypeList() {
  SharedDtor();
}

void SortTypeList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SortTypeList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SortTypeList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SortTypeList_descriptor_;
}

const SortTypeList& SortTypeList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cmmmessage_2eproto();  return *default_instance_;
}

SortTypeList* SortTypeList::default_instance_ = NULL;

SortTypeList* SortTypeList::New() const {
  return new SortTypeList;
}

void SortTypeList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SortTypeList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .isafetec.SortType list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SortTypeList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .isafetec.SortType list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SortTypeList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .isafetec.SortType list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SortTypeList::ByteSize() const {
  int total_size = 0;
  
  // repeated .isafetec.SortType list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SortTypeList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SortTypeList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SortTypeList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SortTypeList::MergeFrom(const SortTypeList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SortTypeList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SortTypeList::CopyFrom(const SortTypeList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SortTypeList::IsInitialized() const {
  
  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void SortTypeList::Swap(SortTypeList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SortTypeList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SortTypeList_descriptor_;
  metadata.reflection = SortTypeList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RelationShip::kSortTypeIDFieldNumber;
const int RelationShip::kInofIDFieldNumber;
#endif  // !_MSC_VER

RelationShip::RelationShip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RelationShip::InitAsDefaultInstance() {
}

RelationShip::RelationShip(const RelationShip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RelationShip::SharedCtor() {
  _cached_size_ = 0;
  sorttypeid_ = 0;
  inofid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RelationShip::~RelationShip() {
  SharedDtor();
}

void RelationShip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RelationShip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RelationShip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RelationShip_descriptor_;
}

const RelationShip& RelationShip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cmmmessage_2eproto();  return *default_instance_;
}

RelationShip* RelationShip::default_instance_ = NULL;

RelationShip* RelationShip::New() const {
  return new RelationShip;
}

void RelationShip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sorttypeid_ = 0;
    inofid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RelationShip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 SortTypeID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sorttypeid_)));
          set_has_sorttypeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_InofID;
        break;
      }
      
      // required int32 InofID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_InofID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inofid_)));
          set_has_inofid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RelationShip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 SortTypeID = 1;
  if (has_sorttypeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sorttypeid(), output);
  }
  
  // required int32 InofID = 2;
  if (has_inofid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->inofid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RelationShip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 SortTypeID = 1;
  if (has_sorttypeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sorttypeid(), target);
  }
  
  // required int32 InofID = 2;
  if (has_inofid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->inofid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RelationShip::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 SortTypeID = 1;
    if (has_sorttypeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sorttypeid());
    }
    
    // required int32 InofID = 2;
    if (has_inofid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inofid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RelationShip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RelationShip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RelationShip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RelationShip::MergeFrom(const RelationShip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sorttypeid()) {
      set_sorttypeid(from.sorttypeid());
    }
    if (from.has_inofid()) {
      set_inofid(from.inofid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RelationShip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelationShip::CopyFrom(const RelationShip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelationShip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void RelationShip::Swap(RelationShip* other) {
  if (other != this) {
    std::swap(sorttypeid_, other->sorttypeid_);
    std::swap(inofid_, other->inofid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RelationShip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RelationShip_descriptor_;
  metadata.reflection = RelationShip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RelationShipList::kListFieldNumber;
#endif  // !_MSC_VER

RelationShipList::RelationShipList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RelationShipList::InitAsDefaultInstance() {
}

RelationShipList::RelationShipList(const RelationShipList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RelationShipList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RelationShipList::~RelationShipList() {
  SharedDtor();
}

void RelationShipList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RelationShipList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RelationShipList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RelationShipList_descriptor_;
}

const RelationShipList& RelationShipList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cmmmessage_2eproto();  return *default_instance_;
}

RelationShipList* RelationShipList::default_instance_ = NULL;

RelationShipList* RelationShipList::New() const {
  return new RelationShipList;
}

void RelationShipList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RelationShipList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .isafetec.RelationShip list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RelationShipList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .isafetec.RelationShip list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RelationShipList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .isafetec.RelationShip list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RelationShipList::ByteSize() const {
  int total_size = 0;
  
  // repeated .isafetec.RelationShip list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RelationShipList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RelationShipList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RelationShipList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RelationShipList::MergeFrom(const RelationShipList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RelationShipList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelationShipList::CopyFrom(const RelationShipList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelationShipList::IsInitialized() const {
  
  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void RelationShipList::Swap(RelationShipList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RelationShipList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RelationShipList_descriptor_;
  metadata.reflection = RelationShipList_reflection_;
  return metadata;
}

// BaseEquipInfo

// required int32 id = 1;
inline bool BaseEquipInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BaseEquipInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BaseEquipInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BaseEquipInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 BaseEquipInfo::id() const {
  return id_;
}
inline void BaseEquipInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string hddnum = 2;
inline bool BaseEquipInfo::has_hddnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BaseEquipInfo::set_has_hddnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BaseEquipInfo::clear_has_hddnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BaseEquipInfo::clear_hddnum() {
  if (hddnum_ != &::google::protobuf::internal::kEmptyString) {
    hddnum_->clear();
  }
  clear_has_hddnum();
}
inline const ::std::string& BaseEquipInfo::hddnum() const {
  return *hddnum_;
}
inline void BaseEquipInfo::set_hddnum(const ::std::string& value) {
  set_has_hddnum();
  if (hddnum_ == &::google::protobuf::internal::kEmptyString) {
    hddnum_ = new ::std::string;
  }
  hddnum_->assign(value);
}
inline void BaseEquipInfo::set_hddnum(const char* value) {
  set_has_hddnum();
  if (hddnum_ == &::google::protobuf::internal::kEmptyString) {
    hddnum_ = new ::std::string;
  }
  hddnum_->assign(value);
}
inline void BaseEquipInfo::set_hddnum(const char* value, size_t size) {
  set_has_hddnum();
  if (hddnum_ == &::google::protobuf::internal::kEmptyString) {
    hddnum_ = new ::std::string;
  }
  hddnum_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BaseEquipInfo::mutable_hddnum() {
  set_has_hddnum();
  if (hddnum_ == &::google::protobuf::internal::kEmptyString) {
    hddnum_ = new ::std::string;
  }
  return hddnum_;
}
inline ::std::string* BaseEquipInfo::release_hddnum() {
  clear_has_hddnum();
  if (hddnum_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hddnum_;
    hddnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string mac = 3;
inline bool BaseEquipInfo::has_mac() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BaseEquipInfo::set_has_mac() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BaseEquipInfo::clear_has_mac() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BaseEquipInfo::clear_mac() {
  if (mac_ != &::google::protobuf::internal::kEmptyString) {
    mac_->clear();
  }
  clear_has_mac();
}
inline const ::std::string& BaseEquipInfo::mac() const {
  return *mac_;
}
inline void BaseEquipInfo::set_mac(const ::std::string& value) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  mac_->assign(value);
}
inline void BaseEquipInfo::set_mac(const char* value) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  mac_->assign(value);
}
inline void BaseEquipInfo::set_mac(const char* value, size_t size) {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  mac_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BaseEquipInfo::mutable_mac() {
  set_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    mac_ = new ::std::string;
  }
  return mac_;
}
inline ::std::string* BaseEquipInfo::release_mac() {
  clear_has_mac();
  if (mac_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mac_;
    mac_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string hostname = 4;
inline bool BaseEquipInfo::has_hostname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BaseEquipInfo::set_has_hostname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BaseEquipInfo::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BaseEquipInfo::clear_hostname() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    hostname_->clear();
  }
  clear_has_hostname();
}
inline const ::std::string& BaseEquipInfo::hostname() const {
  return *hostname_;
}
inline void BaseEquipInfo::set_hostname(const ::std::string& value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void BaseEquipInfo::set_hostname(const char* value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void BaseEquipInfo::set_hostname(const char* value, size_t size) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BaseEquipInfo::mutable_hostname() {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  return hostname_;
}
inline ::std::string* BaseEquipInfo::release_hostname() {
  clear_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hostname_;
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string ip = 5;
inline bool BaseEquipInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BaseEquipInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BaseEquipInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BaseEquipInfo::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& BaseEquipInfo::ip() const {
  return *ip_;
}
inline void BaseEquipInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void BaseEquipInfo::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void BaseEquipInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BaseEquipInfo::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* BaseEquipInfo::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 equiptype = 6;
inline bool BaseEquipInfo::has_equiptype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BaseEquipInfo::set_has_equiptype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BaseEquipInfo::clear_has_equiptype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BaseEquipInfo::clear_equiptype() {
  equiptype_ = 0;
  clear_has_equiptype();
}
inline ::google::protobuf::int32 BaseEquipInfo::equiptype() const {
  return equiptype_;
}
inline void BaseEquipInfo::set_equiptype(::google::protobuf::int32 value) {
  set_has_equiptype();
  equiptype_ = value;
}

// optional int32 state = 7;
inline bool BaseEquipInfo::has_state() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BaseEquipInfo::set_has_state() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BaseEquipInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BaseEquipInfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 BaseEquipInfo::state() const {
  return state_;
}
inline void BaseEquipInfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional double createon = 8;
inline bool BaseEquipInfo::has_createon() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BaseEquipInfo::set_has_createon() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BaseEquipInfo::clear_has_createon() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BaseEquipInfo::clear_createon() {
  createon_ = 0;
  clear_has_createon();
}
inline double BaseEquipInfo::createon() const {
  return createon_;
}
inline void BaseEquipInfo::set_createon(double value) {
  set_has_createon();
  createon_ = value;
}

// optional double lasthwscanon = 9;
inline bool BaseEquipInfo::has_lasthwscanon() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BaseEquipInfo::set_has_lasthwscanon() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BaseEquipInfo::clear_has_lasthwscanon() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BaseEquipInfo::clear_lasthwscanon() {
  lasthwscanon_ = 0;
  clear_has_lasthwscanon();
}
inline double BaseEquipInfo::lasthwscanon() const {
  return lasthwscanon_;
}
inline void BaseEquipInfo::set_lasthwscanon(double value) {
  set_has_lasthwscanon();
  lasthwscanon_ = value;
}

// optional double lastswscanon = 10;
inline bool BaseEquipInfo::has_lastswscanon() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BaseEquipInfo::set_has_lastswscanon() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BaseEquipInfo::clear_has_lastswscanon() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BaseEquipInfo::clear_lastswscanon() {
  lastswscanon_ = 0;
  clear_has_lastswscanon();
}
inline double BaseEquipInfo::lastswscanon() const {
  return lastswscanon_;
}
inline void BaseEquipInfo::set_lastswscanon(double value) {
  set_has_lastswscanon();
  lastswscanon_ = value;
}

// optional int32 createby = 11;
inline bool BaseEquipInfo::has_createby() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BaseEquipInfo::set_has_createby() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BaseEquipInfo::clear_has_createby() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BaseEquipInfo::clear_createby() {
  createby_ = 0;
  clear_has_createby();
}
inline ::google::protobuf::int32 BaseEquipInfo::createby() const {
  return createby_;
}
inline void BaseEquipInfo::set_createby(::google::protobuf::int32 value) {
  set_has_createby();
  createby_ = value;
}

// optional int32 BindUserID = 12;
inline bool BaseEquipInfo::has_binduserid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BaseEquipInfo::set_has_binduserid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BaseEquipInfo::clear_has_binduserid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BaseEquipInfo::clear_binduserid() {
  binduserid_ = 0;
  clear_has_binduserid();
}
inline ::google::protobuf::int32 BaseEquipInfo::binduserid() const {
  return binduserid_;
}
inline void BaseEquipInfo::set_binduserid(::google::protobuf::int32 value) {
  set_has_binduserid();
  binduserid_ = value;
}

// optional int32 IsOnline = 13;
inline bool BaseEquipInfo::has_isonline() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BaseEquipInfo::set_has_isonline() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BaseEquipInfo::clear_has_isonline() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BaseEquipInfo::clear_isonline() {
  isonline_ = 0;
  clear_has_isonline();
}
inline ::google::protobuf::int32 BaseEquipInfo::isonline() const {
  return isonline_;
}
inline void BaseEquipInfo::set_isonline(::google::protobuf::int32 value) {
  set_has_isonline();
  isonline_ = value;
}

// -------------------------------------------------------------------

// BaseEquipInfoList

// repeated .isafetec.BaseEquipInfo list = 1;
inline int BaseEquipInfoList::list_size() const {
  return list_.size();
}
inline void BaseEquipInfoList::clear_list() {
  list_.Clear();
}
inline const ::isafetec::BaseEquipInfo& BaseEquipInfoList::list(int index) const {
  return list_.Get(index);
}
inline ::isafetec::BaseEquipInfo* BaseEquipInfoList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::isafetec::BaseEquipInfo* BaseEquipInfoList::list_ReleaseAt(int index) {
  return list_.ReleaseAt(index);
}
inline void BaseEquipInfoList::list_RemoveAt(int index) {
  list_.RemoveAt(index);
}
inline ::isafetec::BaseEquipInfo* BaseEquipInfoList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::BaseEquipInfo >&
BaseEquipInfoList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::BaseEquipInfo >*
BaseEquipInfoList::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// SimplePolicy

// required int32 type = 1;
inline bool SimplePolicy::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SimplePolicy::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SimplePolicy::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SimplePolicy::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 SimplePolicy::type() const {
  return type_;
}
inline void SimplePolicy::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 id = 2;
inline bool SimplePolicy::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SimplePolicy::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SimplePolicy::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SimplePolicy::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SimplePolicy::id() const {
  return id_;
}
inline void SimplePolicy::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional double last_time = 3;
inline bool SimplePolicy::has_last_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SimplePolicy::set_has_last_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SimplePolicy::clear_has_last_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SimplePolicy::clear_last_time() {
  last_time_ = 0;
  clear_has_last_time();
}
inline double SimplePolicy::last_time() const {
  return last_time_;
}
inline void SimplePolicy::set_last_time(double value) {
  set_has_last_time();
  last_time_ = value;
}

// optional int32 index = 4;
inline bool SimplePolicy::has_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SimplePolicy::set_has_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SimplePolicy::clear_has_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SimplePolicy::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 SimplePolicy::index() const {
  return index_;
}
inline void SimplePolicy::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// SimplePolicyList

// optional int32 type = 1;
inline bool SimplePolicyList::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SimplePolicyList::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SimplePolicyList::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SimplePolicyList::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 SimplePolicyList::type() const {
  return type_;
}
inline void SimplePolicyList::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// repeated .isafetec.SimplePolicy list = 2;
inline int SimplePolicyList::list_size() const {
  return list_.size();
}
inline void SimplePolicyList::clear_list() {
  list_.Clear();
}
inline const ::isafetec::SimplePolicy& SimplePolicyList::list(int index) const {
  return list_.Get(index);
}
inline ::isafetec::SimplePolicy* SimplePolicyList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::isafetec::SimplePolicy* SimplePolicyList::list_ReleaseAt(int index) {
  return list_.ReleaseAt(index);
}
inline void SimplePolicyList::list_RemoveAt(int index) {
  list_.RemoveAt(index);
}
inline ::isafetec::SimplePolicy* SimplePolicyList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::SimplePolicy >&
SimplePolicyList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::SimplePolicy >*
SimplePolicyList::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// TimeSpan

// optional int32 id = 1;
inline bool TimeSpan::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TimeSpan::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TimeSpan::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TimeSpan::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 TimeSpan::id() const {
  return id_;
}
inline void TimeSpan::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string timeDesc = 2;
inline bool TimeSpan::has_timedesc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TimeSpan::set_has_timedesc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TimeSpan::clear_has_timedesc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TimeSpan::clear_timedesc() {
  if (timedesc_ != &::google::protobuf::internal::kEmptyString) {
    timedesc_->clear();
  }
  clear_has_timedesc();
}
inline const ::std::string& TimeSpan::timedesc() const {
  return *timedesc_;
}
inline void TimeSpan::set_timedesc(const ::std::string& value) {
  set_has_timedesc();
  if (timedesc_ == &::google::protobuf::internal::kEmptyString) {
    timedesc_ = new ::std::string;
  }
  timedesc_->assign(value);
}
inline void TimeSpan::set_timedesc(const char* value) {
  set_has_timedesc();
  if (timedesc_ == &::google::protobuf::internal::kEmptyString) {
    timedesc_ = new ::std::string;
  }
  timedesc_->assign(value);
}
inline void TimeSpan::set_timedesc(const char* value, size_t size) {
  set_has_timedesc();
  if (timedesc_ == &::google::protobuf::internal::kEmptyString) {
    timedesc_ = new ::std::string;
  }
  timedesc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TimeSpan::mutable_timedesc() {
  set_has_timedesc();
  if (timedesc_ == &::google::protobuf::internal::kEmptyString) {
    timedesc_ = new ::std::string;
  }
  return timedesc_;
}
inline ::std::string* TimeSpan::release_timedesc() {
  clear_has_timedesc();
  if (timedesc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = timedesc_;
    timedesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional double begin_time = 3;
inline bool TimeSpan::has_begin_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TimeSpan::set_has_begin_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TimeSpan::clear_has_begin_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TimeSpan::clear_begin_time() {
  begin_time_ = 0;
  clear_has_begin_time();
}
inline double TimeSpan::begin_time() const {
  return begin_time_;
}
inline void TimeSpan::set_begin_time(double value) {
  set_has_begin_time();
  begin_time_ = value;
}

// optional double end_time = 4;
inline bool TimeSpan::has_end_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TimeSpan::set_has_end_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TimeSpan::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TimeSpan::clear_end_time() {
  end_time_ = 0;
  clear_has_end_time();
}
inline double TimeSpan::end_time() const {
  return end_time_;
}
inline void TimeSpan::set_end_time(double value) {
  set_has_end_time();
  end_time_ = value;
}

// -------------------------------------------------------------------

// TimeSpanList

// repeated .isafetec.TimeSpan list = 1;
inline int TimeSpanList::list_size() const {
  return list_.size();
}
inline void TimeSpanList::clear_list() {
  list_.Clear();
}
inline const ::isafetec::TimeSpan& TimeSpanList::list(int index) const {
  return list_.Get(index);
}
inline ::isafetec::TimeSpan* TimeSpanList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::isafetec::TimeSpan* TimeSpanList::list_ReleaseAt(int index) {
  return list_.ReleaseAt(index);
}
inline void TimeSpanList::list_RemoveAt(int index) {
  list_.RemoveAt(index);
}
inline ::isafetec::TimeSpan* TimeSpanList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::TimeSpan >&
TimeSpanList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::TimeSpan >*
TimeSpanList::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// ClientSpan

// required int32 type = 1;
inline bool ClientSpan::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientSpan::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientSpan::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientSpan::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ClientSpan::type() const {
  return type_;
}
inline void ClientSpan::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required uint32 id = 2;
inline bool ClientSpan::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientSpan::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientSpan::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientSpan::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ClientSpan::id() const {
  return id_;
}
inline void ClientSpan::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 policyid = 3;
inline bool ClientSpan::has_policyid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientSpan::set_has_policyid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClientSpan::clear_has_policyid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClientSpan::clear_policyid() {
  policyid_ = 0;
  clear_has_policyid();
}
inline ::google::protobuf::int32 ClientSpan::policyid() const {
  return policyid_;
}
inline void ClientSpan::set_policyid(::google::protobuf::int32 value) {
  set_has_policyid();
  policyid_ = value;
}

// optional int32 orderindex = 4;
inline bool ClientSpan::has_orderindex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClientSpan::set_has_orderindex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClientSpan::clear_has_orderindex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClientSpan::clear_orderindex() {
  orderindex_ = 0;
  clear_has_orderindex();
}
inline ::google::protobuf::int32 ClientSpan::orderindex() const {
  return orderindex_;
}
inline void ClientSpan::set_orderindex(::google::protobuf::int32 value) {
  set_has_orderindex();
  orderindex_ = value;
}

// optional int32 isinherit = 5;
inline bool ClientSpan::has_isinherit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClientSpan::set_has_isinherit() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ClientSpan::clear_has_isinherit() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ClientSpan::clear_isinherit() {
  isinherit_ = 0;
  clear_has_isinherit();
}
inline ::google::protobuf::int32 ClientSpan::isinherit() const {
  return isinherit_;
}
inline void ClientSpan::set_isinherit(::google::protobuf::int32 value) {
  set_has_isinherit();
  isinherit_ = value;
}

// optional int32 allowedinherit = 6;
inline bool ClientSpan::has_allowedinherit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ClientSpan::set_has_allowedinherit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ClientSpan::clear_has_allowedinherit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ClientSpan::clear_allowedinherit() {
  allowedinherit_ = 0;
  clear_has_allowedinherit();
}
inline ::google::protobuf::int32 ClientSpan::allowedinherit() const {
  return allowedinherit_;
}
inline void ClientSpan::set_allowedinherit(::google::protobuf::int32 value) {
  set_has_allowedinherit();
  allowedinherit_ = value;
}

// -------------------------------------------------------------------

// ClientSpanList

// repeated .isafetec.ClientSpan list = 1;
inline int ClientSpanList::list_size() const {
  return list_.size();
}
inline void ClientSpanList::clear_list() {
  list_.Clear();
}
inline const ::isafetec::ClientSpan& ClientSpanList::list(int index) const {
  return list_.Get(index);
}
inline ::isafetec::ClientSpan* ClientSpanList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::isafetec::ClientSpan* ClientSpanList::list_ReleaseAt(int index) {
  return list_.ReleaseAt(index);
}
inline void ClientSpanList::list_RemoveAt(int index) {
  list_.RemoveAt(index);
}
inline ::isafetec::ClientSpan* ClientSpanList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::ClientSpan >&
ClientSpanList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::ClientSpan >*
ClientSpanList::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// SortType

// required int32 id = 1;
inline bool SortType::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SortType::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SortType::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SortType::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SortType::id() const {
  return id_;
}
inline void SortType::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 plyType = 2;
inline bool SortType::has_plytype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SortType::set_has_plytype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SortType::clear_has_plytype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SortType::clear_plytype() {
  plytype_ = 0;
  clear_has_plytype();
}
inline ::google::protobuf::int32 SortType::plytype() const {
  return plytype_;
}
inline void SortType::set_plytype(::google::protobuf::int32 value) {
  set_has_plytype();
  plytype_ = value;
}

// optional string TypeDesc = 3;
inline bool SortType::has_typedesc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SortType::set_has_typedesc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SortType::clear_has_typedesc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SortType::clear_typedesc() {
  if (typedesc_ != &::google::protobuf::internal::kEmptyString) {
    typedesc_->clear();
  }
  clear_has_typedesc();
}
inline const ::std::string& SortType::typedesc() const {
  return *typedesc_;
}
inline void SortType::set_typedesc(const ::std::string& value) {
  set_has_typedesc();
  if (typedesc_ == &::google::protobuf::internal::kEmptyString) {
    typedesc_ = new ::std::string;
  }
  typedesc_->assign(value);
}
inline void SortType::set_typedesc(const char* value) {
  set_has_typedesc();
  if (typedesc_ == &::google::protobuf::internal::kEmptyString) {
    typedesc_ = new ::std::string;
  }
  typedesc_->assign(value);
}
inline void SortType::set_typedesc(const char* value, size_t size) {
  set_has_typedesc();
  if (typedesc_ == &::google::protobuf::internal::kEmptyString) {
    typedesc_ = new ::std::string;
  }
  typedesc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SortType::mutable_typedesc() {
  set_has_typedesc();
  if (typedesc_ == &::google::protobuf::internal::kEmptyString) {
    typedesc_ = new ::std::string;
  }
  return typedesc_;
}
inline ::std::string* SortType::release_typedesc() {
  clear_has_typedesc();
  if (typedesc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = typedesc_;
    typedesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string ExeFileName = 4;
inline bool SortType::has_exefilename() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SortType::set_has_exefilename() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SortType::clear_has_exefilename() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SortType::clear_exefilename() {
  if (exefilename_ != &::google::protobuf::internal::kEmptyString) {
    exefilename_->clear();
  }
  clear_has_exefilename();
}
inline const ::std::string& SortType::exefilename() const {
  return *exefilename_;
}
inline void SortType::set_exefilename(const ::std::string& value) {
  set_has_exefilename();
  if (exefilename_ == &::google::protobuf::internal::kEmptyString) {
    exefilename_ = new ::std::string;
  }
  exefilename_->assign(value);
}
inline void SortType::set_exefilename(const char* value) {
  set_has_exefilename();
  if (exefilename_ == &::google::protobuf::internal::kEmptyString) {
    exefilename_ = new ::std::string;
  }
  exefilename_->assign(value);
}
inline void SortType::set_exefilename(const char* value, size_t size) {
  set_has_exefilename();
  if (exefilename_ == &::google::protobuf::internal::kEmptyString) {
    exefilename_ = new ::std::string;
  }
  exefilename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SortType::mutable_exefilename() {
  set_has_exefilename();
  if (exefilename_ == &::google::protobuf::internal::kEmptyString) {
    exefilename_ = new ::std::string;
  }
  return exefilename_;
}
inline ::std::string* SortType::release_exefilename() {
  clear_has_exefilename();
  if (exefilename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = exefilename_;
    exefilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 FilterType = 5;
inline bool SortType::has_filtertype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SortType::set_has_filtertype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SortType::clear_has_filtertype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SortType::clear_filtertype() {
  filtertype_ = 0;
  clear_has_filtertype();
}
inline ::google::protobuf::int32 SortType::filtertype() const {
  return filtertype_;
}
inline void SortType::set_filtertype(::google::protobuf::int32 value) {
  set_has_filtertype();
  filtertype_ = value;
}

// optional string FilterParam = 6;
inline bool SortType::has_filterparam() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SortType::set_has_filterparam() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SortType::clear_has_filterparam() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SortType::clear_filterparam() {
  if (filterparam_ != &::google::protobuf::internal::kEmptyString) {
    filterparam_->clear();
  }
  clear_has_filterparam();
}
inline const ::std::string& SortType::filterparam() const {
  return *filterparam_;
}
inline void SortType::set_filterparam(const ::std::string& value) {
  set_has_filterparam();
  if (filterparam_ == &::google::protobuf::internal::kEmptyString) {
    filterparam_ = new ::std::string;
  }
  filterparam_->assign(value);
}
inline void SortType::set_filterparam(const char* value) {
  set_has_filterparam();
  if (filterparam_ == &::google::protobuf::internal::kEmptyString) {
    filterparam_ = new ::std::string;
  }
  filterparam_->assign(value);
}
inline void SortType::set_filterparam(const char* value, size_t size) {
  set_has_filterparam();
  if (filterparam_ == &::google::protobuf::internal::kEmptyString) {
    filterparam_ = new ::std::string;
  }
  filterparam_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SortType::mutable_filterparam() {
  set_has_filterparam();
  if (filterparam_ == &::google::protobuf::internal::kEmptyString) {
    filterparam_ = new ::std::string;
  }
  return filterparam_;
}
inline ::std::string* SortType::release_filterparam() {
  clear_has_filterparam();
  if (filterparam_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filterparam_;
    filterparam_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 modetype = 7;
inline bool SortType::has_modetype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SortType::set_has_modetype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SortType::clear_has_modetype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SortType::clear_modetype() {
  modetype_ = 0;
  clear_has_modetype();
}
inline ::google::protobuf::int32 SortType::modetype() const {
  return modetype_;
}
inline void SortType::set_modetype(::google::protobuf::int32 value) {
  set_has_modetype();
  modetype_ = value;
}

// optional int32 fileopType = 8;
inline bool SortType::has_fileoptype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SortType::set_has_fileoptype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SortType::clear_has_fileoptype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SortType::clear_fileoptype() {
  fileoptype_ = 0;
  clear_has_fileoptype();
}
inline ::google::protobuf::int32 SortType::fileoptype() const {
  return fileoptype_;
}
inline void SortType::set_fileoptype(::google::protobuf::int32 value) {
  set_has_fileoptype();
  fileoptype_ = value;
}

// -------------------------------------------------------------------

// SortTypeList

// repeated .isafetec.SortType list = 1;
inline int SortTypeList::list_size() const {
  return list_.size();
}
inline void SortTypeList::clear_list() {
  list_.Clear();
}
inline const ::isafetec::SortType& SortTypeList::list(int index) const {
  return list_.Get(index);
}
inline ::isafetec::SortType* SortTypeList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::isafetec::SortType* SortTypeList::list_ReleaseAt(int index) {
  return list_.ReleaseAt(index);
}
inline void SortTypeList::list_RemoveAt(int index) {
  list_.RemoveAt(index);
}
inline ::isafetec::SortType* SortTypeList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::SortType >&
SortTypeList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::SortType >*
SortTypeList::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// RelationShip

// required int32 SortTypeID = 1;
inline bool RelationShip::has_sorttypeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RelationShip::set_has_sorttypeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RelationShip::clear_has_sorttypeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RelationShip::clear_sorttypeid() {
  sorttypeid_ = 0;
  clear_has_sorttypeid();
}
inline ::google::protobuf::int32 RelationShip::sorttypeid() const {
  return sorttypeid_;
}
inline void RelationShip::set_sorttypeid(::google::protobuf::int32 value) {
  set_has_sorttypeid();
  sorttypeid_ = value;
}

// required int32 InofID = 2;
inline bool RelationShip::has_inofid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RelationShip::set_has_inofid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RelationShip::clear_has_inofid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RelationShip::clear_inofid() {
  inofid_ = 0;
  clear_has_inofid();
}
inline ::google::protobuf::int32 RelationShip::inofid() const {
  return inofid_;
}
inline void RelationShip::set_inofid(::google::protobuf::int32 value) {
  set_has_inofid();
  inofid_ = value;
}

// -------------------------------------------------------------------

// RelationShipList

// repeated .isafetec.RelationShip list = 1;
inline int RelationShipList::list_size() const {
  return list_.size();
}
inline void RelationShipList::clear_list() {
  list_.Clear();
}
inline const ::isafetec::RelationShip& RelationShipList::list(int index) const {
  return list_.Get(index);
}
inline ::isafetec::RelationShip* RelationShipList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::isafetec::RelationShip* RelationShipList::list_ReleaseAt(int index) {
  return list_.ReleaseAt(index);
}
inline void RelationShipList::list_RemoveAt(int index) {
  list_.RemoveAt(index);
}
inline ::isafetec::RelationShip* RelationShipList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::RelationShip >&
RelationShipList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::RelationShip >*
RelationShipList::mutable_list() {
  return &list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace isafetec

// @@protoc_insertion_point(global_scope)
