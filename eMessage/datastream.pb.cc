// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "datastream.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace isafetec {

namespace {

const ::google::protobuf::Descriptor* datastream_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  datastream_reflection_ = NULL;
const ::google::protobuf::Descriptor* MangerLogon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MangerLogon_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdoConnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdoConnect_reflection_ = NULL;
const ::google::protobuf::Descriptor* MangerCheckUserResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MangerCheckUserResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqLogFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqLogFile_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqLogFileList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqLogFileList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PolicyChanged_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PolicyChanged_reflection_ = NULL;
const ::google::protobuf::Descriptor* OnlineCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OnlineCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* OnlineCmdList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OnlineCmdList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CltLogon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CltLogon_reflection_ = NULL;
const ::google::protobuf::Descriptor* CltCheckUserResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CltCheckUserResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* CltLocalCongfigInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CltLocalCongfigInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProductInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProductInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MgrSubscribeEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MgrSubscribeEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* MgrSubscribeEventList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MgrSubscribeEventList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ONLINE_CMD_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* UserLogonType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_datastream_2eproto() {
  protobuf_AddDesc_datastream_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "datastream.proto");
  GOOGLE_CHECK(file != NULL);
  datastream_descriptor_ = file->message_type(0);
  static const int datastream_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(datastream, col_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(datastream, row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(datastream, val_),
  };
  datastream_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      datastream_descriptor_,
      datastream::default_instance_,
      datastream_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(datastream, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(datastream, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(datastream));
  MangerLogon_descriptor_ = file->message_type(1);
  static const int MangerLogon_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MangerLogon, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MangerLogon, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MangerLogon, pwd_),
  };
  MangerLogon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MangerLogon_descriptor_,
      MangerLogon::default_instance_,
      MangerLogon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MangerLogon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MangerLogon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MangerLogon));
  AdoConnect_descriptor_ = file->message_type(2);
  static const int AdoConnect_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdoConnect, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdoConnect, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdoConnect, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdoConnect, pwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdoConnect, db_),
  };
  AdoConnect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdoConnect_descriptor_,
      AdoConnect::default_instance_,
      AdoConnect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdoConnect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdoConnect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdoConnect));
  MangerCheckUserResult_descriptor_ = file->message_type(3);
  static const int MangerCheckUserResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MangerCheckUserResult, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MangerCheckUserResult, ado_),
  };
  MangerCheckUserResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MangerCheckUserResult_descriptor_,
      MangerCheckUserResult::default_instance_,
      MangerCheckUserResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MangerCheckUserResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MangerCheckUserResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MangerCheckUserResult));
  ReqLogFile_descriptor_ = file->message_type(4);
  static const int ReqLogFile_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogFile, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogFile, path_),
  };
  ReqLogFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqLogFile_descriptor_,
      ReqLogFile::default_instance_,
      ReqLogFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqLogFile));
  ReqLogFileList_descriptor_ = file->message_type(5);
  static const int ReqLogFileList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogFileList, list_),
  };
  ReqLogFileList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqLogFileList_descriptor_,
      ReqLogFileList::default_instance_,
      ReqLogFileList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogFileList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogFileList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqLogFileList));
  PolicyChanged_descriptor_ = file->message_type(6);
  static const int PolicyChanged_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyChanged, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyChanged, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyChanged, policyid_),
  };
  PolicyChanged_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PolicyChanged_descriptor_,
      PolicyChanged::default_instance_,
      PolicyChanged_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyChanged, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolicyChanged, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PolicyChanged));
  OnlineCmd_descriptor_ = file->message_type(7);
  static const int OnlineCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineCmd, msg_),
  };
  OnlineCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OnlineCmd_descriptor_,
      OnlineCmd::default_instance_,
      OnlineCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OnlineCmd));
  OnlineCmdList_descriptor_ = file->message_type(8);
  static const int OnlineCmdList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineCmdList, list_),
  };
  OnlineCmdList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OnlineCmdList_descriptor_,
      OnlineCmdList::default_instance_,
      OnlineCmdList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineCmdList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineCmdList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OnlineCmdList));
  CltLogon_descriptor_ = file->message_type(9);
  static const int CltLogon_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltLogon, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltLogon, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltLogon, pwd_),
  };
  CltLogon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CltLogon_descriptor_,
      CltLogon::default_instance_,
      CltLogon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltLogon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltLogon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CltLogon));
  CltCheckUserResult_descriptor_ = file->message_type(10);
  static const int CltCheckUserResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltCheckUserResult, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltCheckUserResult, role_type_),
  };
  CltCheckUserResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CltCheckUserResult_descriptor_,
      CltCheckUserResult::default_instance_,
      CltCheckUserResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltCheckUserResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltCheckUserResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CltCheckUserResult));
  CltLocalCongfigInfo_descriptor_ = file->message_type(11);
  static const int CltLocalCongfigInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltLocalCongfigInfo, product_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltLocalCongfigInfo, debug_log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltLocalCongfigInfo, net_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltLocalCongfigInfo, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltLocalCongfigInfo, user_name_),
  };
  CltLocalCongfigInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CltLocalCongfigInfo_descriptor_,
      CltLocalCongfigInfo::default_instance_,
      CltLocalCongfigInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltLocalCongfigInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CltLocalCongfigInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CltLocalCongfigInfo));
  ProductInfo_descriptor_ = file->message_type(12);
  static const int ProductInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductInfo, product_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductInfo, sub_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductInfo, demo_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductInfo, user_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductInfo, user_check_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductInfo, need_ui_process_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductInfo, logon_atonce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductInfo, version_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductInfo, ad_server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductInfo, other_server_),
  };
  ProductInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProductInfo_descriptor_,
      ProductInfo::default_instance_,
      ProductInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProductInfo));
  MgrSubscribeEvent_descriptor_ = file->message_type(13);
  static const int MgrSubscribeEvent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MgrSubscribeEvent, equip_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MgrSubscribeEvent, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MgrSubscribeEvent, event_mask_),
  };
  MgrSubscribeEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MgrSubscribeEvent_descriptor_,
      MgrSubscribeEvent::default_instance_,
      MgrSubscribeEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MgrSubscribeEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MgrSubscribeEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MgrSubscribeEvent));
  MgrSubscribeEventList_descriptor_ = file->message_type(14);
  static const int MgrSubscribeEventList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MgrSubscribeEventList, list_),
  };
  MgrSubscribeEventList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MgrSubscribeEventList_descriptor_,
      MgrSubscribeEventList::default_instance_,
      MgrSubscribeEventList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MgrSubscribeEventList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MgrSubscribeEventList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MgrSubscribeEventList));
  ONLINE_CMD_TYPE_descriptor_ = file->enum_type(0);
  UserLogonType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_datastream_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    datastream_descriptor_, &datastream::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MangerLogon_descriptor_, &MangerLogon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdoConnect_descriptor_, &AdoConnect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MangerCheckUserResult_descriptor_, &MangerCheckUserResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqLogFile_descriptor_, &ReqLogFile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqLogFileList_descriptor_, &ReqLogFileList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PolicyChanged_descriptor_, &PolicyChanged::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OnlineCmd_descriptor_, &OnlineCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OnlineCmdList_descriptor_, &OnlineCmdList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CltLogon_descriptor_, &CltLogon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CltCheckUserResult_descriptor_, &CltCheckUserResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CltLocalCongfigInfo_descriptor_, &CltLocalCongfigInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProductInfo_descriptor_, &ProductInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MgrSubscribeEvent_descriptor_, &MgrSubscribeEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MgrSubscribeEventList_descriptor_, &MgrSubscribeEventList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_datastream_2eproto() {
  delete datastream::default_instance_;
  delete datastream_reflection_;
  delete MangerLogon::default_instance_;
  delete MangerLogon_reflection_;
  delete AdoConnect::default_instance_;
  delete AdoConnect_reflection_;
  delete MangerCheckUserResult::default_instance_;
  delete MangerCheckUserResult_reflection_;
  delete ReqLogFile::default_instance_;
  delete ReqLogFile_reflection_;
  delete ReqLogFileList::default_instance_;
  delete ReqLogFileList_reflection_;
  delete PolicyChanged::default_instance_;
  delete PolicyChanged_reflection_;
  delete OnlineCmd::default_instance_;
  delete OnlineCmd_reflection_;
  delete OnlineCmdList::default_instance_;
  delete OnlineCmdList_reflection_;
  delete CltLogon::default_instance_;
  delete CltLogon_reflection_;
  delete CltCheckUserResult::default_instance_;
  delete CltCheckUserResult_reflection_;
  delete CltLocalCongfigInfo::default_instance_;
  delete CltLocalCongfigInfo_reflection_;
  delete ProductInfo::default_instance_;
  delete ProductInfo_reflection_;
  delete MgrSubscribeEvent::default_instance_;
  delete MgrSubscribeEvent_reflection_;
  delete MgrSubscribeEventList::default_instance_;
  delete MgrSubscribeEventList_reflection_;
}

void protobuf_AddDesc_datastream_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020datastream.proto\022\010isafetec\"3\n\ndatastre"
    "am\022\013\n\003col\030\001 \002(\005\022\013\n\003row\030\002 \002(\005\022\013\n\003val\030\003 \003("
    "\t\"4\n\013MangerLogon\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001"
    "(\t\022\013\n\003pwd\030\003 \001(\t\"M\n\nAdoConnect\022\n\n\002ip\030\001 \001("
    "\t\022\014\n\004port\030\002 \001(\t\022\014\n\004user\030\003 \001(\t\022\013\n\003pwd\030\004 \001"
    "(\t\022\n\n\002db\030\005 \001(\t\"F\n\025MangerCheckUserResult\022"
    "\n\n\002id\030\001 \001(\005\022!\n\003ado\030\002 \001(\0132\024.isafetec.AdoC"
    "onnect\"&\n\nReqLogFile\022\n\n\002id\030\001 \001(\005\022\014\n\004path"
    "\030\002 \001(\t\"4\n\016ReqLogFileList\022\"\n\004list\030\001 \003(\0132\024"
    ".isafetec.ReqLogFile\";\n\rPolicyChanged\022\n\n"
    "\002id\030\001 \003(\005\022\014\n\004type\030\002 \001(\005\022\020\n\010policyid\030\003 \001("
    "\005\"M\n\tOnlineCmd\022\n\n\002id\030\001 \001(\005\022\'\n\004type\030\002 \001(\016"
    "2\031.isafetec.ONLINE_CMD_TYPE\022\013\n\003msg\030\003 \001(\t"
    "\"2\n\rOnlineCmdList\022!\n\004list\030\001 \003(\0132\023.isafet"
    "ec.OnlineCmd\"1\n\010CltLogon\022\n\n\002id\030\001 \001(\005\022\014\n\004"
    "name\030\002 \001(\t\022\013\n\003pwd\030\003 \001(\t\"3\n\022CltCheckUserR"
    "esult\022\n\n\002id\030\001 \001(\005\022\021\n\trole_type\030\002 \001(\005\"u\n\023"
    "CltLocalCongfigInfo\022\024\n\014product_code\030\001 \001("
    "\005\022\021\n\tdebug_log\030\002 \001(\005\022\021\n\tnet_state\030\003 \001(\005\022"
    "\017\n\007user_id\030\004 \001(\005\022\021\n\tuser_name\030\005 \001(\t\"\377\001\n\013"
    "ProductInfo\022\024\n\014product_code\030\001 \001(\r\022\020\n\010sub"
    "_code\030\002 \001(\r\022\024\n\014demo_version\030\003 \001(\010\022\022\n\nuse"
    "r_count\030\004 \001(\005\0220\n\017user_check_type\030\005 \001(\0162\027"
    ".isafetec.UserLogonType\022\027\n\017need_ui_proce"
    "ss\030\006 \001(\010\022\024\n\014logon_atonce\030\007 \001(\010\022\024\n\014versio"
    "n_info\030\010 \001(\t\022\021\n\tad_server\030\t \001(\t\022\024\n\014other"
    "_server\030\n \001(\t\"J\n\021MgrSubscribeEvent\022\020\n\010eq"
    "uip_id\030\001 \001(\005\022\017\n\007user_id\030\002 \001(\005\022\022\n\nevent_m"
    "ask\030\003 \001(\r\"B\n\025MgrSubscribeEventList\022)\n\004li"
    "st\030\001 \003(\0132\033.isafetec.MgrSubscribeEvent*,\n"
    "\017ONLINE_CMD_TYPE\022\013\n\007CMD_TIP\020\000\022\014\n\010CMD_EXE"
    "C\020\001*T\n\rUserLogonType\022\014\n\010NO_CHECK\020\000\022\020\n\014CH"
    "ECK_BY_IST\020\001\022\017\n\013CHECK_BY_AD\020\002\022\022\n\016CHECK_B"
    "Y_OTHER\020\003", 1329);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "datastream.proto", &protobuf_RegisterTypes);
  datastream::default_instance_ = new datastream();
  MangerLogon::default_instance_ = new MangerLogon();
  AdoConnect::default_instance_ = new AdoConnect();
  MangerCheckUserResult::default_instance_ = new MangerCheckUserResult();
  ReqLogFile::default_instance_ = new ReqLogFile();
  ReqLogFileList::default_instance_ = new ReqLogFileList();
  PolicyChanged::default_instance_ = new PolicyChanged();
  OnlineCmd::default_instance_ = new OnlineCmd();
  OnlineCmdList::default_instance_ = new OnlineCmdList();
  CltLogon::default_instance_ = new CltLogon();
  CltCheckUserResult::default_instance_ = new CltCheckUserResult();
  CltLocalCongfigInfo::default_instance_ = new CltLocalCongfigInfo();
  ProductInfo::default_instance_ = new ProductInfo();
  MgrSubscribeEvent::default_instance_ = new MgrSubscribeEvent();
  MgrSubscribeEventList::default_instance_ = new MgrSubscribeEventList();
  datastream::default_instance_->InitAsDefaultInstance();
  MangerLogon::default_instance_->InitAsDefaultInstance();
  AdoConnect::default_instance_->InitAsDefaultInstance();
  MangerCheckUserResult::default_instance_->InitAsDefaultInstance();
  ReqLogFile::default_instance_->InitAsDefaultInstance();
  ReqLogFileList::default_instance_->InitAsDefaultInstance();
  PolicyChanged::default_instance_->InitAsDefaultInstance();
  OnlineCmd::default_instance_->InitAsDefaultInstance();
  OnlineCmdList::default_instance_->InitAsDefaultInstance();
  CltLogon::default_instance_->InitAsDefaultInstance();
  CltCheckUserResult::default_instance_->InitAsDefaultInstance();
  CltLocalCongfigInfo::default_instance_->InitAsDefaultInstance();
  ProductInfo::default_instance_->InitAsDefaultInstance();
  MgrSubscribeEvent::default_instance_->InitAsDefaultInstance();
  MgrSubscribeEventList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_datastream_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_datastream_2eproto {
  StaticDescriptorInitializer_datastream_2eproto() {
    protobuf_AddDesc_datastream_2eproto();
  }
} static_descriptor_initializer_datastream_2eproto_;

const ::google::protobuf::EnumDescriptor* ONLINE_CMD_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ONLINE_CMD_TYPE_descriptor_;
}
bool ONLINE_CMD_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UserLogonType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserLogonType_descriptor_;
}
bool UserLogonType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int datastream::kColFieldNumber;
const int datastream::kRowFieldNumber;
const int datastream::kValFieldNumber;
#endif  // !_MSC_VER

datastream::datastream()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void datastream::InitAsDefaultInstance() {
}

datastream::datastream(const datastream& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void datastream::SharedCtor() {
  _cached_size_ = 0;
  col_ = 0;
  row_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

datastream::~datastream() {
  SharedDtor();
}

void datastream::SharedDtor() {
  if (this != default_instance_) {
  }
}

void datastream::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* datastream::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return datastream_descriptor_;
}

const datastream& datastream::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datastream_2eproto();  return *default_instance_;
}

datastream* datastream::default_instance_ = NULL;

datastream* datastream::New() const {
  return new datastream;
}

void datastream::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    col_ = 0;
    row_ = 0;
  }
  val_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool datastream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 col = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &col_)));
          set_has_col();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_row;
        break;
      }
      
      // required int32 row = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_row:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_)));
          set_has_row();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_val;
        break;
      }
      
      // repeated string val = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_val:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_val()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->val(0).data(), this->val(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_val;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void datastream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 col = 1;
  if (has_col()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->col(), output);
  }
  
  // required int32 row = 2;
  if (has_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->row(), output);
  }
  
  // repeated string val = 3;
  for (int i = 0; i < this->val_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->val(i).data(), this->val(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->val(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* datastream::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 col = 1;
  if (has_col()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->col(), target);
  }
  
  // required int32 row = 2;
  if (has_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->row(), target);
  }
  
  // repeated string val = 3;
  for (int i = 0; i < this->val_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->val(i).data(), this->val(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->val(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int datastream::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 col = 1;
    if (has_col()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->col());
    }
    
    // required int32 row = 2;
    if (has_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->row());
    }
    
  }
  // repeated string val = 3;
  total_size += 1 * this->val_size();
  for (int i = 0; i < this->val_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->val(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void datastream::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const datastream* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const datastream*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void datastream::MergeFrom(const datastream& from) {
  GOOGLE_CHECK_NE(&from, this);
  val_.MergeFrom(from.val_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_col()) {
      set_col(from.col());
    }
    if (from.has_row()) {
      set_row(from.row());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void datastream::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void datastream::CopyFrom(const datastream& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool datastream::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void datastream::Swap(datastream* other) {
  if (other != this) {
    std::swap(col_, other->col_);
    std::swap(row_, other->row_);
    val_.Swap(&other->val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata datastream::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = datastream_descriptor_;
  metadata.reflection = datastream_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MangerLogon::kIdFieldNumber;
const int MangerLogon::kNameFieldNumber;
const int MangerLogon::kPwdFieldNumber;
#endif  // !_MSC_VER

MangerLogon::MangerLogon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MangerLogon::InitAsDefaultInstance() {
}

MangerLogon::MangerLogon(const MangerLogon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MangerLogon::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MangerLogon::~MangerLogon() {
  SharedDtor();
}

void MangerLogon::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete pwd_;
  }
  if (this != default_instance_) {
  }
}

void MangerLogon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MangerLogon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MangerLogon_descriptor_;
}

const MangerLogon& MangerLogon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datastream_2eproto();  return *default_instance_;
}

MangerLogon* MangerLogon::default_instance_ = NULL;

MangerLogon* MangerLogon::New() const {
  return new MangerLogon;
}

void MangerLogon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_pwd()) {
      if (pwd_ != &::google::protobuf::internal::kEmptyString) {
        pwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MangerLogon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pwd;
        break;
      }
      
      // optional string pwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pwd().data(), this->pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MangerLogon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string pwd = 3;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pwd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MangerLogon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional string pwd = 3;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pwd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MangerLogon::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string pwd = 3;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MangerLogon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MangerLogon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MangerLogon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MangerLogon::MergeFrom(const MangerLogon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_pwd()) {
      set_pwd(from.pwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MangerLogon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MangerLogon::CopyFrom(const MangerLogon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MangerLogon::IsInitialized() const {
  
  return true;
}

void MangerLogon::Swap(MangerLogon* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(pwd_, other->pwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MangerLogon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MangerLogon_descriptor_;
  metadata.reflection = MangerLogon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AdoConnect::kIpFieldNumber;
const int AdoConnect::kPortFieldNumber;
const int AdoConnect::kUserFieldNumber;
const int AdoConnect::kPwdFieldNumber;
const int AdoConnect::kDbFieldNumber;
#endif  // !_MSC_VER

AdoConnect::AdoConnect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AdoConnect::InitAsDefaultInstance() {
}

AdoConnect::AdoConnect(const AdoConnect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AdoConnect::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  db_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdoConnect::~AdoConnect() {
  SharedDtor();
}

void AdoConnect::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    delete port_;
  }
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete pwd_;
  }
  if (db_ != &::google::protobuf::internal::kEmptyString) {
    delete db_;
  }
  if (this != default_instance_) {
  }
}

void AdoConnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdoConnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdoConnect_descriptor_;
}

const AdoConnect& AdoConnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datastream_2eproto();  return *default_instance_;
}

AdoConnect* AdoConnect::default_instance_ = NULL;

AdoConnect* AdoConnect::New() const {
  return new AdoConnect;
}

void AdoConnect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_port()) {
      if (port_ != &::google::protobuf::internal::kEmptyString) {
        port_->clear();
      }
    }
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_pwd()) {
      if (pwd_ != &::google::protobuf::internal::kEmptyString) {
        pwd_->clear();
      }
    }
    if (has_db()) {
      if (db_ != &::google::protobuf::internal::kEmptyString) {
        db_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdoConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_port;
        break;
      }
      
      // optional string port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_port:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->port().data(), this->port().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user;
        break;
      }
      
      // optional string user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pwd;
        break;
      }
      
      // optional string pwd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pwd().data(), this->pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_db;
        break;
      }
      
      // optional string db = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_db:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->db().data(), this->db().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AdoConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip(), output);
  }
  
  // optional string port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->port(), output);
  }
  
  // optional string user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user(), output);
  }
  
  // optional string pwd = 4;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->pwd(), output);
  }
  
  // optional string db = 5;
  if (has_db()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->db().data(), this->db().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->db(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AdoConnect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }
  
  // optional string port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->port(), target);
  }
  
  // optional string user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user(), target);
  }
  
  // optional string pwd = 4;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pwd(), target);
  }
  
  // optional string db = 5;
  if (has_db()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->db().data(), this->db().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->db(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AdoConnect::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // optional string port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->port());
    }
    
    // optional string user = 3;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }
    
    // optional string pwd = 4;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }
    
    // optional string db = 5;
    if (has_db()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->db());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdoConnect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdoConnect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdoConnect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdoConnect::MergeFrom(const AdoConnect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_pwd()) {
      set_pwd(from.pwd());
    }
    if (from.has_db()) {
      set_db(from.db());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdoConnect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdoConnect::CopyFrom(const AdoConnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdoConnect::IsInitialized() const {
  
  return true;
}

void AdoConnect::Swap(AdoConnect* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(user_, other->user_);
    std::swap(pwd_, other->pwd_);
    std::swap(db_, other->db_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdoConnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdoConnect_descriptor_;
  metadata.reflection = AdoConnect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MangerCheckUserResult::kIdFieldNumber;
const int MangerCheckUserResult::kAdoFieldNumber;
#endif  // !_MSC_VER

MangerCheckUserResult::MangerCheckUserResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MangerCheckUserResult::InitAsDefaultInstance() {
  ado_ = const_cast< ::isafetec::AdoConnect*>(&::isafetec::AdoConnect::default_instance());
}

MangerCheckUserResult::MangerCheckUserResult(const MangerCheckUserResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MangerCheckUserResult::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ado_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MangerCheckUserResult::~MangerCheckUserResult() {
  SharedDtor();
}

void MangerCheckUserResult::SharedDtor() {
  if (this != default_instance_) {
    delete ado_;
  }
}

void MangerCheckUserResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MangerCheckUserResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MangerCheckUserResult_descriptor_;
}

const MangerCheckUserResult& MangerCheckUserResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datastream_2eproto();  return *default_instance_;
}

MangerCheckUserResult* MangerCheckUserResult::default_instance_ = NULL;

MangerCheckUserResult* MangerCheckUserResult::New() const {
  return new MangerCheckUserResult;
}

void MangerCheckUserResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_ado()) {
      if (ado_ != NULL) ado_->::isafetec::AdoConnect::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MangerCheckUserResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ado;
        break;
      }
      
      // optional .isafetec.AdoConnect ado = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ado:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ado()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MangerCheckUserResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional .isafetec.AdoConnect ado = 2;
  if (has_ado()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ado(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MangerCheckUserResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional .isafetec.AdoConnect ado = 2;
  if (has_ado()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ado(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MangerCheckUserResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .isafetec.AdoConnect ado = 2;
    if (has_ado()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ado());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MangerCheckUserResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MangerCheckUserResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MangerCheckUserResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MangerCheckUserResult::MergeFrom(const MangerCheckUserResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ado()) {
      mutable_ado()->::isafetec::AdoConnect::MergeFrom(from.ado());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MangerCheckUserResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MangerCheckUserResult::CopyFrom(const MangerCheckUserResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MangerCheckUserResult::IsInitialized() const {
  
  return true;
}

void MangerCheckUserResult::Swap(MangerCheckUserResult* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ado_, other->ado_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MangerCheckUserResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MangerCheckUserResult_descriptor_;
  metadata.reflection = MangerCheckUserResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqLogFile::kIdFieldNumber;
const int ReqLogFile::kPathFieldNumber;
#endif  // !_MSC_VER

ReqLogFile::ReqLogFile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqLogFile::InitAsDefaultInstance() {
}

ReqLogFile::ReqLogFile(const ReqLogFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqLogFile::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqLogFile::~ReqLogFile() {
  SharedDtor();
}

void ReqLogFile::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void ReqLogFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLogFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLogFile_descriptor_;
}

const ReqLogFile& ReqLogFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datastream_2eproto();  return *default_instance_;
}

ReqLogFile* ReqLogFile::default_instance_ = NULL;

ReqLogFile* ReqLogFile::New() const {
  return new ReqLogFile;
}

void ReqLogFile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqLogFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }
      
      // optional string path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqLogFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqLogFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqLogFile::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLogFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqLogFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqLogFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqLogFile::MergeFrom(const ReqLogFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqLogFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLogFile::CopyFrom(const ReqLogFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLogFile::IsInitialized() const {
  
  return true;
}

void ReqLogFile::Swap(ReqLogFile* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqLogFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqLogFile_descriptor_;
  metadata.reflection = ReqLogFile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqLogFileList::kListFieldNumber;
#endif  // !_MSC_VER

ReqLogFileList::ReqLogFileList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqLogFileList::InitAsDefaultInstance() {
}

ReqLogFileList::ReqLogFileList(const ReqLogFileList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqLogFileList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqLogFileList::~ReqLogFileList() {
  SharedDtor();
}

void ReqLogFileList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqLogFileList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLogFileList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLogFileList_descriptor_;
}

const ReqLogFileList& ReqLogFileList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datastream_2eproto();  return *default_instance_;
}

ReqLogFileList* ReqLogFileList::default_instance_ = NULL;

ReqLogFileList* ReqLogFileList::New() const {
  return new ReqLogFileList;
}

void ReqLogFileList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqLogFileList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .isafetec.ReqLogFile list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqLogFileList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .isafetec.ReqLogFile list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqLogFileList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .isafetec.ReqLogFile list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqLogFileList::ByteSize() const {
  int total_size = 0;
  
  // repeated .isafetec.ReqLogFile list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLogFileList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqLogFileList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqLogFileList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqLogFileList::MergeFrom(const ReqLogFileList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqLogFileList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLogFileList::CopyFrom(const ReqLogFileList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLogFileList::IsInitialized() const {
  
  return true;
}

void ReqLogFileList::Swap(ReqLogFileList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqLogFileList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqLogFileList_descriptor_;
  metadata.reflection = ReqLogFileList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PolicyChanged::kIdFieldNumber;
const int PolicyChanged::kTypeFieldNumber;
const int PolicyChanged::kPolicyidFieldNumber;
#endif  // !_MSC_VER

PolicyChanged::PolicyChanged()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PolicyChanged::InitAsDefaultInstance() {
}

PolicyChanged::PolicyChanged(const PolicyChanged& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PolicyChanged::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  policyid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PolicyChanged::~PolicyChanged() {
  SharedDtor();
}

void PolicyChanged::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PolicyChanged::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PolicyChanged::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PolicyChanged_descriptor_;
}

const PolicyChanged& PolicyChanged::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datastream_2eproto();  return *default_instance_;
}

PolicyChanged* PolicyChanged::default_instance_ = NULL;

PolicyChanged* PolicyChanged::New() const {
  return new PolicyChanged;
}

void PolicyChanged::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    type_ = 0;
    policyid_ = 0;
  }
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PolicyChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_id;
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_policyid;
        break;
      }
      
      // optional int32 policyid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_policyid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &policyid_)));
          set_has_policyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PolicyChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->id(i), output);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  // optional int32 policyid = 3;
  if (has_policyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->policyid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PolicyChanged::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->id(i), target);
  }
  
  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  // optional int32 policyid = 3;
  if (has_policyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->policyid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PolicyChanged::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int32 policyid = 3;
    if (has_policyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->policyid());
    }
    
  }
  // repeated int32 id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PolicyChanged::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PolicyChanged* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PolicyChanged*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PolicyChanged::MergeFrom(const PolicyChanged& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_policyid()) {
      set_policyid(from.policyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PolicyChanged::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PolicyChanged::CopyFrom(const PolicyChanged& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolicyChanged::IsInitialized() const {
  
  return true;
}

void PolicyChanged::Swap(PolicyChanged* other) {
  if (other != this) {
    id_.Swap(&other->id_);
    std::swap(type_, other->type_);
    std::swap(policyid_, other->policyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PolicyChanged::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PolicyChanged_descriptor_;
  metadata.reflection = PolicyChanged_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OnlineCmd::kIdFieldNumber;
const int OnlineCmd::kTypeFieldNumber;
const int OnlineCmd::kMsgFieldNumber;
#endif  // !_MSC_VER

OnlineCmd::OnlineCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OnlineCmd::InitAsDefaultInstance() {
}

OnlineCmd::OnlineCmd(const OnlineCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OnlineCmd::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OnlineCmd::~OnlineCmd() {
  SharedDtor();
}

void OnlineCmd::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void OnlineCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnlineCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OnlineCmd_descriptor_;
}

const OnlineCmd& OnlineCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datastream_2eproto();  return *default_instance_;
}

OnlineCmd* OnlineCmd::default_instance_ = NULL;

OnlineCmd* OnlineCmd::New() const {
  return new OnlineCmd;
}

void OnlineCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OnlineCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional .isafetec.ONLINE_CMD_TYPE type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::ONLINE_CMD_TYPE_IsValid(value)) {
            set_type(static_cast< isafetec::ONLINE_CMD_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }
      
      // optional string msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OnlineCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional .isafetec.ONLINE_CMD_TYPE type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  // optional string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OnlineCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional .isafetec.ONLINE_CMD_TYPE type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  // optional string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OnlineCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional .isafetec.ONLINE_CMD_TYPE type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional string msg = 3;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnlineCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OnlineCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OnlineCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OnlineCmd::MergeFrom(const OnlineCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OnlineCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnlineCmd::CopyFrom(const OnlineCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnlineCmd::IsInitialized() const {
  
  return true;
}

void OnlineCmd::Swap(OnlineCmd* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OnlineCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OnlineCmd_descriptor_;
  metadata.reflection = OnlineCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OnlineCmdList::kListFieldNumber;
#endif  // !_MSC_VER

OnlineCmdList::OnlineCmdList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OnlineCmdList::InitAsDefaultInstance() {
}

OnlineCmdList::OnlineCmdList(const OnlineCmdList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OnlineCmdList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OnlineCmdList::~OnlineCmdList() {
  SharedDtor();
}

void OnlineCmdList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OnlineCmdList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnlineCmdList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OnlineCmdList_descriptor_;
}

const OnlineCmdList& OnlineCmdList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datastream_2eproto();  return *default_instance_;
}

OnlineCmdList* OnlineCmdList::default_instance_ = NULL;

OnlineCmdList* OnlineCmdList::New() const {
  return new OnlineCmdList;
}

void OnlineCmdList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OnlineCmdList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .isafetec.OnlineCmd list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OnlineCmdList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .isafetec.OnlineCmd list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OnlineCmdList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .isafetec.OnlineCmd list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OnlineCmdList::ByteSize() const {
  int total_size = 0;
  
  // repeated .isafetec.OnlineCmd list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnlineCmdList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OnlineCmdList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OnlineCmdList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OnlineCmdList::MergeFrom(const OnlineCmdList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OnlineCmdList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnlineCmdList::CopyFrom(const OnlineCmdList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnlineCmdList::IsInitialized() const {
  
  return true;
}

void OnlineCmdList::Swap(OnlineCmdList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OnlineCmdList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OnlineCmdList_descriptor_;
  metadata.reflection = OnlineCmdList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CltLogon::kIdFieldNumber;
const int CltLogon::kNameFieldNumber;
const int CltLogon::kPwdFieldNumber;
#endif  // !_MSC_VER

CltLogon::CltLogon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CltLogon::InitAsDefaultInstance() {
}

CltLogon::CltLogon(const CltLogon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CltLogon::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CltLogon::~CltLogon() {
  SharedDtor();
}

void CltLogon::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete pwd_;
  }
  if (this != default_instance_) {
  }
}

void CltLogon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CltLogon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CltLogon_descriptor_;
}

const CltLogon& CltLogon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datastream_2eproto();  return *default_instance_;
}

CltLogon* CltLogon::default_instance_ = NULL;

CltLogon* CltLogon::New() const {
  return new CltLogon;
}

void CltLogon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_pwd()) {
      if (pwd_ != &::google::protobuf::internal::kEmptyString) {
        pwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CltLogon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pwd;
        break;
      }
      
      // optional string pwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pwd().data(), this->pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CltLogon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string pwd = 3;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pwd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CltLogon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional string pwd = 3;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pwd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CltLogon::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string pwd = 3;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CltLogon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CltLogon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CltLogon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CltLogon::MergeFrom(const CltLogon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_pwd()) {
      set_pwd(from.pwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CltLogon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CltLogon::CopyFrom(const CltLogon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CltLogon::IsInitialized() const {
  
  return true;
}

void CltLogon::Swap(CltLogon* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(pwd_, other->pwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CltLogon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CltLogon_descriptor_;
  metadata.reflection = CltLogon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CltCheckUserResult::kIdFieldNumber;
const int CltCheckUserResult::kRoleTypeFieldNumber;
#endif  // !_MSC_VER

CltCheckUserResult::CltCheckUserResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CltCheckUserResult::InitAsDefaultInstance() {
}

CltCheckUserResult::CltCheckUserResult(const CltCheckUserResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CltCheckUserResult::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  role_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CltCheckUserResult::~CltCheckUserResult() {
  SharedDtor();
}

void CltCheckUserResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CltCheckUserResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CltCheckUserResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CltCheckUserResult_descriptor_;
}

const CltCheckUserResult& CltCheckUserResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datastream_2eproto();  return *default_instance_;
}

CltCheckUserResult* CltCheckUserResult::default_instance_ = NULL;

CltCheckUserResult* CltCheckUserResult::New() const {
  return new CltCheckUserResult;
}

void CltCheckUserResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    role_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CltCheckUserResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_type;
        break;
      }
      
      // optional int32 role_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_type_)));
          set_has_role_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CltCheckUserResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 role_type = 2;
  if (has_role_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->role_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CltCheckUserResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 role_type = 2;
  if (has_role_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->role_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CltCheckUserResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 role_type = 2;
    if (has_role_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CltCheckUserResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CltCheckUserResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CltCheckUserResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CltCheckUserResult::MergeFrom(const CltCheckUserResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_role_type()) {
      set_role_type(from.role_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CltCheckUserResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CltCheckUserResult::CopyFrom(const CltCheckUserResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CltCheckUserResult::IsInitialized() const {
  
  return true;
}

void CltCheckUserResult::Swap(CltCheckUserResult* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(role_type_, other->role_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CltCheckUserResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CltCheckUserResult_descriptor_;
  metadata.reflection = CltCheckUserResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CltLocalCongfigInfo::kProductCodeFieldNumber;
const int CltLocalCongfigInfo::kDebugLogFieldNumber;
const int CltLocalCongfigInfo::kNetStateFieldNumber;
const int CltLocalCongfigInfo::kUserIdFieldNumber;
const int CltLocalCongfigInfo::kUserNameFieldNumber;
#endif  // !_MSC_VER

CltLocalCongfigInfo::CltLocalCongfigInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CltLocalCongfigInfo::InitAsDefaultInstance() {
}

CltLocalCongfigInfo::CltLocalCongfigInfo(const CltLocalCongfigInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CltLocalCongfigInfo::SharedCtor() {
  _cached_size_ = 0;
  product_code_ = 0;
  debug_log_ = 0;
  net_state_ = 0;
  user_id_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CltLocalCongfigInfo::~CltLocalCongfigInfo() {
  SharedDtor();
}

void CltLocalCongfigInfo::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (this != default_instance_) {
  }
}

void CltLocalCongfigInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CltLocalCongfigInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CltLocalCongfigInfo_descriptor_;
}

const CltLocalCongfigInfo& CltLocalCongfigInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datastream_2eproto();  return *default_instance_;
}

CltLocalCongfigInfo* CltLocalCongfigInfo::default_instance_ = NULL;

CltLocalCongfigInfo* CltLocalCongfigInfo::New() const {
  return new CltLocalCongfigInfo;
}

void CltLocalCongfigInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    product_code_ = 0;
    debug_log_ = 0;
    net_state_ = 0;
    user_id_ = 0;
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CltLocalCongfigInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 product_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &product_code_)));
          set_has_product_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_debug_log;
        break;
      }
      
      // optional int32 debug_log = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_debug_log:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &debug_log_)));
          set_has_debug_log();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_net_state;
        break;
      }
      
      // optional int32 net_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_net_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &net_state_)));
          set_has_net_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_user_id;
        break;
      }
      
      // optional int32 user_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_user_name;
        break;
      }
      
      // optional string user_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CltLocalCongfigInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 product_code = 1;
  if (has_product_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->product_code(), output);
  }
  
  // optional int32 debug_log = 2;
  if (has_debug_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->debug_log(), output);
  }
  
  // optional int32 net_state = 3;
  if (has_net_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->net_state(), output);
  }
  
  // optional int32 user_id = 4;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->user_id(), output);
  }
  
  // optional string user_name = 5;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->user_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CltLocalCongfigInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 product_code = 1;
  if (has_product_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->product_code(), target);
  }
  
  // optional int32 debug_log = 2;
  if (has_debug_log()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->debug_log(), target);
  }
  
  // optional int32 net_state = 3;
  if (has_net_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->net_state(), target);
  }
  
  // optional int32 user_id = 4;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->user_id(), target);
  }
  
  // optional string user_name = 5;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->user_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CltLocalCongfigInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 product_code = 1;
    if (has_product_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->product_code());
    }
    
    // optional int32 debug_log = 2;
    if (has_debug_log()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->debug_log());
    }
    
    // optional int32 net_state = 3;
    if (has_net_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->net_state());
    }
    
    // optional int32 user_id = 4;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }
    
    // optional string user_name = 5;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CltLocalCongfigInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CltLocalCongfigInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CltLocalCongfigInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CltLocalCongfigInfo::MergeFrom(const CltLocalCongfigInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_product_code()) {
      set_product_code(from.product_code());
    }
    if (from.has_debug_log()) {
      set_debug_log(from.debug_log());
    }
    if (from.has_net_state()) {
      set_net_state(from.net_state());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CltLocalCongfigInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CltLocalCongfigInfo::CopyFrom(const CltLocalCongfigInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CltLocalCongfigInfo::IsInitialized() const {
  
  return true;
}

void CltLocalCongfigInfo::Swap(CltLocalCongfigInfo* other) {
  if (other != this) {
    std::swap(product_code_, other->product_code_);
    std::swap(debug_log_, other->debug_log_);
    std::swap(net_state_, other->net_state_);
    std::swap(user_id_, other->user_id_);
    std::swap(user_name_, other->user_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CltLocalCongfigInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CltLocalCongfigInfo_descriptor_;
  metadata.reflection = CltLocalCongfigInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProductInfo::kProductCodeFieldNumber;
const int ProductInfo::kSubCodeFieldNumber;
const int ProductInfo::kDemoVersionFieldNumber;
const int ProductInfo::kUserCountFieldNumber;
const int ProductInfo::kUserCheckTypeFieldNumber;
const int ProductInfo::kNeedUiProcessFieldNumber;
const int ProductInfo::kLogonAtonceFieldNumber;
const int ProductInfo::kVersionInfoFieldNumber;
const int ProductInfo::kAdServerFieldNumber;
const int ProductInfo::kOtherServerFieldNumber;
#endif  // !_MSC_VER

ProductInfo::ProductInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProductInfo::InitAsDefaultInstance() {
}

ProductInfo::ProductInfo(const ProductInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProductInfo::SharedCtor() {
  _cached_size_ = 0;
  product_code_ = 0u;
  sub_code_ = 0u;
  demo_version_ = false;
  user_count_ = 0;
  user_check_type_ = 0;
  need_ui_process_ = false;
  logon_atonce_ = false;
  version_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ad_server_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  other_server_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProductInfo::~ProductInfo() {
  SharedDtor();
}

void ProductInfo::SharedDtor() {
  if (version_info_ != &::google::protobuf::internal::kEmptyString) {
    delete version_info_;
  }
  if (ad_server_ != &::google::protobuf::internal::kEmptyString) {
    delete ad_server_;
  }
  if (other_server_ != &::google::protobuf::internal::kEmptyString) {
    delete other_server_;
  }
  if (this != default_instance_) {
  }
}

void ProductInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProductInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProductInfo_descriptor_;
}

const ProductInfo& ProductInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datastream_2eproto();  return *default_instance_;
}

ProductInfo* ProductInfo::default_instance_ = NULL;

ProductInfo* ProductInfo::New() const {
  return new ProductInfo;
}

void ProductInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    product_code_ = 0u;
    sub_code_ = 0u;
    demo_version_ = false;
    user_count_ = 0;
    user_check_type_ = 0;
    need_ui_process_ = false;
    logon_atonce_ = false;
    if (has_version_info()) {
      if (version_info_ != &::google::protobuf::internal::kEmptyString) {
        version_info_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_ad_server()) {
      if (ad_server_ != &::google::protobuf::internal::kEmptyString) {
        ad_server_->clear();
      }
    }
    if (has_other_server()) {
      if (other_server_ != &::google::protobuf::internal::kEmptyString) {
        other_server_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProductInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 product_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &product_code_)));
          set_has_product_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sub_code;
        break;
      }
      
      // optional uint32 sub_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sub_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sub_code_)));
          set_has_sub_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_demo_version;
        break;
      }
      
      // optional bool demo_version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_demo_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &demo_version_)));
          set_has_demo_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_user_count;
        break;
      }
      
      // optional int32 user_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_count_)));
          set_has_user_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_user_check_type;
        break;
      }
      
      // optional .isafetec.UserLogonType user_check_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_check_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::UserLogonType_IsValid(value)) {
            set_user_check_type(static_cast< isafetec::UserLogonType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_need_ui_process;
        break;
      }
      
      // optional bool need_ui_process = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_ui_process:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_ui_process_)));
          set_has_need_ui_process();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_logon_atonce;
        break;
      }
      
      // optional bool logon_atonce = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logon_atonce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &logon_atonce_)));
          set_has_logon_atonce();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_version_info;
        break;
      }
      
      // optional string version_info = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version_info().data(), this->version_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_ad_server;
        break;
      }
      
      // optional string ad_server = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ad_server:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ad_server()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ad_server().data(), this->ad_server().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_other_server;
        break;
      }
      
      // optional string other_server = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_other_server:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_other_server()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->other_server().data(), this->other_server().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProductInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 product_code = 1;
  if (has_product_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->product_code(), output);
  }
  
  // optional uint32 sub_code = 2;
  if (has_sub_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sub_code(), output);
  }
  
  // optional bool demo_version = 3;
  if (has_demo_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->demo_version(), output);
  }
  
  // optional int32 user_count = 4;
  if (has_user_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->user_count(), output);
  }
  
  // optional .isafetec.UserLogonType user_check_type = 5;
  if (has_user_check_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->user_check_type(), output);
  }
  
  // optional bool need_ui_process = 6;
  if (has_need_ui_process()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->need_ui_process(), output);
  }
  
  // optional bool logon_atonce = 7;
  if (has_logon_atonce()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->logon_atonce(), output);
  }
  
  // optional string version_info = 8;
  if (has_version_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version_info().data(), this->version_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->version_info(), output);
  }
  
  // optional string ad_server = 9;
  if (has_ad_server()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ad_server().data(), this->ad_server().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->ad_server(), output);
  }
  
  // optional string other_server = 10;
  if (has_other_server()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->other_server().data(), this->other_server().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->other_server(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProductInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 product_code = 1;
  if (has_product_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->product_code(), target);
  }
  
  // optional uint32 sub_code = 2;
  if (has_sub_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sub_code(), target);
  }
  
  // optional bool demo_version = 3;
  if (has_demo_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->demo_version(), target);
  }
  
  // optional int32 user_count = 4;
  if (has_user_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->user_count(), target);
  }
  
  // optional .isafetec.UserLogonType user_check_type = 5;
  if (has_user_check_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->user_check_type(), target);
  }
  
  // optional bool need_ui_process = 6;
  if (has_need_ui_process()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->need_ui_process(), target);
  }
  
  // optional bool logon_atonce = 7;
  if (has_logon_atonce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->logon_atonce(), target);
  }
  
  // optional string version_info = 8;
  if (has_version_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version_info().data(), this->version_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->version_info(), target);
  }
  
  // optional string ad_server = 9;
  if (has_ad_server()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ad_server().data(), this->ad_server().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->ad_server(), target);
  }
  
  // optional string other_server = 10;
  if (has_other_server()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->other_server().data(), this->other_server().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->other_server(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProductInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 product_code = 1;
    if (has_product_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->product_code());
    }
    
    // optional uint32 sub_code = 2;
    if (has_sub_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sub_code());
    }
    
    // optional bool demo_version = 3;
    if (has_demo_version()) {
      total_size += 1 + 1;
    }
    
    // optional int32 user_count = 4;
    if (has_user_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_count());
    }
    
    // optional .isafetec.UserLogonType user_check_type = 5;
    if (has_user_check_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->user_check_type());
    }
    
    // optional bool need_ui_process = 6;
    if (has_need_ui_process()) {
      total_size += 1 + 1;
    }
    
    // optional bool logon_atonce = 7;
    if (has_logon_atonce()) {
      total_size += 1 + 1;
    }
    
    // optional string version_info = 8;
    if (has_version_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version_info());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string ad_server = 9;
    if (has_ad_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ad_server());
    }
    
    // optional string other_server = 10;
    if (has_other_server()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->other_server());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProductInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProductInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProductInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProductInfo::MergeFrom(const ProductInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_product_code()) {
      set_product_code(from.product_code());
    }
    if (from.has_sub_code()) {
      set_sub_code(from.sub_code());
    }
    if (from.has_demo_version()) {
      set_demo_version(from.demo_version());
    }
    if (from.has_user_count()) {
      set_user_count(from.user_count());
    }
    if (from.has_user_check_type()) {
      set_user_check_type(from.user_check_type());
    }
    if (from.has_need_ui_process()) {
      set_need_ui_process(from.need_ui_process());
    }
    if (from.has_logon_atonce()) {
      set_logon_atonce(from.logon_atonce());
    }
    if (from.has_version_info()) {
      set_version_info(from.version_info());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ad_server()) {
      set_ad_server(from.ad_server());
    }
    if (from.has_other_server()) {
      set_other_server(from.other_server());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProductInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProductInfo::CopyFrom(const ProductInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductInfo::IsInitialized() const {
  
  return true;
}

void ProductInfo::Swap(ProductInfo* other) {
  if (other != this) {
    std::swap(product_code_, other->product_code_);
    std::swap(sub_code_, other->sub_code_);
    std::swap(demo_version_, other->demo_version_);
    std::swap(user_count_, other->user_count_);
    std::swap(user_check_type_, other->user_check_type_);
    std::swap(need_ui_process_, other->need_ui_process_);
    std::swap(logon_atonce_, other->logon_atonce_);
    std::swap(version_info_, other->version_info_);
    std::swap(ad_server_, other->ad_server_);
    std::swap(other_server_, other->other_server_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProductInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProductInfo_descriptor_;
  metadata.reflection = ProductInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MgrSubscribeEvent::kEquipIdFieldNumber;
const int MgrSubscribeEvent::kUserIdFieldNumber;
const int MgrSubscribeEvent::kEventMaskFieldNumber;
#endif  // !_MSC_VER

MgrSubscribeEvent::MgrSubscribeEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MgrSubscribeEvent::InitAsDefaultInstance() {
}

MgrSubscribeEvent::MgrSubscribeEvent(const MgrSubscribeEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MgrSubscribeEvent::SharedCtor() {
  _cached_size_ = 0;
  equip_id_ = 0;
  user_id_ = 0;
  event_mask_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MgrSubscribeEvent::~MgrSubscribeEvent() {
  SharedDtor();
}

void MgrSubscribeEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MgrSubscribeEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MgrSubscribeEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MgrSubscribeEvent_descriptor_;
}

const MgrSubscribeEvent& MgrSubscribeEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datastream_2eproto();  return *default_instance_;
}

MgrSubscribeEvent* MgrSubscribeEvent::default_instance_ = NULL;

MgrSubscribeEvent* MgrSubscribeEvent::New() const {
  return new MgrSubscribeEvent;
}

void MgrSubscribeEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equip_id_ = 0;
    user_id_ = 0;
    event_mask_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MgrSubscribeEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 equip_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_id_)));
          set_has_equip_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }
      
      // optional int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_event_mask;
        break;
      }
      
      // optional uint32 event_mask = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_mask_)));
          set_has_event_mask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MgrSubscribeEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 equip_id = 1;
  if (has_equip_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->equip_id(), output);
  }
  
  // optional int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }
  
  // optional uint32 event_mask = 3;
  if (has_event_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->event_mask(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MgrSubscribeEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 equip_id = 1;
  if (has_equip_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->equip_id(), target);
  }
  
  // optional int32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }
  
  // optional uint32 event_mask = 3;
  if (has_event_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->event_mask(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MgrSubscribeEvent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 equip_id = 1;
    if (has_equip_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_id());
    }
    
    // optional int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }
    
    // optional uint32 event_mask = 3;
    if (has_event_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_mask());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MgrSubscribeEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MgrSubscribeEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MgrSubscribeEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MgrSubscribeEvent::MergeFrom(const MgrSubscribeEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_id()) {
      set_equip_id(from.equip_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_event_mask()) {
      set_event_mask(from.event_mask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MgrSubscribeEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MgrSubscribeEvent::CopyFrom(const MgrSubscribeEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MgrSubscribeEvent::IsInitialized() const {
  
  return true;
}

void MgrSubscribeEvent::Swap(MgrSubscribeEvent* other) {
  if (other != this) {
    std::swap(equip_id_, other->equip_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(event_mask_, other->event_mask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MgrSubscribeEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MgrSubscribeEvent_descriptor_;
  metadata.reflection = MgrSubscribeEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MgrSubscribeEventList::kListFieldNumber;
#endif  // !_MSC_VER

MgrSubscribeEventList::MgrSubscribeEventList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MgrSubscribeEventList::InitAsDefaultInstance() {
}

MgrSubscribeEventList::MgrSubscribeEventList(const MgrSubscribeEventList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MgrSubscribeEventList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MgrSubscribeEventList::~MgrSubscribeEventList() {
  SharedDtor();
}

void MgrSubscribeEventList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MgrSubscribeEventList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MgrSubscribeEventList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MgrSubscribeEventList_descriptor_;
}

const MgrSubscribeEventList& MgrSubscribeEventList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datastream_2eproto();  return *default_instance_;
}

MgrSubscribeEventList* MgrSubscribeEventList::default_instance_ = NULL;

MgrSubscribeEventList* MgrSubscribeEventList::New() const {
  return new MgrSubscribeEventList;
}

void MgrSubscribeEventList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MgrSubscribeEventList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .isafetec.MgrSubscribeEvent list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MgrSubscribeEventList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .isafetec.MgrSubscribeEvent list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MgrSubscribeEventList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .isafetec.MgrSubscribeEvent list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MgrSubscribeEventList::ByteSize() const {
  int total_size = 0;
  
  // repeated .isafetec.MgrSubscribeEvent list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MgrSubscribeEventList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MgrSubscribeEventList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MgrSubscribeEventList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MgrSubscribeEventList::MergeFrom(const MgrSubscribeEventList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MgrSubscribeEventList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MgrSubscribeEventList::CopyFrom(const MgrSubscribeEventList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MgrSubscribeEventList::IsInitialized() const {
  
  return true;
}

void MgrSubscribeEventList::Swap(MgrSubscribeEventList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MgrSubscribeEventList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MgrSubscribeEventList_descriptor_;
  metadata.reflection = MgrSubscribeEventList_reflection_;
  return metadata;
}

// datastream

// required int32 col = 1;
inline bool datastream::has_col() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void datastream::set_has_col() {
  _has_bits_[0] |= 0x00000001u;
}
inline void datastream::clear_has_col() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void datastream::clear_col() {
  col_ = 0;
  clear_has_col();
}
inline ::google::protobuf::int32 datastream::col() const {
  return col_;
}
inline void datastream::set_col(::google::protobuf::int32 value) {
  set_has_col();
  col_ = value;
}

// required int32 row = 2;
inline bool datastream::has_row() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void datastream::set_has_row() {
  _has_bits_[0] |= 0x00000002u;
}
inline void datastream::clear_has_row() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void datastream::clear_row() {
  row_ = 0;
  clear_has_row();
}
inline ::google::protobuf::int32 datastream::row() const {
  return row_;
}
inline void datastream::set_row(::google::protobuf::int32 value) {
  set_has_row();
  row_ = value;
}

// repeated string val = 3;
inline int datastream::val_size() const {
  return val_.size();
}
inline void datastream::clear_val() {
  val_.Clear();
}
inline const ::std::string& datastream::val(int index) const {
  return val_.Get(index);
}
inline ::std::string* datastream::mutable_val(int index) {
  return val_.Mutable(index);
}
inline void datastream::set_val(int index, const ::std::string& value) {
  val_.Mutable(index)->assign(value);
}
inline void datastream::set_val(int index, const char* value) {
  val_.Mutable(index)->assign(value);
}
inline void datastream::set_val(int index, const char* value, size_t size) {
  val_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* datastream::add_val() {
  return val_.Add();
}
inline void datastream::add_val(const ::std::string& value) {
  val_.Add()->assign(value);
}
inline void datastream::add_val(const char* value) {
  val_.Add()->assign(value);
}
inline void datastream::add_val(const char* value, size_t size) {
  val_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
datastream::val() const {
  return val_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
datastream::mutable_val() {
  return &val_;
}

// -------------------------------------------------------------------

// MangerLogon

// optional int32 id = 1;
inline bool MangerLogon::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MangerLogon::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MangerLogon::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MangerLogon::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 MangerLogon::id() const {
  return id_;
}
inline void MangerLogon::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool MangerLogon::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MangerLogon::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MangerLogon::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MangerLogon::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MangerLogon::name() const {
  return *name_;
}
inline void MangerLogon::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MangerLogon::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MangerLogon::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MangerLogon::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* MangerLogon::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string pwd = 3;
inline bool MangerLogon::has_pwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MangerLogon::set_has_pwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MangerLogon::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MangerLogon::clear_pwd() {
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    pwd_->clear();
  }
  clear_has_pwd();
}
inline const ::std::string& MangerLogon::pwd() const {
  return *pwd_;
}
inline void MangerLogon::set_pwd(const ::std::string& value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
}
inline void MangerLogon::set_pwd(const char* value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
}
inline void MangerLogon::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MangerLogon::mutable_pwd() {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  return pwd_;
}
inline ::std::string* MangerLogon::release_pwd() {
  clear_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pwd_;
    pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// AdoConnect

// optional string ip = 1;
inline bool AdoConnect::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdoConnect::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdoConnect::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdoConnect::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& AdoConnect::ip() const {
  return *ip_;
}
inline void AdoConnect::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void AdoConnect::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void AdoConnect::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdoConnect::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* AdoConnect::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string port = 2;
inline bool AdoConnect::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AdoConnect::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AdoConnect::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AdoConnect::clear_port() {
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    port_->clear();
  }
  clear_has_port();
}
inline const ::std::string& AdoConnect::port() const {
  return *port_;
}
inline void AdoConnect::set_port(const ::std::string& value) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(value);
}
inline void AdoConnect::set_port(const char* value) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(value);
}
inline void AdoConnect::set_port(const char* value, size_t size) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdoConnect::mutable_port() {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  return port_;
}
inline ::std::string* AdoConnect::release_port() {
  clear_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = port_;
    port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string user = 3;
inline bool AdoConnect::has_user() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AdoConnect::set_has_user() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AdoConnect::clear_has_user() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AdoConnect::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& AdoConnect::user() const {
  return *user_;
}
inline void AdoConnect::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void AdoConnect::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void AdoConnect::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdoConnect::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* AdoConnect::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string pwd = 4;
inline bool AdoConnect::has_pwd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AdoConnect::set_has_pwd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AdoConnect::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AdoConnect::clear_pwd() {
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    pwd_->clear();
  }
  clear_has_pwd();
}
inline const ::std::string& AdoConnect::pwd() const {
  return *pwd_;
}
inline void AdoConnect::set_pwd(const ::std::string& value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
}
inline void AdoConnect::set_pwd(const char* value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
}
inline void AdoConnect::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdoConnect::mutable_pwd() {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  return pwd_;
}
inline ::std::string* AdoConnect::release_pwd() {
  clear_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pwd_;
    pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string db = 5;
inline bool AdoConnect::has_db() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AdoConnect::set_has_db() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AdoConnect::clear_has_db() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AdoConnect::clear_db() {
  if (db_ != &::google::protobuf::internal::kEmptyString) {
    db_->clear();
  }
  clear_has_db();
}
inline const ::std::string& AdoConnect::db() const {
  return *db_;
}
inline void AdoConnect::set_db(const ::std::string& value) {
  set_has_db();
  if (db_ == &::google::protobuf::internal::kEmptyString) {
    db_ = new ::std::string;
  }
  db_->assign(value);
}
inline void AdoConnect::set_db(const char* value) {
  set_has_db();
  if (db_ == &::google::protobuf::internal::kEmptyString) {
    db_ = new ::std::string;
  }
  db_->assign(value);
}
inline void AdoConnect::set_db(const char* value, size_t size) {
  set_has_db();
  if (db_ == &::google::protobuf::internal::kEmptyString) {
    db_ = new ::std::string;
  }
  db_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdoConnect::mutable_db() {
  set_has_db();
  if (db_ == &::google::protobuf::internal::kEmptyString) {
    db_ = new ::std::string;
  }
  return db_;
}
inline ::std::string* AdoConnect::release_db() {
  clear_has_db();
  if (db_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = db_;
    db_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// MangerCheckUserResult

// optional int32 id = 1;
inline bool MangerCheckUserResult::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MangerCheckUserResult::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MangerCheckUserResult::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MangerCheckUserResult::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 MangerCheckUserResult::id() const {
  return id_;
}
inline void MangerCheckUserResult::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional .isafetec.AdoConnect ado = 2;
inline bool MangerCheckUserResult::has_ado() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MangerCheckUserResult::set_has_ado() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MangerCheckUserResult::clear_has_ado() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MangerCheckUserResult::clear_ado() {
  if (ado_ != NULL) ado_->::isafetec::AdoConnect::Clear();
  clear_has_ado();
}
inline const ::isafetec::AdoConnect& MangerCheckUserResult::ado() const {
  return ado_ != NULL ? *ado_ : *default_instance_->ado_;
}
inline ::isafetec::AdoConnect* MangerCheckUserResult::mutable_ado() {
  set_has_ado();
  if (ado_ == NULL) ado_ = new ::isafetec::AdoConnect;
  return ado_;
}
inline ::isafetec::AdoConnect* MangerCheckUserResult::release_ado() {
  clear_has_ado();
  ::isafetec::AdoConnect* temp = ado_;
  ado_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// ReqLogFile

// optional int32 id = 1;
inline bool ReqLogFile::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqLogFile::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqLogFile::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqLogFile::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ReqLogFile::id() const {
  return id_;
}
inline void ReqLogFile::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string path = 2;
inline bool ReqLogFile::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqLogFile::set_has_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqLogFile::clear_has_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqLogFile::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& ReqLogFile::path() const {
  return *path_;
}
inline void ReqLogFile::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void ReqLogFile::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void ReqLogFile::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqLogFile::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* ReqLogFile::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ReqLogFileList

// repeated .isafetec.ReqLogFile list = 1;
inline int ReqLogFileList::list_size() const {
  return list_.size();
}
inline void ReqLogFileList::clear_list() {
  list_.Clear();
}
inline const ::isafetec::ReqLogFile& ReqLogFileList::list(int index) const {
  return list_.Get(index);
}
inline ::isafetec::ReqLogFile* ReqLogFileList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::isafetec::ReqLogFile* ReqLogFileList::list_ReleaseAt(int index) {
  return list_.ReleaseAt(index);
}
inline void ReqLogFileList::list_RemoveAt(int index) {
  list_.RemoveAt(index);
}
inline ::isafetec::ReqLogFile* ReqLogFileList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::ReqLogFile >&
ReqLogFileList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::ReqLogFile >*
ReqLogFileList::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// PolicyChanged

// repeated int32 id = 1;
inline int PolicyChanged::id_size() const {
  return id_.size();
}
inline void PolicyChanged::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::int32 PolicyChanged::id(int index) const {
  return id_.Get(index);
}
inline void PolicyChanged::set_id(int index, ::google::protobuf::int32 value) {
  id_.Set(index, value);
}
inline void PolicyChanged::add_id(::google::protobuf::int32 value) {
  id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PolicyChanged::id() const {
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PolicyChanged::mutable_id() {
  return &id_;
}

// optional int32 type = 2;
inline bool PolicyChanged::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PolicyChanged::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PolicyChanged::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PolicyChanged::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 PolicyChanged::type() const {
  return type_;
}
inline void PolicyChanged::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 policyid = 3;
inline bool PolicyChanged::has_policyid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PolicyChanged::set_has_policyid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PolicyChanged::clear_has_policyid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PolicyChanged::clear_policyid() {
  policyid_ = 0;
  clear_has_policyid();
}
inline ::google::protobuf::int32 PolicyChanged::policyid() const {
  return policyid_;
}
inline void PolicyChanged::set_policyid(::google::protobuf::int32 value) {
  set_has_policyid();
  policyid_ = value;
}

// -------------------------------------------------------------------

// OnlineCmd

// optional int32 id = 1;
inline bool OnlineCmd::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OnlineCmd::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OnlineCmd::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OnlineCmd::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 OnlineCmd::id() const {
  return id_;
}
inline void OnlineCmd::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional .isafetec.ONLINE_CMD_TYPE type = 2;
inline bool OnlineCmd::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OnlineCmd::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OnlineCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OnlineCmd::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline isafetec::ONLINE_CMD_TYPE OnlineCmd::type() const {
  return static_cast< isafetec::ONLINE_CMD_TYPE >(type_);
}
inline void OnlineCmd::set_type(isafetec::ONLINE_CMD_TYPE value) {
  GOOGLE_DCHECK(isafetec::ONLINE_CMD_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string msg = 3;
inline bool OnlineCmd::has_msg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OnlineCmd::set_has_msg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OnlineCmd::clear_has_msg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OnlineCmd::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& OnlineCmd::msg() const {
  return *msg_;
}
inline void OnlineCmd::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void OnlineCmd::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void OnlineCmd::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OnlineCmd::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* OnlineCmd::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// OnlineCmdList

// repeated .isafetec.OnlineCmd list = 1;
inline int OnlineCmdList::list_size() const {
  return list_.size();
}
inline void OnlineCmdList::clear_list() {
  list_.Clear();
}
inline const ::isafetec::OnlineCmd& OnlineCmdList::list(int index) const {
  return list_.Get(index);
}
inline ::isafetec::OnlineCmd* OnlineCmdList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::isafetec::OnlineCmd* OnlineCmdList::list_ReleaseAt(int index) {
  return list_.ReleaseAt(index);
}
inline void OnlineCmdList::list_RemoveAt(int index) {
  list_.RemoveAt(index);
}
inline ::isafetec::OnlineCmd* OnlineCmdList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::OnlineCmd >&
OnlineCmdList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::OnlineCmd >*
OnlineCmdList::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// CltLogon

// optional int32 id = 1;
inline bool CltLogon::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CltLogon::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CltLogon::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CltLogon::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 CltLogon::id() const {
  return id_;
}
inline void CltLogon::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool CltLogon::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CltLogon::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CltLogon::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CltLogon::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CltLogon::name() const {
  return *name_;
}
inline void CltLogon::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CltLogon::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CltLogon::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CltLogon::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CltLogon::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string pwd = 3;
inline bool CltLogon::has_pwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CltLogon::set_has_pwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CltLogon::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CltLogon::clear_pwd() {
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    pwd_->clear();
  }
  clear_has_pwd();
}
inline const ::std::string& CltLogon::pwd() const {
  return *pwd_;
}
inline void CltLogon::set_pwd(const ::std::string& value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
}
inline void CltLogon::set_pwd(const char* value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
}
inline void CltLogon::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CltLogon::mutable_pwd() {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  return pwd_;
}
inline ::std::string* CltLogon::release_pwd() {
  clear_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pwd_;
    pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CltCheckUserResult

// optional int32 id = 1;
inline bool CltCheckUserResult::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CltCheckUserResult::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CltCheckUserResult::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CltCheckUserResult::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 CltCheckUserResult::id() const {
  return id_;
}
inline void CltCheckUserResult::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 role_type = 2;
inline bool CltCheckUserResult::has_role_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CltCheckUserResult::set_has_role_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CltCheckUserResult::clear_has_role_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CltCheckUserResult::clear_role_type() {
  role_type_ = 0;
  clear_has_role_type();
}
inline ::google::protobuf::int32 CltCheckUserResult::role_type() const {
  return role_type_;
}
inline void CltCheckUserResult::set_role_type(::google::protobuf::int32 value) {
  set_has_role_type();
  role_type_ = value;
}

// -------------------------------------------------------------------

// CltLocalCongfigInfo

// optional int32 product_code = 1;
inline bool CltLocalCongfigInfo::has_product_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CltLocalCongfigInfo::set_has_product_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CltLocalCongfigInfo::clear_has_product_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CltLocalCongfigInfo::clear_product_code() {
  product_code_ = 0;
  clear_has_product_code();
}
inline ::google::protobuf::int32 CltLocalCongfigInfo::product_code() const {
  return product_code_;
}
inline void CltLocalCongfigInfo::set_product_code(::google::protobuf::int32 value) {
  set_has_product_code();
  product_code_ = value;
}

// optional int32 debug_log = 2;
inline bool CltLocalCongfigInfo::has_debug_log() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CltLocalCongfigInfo::set_has_debug_log() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CltLocalCongfigInfo::clear_has_debug_log() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CltLocalCongfigInfo::clear_debug_log() {
  debug_log_ = 0;
  clear_has_debug_log();
}
inline ::google::protobuf::int32 CltLocalCongfigInfo::debug_log() const {
  return debug_log_;
}
inline void CltLocalCongfigInfo::set_debug_log(::google::protobuf::int32 value) {
  set_has_debug_log();
  debug_log_ = value;
}

// optional int32 net_state = 3;
inline bool CltLocalCongfigInfo::has_net_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CltLocalCongfigInfo::set_has_net_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CltLocalCongfigInfo::clear_has_net_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CltLocalCongfigInfo::clear_net_state() {
  net_state_ = 0;
  clear_has_net_state();
}
inline ::google::protobuf::int32 CltLocalCongfigInfo::net_state() const {
  return net_state_;
}
inline void CltLocalCongfigInfo::set_net_state(::google::protobuf::int32 value) {
  set_has_net_state();
  net_state_ = value;
}

// optional int32 user_id = 4;
inline bool CltLocalCongfigInfo::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CltLocalCongfigInfo::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CltLocalCongfigInfo::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CltLocalCongfigInfo::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 CltLocalCongfigInfo::user_id() const {
  return user_id_;
}
inline void CltLocalCongfigInfo::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional string user_name = 5;
inline bool CltLocalCongfigInfo::has_user_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CltLocalCongfigInfo::set_has_user_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CltLocalCongfigInfo::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CltLocalCongfigInfo::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& CltLocalCongfigInfo::user_name() const {
  return *user_name_;
}
inline void CltLocalCongfigInfo::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void CltLocalCongfigInfo::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void CltLocalCongfigInfo::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CltLocalCongfigInfo::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* CltLocalCongfigInfo::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ProductInfo

// optional uint32 product_code = 1;
inline bool ProductInfo::has_product_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProductInfo::set_has_product_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProductInfo::clear_has_product_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProductInfo::clear_product_code() {
  product_code_ = 0u;
  clear_has_product_code();
}
inline ::google::protobuf::uint32 ProductInfo::product_code() const {
  return product_code_;
}
inline void ProductInfo::set_product_code(::google::protobuf::uint32 value) {
  set_has_product_code();
  product_code_ = value;
}

// optional uint32 sub_code = 2;
inline bool ProductInfo::has_sub_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProductInfo::set_has_sub_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProductInfo::clear_has_sub_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProductInfo::clear_sub_code() {
  sub_code_ = 0u;
  clear_has_sub_code();
}
inline ::google::protobuf::uint32 ProductInfo::sub_code() const {
  return sub_code_;
}
inline void ProductInfo::set_sub_code(::google::protobuf::uint32 value) {
  set_has_sub_code();
  sub_code_ = value;
}

// optional bool demo_version = 3;
inline bool ProductInfo::has_demo_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProductInfo::set_has_demo_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProductInfo::clear_has_demo_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProductInfo::clear_demo_version() {
  demo_version_ = false;
  clear_has_demo_version();
}
inline bool ProductInfo::demo_version() const {
  return demo_version_;
}
inline void ProductInfo::set_demo_version(bool value) {
  set_has_demo_version();
  demo_version_ = value;
}

// optional int32 user_count = 4;
inline bool ProductInfo::has_user_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProductInfo::set_has_user_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProductInfo::clear_has_user_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProductInfo::clear_user_count() {
  user_count_ = 0;
  clear_has_user_count();
}
inline ::google::protobuf::int32 ProductInfo::user_count() const {
  return user_count_;
}
inline void ProductInfo::set_user_count(::google::protobuf::int32 value) {
  set_has_user_count();
  user_count_ = value;
}

// optional .isafetec.UserLogonType user_check_type = 5;
inline bool ProductInfo::has_user_check_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProductInfo::set_has_user_check_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProductInfo::clear_has_user_check_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProductInfo::clear_user_check_type() {
  user_check_type_ = 0;
  clear_has_user_check_type();
}
inline isafetec::UserLogonType ProductInfo::user_check_type() const {
  return static_cast< isafetec::UserLogonType >(user_check_type_);
}
inline void ProductInfo::set_user_check_type(isafetec::UserLogonType value) {
  GOOGLE_DCHECK(isafetec::UserLogonType_IsValid(value));
  set_has_user_check_type();
  user_check_type_ = value;
}

// optional bool need_ui_process = 6;
inline bool ProductInfo::has_need_ui_process() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProductInfo::set_has_need_ui_process() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProductInfo::clear_has_need_ui_process() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProductInfo::clear_need_ui_process() {
  need_ui_process_ = false;
  clear_has_need_ui_process();
}
inline bool ProductInfo::need_ui_process() const {
  return need_ui_process_;
}
inline void ProductInfo::set_need_ui_process(bool value) {
  set_has_need_ui_process();
  need_ui_process_ = value;
}

// optional bool logon_atonce = 7;
inline bool ProductInfo::has_logon_atonce() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProductInfo::set_has_logon_atonce() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProductInfo::clear_has_logon_atonce() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProductInfo::clear_logon_atonce() {
  logon_atonce_ = false;
  clear_has_logon_atonce();
}
inline bool ProductInfo::logon_atonce() const {
  return logon_atonce_;
}
inline void ProductInfo::set_logon_atonce(bool value) {
  set_has_logon_atonce();
  logon_atonce_ = value;
}

// optional string version_info = 8;
inline bool ProductInfo::has_version_info() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProductInfo::set_has_version_info() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProductInfo::clear_has_version_info() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProductInfo::clear_version_info() {
  if (version_info_ != &::google::protobuf::internal::kEmptyString) {
    version_info_->clear();
  }
  clear_has_version_info();
}
inline const ::std::string& ProductInfo::version_info() const {
  return *version_info_;
}
inline void ProductInfo::set_version_info(const ::std::string& value) {
  set_has_version_info();
  if (version_info_ == &::google::protobuf::internal::kEmptyString) {
    version_info_ = new ::std::string;
  }
  version_info_->assign(value);
}
inline void ProductInfo::set_version_info(const char* value) {
  set_has_version_info();
  if (version_info_ == &::google::protobuf::internal::kEmptyString) {
    version_info_ = new ::std::string;
  }
  version_info_->assign(value);
}
inline void ProductInfo::set_version_info(const char* value, size_t size) {
  set_has_version_info();
  if (version_info_ == &::google::protobuf::internal::kEmptyString) {
    version_info_ = new ::std::string;
  }
  version_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProductInfo::mutable_version_info() {
  set_has_version_info();
  if (version_info_ == &::google::protobuf::internal::kEmptyString) {
    version_info_ = new ::std::string;
  }
  return version_info_;
}
inline ::std::string* ProductInfo::release_version_info() {
  clear_has_version_info();
  if (version_info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = version_info_;
    version_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string ad_server = 9;
inline bool ProductInfo::has_ad_server() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProductInfo::set_has_ad_server() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProductInfo::clear_has_ad_server() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProductInfo::clear_ad_server() {
  if (ad_server_ != &::google::protobuf::internal::kEmptyString) {
    ad_server_->clear();
  }
  clear_has_ad_server();
}
inline const ::std::string& ProductInfo::ad_server() const {
  return *ad_server_;
}
inline void ProductInfo::set_ad_server(const ::std::string& value) {
  set_has_ad_server();
  if (ad_server_ == &::google::protobuf::internal::kEmptyString) {
    ad_server_ = new ::std::string;
  }
  ad_server_->assign(value);
}
inline void ProductInfo::set_ad_server(const char* value) {
  set_has_ad_server();
  if (ad_server_ == &::google::protobuf::internal::kEmptyString) {
    ad_server_ = new ::std::string;
  }
  ad_server_->assign(value);
}
inline void ProductInfo::set_ad_server(const char* value, size_t size) {
  set_has_ad_server();
  if (ad_server_ == &::google::protobuf::internal::kEmptyString) {
    ad_server_ = new ::std::string;
  }
  ad_server_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProductInfo::mutable_ad_server() {
  set_has_ad_server();
  if (ad_server_ == &::google::protobuf::internal::kEmptyString) {
    ad_server_ = new ::std::string;
  }
  return ad_server_;
}
inline ::std::string* ProductInfo::release_ad_server() {
  clear_has_ad_server();
  if (ad_server_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ad_server_;
    ad_server_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string other_server = 10;
inline bool ProductInfo::has_other_server() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProductInfo::set_has_other_server() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProductInfo::clear_has_other_server() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProductInfo::clear_other_server() {
  if (other_server_ != &::google::protobuf::internal::kEmptyString) {
    other_server_->clear();
  }
  clear_has_other_server();
}
inline const ::std::string& ProductInfo::other_server() const {
  return *other_server_;
}
inline void ProductInfo::set_other_server(const ::std::string& value) {
  set_has_other_server();
  if (other_server_ == &::google::protobuf::internal::kEmptyString) {
    other_server_ = new ::std::string;
  }
  other_server_->assign(value);
}
inline void ProductInfo::set_other_server(const char* value) {
  set_has_other_server();
  if (other_server_ == &::google::protobuf::internal::kEmptyString) {
    other_server_ = new ::std::string;
  }
  other_server_->assign(value);
}
inline void ProductInfo::set_other_server(const char* value, size_t size) {
  set_has_other_server();
  if (other_server_ == &::google::protobuf::internal::kEmptyString) {
    other_server_ = new ::std::string;
  }
  other_server_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProductInfo::mutable_other_server() {
  set_has_other_server();
  if (other_server_ == &::google::protobuf::internal::kEmptyString) {
    other_server_ = new ::std::string;
  }
  return other_server_;
}
inline ::std::string* ProductInfo::release_other_server() {
  clear_has_other_server();
  if (other_server_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = other_server_;
    other_server_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// MgrSubscribeEvent

// optional int32 equip_id = 1;
inline bool MgrSubscribeEvent::has_equip_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MgrSubscribeEvent::set_has_equip_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MgrSubscribeEvent::clear_has_equip_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MgrSubscribeEvent::clear_equip_id() {
  equip_id_ = 0;
  clear_has_equip_id();
}
inline ::google::protobuf::int32 MgrSubscribeEvent::equip_id() const {
  return equip_id_;
}
inline void MgrSubscribeEvent::set_equip_id(::google::protobuf::int32 value) {
  set_has_equip_id();
  equip_id_ = value;
}

// optional int32 user_id = 2;
inline bool MgrSubscribeEvent::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MgrSubscribeEvent::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MgrSubscribeEvent::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MgrSubscribeEvent::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 MgrSubscribeEvent::user_id() const {
  return user_id_;
}
inline void MgrSubscribeEvent::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional uint32 event_mask = 3;
inline bool MgrSubscribeEvent::has_event_mask() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MgrSubscribeEvent::set_has_event_mask() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MgrSubscribeEvent::clear_has_event_mask() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MgrSubscribeEvent::clear_event_mask() {
  event_mask_ = 0u;
  clear_has_event_mask();
}
inline ::google::protobuf::uint32 MgrSubscribeEvent::event_mask() const {
  return event_mask_;
}
inline void MgrSubscribeEvent::set_event_mask(::google::protobuf::uint32 value) {
  set_has_event_mask();
  event_mask_ = value;
}

// -------------------------------------------------------------------

// MgrSubscribeEventList

// repeated .isafetec.MgrSubscribeEvent list = 1;
inline int MgrSubscribeEventList::list_size() const {
  return list_.size();
}
inline void MgrSubscribeEventList::clear_list() {
  list_.Clear();
}
inline const ::isafetec::MgrSubscribeEvent& MgrSubscribeEventList::list(int index) const {
  return list_.Get(index);
}
inline ::isafetec::MgrSubscribeEvent* MgrSubscribeEventList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::isafetec::MgrSubscribeEvent* MgrSubscribeEventList::list_ReleaseAt(int index) {
  return list_.ReleaseAt(index);
}
inline void MgrSubscribeEventList::list_RemoveAt(int index) {
  list_.RemoveAt(index);
}
inline ::isafetec::MgrSubscribeEvent* MgrSubscribeEventList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::MgrSubscribeEvent >&
MgrSubscribeEventList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::MgrSubscribeEvent >*
MgrSubscribeEventList::mutable_list() {
  return &list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace isafetec

// @@protoc_insertion_point(global_scope)
