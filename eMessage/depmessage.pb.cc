// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "depmessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace isafetec {

namespace {

const ::google::protobuf::Descriptor* UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* DepartmentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DepartmentInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DepartmentInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DepartmentInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ManagerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ManagerInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_depmessage_2eproto() {
  protobuf_AddDesc_depmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "depmessage.proto");
  GOOGLE_CHECK(file != NULL);
  UserInfo_descriptor_ = file->message_type(0);
  static const int UserInfo_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, birthday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, nation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, polity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, telephone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, emailaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, depid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, accountname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, is_system_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, bindequipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, isonline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, domainid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, card_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, id_card_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, citizen_card_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, mobile_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, host_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, host_ip_),
  };
  UserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfo_descriptor_,
      UserInfo::default_instance_,
      UserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfo));
  UserInfoList_descriptor_ = file->message_type(1);
  static const int UserInfoList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoList, list_),
  };
  UserInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfoList_descriptor_,
      UserInfoList::default_instance_,
      UserInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfoList));
  DepartmentInfo_descriptor_ = file->message_type(2);
  static const int DepartmentInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentInfo, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentInfo, createby_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentInfo, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentInfo, leaderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentInfo, userlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentInfo, devicelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentInfo, subdeplist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentInfo, usercount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentInfo, devicecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentInfo, isdefaultdep_),
  };
  DepartmentInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DepartmentInfo_descriptor_,
      DepartmentInfo::default_instance_,
      DepartmentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DepartmentInfo));
  DepartmentInfoList_descriptor_ = file->message_type(3);
  static const int DepartmentInfoList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentInfoList, list_),
  };
  DepartmentInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DepartmentInfoList_descriptor_,
      DepartmentInfoList::default_instance_,
      DepartmentInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepartmentInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DepartmentInfoList));
  ManagerInfo_descriptor_ = file->message_type(4);
  static const int ManagerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerInfo, user_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerInfo, on_server_),
  };
  ManagerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ManagerInfo_descriptor_,
      ManagerInfo::default_instance_,
      ManagerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManagerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ManagerInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_depmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfo_descriptor_, &UserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfoList_descriptor_, &UserInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DepartmentInfo_descriptor_, &DepartmentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DepartmentInfoList_descriptor_, &DepartmentInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ManagerInfo_descriptor_, &ManagerInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_depmessage_2eproto() {
  delete UserInfo::default_instance_;
  delete UserInfo_reflection_;
  delete UserInfoList::default_instance_;
  delete UserInfoList_reflection_;
  delete DepartmentInfo::default_instance_;
  delete DepartmentInfo_reflection_;
  delete DepartmentInfoList::default_instance_;
  delete DepartmentInfoList_reflection_;
  delete ManagerInfo::default_instance_;
  delete ManagerInfo_reflection_;
}

void protobuf_AddDesc_depmessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::isafetec::protobuf_AddDesc_cmmmessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020depmessage.proto\022\010isafetec\032\020cmmmessage"
    ".proto\"\273\003\n\010UserInfo\022\n\n\002id\030\001 \002(\005\022\020\n\010usern"
    "ame\030\002 \001(\t\022\020\n\010birthDay\030\003 \001(\001\022\013\n\003sex\030\004 \001(\005"
    "\022\016\n\006nation\030\005 \001(\t\022\016\n\006record\030\006 \001(\t\022\016\n\006poli"
    "ty\030\007 \001(\t\022\021\n\ttelephone\030\010 \001(\t\022\021\n\temailaddr"
    "\030\t \001(\t\022\r\n\005depid\030\n \001(\005\022\r\n\005state\030\017 \001(\005\022\023\n\013"
    "AccountName\030\013 \001(\t\022\020\n\010password\030\014 \001(\t\022\026\n\016i"
    "s_system_user\030\016 \001(\005\022\021\n\taccountid\030\r \001(\005\022\023"
    "\n\013BindEquipID\030\020 \001(\005\022\020\n\010IsOnline\030\021 \001(\005\022\020\n"
    "\010domainId\030\022 \001(\005\022\017\n\007card_no\030\023 \001(\t\022\022\n\nid_c"
    "ard_no\030\024 \001(\t\022\027\n\017citizen_card_no\030\025 \001(\t\022\021\n"
    "\tmobile_no\030\026 \001(\t\022\021\n\thost_name\030\027 \001(\t\022\017\n\007h"
    "ost_ip\030\030 \001(\t\"0\n\014UserInfoList\022 \n\004list\030\001 \003"
    "(\0132\022.isafetec.UserInfo\"\306\002\n\016DepartmentInf"
    "o\022\n\n\002id\030\001 \002(\005\022\013\n\003pid\030\002 \001(\005\022\014\n\004name\030\003 \001(\t"
    "\022\020\n\010createby\030\004 \001(\001\022\017\n\007comment\030\005 \001(\t\022\020\n\010l"
    "eaderid\030\006 \001(\005\022(\n\010userlist\030\007 \001(\0132\026.isafet"
    "ec.UserInfoList\022/\n\ndevicelist\030\010 \001(\0132\033.is"
    "afetec.BaseEquipInfoList\0220\n\nsubdeplist\030\t"
    " \001(\0132\034.isafetec.DepartmentInfoList\022\021\n\tus"
    "ercount\030\n \001(\005\022\023\n\013devicecount\030\013 \001(\005\022\r\n\005st"
    "ate\030\014 \001(\005\022\024\n\014isdefaultDep\030\r \001(\005\"<\n\022Depar"
    "tmentInfoList\022&\n\004list\030\001 \003(\0132\030.isafetec.D"
    "epartmentInfo\"K\n\013ManagerInfo\022)\n\tuser_lis"
    "t\030\001 \001(\0132\026.isafetec.UserInfoList\022\021\n\ton_se"
    "rver\030\002 \001(\010", 1010);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "depmessage.proto", &protobuf_RegisterTypes);
  UserInfo::default_instance_ = new UserInfo();
  UserInfoList::default_instance_ = new UserInfoList();
  DepartmentInfo::default_instance_ = new DepartmentInfo();
  DepartmentInfoList::default_instance_ = new DepartmentInfoList();
  ManagerInfo::default_instance_ = new ManagerInfo();
  UserInfo::default_instance_->InitAsDefaultInstance();
  UserInfoList::default_instance_->InitAsDefaultInstance();
  DepartmentInfo::default_instance_->InitAsDefaultInstance();
  DepartmentInfoList::default_instance_->InitAsDefaultInstance();
  ManagerInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_depmessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_depmessage_2eproto {
  StaticDescriptorInitializer_depmessage_2eproto() {
    protobuf_AddDesc_depmessage_2eproto();
  }
} static_descriptor_initializer_depmessage_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int UserInfo::kIdFieldNumber;
const int UserInfo::kUsernameFieldNumber;
const int UserInfo::kBirthDayFieldNumber;
const int UserInfo::kSexFieldNumber;
const int UserInfo::kNationFieldNumber;
const int UserInfo::kRecordFieldNumber;
const int UserInfo::kPolityFieldNumber;
const int UserInfo::kTelephoneFieldNumber;
const int UserInfo::kEmailaddrFieldNumber;
const int UserInfo::kDepidFieldNumber;
const int UserInfo::kStateFieldNumber;
const int UserInfo::kAccountNameFieldNumber;
const int UserInfo::kPasswordFieldNumber;
const int UserInfo::kIsSystemUserFieldNumber;
const int UserInfo::kAccountidFieldNumber;
const int UserInfo::kBindEquipIDFieldNumber;
const int UserInfo::kIsOnlineFieldNumber;
const int UserInfo::kDomainIdFieldNumber;
const int UserInfo::kCardNoFieldNumber;
const int UserInfo::kIdCardNoFieldNumber;
const int UserInfo::kCitizenCardNoFieldNumber;
const int UserInfo::kMobileNoFieldNumber;
const int UserInfo::kHostNameFieldNumber;
const int UserInfo::kHostIpFieldNumber;
#endif  // !_MSC_VER

UserInfo::UserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserInfo::InitAsDefaultInstance() {
}

UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  birthday_ = 0;
  sex_ = 0;
  nation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  record_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  polity_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  telephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  emailaddr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  depid_ = 0;
  state_ = 0;
  accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_system_user_ = 0;
  accountid_ = 0;
  bindequipid_ = 0;
  isonline_ = 0;
  domainid_ = 0;
  card_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_card_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  citizen_card_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mobile_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  host_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  host_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfo::~UserInfo() {
  SharedDtor();
}

void UserInfo::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (nation_ != &::google::protobuf::internal::kEmptyString) {
    delete nation_;
  }
  if (record_ != &::google::protobuf::internal::kEmptyString) {
    delete record_;
  }
  if (polity_ != &::google::protobuf::internal::kEmptyString) {
    delete polity_;
  }
  if (telephone_ != &::google::protobuf::internal::kEmptyString) {
    delete telephone_;
  }
  if (emailaddr_ != &::google::protobuf::internal::kEmptyString) {
    delete emailaddr_;
  }
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (card_no_ != &::google::protobuf::internal::kEmptyString) {
    delete card_no_;
  }
  if (id_card_no_ != &::google::protobuf::internal::kEmptyString) {
    delete id_card_no_;
  }
  if (citizen_card_no_ != &::google::protobuf::internal::kEmptyString) {
    delete citizen_card_no_;
  }
  if (mobile_no_ != &::google::protobuf::internal::kEmptyString) {
    delete mobile_no_;
  }
  if (host_name_ != &::google::protobuf::internal::kEmptyString) {
    delete host_name_;
  }
  if (host_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete host_ip_;
  }
  if (this != default_instance_) {
  }
}

void UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfo_descriptor_;
}

const UserInfo& UserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_depmessage_2eproto();  return *default_instance_;
}

UserInfo* UserInfo::default_instance_ = NULL;

UserInfo* UserInfo::New() const {
  return new UserInfo;
}

void UserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    birthday_ = 0;
    sex_ = 0;
    if (has_nation()) {
      if (nation_ != &::google::protobuf::internal::kEmptyString) {
        nation_->clear();
      }
    }
    if (has_record()) {
      if (record_ != &::google::protobuf::internal::kEmptyString) {
        record_->clear();
      }
    }
    if (has_polity()) {
      if (polity_ != &::google::protobuf::internal::kEmptyString) {
        polity_->clear();
      }
    }
    if (has_telephone()) {
      if (telephone_ != &::google::protobuf::internal::kEmptyString) {
        telephone_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_emailaddr()) {
      if (emailaddr_ != &::google::protobuf::internal::kEmptyString) {
        emailaddr_->clear();
      }
    }
    depid_ = 0;
    state_ = 0;
    if (has_accountname()) {
      if (accountname_ != &::google::protobuf::internal::kEmptyString) {
        accountname_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    is_system_user_ = 0;
    accountid_ = 0;
    bindequipid_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    isonline_ = 0;
    domainid_ = 0;
    if (has_card_no()) {
      if (card_no_ != &::google::protobuf::internal::kEmptyString) {
        card_no_->clear();
      }
    }
    if (has_id_card_no()) {
      if (id_card_no_ != &::google::protobuf::internal::kEmptyString) {
        id_card_no_->clear();
      }
    }
    if (has_citizen_card_no()) {
      if (citizen_card_no_ != &::google::protobuf::internal::kEmptyString) {
        citizen_card_no_->clear();
      }
    }
    if (has_mobile_no()) {
      if (mobile_no_ != &::google::protobuf::internal::kEmptyString) {
        mobile_no_->clear();
      }
    }
    if (has_host_name()) {
      if (host_name_ != &::google::protobuf::internal::kEmptyString) {
        host_name_->clear();
      }
    }
    if (has_host_ip()) {
      if (host_ip_ != &::google::protobuf::internal::kEmptyString) {
        host_ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_username;
        break;
      }
      
      // optional string username = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_birthDay;
        break;
      }
      
      // optional double birthDay = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_birthDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &birthday_)));
          set_has_birthday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }
      
      // optional int32 sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_nation;
        break;
      }
      
      // optional string nation = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nation().data(), this->nation().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_record;
        break;
      }
      
      // optional string record = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_record()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->record().data(), this->record().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_polity;
        break;
      }
      
      // optional string polity = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_polity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_polity()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->polity().data(), this->polity().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_telephone;
        break;
      }
      
      // optional string telephone = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_telephone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_telephone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->telephone().data(), this->telephone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_emailaddr;
        break;
      }
      
      // optional string emailaddr = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_emailaddr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_emailaddr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->emailaddr().data(), this->emailaddr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_depid;
        break;
      }
      
      // optional int32 depid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_depid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &depid_)));
          set_has_depid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_AccountName;
        break;
      }
      
      // optional string AccountName = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AccountName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountname().data(), this->accountname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_password;
        break;
      }
      
      // optional string password = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_accountid;
        break;
      }
      
      // optional int32 accountid = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accountid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_is_system_user;
        break;
      }
      
      // optional int32 is_system_user = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_system_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_system_user_)));
          set_has_is_system_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_state;
        break;
      }
      
      // optional int32 state = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_BindEquipID;
        break;
      }
      
      // optional int32 BindEquipID = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BindEquipID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bindequipid_)));
          set_has_bindequipid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_IsOnline;
        break;
      }
      
      // optional int32 IsOnline = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsOnline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isonline_)));
          set_has_isonline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_domainId;
        break;
      }
      
      // optional int32 domainId = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_domainId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &domainid_)));
          set_has_domainid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_card_no;
        break;
      }
      
      // optional string card_no = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_no()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->card_no().data(), this->card_no().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_id_card_no;
        break;
      }
      
      // optional string id_card_no = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id_card_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id_card_no()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id_card_no().data(), this->id_card_no().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_citizen_card_no;
        break;
      }
      
      // optional string citizen_card_no = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_citizen_card_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_citizen_card_no()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->citizen_card_no().data(), this->citizen_card_no().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_mobile_no;
        break;
      }
      
      // optional string mobile_no = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mobile_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile_no()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mobile_no().data(), this->mobile_no().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_host_name;
        break;
      }
      
      // optional string host_name = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host_name().data(), this->host_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_host_ip;
        break;
      }
      
      // optional string host_ip = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host_ip().data(), this->host_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->username(), output);
  }
  
  // optional double birthDay = 3;
  if (has_birthday()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->birthday(), output);
  }
  
  // optional int32 sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sex(), output);
  }
  
  // optional string nation = 5;
  if (has_nation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nation().data(), this->nation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->nation(), output);
  }
  
  // optional string record = 6;
  if (has_record()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->record().data(), this->record().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->record(), output);
  }
  
  // optional string polity = 7;
  if (has_polity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->polity().data(), this->polity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->polity(), output);
  }
  
  // optional string telephone = 8;
  if (has_telephone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->telephone().data(), this->telephone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->telephone(), output);
  }
  
  // optional string emailaddr = 9;
  if (has_emailaddr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->emailaddr().data(), this->emailaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->emailaddr(), output);
  }
  
  // optional int32 depid = 10;
  if (has_depid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->depid(), output);
  }
  
  // optional string AccountName = 11;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->accountname(), output);
  }
  
  // optional string password = 12;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->password(), output);
  }
  
  // optional int32 accountid = 13;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->accountid(), output);
  }
  
  // optional int32 is_system_user = 14;
  if (has_is_system_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->is_system_user(), output);
  }
  
  // optional int32 state = 15;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->state(), output);
  }
  
  // optional int32 BindEquipID = 16;
  if (has_bindequipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->bindequipid(), output);
  }
  
  // optional int32 IsOnline = 17;
  if (has_isonline()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->isonline(), output);
  }
  
  // optional int32 domainId = 18;
  if (has_domainid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->domainid(), output);
  }
  
  // optional string card_no = 19;
  if (has_card_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->card_no().data(), this->card_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->card_no(), output);
  }
  
  // optional string id_card_no = 20;
  if (has_id_card_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id_card_no().data(), this->id_card_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->id_card_no(), output);
  }
  
  // optional string citizen_card_no = 21;
  if (has_citizen_card_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->citizen_card_no().data(), this->citizen_card_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->citizen_card_no(), output);
  }
  
  // optional string mobile_no = 22;
  if (has_mobile_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mobile_no().data(), this->mobile_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->mobile_no(), output);
  }
  
  // optional string host_name = 23;
  if (has_host_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host_name().data(), this->host_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->host_name(), output);
  }
  
  // optional string host_ip = 24;
  if (has_host_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host_ip().data(), this->host_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->host_ip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }
  
  // optional double birthDay = 3;
  if (has_birthday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->birthday(), target);
  }
  
  // optional int32 sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sex(), target);
  }
  
  // optional string nation = 5;
  if (has_nation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nation().data(), this->nation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->nation(), target);
  }
  
  // optional string record = 6;
  if (has_record()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->record().data(), this->record().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->record(), target);
  }
  
  // optional string polity = 7;
  if (has_polity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->polity().data(), this->polity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->polity(), target);
  }
  
  // optional string telephone = 8;
  if (has_telephone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->telephone().data(), this->telephone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->telephone(), target);
  }
  
  // optional string emailaddr = 9;
  if (has_emailaddr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->emailaddr().data(), this->emailaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->emailaddr(), target);
  }
  
  // optional int32 depid = 10;
  if (has_depid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->depid(), target);
  }
  
  // optional string AccountName = 11;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->accountname(), target);
  }
  
  // optional string password = 12;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->password(), target);
  }
  
  // optional int32 accountid = 13;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->accountid(), target);
  }
  
  // optional int32 is_system_user = 14;
  if (has_is_system_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->is_system_user(), target);
  }
  
  // optional int32 state = 15;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->state(), target);
  }
  
  // optional int32 BindEquipID = 16;
  if (has_bindequipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->bindequipid(), target);
  }
  
  // optional int32 IsOnline = 17;
  if (has_isonline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->isonline(), target);
  }
  
  // optional int32 domainId = 18;
  if (has_domainid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->domainid(), target);
  }
  
  // optional string card_no = 19;
  if (has_card_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->card_no().data(), this->card_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->card_no(), target);
  }
  
  // optional string id_card_no = 20;
  if (has_id_card_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id_card_no().data(), this->id_card_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->id_card_no(), target);
  }
  
  // optional string citizen_card_no = 21;
  if (has_citizen_card_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->citizen_card_no().data(), this->citizen_card_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->citizen_card_no(), target);
  }
  
  // optional string mobile_no = 22;
  if (has_mobile_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mobile_no().data(), this->mobile_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->mobile_no(), target);
  }
  
  // optional string host_name = 23;
  if (has_host_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host_name().data(), this->host_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->host_name(), target);
  }
  
  // optional string host_ip = 24;
  if (has_host_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host_ip().data(), this->host_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->host_ip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // optional double birthDay = 3;
    if (has_birthday()) {
      total_size += 1 + 8;
    }
    
    // optional int32 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }
    
    // optional string nation = 5;
    if (has_nation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nation());
    }
    
    // optional string record = 6;
    if (has_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->record());
    }
    
    // optional string polity = 7;
    if (has_polity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->polity());
    }
    
    // optional string telephone = 8;
    if (has_telephone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->telephone());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string emailaddr = 9;
    if (has_emailaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->emailaddr());
    }
    
    // optional int32 depid = 10;
    if (has_depid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->depid());
    }
    
    // optional int32 state = 15;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }
    
    // optional string AccountName = 11;
    if (has_accountname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountname());
    }
    
    // optional string password = 12;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
    // optional int32 is_system_user = 14;
    if (has_is_system_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_system_user());
    }
    
    // optional int32 accountid = 13;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accountid());
    }
    
    // optional int32 BindEquipID = 16;
    if (has_bindequipid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bindequipid());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 IsOnline = 17;
    if (has_isonline()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isonline());
    }
    
    // optional int32 domainId = 18;
    if (has_domainid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->domainid());
    }
    
    // optional string card_no = 19;
    if (has_card_no()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->card_no());
    }
    
    // optional string id_card_no = 20;
    if (has_id_card_no()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id_card_no());
    }
    
    // optional string citizen_card_no = 21;
    if (has_citizen_card_no()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->citizen_card_no());
    }
    
    // optional string mobile_no = 22;
    if (has_mobile_no()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobile_no());
    }
    
    // optional string host_name = 23;
    if (has_host_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host_name());
    }
    
    // optional string host_ip = 24;
    if (has_host_ip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host_ip());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_birthday()) {
      set_birthday(from.birthday());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_nation()) {
      set_nation(from.nation());
    }
    if (from.has_record()) {
      set_record(from.record());
    }
    if (from.has_polity()) {
      set_polity(from.polity());
    }
    if (from.has_telephone()) {
      set_telephone(from.telephone());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_emailaddr()) {
      set_emailaddr(from.emailaddr());
    }
    if (from.has_depid()) {
      set_depid(from.depid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_accountname()) {
      set_accountname(from.accountname());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_is_system_user()) {
      set_is_system_user(from.is_system_user());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_bindequipid()) {
      set_bindequipid(from.bindequipid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_isonline()) {
      set_isonline(from.isonline());
    }
    if (from.has_domainid()) {
      set_domainid(from.domainid());
    }
    if (from.has_card_no()) {
      set_card_no(from.card_no());
    }
    if (from.has_id_card_no()) {
      set_id_card_no(from.id_card_no());
    }
    if (from.has_citizen_card_no()) {
      set_citizen_card_no(from.citizen_card_no());
    }
    if (from.has_mobile_no()) {
      set_mobile_no(from.mobile_no());
    }
    if (from.has_host_name()) {
      set_host_name(from.host_name());
    }
    if (from.has_host_ip()) {
      set_host_ip(from.host_ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(username_, other->username_);
    std::swap(birthday_, other->birthday_);
    std::swap(sex_, other->sex_);
    std::swap(nation_, other->nation_);
    std::swap(record_, other->record_);
    std::swap(polity_, other->polity_);
    std::swap(telephone_, other->telephone_);
    std::swap(emailaddr_, other->emailaddr_);
    std::swap(depid_, other->depid_);
    std::swap(state_, other->state_);
    std::swap(accountname_, other->accountname_);
    std::swap(password_, other->password_);
    std::swap(is_system_user_, other->is_system_user_);
    std::swap(accountid_, other->accountid_);
    std::swap(bindequipid_, other->bindequipid_);
    std::swap(isonline_, other->isonline_);
    std::swap(domainid_, other->domainid_);
    std::swap(card_no_, other->card_no_);
    std::swap(id_card_no_, other->id_card_no_);
    std::swap(citizen_card_no_, other->citizen_card_no_);
    std::swap(mobile_no_, other->mobile_no_);
    std::swap(host_name_, other->host_name_);
    std::swap(host_ip_, other->host_ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfo_descriptor_;
  metadata.reflection = UserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserInfoList::kListFieldNumber;
#endif  // !_MSC_VER

UserInfoList::UserInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserInfoList::InitAsDefaultInstance() {
}

UserInfoList::UserInfoList(const UserInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserInfoList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfoList::~UserInfoList() {
  SharedDtor();
}

void UserInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfoList_descriptor_;
}

const UserInfoList& UserInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_depmessage_2eproto();  return *default_instance_;
}

UserInfoList* UserInfoList::default_instance_ = NULL;

UserInfoList* UserInfoList::New() const {
  return new UserInfoList;
}

void UserInfoList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .isafetec.UserInfo list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .isafetec.UserInfo list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .isafetec.UserInfo list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserInfoList::ByteSize() const {
  int total_size = 0;
  
  // repeated .isafetec.UserInfo list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfoList::MergeFrom(const UserInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfoList::CopyFrom(const UserInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfoList::IsInitialized() const {
  
  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void UserInfoList::Swap(UserInfoList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfoList_descriptor_;
  metadata.reflection = UserInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DepartmentInfo::kIdFieldNumber;
const int DepartmentInfo::kPidFieldNumber;
const int DepartmentInfo::kNameFieldNumber;
const int DepartmentInfo::kCreatebyFieldNumber;
const int DepartmentInfo::kCommentFieldNumber;
const int DepartmentInfo::kLeaderidFieldNumber;
const int DepartmentInfo::kUserlistFieldNumber;
const int DepartmentInfo::kDevicelistFieldNumber;
const int DepartmentInfo::kSubdeplistFieldNumber;
const int DepartmentInfo::kUsercountFieldNumber;
const int DepartmentInfo::kDevicecountFieldNumber;
const int DepartmentInfo::kStateFieldNumber;
const int DepartmentInfo::kIsdefaultDepFieldNumber;
#endif  // !_MSC_VER

DepartmentInfo::DepartmentInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DepartmentInfo::InitAsDefaultInstance() {
  userlist_ = const_cast< ::isafetec::UserInfoList*>(&::isafetec::UserInfoList::default_instance());
  devicelist_ = const_cast< ::isafetec::BaseEquipInfoList*>(&::isafetec::BaseEquipInfoList::default_instance());
  subdeplist_ = const_cast< ::isafetec::DepartmentInfoList*>(&::isafetec::DepartmentInfoList::default_instance());
}

DepartmentInfo::DepartmentInfo(const DepartmentInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DepartmentInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  pid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  createby_ = 0;
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leaderid_ = 0;
  userlist_ = NULL;
  devicelist_ = NULL;
  subdeplist_ = NULL;
  usercount_ = 0;
  devicecount_ = 0;
  state_ = 0;
  isdefaultdep_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DepartmentInfo::~DepartmentInfo() {
  SharedDtor();
}

void DepartmentInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (this != default_instance_) {
    delete userlist_;
    delete devicelist_;
    delete subdeplist_;
  }
}

void DepartmentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DepartmentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DepartmentInfo_descriptor_;
}

const DepartmentInfo& DepartmentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_depmessage_2eproto();  return *default_instance_;
}

DepartmentInfo* DepartmentInfo::default_instance_ = NULL;

DepartmentInfo* DepartmentInfo::New() const {
  return new DepartmentInfo;
}

void DepartmentInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    pid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    createby_ = 0;
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
    leaderid_ = 0;
    if (has_userlist()) {
      if (userlist_ != NULL) userlist_->::isafetec::UserInfoList::Clear();
    }
    if (has_devicelist()) {
      if (devicelist_ != NULL) devicelist_->::isafetec::BaseEquipInfoList::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_subdeplist()) {
      if (subdeplist_ != NULL) subdeplist_->::isafetec::DepartmentInfoList::Clear();
    }
    usercount_ = 0;
    devicecount_ = 0;
    state_ = 0;
    isdefaultdep_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DepartmentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pid;
        break;
      }
      
      // optional int32 pid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_createby;
        break;
      }
      
      // optional double createby = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_createby:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &createby_)));
          set_has_createby();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_comment;
        break;
      }
      
      // optional string comment = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_leaderid;
        break;
      }
      
      // optional int32 leaderid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leaderid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leaderid_)));
          set_has_leaderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_userlist;
        break;
      }
      
      // optional .isafetec.UserInfoList userlist = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_devicelist;
        break;
      }
      
      // optional .isafetec.BaseEquipInfoList devicelist = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_devicelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_devicelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_subdeplist;
        break;
      }
      
      // optional .isafetec.DepartmentInfoList subdeplist = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subdeplist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subdeplist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_usercount;
        break;
      }
      
      // optional int32 usercount = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usercount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usercount_)));
          set_has_usercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_devicecount;
        break;
      }
      
      // optional int32 devicecount = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_devicecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &devicecount_)));
          set_has_devicecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_state;
        break;
      }
      
      // optional int32 state = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_isdefaultDep;
        break;
      }
      
      // optional int32 isdefaultDep = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isdefaultDep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isdefaultdep_)));
          set_has_isdefaultdep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DepartmentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 pid = 2;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pid(), output);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // optional double createby = 4;
  if (has_createby()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->createby(), output);
  }
  
  // optional string comment = 5;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->comment(), output);
  }
  
  // optional int32 leaderid = 6;
  if (has_leaderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->leaderid(), output);
  }
  
  // optional .isafetec.UserInfoList userlist = 7;
  if (has_userlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->userlist(), output);
  }
  
  // optional .isafetec.BaseEquipInfoList devicelist = 8;
  if (has_devicelist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->devicelist(), output);
  }
  
  // optional .isafetec.DepartmentInfoList subdeplist = 9;
  if (has_subdeplist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->subdeplist(), output);
  }
  
  // optional int32 usercount = 10;
  if (has_usercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->usercount(), output);
  }
  
  // optional int32 devicecount = 11;
  if (has_devicecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->devicecount(), output);
  }
  
  // optional int32 state = 12;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->state(), output);
  }
  
  // optional int32 isdefaultDep = 13;
  if (has_isdefaultdep()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->isdefaultdep(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DepartmentInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 pid = 2;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pid(), target);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // optional double createby = 4;
  if (has_createby()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->createby(), target);
  }
  
  // optional string comment = 5;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->comment(), target);
  }
  
  // optional int32 leaderid = 6;
  if (has_leaderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->leaderid(), target);
  }
  
  // optional .isafetec.UserInfoList userlist = 7;
  if (has_userlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->userlist(), target);
  }
  
  // optional .isafetec.BaseEquipInfoList devicelist = 8;
  if (has_devicelist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->devicelist(), target);
  }
  
  // optional .isafetec.DepartmentInfoList subdeplist = 9;
  if (has_subdeplist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->subdeplist(), target);
  }
  
  // optional int32 usercount = 10;
  if (has_usercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->usercount(), target);
  }
  
  // optional int32 devicecount = 11;
  if (has_devicecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->devicecount(), target);
  }
  
  // optional int32 state = 12;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->state(), target);
  }
  
  // optional int32 isdefaultDep = 13;
  if (has_isdefaultdep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->isdefaultdep(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DepartmentInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 pid = 2;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }
    
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional double createby = 4;
    if (has_createby()) {
      total_size += 1 + 8;
    }
    
    // optional string comment = 5;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }
    
    // optional int32 leaderid = 6;
    if (has_leaderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leaderid());
    }
    
    // optional .isafetec.UserInfoList userlist = 7;
    if (has_userlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userlist());
    }
    
    // optional .isafetec.BaseEquipInfoList devicelist = 8;
    if (has_devicelist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->devicelist());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .isafetec.DepartmentInfoList subdeplist = 9;
    if (has_subdeplist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->subdeplist());
    }
    
    // optional int32 usercount = 10;
    if (has_usercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usercount());
    }
    
    // optional int32 devicecount = 11;
    if (has_devicecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->devicecount());
    }
    
    // optional int32 state = 12;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }
    
    // optional int32 isdefaultDep = 13;
    if (has_isdefaultdep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isdefaultdep());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DepartmentInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DepartmentInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DepartmentInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DepartmentInfo::MergeFrom(const DepartmentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_createby()) {
      set_createby(from.createby());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
    if (from.has_leaderid()) {
      set_leaderid(from.leaderid());
    }
    if (from.has_userlist()) {
      mutable_userlist()->::isafetec::UserInfoList::MergeFrom(from.userlist());
    }
    if (from.has_devicelist()) {
      mutable_devicelist()->::isafetec::BaseEquipInfoList::MergeFrom(from.devicelist());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_subdeplist()) {
      mutable_subdeplist()->::isafetec::DepartmentInfoList::MergeFrom(from.subdeplist());
    }
    if (from.has_usercount()) {
      set_usercount(from.usercount());
    }
    if (from.has_devicecount()) {
      set_devicecount(from.devicecount());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_isdefaultdep()) {
      set_isdefaultdep(from.isdefaultdep());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DepartmentInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepartmentInfo::CopyFrom(const DepartmentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepartmentInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_userlist()) {
    if (!this->userlist().IsInitialized()) return false;
  }
  if (has_devicelist()) {
    if (!this->devicelist().IsInitialized()) return false;
  }
  if (has_subdeplist()) {
    if (!this->subdeplist().IsInitialized()) return false;
  }
  return true;
}

void DepartmentInfo::Swap(DepartmentInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pid_, other->pid_);
    std::swap(name_, other->name_);
    std::swap(createby_, other->createby_);
    std::swap(comment_, other->comment_);
    std::swap(leaderid_, other->leaderid_);
    std::swap(userlist_, other->userlist_);
    std::swap(devicelist_, other->devicelist_);
    std::swap(subdeplist_, other->subdeplist_);
    std::swap(usercount_, other->usercount_);
    std::swap(devicecount_, other->devicecount_);
    std::swap(state_, other->state_);
    std::swap(isdefaultdep_, other->isdefaultdep_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DepartmentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DepartmentInfo_descriptor_;
  metadata.reflection = DepartmentInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DepartmentInfoList::kListFieldNumber;
#endif  // !_MSC_VER

DepartmentInfoList::DepartmentInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DepartmentInfoList::InitAsDefaultInstance() {
}

DepartmentInfoList::DepartmentInfoList(const DepartmentInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DepartmentInfoList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DepartmentInfoList::~DepartmentInfoList() {
  SharedDtor();
}

void DepartmentInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DepartmentInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DepartmentInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DepartmentInfoList_descriptor_;
}

const DepartmentInfoList& DepartmentInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_depmessage_2eproto();  return *default_instance_;
}

DepartmentInfoList* DepartmentInfoList::default_instance_ = NULL;

DepartmentInfoList* DepartmentInfoList::New() const {
  return new DepartmentInfoList;
}

void DepartmentInfoList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DepartmentInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .isafetec.DepartmentInfo list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DepartmentInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .isafetec.DepartmentInfo list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DepartmentInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .isafetec.DepartmentInfo list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DepartmentInfoList::ByteSize() const {
  int total_size = 0;
  
  // repeated .isafetec.DepartmentInfo list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DepartmentInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DepartmentInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DepartmentInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DepartmentInfoList::MergeFrom(const DepartmentInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DepartmentInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepartmentInfoList::CopyFrom(const DepartmentInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepartmentInfoList::IsInitialized() const {
  
  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void DepartmentInfoList::Swap(DepartmentInfoList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DepartmentInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DepartmentInfoList_descriptor_;
  metadata.reflection = DepartmentInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ManagerInfo::kUserListFieldNumber;
const int ManagerInfo::kOnServerFieldNumber;
#endif  // !_MSC_VER

ManagerInfo::ManagerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ManagerInfo::InitAsDefaultInstance() {
  user_list_ = const_cast< ::isafetec::UserInfoList*>(&::isafetec::UserInfoList::default_instance());
}

ManagerInfo::ManagerInfo(const ManagerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ManagerInfo::SharedCtor() {
  _cached_size_ = 0;
  user_list_ = NULL;
  on_server_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ManagerInfo::~ManagerInfo() {
  SharedDtor();
}

void ManagerInfo::SharedDtor() {
  if (this != default_instance_) {
    delete user_list_;
  }
}

void ManagerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManagerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ManagerInfo_descriptor_;
}

const ManagerInfo& ManagerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_depmessage_2eproto();  return *default_instance_;
}

ManagerInfo* ManagerInfo::default_instance_ = NULL;

ManagerInfo* ManagerInfo::New() const {
  return new ManagerInfo;
}

void ManagerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user_list()) {
      if (user_list_ != NULL) user_list_->::isafetec::UserInfoList::Clear();
    }
    on_server_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ManagerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .isafetec.UserInfoList user_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_on_server;
        break;
      }
      
      // optional bool on_server = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_on_server:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &on_server_)));
          set_has_on_server();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ManagerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .isafetec.UserInfoList user_list = 1;
  if (has_user_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user_list(), output);
  }
  
  // optional bool on_server = 2;
  if (has_on_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->on_server(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ManagerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .isafetec.UserInfoList user_list = 1;
  if (has_user_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user_list(), target);
  }
  
  // optional bool on_server = 2;
  if (has_on_server()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->on_server(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ManagerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .isafetec.UserInfoList user_list = 1;
    if (has_user_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_list());
    }
    
    // optional bool on_server = 2;
    if (has_on_server()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManagerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ManagerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ManagerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ManagerInfo::MergeFrom(const ManagerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_list()) {
      mutable_user_list()->::isafetec::UserInfoList::MergeFrom(from.user_list());
    }
    if (from.has_on_server()) {
      set_on_server(from.on_server());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ManagerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManagerInfo::CopyFrom(const ManagerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManagerInfo::IsInitialized() const {
  
  if (has_user_list()) {
    if (!this->user_list().IsInitialized()) return false;
  }
  return true;
}

void ManagerInfo::Swap(ManagerInfo* other) {
  if (other != this) {
    std::swap(user_list_, other->user_list_);
    std::swap(on_server_, other->on_server_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ManagerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ManagerInfo_descriptor_;
  metadata.reflection = ManagerInfo_reflection_;
  return metadata;
}

// UserInfo

// required int32 id = 1;
inline bool UserInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UserInfo::id() const {
  return id_;
}
inline void UserInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string username = 2;
inline bool UserInfo::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserInfo::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserInfo::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserInfo::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& UserInfo::username() const {
  return *username_;
}
inline void UserInfo::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void UserInfo::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void UserInfo::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserInfo::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* UserInfo::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional double birthDay = 3;
inline bool UserInfo::has_birthday() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserInfo::set_has_birthday() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserInfo::clear_has_birthday() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserInfo::clear_birthday() {
  birthday_ = 0;
  clear_has_birthday();
}
inline double UserInfo::birthday() const {
  return birthday_;
}
inline void UserInfo::set_birthday(double value) {
  set_has_birthday();
  birthday_ = value;
}

// optional int32 sex = 4;
inline bool UserInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserInfo::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 UserInfo::sex() const {
  return sex_;
}
inline void UserInfo::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional string nation = 5;
inline bool UserInfo::has_nation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserInfo::set_has_nation() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserInfo::clear_has_nation() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserInfo::clear_nation() {
  if (nation_ != &::google::protobuf::internal::kEmptyString) {
    nation_->clear();
  }
  clear_has_nation();
}
inline const ::std::string& UserInfo::nation() const {
  return *nation_;
}
inline void UserInfo::set_nation(const ::std::string& value) {
  set_has_nation();
  if (nation_ == &::google::protobuf::internal::kEmptyString) {
    nation_ = new ::std::string;
  }
  nation_->assign(value);
}
inline void UserInfo::set_nation(const char* value) {
  set_has_nation();
  if (nation_ == &::google::protobuf::internal::kEmptyString) {
    nation_ = new ::std::string;
  }
  nation_->assign(value);
}
inline void UserInfo::set_nation(const char* value, size_t size) {
  set_has_nation();
  if (nation_ == &::google::protobuf::internal::kEmptyString) {
    nation_ = new ::std::string;
  }
  nation_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserInfo::mutable_nation() {
  set_has_nation();
  if (nation_ == &::google::protobuf::internal::kEmptyString) {
    nation_ = new ::std::string;
  }
  return nation_;
}
inline ::std::string* UserInfo::release_nation() {
  clear_has_nation();
  if (nation_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nation_;
    nation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string record = 6;
inline bool UserInfo::has_record() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserInfo::set_has_record() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserInfo::clear_has_record() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserInfo::clear_record() {
  if (record_ != &::google::protobuf::internal::kEmptyString) {
    record_->clear();
  }
  clear_has_record();
}
inline const ::std::string& UserInfo::record() const {
  return *record_;
}
inline void UserInfo::set_record(const ::std::string& value) {
  set_has_record();
  if (record_ == &::google::protobuf::internal::kEmptyString) {
    record_ = new ::std::string;
  }
  record_->assign(value);
}
inline void UserInfo::set_record(const char* value) {
  set_has_record();
  if (record_ == &::google::protobuf::internal::kEmptyString) {
    record_ = new ::std::string;
  }
  record_->assign(value);
}
inline void UserInfo::set_record(const char* value, size_t size) {
  set_has_record();
  if (record_ == &::google::protobuf::internal::kEmptyString) {
    record_ = new ::std::string;
  }
  record_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserInfo::mutable_record() {
  set_has_record();
  if (record_ == &::google::protobuf::internal::kEmptyString) {
    record_ = new ::std::string;
  }
  return record_;
}
inline ::std::string* UserInfo::release_record() {
  clear_has_record();
  if (record_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = record_;
    record_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string polity = 7;
inline bool UserInfo::has_polity() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserInfo::set_has_polity() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserInfo::clear_has_polity() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserInfo::clear_polity() {
  if (polity_ != &::google::protobuf::internal::kEmptyString) {
    polity_->clear();
  }
  clear_has_polity();
}
inline const ::std::string& UserInfo::polity() const {
  return *polity_;
}
inline void UserInfo::set_polity(const ::std::string& value) {
  set_has_polity();
  if (polity_ == &::google::protobuf::internal::kEmptyString) {
    polity_ = new ::std::string;
  }
  polity_->assign(value);
}
inline void UserInfo::set_polity(const char* value) {
  set_has_polity();
  if (polity_ == &::google::protobuf::internal::kEmptyString) {
    polity_ = new ::std::string;
  }
  polity_->assign(value);
}
inline void UserInfo::set_polity(const char* value, size_t size) {
  set_has_polity();
  if (polity_ == &::google::protobuf::internal::kEmptyString) {
    polity_ = new ::std::string;
  }
  polity_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserInfo::mutable_polity() {
  set_has_polity();
  if (polity_ == &::google::protobuf::internal::kEmptyString) {
    polity_ = new ::std::string;
  }
  return polity_;
}
inline ::std::string* UserInfo::release_polity() {
  clear_has_polity();
  if (polity_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = polity_;
    polity_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string telephone = 8;
inline bool UserInfo::has_telephone() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserInfo::set_has_telephone() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserInfo::clear_has_telephone() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserInfo::clear_telephone() {
  if (telephone_ != &::google::protobuf::internal::kEmptyString) {
    telephone_->clear();
  }
  clear_has_telephone();
}
inline const ::std::string& UserInfo::telephone() const {
  return *telephone_;
}
inline void UserInfo::set_telephone(const ::std::string& value) {
  set_has_telephone();
  if (telephone_ == &::google::protobuf::internal::kEmptyString) {
    telephone_ = new ::std::string;
  }
  telephone_->assign(value);
}
inline void UserInfo::set_telephone(const char* value) {
  set_has_telephone();
  if (telephone_ == &::google::protobuf::internal::kEmptyString) {
    telephone_ = new ::std::string;
  }
  telephone_->assign(value);
}
inline void UserInfo::set_telephone(const char* value, size_t size) {
  set_has_telephone();
  if (telephone_ == &::google::protobuf::internal::kEmptyString) {
    telephone_ = new ::std::string;
  }
  telephone_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserInfo::mutable_telephone() {
  set_has_telephone();
  if (telephone_ == &::google::protobuf::internal::kEmptyString) {
    telephone_ = new ::std::string;
  }
  return telephone_;
}
inline ::std::string* UserInfo::release_telephone() {
  clear_has_telephone();
  if (telephone_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = telephone_;
    telephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string emailaddr = 9;
inline bool UserInfo::has_emailaddr() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserInfo::set_has_emailaddr() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserInfo::clear_has_emailaddr() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserInfo::clear_emailaddr() {
  if (emailaddr_ != &::google::protobuf::internal::kEmptyString) {
    emailaddr_->clear();
  }
  clear_has_emailaddr();
}
inline const ::std::string& UserInfo::emailaddr() const {
  return *emailaddr_;
}
inline void UserInfo::set_emailaddr(const ::std::string& value) {
  set_has_emailaddr();
  if (emailaddr_ == &::google::protobuf::internal::kEmptyString) {
    emailaddr_ = new ::std::string;
  }
  emailaddr_->assign(value);
}
inline void UserInfo::set_emailaddr(const char* value) {
  set_has_emailaddr();
  if (emailaddr_ == &::google::protobuf::internal::kEmptyString) {
    emailaddr_ = new ::std::string;
  }
  emailaddr_->assign(value);
}
inline void UserInfo::set_emailaddr(const char* value, size_t size) {
  set_has_emailaddr();
  if (emailaddr_ == &::google::protobuf::internal::kEmptyString) {
    emailaddr_ = new ::std::string;
  }
  emailaddr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserInfo::mutable_emailaddr() {
  set_has_emailaddr();
  if (emailaddr_ == &::google::protobuf::internal::kEmptyString) {
    emailaddr_ = new ::std::string;
  }
  return emailaddr_;
}
inline ::std::string* UserInfo::release_emailaddr() {
  clear_has_emailaddr();
  if (emailaddr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = emailaddr_;
    emailaddr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 depid = 10;
inline bool UserInfo::has_depid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UserInfo::set_has_depid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UserInfo::clear_has_depid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UserInfo::clear_depid() {
  depid_ = 0;
  clear_has_depid();
}
inline ::google::protobuf::int32 UserInfo::depid() const {
  return depid_;
}
inline void UserInfo::set_depid(::google::protobuf::int32 value) {
  set_has_depid();
  depid_ = value;
}

// optional int32 state = 15;
inline bool UserInfo::has_state() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UserInfo::set_has_state() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UserInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UserInfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 UserInfo::state() const {
  return state_;
}
inline void UserInfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional string AccountName = 11;
inline bool UserInfo::has_accountname() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UserInfo::set_has_accountname() {
  _has_bits_[0] |= 0x00000800u;
}
inline void UserInfo::clear_has_accountname() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void UserInfo::clear_accountname() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    accountname_->clear();
  }
  clear_has_accountname();
}
inline const ::std::string& UserInfo::accountname() const {
  return *accountname_;
}
inline void UserInfo::set_accountname(const ::std::string& value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void UserInfo::set_accountname(const char* value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void UserInfo::set_accountname(const char* value, size_t size) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserInfo::mutable_accountname() {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  return accountname_;
}
inline ::std::string* UserInfo::release_accountname() {
  clear_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accountname_;
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string password = 12;
inline bool UserInfo::has_password() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void UserInfo::set_has_password() {
  _has_bits_[0] |= 0x00001000u;
}
inline void UserInfo::clear_has_password() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void UserInfo::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& UserInfo::password() const {
  return *password_;
}
inline void UserInfo::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void UserInfo::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void UserInfo::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserInfo::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* UserInfo::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 is_system_user = 14;
inline bool UserInfo::has_is_system_user() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void UserInfo::set_has_is_system_user() {
  _has_bits_[0] |= 0x00002000u;
}
inline void UserInfo::clear_has_is_system_user() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void UserInfo::clear_is_system_user() {
  is_system_user_ = 0;
  clear_has_is_system_user();
}
inline ::google::protobuf::int32 UserInfo::is_system_user() const {
  return is_system_user_;
}
inline void UserInfo::set_is_system_user(::google::protobuf::int32 value) {
  set_has_is_system_user();
  is_system_user_ = value;
}

// optional int32 accountid = 13;
inline bool UserInfo::has_accountid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void UserInfo::set_has_accountid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void UserInfo::clear_has_accountid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void UserInfo::clear_accountid() {
  accountid_ = 0;
  clear_has_accountid();
}
inline ::google::protobuf::int32 UserInfo::accountid() const {
  return accountid_;
}
inline void UserInfo::set_accountid(::google::protobuf::int32 value) {
  set_has_accountid();
  accountid_ = value;
}

// optional int32 BindEquipID = 16;
inline bool UserInfo::has_bindequipid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void UserInfo::set_has_bindequipid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void UserInfo::clear_has_bindequipid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void UserInfo::clear_bindequipid() {
  bindequipid_ = 0;
  clear_has_bindequipid();
}
inline ::google::protobuf::int32 UserInfo::bindequipid() const {
  return bindequipid_;
}
inline void UserInfo::set_bindequipid(::google::protobuf::int32 value) {
  set_has_bindequipid();
  bindequipid_ = value;
}

// optional int32 IsOnline = 17;
inline bool UserInfo::has_isonline() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void UserInfo::set_has_isonline() {
  _has_bits_[0] |= 0x00010000u;
}
inline void UserInfo::clear_has_isonline() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void UserInfo::clear_isonline() {
  isonline_ = 0;
  clear_has_isonline();
}
inline ::google::protobuf::int32 UserInfo::isonline() const {
  return isonline_;
}
inline void UserInfo::set_isonline(::google::protobuf::int32 value) {
  set_has_isonline();
  isonline_ = value;
}

// optional int32 domainId = 18;
inline bool UserInfo::has_domainid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void UserInfo::set_has_domainid() {
  _has_bits_[0] |= 0x00020000u;
}
inline void UserInfo::clear_has_domainid() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void UserInfo::clear_domainid() {
  domainid_ = 0;
  clear_has_domainid();
}
inline ::google::protobuf::int32 UserInfo::domainid() const {
  return domainid_;
}
inline void UserInfo::set_domainid(::google::protobuf::int32 value) {
  set_has_domainid();
  domainid_ = value;
}

// optional string card_no = 19;
inline bool UserInfo::has_card_no() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void UserInfo::set_has_card_no() {
  _has_bits_[0] |= 0x00040000u;
}
inline void UserInfo::clear_has_card_no() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void UserInfo::clear_card_no() {
  if (card_no_ != &::google::protobuf::internal::kEmptyString) {
    card_no_->clear();
  }
  clear_has_card_no();
}
inline const ::std::string& UserInfo::card_no() const {
  return *card_no_;
}
inline void UserInfo::set_card_no(const ::std::string& value) {
  set_has_card_no();
  if (card_no_ == &::google::protobuf::internal::kEmptyString) {
    card_no_ = new ::std::string;
  }
  card_no_->assign(value);
}
inline void UserInfo::set_card_no(const char* value) {
  set_has_card_no();
  if (card_no_ == &::google::protobuf::internal::kEmptyString) {
    card_no_ = new ::std::string;
  }
  card_no_->assign(value);
}
inline void UserInfo::set_card_no(const char* value, size_t size) {
  set_has_card_no();
  if (card_no_ == &::google::protobuf::internal::kEmptyString) {
    card_no_ = new ::std::string;
  }
  card_no_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserInfo::mutable_card_no() {
  set_has_card_no();
  if (card_no_ == &::google::protobuf::internal::kEmptyString) {
    card_no_ = new ::std::string;
  }
  return card_no_;
}
inline ::std::string* UserInfo::release_card_no() {
  clear_has_card_no();
  if (card_no_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = card_no_;
    card_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string id_card_no = 20;
inline bool UserInfo::has_id_card_no() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void UserInfo::set_has_id_card_no() {
  _has_bits_[0] |= 0x00080000u;
}
inline void UserInfo::clear_has_id_card_no() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void UserInfo::clear_id_card_no() {
  if (id_card_no_ != &::google::protobuf::internal::kEmptyString) {
    id_card_no_->clear();
  }
  clear_has_id_card_no();
}
inline const ::std::string& UserInfo::id_card_no() const {
  return *id_card_no_;
}
inline void UserInfo::set_id_card_no(const ::std::string& value) {
  set_has_id_card_no();
  if (id_card_no_ == &::google::protobuf::internal::kEmptyString) {
    id_card_no_ = new ::std::string;
  }
  id_card_no_->assign(value);
}
inline void UserInfo::set_id_card_no(const char* value) {
  set_has_id_card_no();
  if (id_card_no_ == &::google::protobuf::internal::kEmptyString) {
    id_card_no_ = new ::std::string;
  }
  id_card_no_->assign(value);
}
inline void UserInfo::set_id_card_no(const char* value, size_t size) {
  set_has_id_card_no();
  if (id_card_no_ == &::google::protobuf::internal::kEmptyString) {
    id_card_no_ = new ::std::string;
  }
  id_card_no_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserInfo::mutable_id_card_no() {
  set_has_id_card_no();
  if (id_card_no_ == &::google::protobuf::internal::kEmptyString) {
    id_card_no_ = new ::std::string;
  }
  return id_card_no_;
}
inline ::std::string* UserInfo::release_id_card_no() {
  clear_has_id_card_no();
  if (id_card_no_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_card_no_;
    id_card_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string citizen_card_no = 21;
inline bool UserInfo::has_citizen_card_no() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void UserInfo::set_has_citizen_card_no() {
  _has_bits_[0] |= 0x00100000u;
}
inline void UserInfo::clear_has_citizen_card_no() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void UserInfo::clear_citizen_card_no() {
  if (citizen_card_no_ != &::google::protobuf::internal::kEmptyString) {
    citizen_card_no_->clear();
  }
  clear_has_citizen_card_no();
}
inline const ::std::string& UserInfo::citizen_card_no() const {
  return *citizen_card_no_;
}
inline void UserInfo::set_citizen_card_no(const ::std::string& value) {
  set_has_citizen_card_no();
  if (citizen_card_no_ == &::google::protobuf::internal::kEmptyString) {
    citizen_card_no_ = new ::std::string;
  }
  citizen_card_no_->assign(value);
}
inline void UserInfo::set_citizen_card_no(const char* value) {
  set_has_citizen_card_no();
  if (citizen_card_no_ == &::google::protobuf::internal::kEmptyString) {
    citizen_card_no_ = new ::std::string;
  }
  citizen_card_no_->assign(value);
}
inline void UserInfo::set_citizen_card_no(const char* value, size_t size) {
  set_has_citizen_card_no();
  if (citizen_card_no_ == &::google::protobuf::internal::kEmptyString) {
    citizen_card_no_ = new ::std::string;
  }
  citizen_card_no_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserInfo::mutable_citizen_card_no() {
  set_has_citizen_card_no();
  if (citizen_card_no_ == &::google::protobuf::internal::kEmptyString) {
    citizen_card_no_ = new ::std::string;
  }
  return citizen_card_no_;
}
inline ::std::string* UserInfo::release_citizen_card_no() {
  clear_has_citizen_card_no();
  if (citizen_card_no_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = citizen_card_no_;
    citizen_card_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string mobile_no = 22;
inline bool UserInfo::has_mobile_no() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void UserInfo::set_has_mobile_no() {
  _has_bits_[0] |= 0x00200000u;
}
inline void UserInfo::clear_has_mobile_no() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void UserInfo::clear_mobile_no() {
  if (mobile_no_ != &::google::protobuf::internal::kEmptyString) {
    mobile_no_->clear();
  }
  clear_has_mobile_no();
}
inline const ::std::string& UserInfo::mobile_no() const {
  return *mobile_no_;
}
inline void UserInfo::set_mobile_no(const ::std::string& value) {
  set_has_mobile_no();
  if (mobile_no_ == &::google::protobuf::internal::kEmptyString) {
    mobile_no_ = new ::std::string;
  }
  mobile_no_->assign(value);
}
inline void UserInfo::set_mobile_no(const char* value) {
  set_has_mobile_no();
  if (mobile_no_ == &::google::protobuf::internal::kEmptyString) {
    mobile_no_ = new ::std::string;
  }
  mobile_no_->assign(value);
}
inline void UserInfo::set_mobile_no(const char* value, size_t size) {
  set_has_mobile_no();
  if (mobile_no_ == &::google::protobuf::internal::kEmptyString) {
    mobile_no_ = new ::std::string;
  }
  mobile_no_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserInfo::mutable_mobile_no() {
  set_has_mobile_no();
  if (mobile_no_ == &::google::protobuf::internal::kEmptyString) {
    mobile_no_ = new ::std::string;
  }
  return mobile_no_;
}
inline ::std::string* UserInfo::release_mobile_no() {
  clear_has_mobile_no();
  if (mobile_no_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mobile_no_;
    mobile_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string host_name = 23;
inline bool UserInfo::has_host_name() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void UserInfo::set_has_host_name() {
  _has_bits_[0] |= 0x00400000u;
}
inline void UserInfo::clear_has_host_name() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void UserInfo::clear_host_name() {
  if (host_name_ != &::google::protobuf::internal::kEmptyString) {
    host_name_->clear();
  }
  clear_has_host_name();
}
inline const ::std::string& UserInfo::host_name() const {
  return *host_name_;
}
inline void UserInfo::set_host_name(const ::std::string& value) {
  set_has_host_name();
  if (host_name_ == &::google::protobuf::internal::kEmptyString) {
    host_name_ = new ::std::string;
  }
  host_name_->assign(value);
}
inline void UserInfo::set_host_name(const char* value) {
  set_has_host_name();
  if (host_name_ == &::google::protobuf::internal::kEmptyString) {
    host_name_ = new ::std::string;
  }
  host_name_->assign(value);
}
inline void UserInfo::set_host_name(const char* value, size_t size) {
  set_has_host_name();
  if (host_name_ == &::google::protobuf::internal::kEmptyString) {
    host_name_ = new ::std::string;
  }
  host_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserInfo::mutable_host_name() {
  set_has_host_name();
  if (host_name_ == &::google::protobuf::internal::kEmptyString) {
    host_name_ = new ::std::string;
  }
  return host_name_;
}
inline ::std::string* UserInfo::release_host_name() {
  clear_has_host_name();
  if (host_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = host_name_;
    host_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string host_ip = 24;
inline bool UserInfo::has_host_ip() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void UserInfo::set_has_host_ip() {
  _has_bits_[0] |= 0x00800000u;
}
inline void UserInfo::clear_has_host_ip() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void UserInfo::clear_host_ip() {
  if (host_ip_ != &::google::protobuf::internal::kEmptyString) {
    host_ip_->clear();
  }
  clear_has_host_ip();
}
inline const ::std::string& UserInfo::host_ip() const {
  return *host_ip_;
}
inline void UserInfo::set_host_ip(const ::std::string& value) {
  set_has_host_ip();
  if (host_ip_ == &::google::protobuf::internal::kEmptyString) {
    host_ip_ = new ::std::string;
  }
  host_ip_->assign(value);
}
inline void UserInfo::set_host_ip(const char* value) {
  set_has_host_ip();
  if (host_ip_ == &::google::protobuf::internal::kEmptyString) {
    host_ip_ = new ::std::string;
  }
  host_ip_->assign(value);
}
inline void UserInfo::set_host_ip(const char* value, size_t size) {
  set_has_host_ip();
  if (host_ip_ == &::google::protobuf::internal::kEmptyString) {
    host_ip_ = new ::std::string;
  }
  host_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserInfo::mutable_host_ip() {
  set_has_host_ip();
  if (host_ip_ == &::google::protobuf::internal::kEmptyString) {
    host_ip_ = new ::std::string;
  }
  return host_ip_;
}
inline ::std::string* UserInfo::release_host_ip() {
  clear_has_host_ip();
  if (host_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = host_ip_;
    host_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// UserInfoList

// repeated .isafetec.UserInfo list = 1;
inline int UserInfoList::list_size() const {
  return list_.size();
}
inline void UserInfoList::clear_list() {
  list_.Clear();
}
inline const ::isafetec::UserInfo& UserInfoList::list(int index) const {
  return list_.Get(index);
}
inline ::isafetec::UserInfo* UserInfoList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::isafetec::UserInfo* UserInfoList::list_ReleaseAt(int index) {
  return list_.ReleaseAt(index);
}
inline void UserInfoList::list_RemoveAt(int index) {
  list_.RemoveAt(index);
}
inline ::isafetec::UserInfo* UserInfoList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::UserInfo >&
UserInfoList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::UserInfo >*
UserInfoList::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// DepartmentInfo

// required int32 id = 1;
inline bool DepartmentInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DepartmentInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DepartmentInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DepartmentInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 DepartmentInfo::id() const {
  return id_;
}
inline void DepartmentInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 pid = 2;
inline bool DepartmentInfo::has_pid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DepartmentInfo::set_has_pid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DepartmentInfo::clear_has_pid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DepartmentInfo::clear_pid() {
  pid_ = 0;
  clear_has_pid();
}
inline ::google::protobuf::int32 DepartmentInfo::pid() const {
  return pid_;
}
inline void DepartmentInfo::set_pid(::google::protobuf::int32 value) {
  set_has_pid();
  pid_ = value;
}

// optional string name = 3;
inline bool DepartmentInfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DepartmentInfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DepartmentInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DepartmentInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& DepartmentInfo::name() const {
  return *name_;
}
inline void DepartmentInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DepartmentInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void DepartmentInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DepartmentInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* DepartmentInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional double createby = 4;
inline bool DepartmentInfo::has_createby() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DepartmentInfo::set_has_createby() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DepartmentInfo::clear_has_createby() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DepartmentInfo::clear_createby() {
  createby_ = 0;
  clear_has_createby();
}
inline double DepartmentInfo::createby() const {
  return createby_;
}
inline void DepartmentInfo::set_createby(double value) {
  set_has_createby();
  createby_ = value;
}

// optional string comment = 5;
inline bool DepartmentInfo::has_comment() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DepartmentInfo::set_has_comment() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DepartmentInfo::clear_has_comment() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DepartmentInfo::clear_comment() {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& DepartmentInfo::comment() const {
  return *comment_;
}
inline void DepartmentInfo::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void DepartmentInfo::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void DepartmentInfo::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DepartmentInfo::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  return comment_;
}
inline ::std::string* DepartmentInfo::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 leaderid = 6;
inline bool DepartmentInfo::has_leaderid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DepartmentInfo::set_has_leaderid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DepartmentInfo::clear_has_leaderid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DepartmentInfo::clear_leaderid() {
  leaderid_ = 0;
  clear_has_leaderid();
}
inline ::google::protobuf::int32 DepartmentInfo::leaderid() const {
  return leaderid_;
}
inline void DepartmentInfo::set_leaderid(::google::protobuf::int32 value) {
  set_has_leaderid();
  leaderid_ = value;
}

// optional .isafetec.UserInfoList userlist = 7;
inline bool DepartmentInfo::has_userlist() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DepartmentInfo::set_has_userlist() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DepartmentInfo::clear_has_userlist() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DepartmentInfo::clear_userlist() {
  if (userlist_ != NULL) userlist_->::isafetec::UserInfoList::Clear();
  clear_has_userlist();
}
inline const ::isafetec::UserInfoList& DepartmentInfo::userlist() const {
  return userlist_ != NULL ? *userlist_ : *default_instance_->userlist_;
}
inline ::isafetec::UserInfoList* DepartmentInfo::mutable_userlist() {
  set_has_userlist();
  if (userlist_ == NULL) userlist_ = new ::isafetec::UserInfoList;
  return userlist_;
}
inline ::isafetec::UserInfoList* DepartmentInfo::release_userlist() {
  clear_has_userlist();
  ::isafetec::UserInfoList* temp = userlist_;
  userlist_ = NULL;
  return temp;
}

// optional .isafetec.BaseEquipInfoList devicelist = 8;
inline bool DepartmentInfo::has_devicelist() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DepartmentInfo::set_has_devicelist() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DepartmentInfo::clear_has_devicelist() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DepartmentInfo::clear_devicelist() {
  if (devicelist_ != NULL) devicelist_->::isafetec::BaseEquipInfoList::Clear();
  clear_has_devicelist();
}
inline const ::isafetec::BaseEquipInfoList& DepartmentInfo::devicelist() const {
  return devicelist_ != NULL ? *devicelist_ : *default_instance_->devicelist_;
}
inline ::isafetec::BaseEquipInfoList* DepartmentInfo::mutable_devicelist() {
  set_has_devicelist();
  if (devicelist_ == NULL) devicelist_ = new ::isafetec::BaseEquipInfoList;
  return devicelist_;
}
inline ::isafetec::BaseEquipInfoList* DepartmentInfo::release_devicelist() {
  clear_has_devicelist();
  ::isafetec::BaseEquipInfoList* temp = devicelist_;
  devicelist_ = NULL;
  return temp;
}

// optional .isafetec.DepartmentInfoList subdeplist = 9;
inline bool DepartmentInfo::has_subdeplist() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DepartmentInfo::set_has_subdeplist() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DepartmentInfo::clear_has_subdeplist() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DepartmentInfo::clear_subdeplist() {
  if (subdeplist_ != NULL) subdeplist_->::isafetec::DepartmentInfoList::Clear();
  clear_has_subdeplist();
}
inline const ::isafetec::DepartmentInfoList& DepartmentInfo::subdeplist() const {
  return subdeplist_ != NULL ? *subdeplist_ : *default_instance_->subdeplist_;
}
inline ::isafetec::DepartmentInfoList* DepartmentInfo::mutable_subdeplist() {
  set_has_subdeplist();
  if (subdeplist_ == NULL) subdeplist_ = new ::isafetec::DepartmentInfoList;
  return subdeplist_;
}
inline ::isafetec::DepartmentInfoList* DepartmentInfo::release_subdeplist() {
  clear_has_subdeplist();
  ::isafetec::DepartmentInfoList* temp = subdeplist_;
  subdeplist_ = NULL;
  return temp;
}

// optional int32 usercount = 10;
inline bool DepartmentInfo::has_usercount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DepartmentInfo::set_has_usercount() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DepartmentInfo::clear_has_usercount() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DepartmentInfo::clear_usercount() {
  usercount_ = 0;
  clear_has_usercount();
}
inline ::google::protobuf::int32 DepartmentInfo::usercount() const {
  return usercount_;
}
inline void DepartmentInfo::set_usercount(::google::protobuf::int32 value) {
  set_has_usercount();
  usercount_ = value;
}

// optional int32 devicecount = 11;
inline bool DepartmentInfo::has_devicecount() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DepartmentInfo::set_has_devicecount() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DepartmentInfo::clear_has_devicecount() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DepartmentInfo::clear_devicecount() {
  devicecount_ = 0;
  clear_has_devicecount();
}
inline ::google::protobuf::int32 DepartmentInfo::devicecount() const {
  return devicecount_;
}
inline void DepartmentInfo::set_devicecount(::google::protobuf::int32 value) {
  set_has_devicecount();
  devicecount_ = value;
}

// optional int32 state = 12;
inline bool DepartmentInfo::has_state() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DepartmentInfo::set_has_state() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DepartmentInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DepartmentInfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 DepartmentInfo::state() const {
  return state_;
}
inline void DepartmentInfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 isdefaultDep = 13;
inline bool DepartmentInfo::has_isdefaultdep() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DepartmentInfo::set_has_isdefaultdep() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DepartmentInfo::clear_has_isdefaultdep() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DepartmentInfo::clear_isdefaultdep() {
  isdefaultdep_ = 0;
  clear_has_isdefaultdep();
}
inline ::google::protobuf::int32 DepartmentInfo::isdefaultdep() const {
  return isdefaultdep_;
}
inline void DepartmentInfo::set_isdefaultdep(::google::protobuf::int32 value) {
  set_has_isdefaultdep();
  isdefaultdep_ = value;
}

// -------------------------------------------------------------------

// DepartmentInfoList

// repeated .isafetec.DepartmentInfo list = 1;
inline int DepartmentInfoList::list_size() const {
  return list_.size();
}
inline void DepartmentInfoList::clear_list() {
  list_.Clear();
}
inline const ::isafetec::DepartmentInfo& DepartmentInfoList::list(int index) const {
  return list_.Get(index);
}
inline ::isafetec::DepartmentInfo* DepartmentInfoList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::isafetec::DepartmentInfo* DepartmentInfoList::list_ReleaseAt(int index) {
  return list_.ReleaseAt(index);
}
inline void DepartmentInfoList::list_RemoveAt(int index) {
  list_.RemoveAt(index);
}
inline ::isafetec::DepartmentInfo* DepartmentInfoList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::DepartmentInfo >&
DepartmentInfoList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::DepartmentInfo >*
DepartmentInfoList::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// ManagerInfo

// optional .isafetec.UserInfoList user_list = 1;
inline bool ManagerInfo::has_user_list() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ManagerInfo::set_has_user_list() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ManagerInfo::clear_has_user_list() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ManagerInfo::clear_user_list() {
  if (user_list_ != NULL) user_list_->::isafetec::UserInfoList::Clear();
  clear_has_user_list();
}
inline const ::isafetec::UserInfoList& ManagerInfo::user_list() const {
  return user_list_ != NULL ? *user_list_ : *default_instance_->user_list_;
}
inline ::isafetec::UserInfoList* ManagerInfo::mutable_user_list() {
  set_has_user_list();
  if (user_list_ == NULL) user_list_ = new ::isafetec::UserInfoList;
  return user_list_;
}
inline ::isafetec::UserInfoList* ManagerInfo::release_user_list() {
  clear_has_user_list();
  ::isafetec::UserInfoList* temp = user_list_;
  user_list_ = NULL;
  return temp;
}

// optional bool on_server = 2;
inline bool ManagerInfo::has_on_server() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ManagerInfo::set_has_on_server() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ManagerInfo::clear_has_on_server() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ManagerInfo::clear_on_server() {
  on_server_ = false;
  clear_has_on_server();
}
inline bool ManagerInfo::on_server() const {
  return on_server_;
}
inline void ManagerInfo::set_on_server(bool value) {
  set_has_on_server();
  on_server_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace isafetec

// @@protoc_insertion_point(global_scope)
