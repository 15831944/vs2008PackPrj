// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "logmessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace isafetec {

namespace {

const ::google::protobuf::Descriptor* SelectNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SelectNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* SelectSQL_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SelectSQL_reflection_ = NULL;
const ::google::protobuf::Descriptor* UrlLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UrlLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* UrlLogList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UrlLogList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProcessLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcessLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProcessLogList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcessLogList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScreenLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScreenLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScreenLogList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScreenLogList_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileOperatorLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileOperatorLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileOperatorLogList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileOperatorLogList_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetStreamLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetStreamLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetStreamLogList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetStreamLogList_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipIdleTimeLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipIdleTimeLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipIdleTimeLogList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipIdleTimeLogList_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailLogList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailLogList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrintLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrintLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrintLogList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrintLogList_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceAttachLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceAttachLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceAttachLogList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceAttachLogList_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipLogonLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipLogonLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipLogonLogList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipLogonLogList_reflection_ = NULL;
const ::google::protobuf::Descriptor* AlarmMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlarmMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* AlarmMsgList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlarmMsgList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PC_LOGON_EVENT_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_logmessage_2eproto() {
  protobuf_AddDesc_logmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "logmessage.proto");
  GOOGLE_CHECK(file != NULL);
  SelectNode_descriptor_ = file->message_type(0);
  static const int SelectNode_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectNode, colname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectNode, colwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectNode, showcol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectNode, dbcolname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectNode, colint_),
  };
  SelectNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SelectNode_descriptor_,
      SelectNode::default_instance_,
      SelectNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SelectNode));
  SelectSQL_descriptor_ = file->message_type(1);
  static const int SelectSQL_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectSQL, dbtablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectSQL, selectnodelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectSQL, logs_type_),
  };
  SelectSQL_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SelectSQL_descriptor_,
      SelectSQL::default_instance_,
      SelectSQL_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectSQL, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectSQL, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SelectSQL));
  UrlLog_descriptor_ = file->message_type(2);
  static const int UrlLog_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlLog, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlLog, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlLog, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlLog, winuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlLog, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlLog, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlLog, webstation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlLog, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlLog, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlLog, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlLog, datelen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlLog, allowed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlLog, need_alarm_),
  };
  UrlLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UrlLog_descriptor_,
      UrlLog::default_instance_,
      UrlLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UrlLog));
  UrlLogList_descriptor_ = file->message_type(3);
  static const int UrlLogList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlLogList, list_),
  };
  UrlLogList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UrlLogList_descriptor_,
      UrlLogList::default_instance_,
      UrlLogList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlLogList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrlLogList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UrlLogList));
  ProcessLog_descriptor_ = file->message_type(4);
  static const int ProcessLog_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessLog, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessLog, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessLog, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessLog, winuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessLog, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessLog, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessLog, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessLog, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessLog, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessLog, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessLog, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessLog, corp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessLog, allowed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessLog, need_alarm_),
  };
  ProcessLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProcessLog_descriptor_,
      ProcessLog::default_instance_,
      ProcessLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProcessLog));
  ProcessLogList_descriptor_ = file->message_type(5);
  static const int ProcessLogList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessLogList, list_),
  };
  ProcessLogList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProcessLogList_descriptor_,
      ProcessLogList::default_instance_,
      ProcessLogList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessLogList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessLogList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProcessLogList));
  ScreenLog_descriptor_ = file->message_type(6);
  static const int ScreenLog_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScreenLog, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScreenLog, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScreenLog, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScreenLog, winuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScreenLog, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScreenLog, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScreenLog, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScreenLog, with_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScreenLog, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScreenLog, save_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScreenLog, file_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScreenLog, file_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScreenLog, root_path_),
  };
  ScreenLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScreenLog_descriptor_,
      ScreenLog::default_instance_,
      ScreenLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScreenLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScreenLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScreenLog));
  ScreenLogList_descriptor_ = file->message_type(7);
  static const int ScreenLogList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScreenLogList, list_),
  };
  ScreenLogList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScreenLogList_descriptor_,
      ScreenLogList::default_instance_,
      ScreenLogList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScreenLogList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScreenLogList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScreenLogList));
  FileOperatorLog_descriptor_ = file->message_type(8);
  static const int FileOperatorLog_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileOperatorLog, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileOperatorLog, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileOperatorLog, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileOperatorLog, winuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileOperatorLog, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileOperatorLog, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileOperatorLog, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileOperatorLog, process_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileOperatorLog, process_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileOperatorLog, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileOperatorLog, allowed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileOperatorLog, source_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileOperatorLog, source_device_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileOperatorLog, dest_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileOperatorLog, dest_device_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileOperatorLog, remark_),
  };
  FileOperatorLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileOperatorLog_descriptor_,
      FileOperatorLog::default_instance_,
      FileOperatorLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileOperatorLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileOperatorLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileOperatorLog));
  FileOperatorLogList_descriptor_ = file->message_type(9);
  static const int FileOperatorLogList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileOperatorLogList, list_),
  };
  FileOperatorLogList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileOperatorLogList_descriptor_,
      FileOperatorLogList::default_instance_,
      FileOperatorLogList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileOperatorLogList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileOperatorLogList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileOperatorLogList));
  NetStreamLog_descriptor_ = file->message_type(10);
  static const int NetStreamLog_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStreamLog, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStreamLog, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStreamLog, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStreamLog, winuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStreamLog, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStreamLog, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStreamLog, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStreamLog, etime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStreamLog, interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStreamLog, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStreamLog, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStreamLog, data_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStreamLog, src_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStreamLog, dest_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStreamLog, src_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStreamLog, dest_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStreamLog, process_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStreamLog, need_alarm_),
  };
  NetStreamLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetStreamLog_descriptor_,
      NetStreamLog::default_instance_,
      NetStreamLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStreamLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStreamLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetStreamLog));
  NetStreamLogList_descriptor_ = file->message_type(11);
  static const int NetStreamLogList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStreamLogList, list_),
  };
  NetStreamLogList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetStreamLogList_descriptor_,
      NetStreamLogList::default_instance_,
      NetStreamLogList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStreamLogList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetStreamLogList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetStreamLogList));
  EquipIdleTimeLog_descriptor_ = file->message_type(12);
  static const int EquipIdleTimeLog_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipIdleTimeLog, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipIdleTimeLog, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipIdleTimeLog, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipIdleTimeLog, winuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipIdleTimeLog, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipIdleTimeLog, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipIdleTimeLog, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipIdleTimeLog, btime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipIdleTimeLog, etime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipIdleTimeLog, idleminute_),
  };
  EquipIdleTimeLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipIdleTimeLog_descriptor_,
      EquipIdleTimeLog::default_instance_,
      EquipIdleTimeLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipIdleTimeLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipIdleTimeLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipIdleTimeLog));
  EquipIdleTimeLogList_descriptor_ = file->message_type(13);
  static const int EquipIdleTimeLogList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipIdleTimeLogList, list_),
  };
  EquipIdleTimeLogList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipIdleTimeLogList_descriptor_,
      EquipIdleTimeLogList::default_instance_,
      EquipIdleTimeLogList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipIdleTimeLogList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipIdleTimeLogList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipIdleTimeLogList));
  MailLog_descriptor_ = file->message_type(14);
  static const int MailLog_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailLog, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailLog, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailLog, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailLog, winuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailLog, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailLog, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailLog, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailLog, web_mail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailLog, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailLog, to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailLog, copyto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailLog, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailLog, attachment_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailLog, attachment_),
  };
  MailLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailLog_descriptor_,
      MailLog::default_instance_,
      MailLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailLog));
  MailLogList_descriptor_ = file->message_type(15);
  static const int MailLogList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailLogList, list_),
  };
  MailLogList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailLogList_descriptor_,
      MailLogList::default_instance_,
      MailLogList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailLogList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailLogList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailLogList));
  PrintLog_descriptor_ = file->message_type(16);
  static const int PrintLog_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintLog, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintLog, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintLog, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintLog, winuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintLog, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintLog, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintLog, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintLog, printername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintLog, doc_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintLog, total_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintLog, double_print_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintLog, doc_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintLog, page_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintLog, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintLog, copies_),
  };
  PrintLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrintLog_descriptor_,
      PrintLog::default_instance_,
      PrintLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrintLog));
  PrintLogList_descriptor_ = file->message_type(17);
  static const int PrintLogList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintLogList, list_),
  };
  PrintLogList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrintLogList_descriptor_,
      PrintLogList::default_instance_,
      PrintLogList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintLogList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintLogList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrintLogList));
  DeviceAttachLog_descriptor_ = file->message_type(18);
  static const int DeviceAttachLog_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceAttachLog, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceAttachLog, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceAttachLog, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceAttachLog, winuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceAttachLog, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceAttachLog, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceAttachLog, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceAttachLog, attach_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceAttachLog, device_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceAttachLog, device_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceAttachLog, device_class_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceAttachLog, device_guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceAttachLog, need_alarm_),
  };
  DeviceAttachLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceAttachLog_descriptor_,
      DeviceAttachLog::default_instance_,
      DeviceAttachLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceAttachLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceAttachLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceAttachLog));
  DeviceAttachLogList_descriptor_ = file->message_type(19);
  static const int DeviceAttachLogList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceAttachLogList, list_),
  };
  DeviceAttachLogList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceAttachLogList_descriptor_,
      DeviceAttachLogList::default_instance_,
      DeviceAttachLogList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceAttachLogList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceAttachLogList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceAttachLogList));
  EquipLogonLog_descriptor_ = file->message_type(20);
  static const int EquipLogonLog_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLogonLog, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLogonLog, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLogonLog, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLogonLog, winuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLogonLog, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLogonLog, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLogonLog, pc_logon_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLogonLog, user_logon_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLogonLog, pc_last_shudown_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLogonLog, win_logon_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLogonLog, win_logoff_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLogonLog, event_),
  };
  EquipLogonLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipLogonLog_descriptor_,
      EquipLogonLog::default_instance_,
      EquipLogonLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLogonLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLogonLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipLogonLog));
  EquipLogonLogList_descriptor_ = file->message_type(21);
  static const int EquipLogonLogList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLogonLogList, list_),
  };
  EquipLogonLogList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipLogonLogList_descriptor_,
      EquipLogonLogList::default_instance_,
      EquipLogonLogList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLogonLogList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLogonLogList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipLogonLogList));
  AlarmMsg_descriptor_ = file->message_type(22);
  static const int AlarmMsg_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmMsg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmMsg, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmMsg, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmMsg, winuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmMsg, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmMsg, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmMsg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmMsg, createdon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmMsg, subject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmMsg, content_),
  };
  AlarmMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AlarmMsg_descriptor_,
      AlarmMsg::default_instance_,
      AlarmMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AlarmMsg));
  AlarmMsgList_descriptor_ = file->message_type(23);
  static const int AlarmMsgList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmMsgList, list_),
  };
  AlarmMsgList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AlarmMsgList_descriptor_,
      AlarmMsgList::default_instance_,
      AlarmMsgList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmMsgList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmMsgList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AlarmMsgList));
  PC_LOGON_EVENT_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_logmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SelectNode_descriptor_, &SelectNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SelectSQL_descriptor_, &SelectSQL::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UrlLog_descriptor_, &UrlLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UrlLogList_descriptor_, &UrlLogList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProcessLog_descriptor_, &ProcessLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProcessLogList_descriptor_, &ProcessLogList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScreenLog_descriptor_, &ScreenLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScreenLogList_descriptor_, &ScreenLogList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileOperatorLog_descriptor_, &FileOperatorLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileOperatorLogList_descriptor_, &FileOperatorLogList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetStreamLog_descriptor_, &NetStreamLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetStreamLogList_descriptor_, &NetStreamLogList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipIdleTimeLog_descriptor_, &EquipIdleTimeLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipIdleTimeLogList_descriptor_, &EquipIdleTimeLogList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailLog_descriptor_, &MailLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailLogList_descriptor_, &MailLogList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrintLog_descriptor_, &PrintLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrintLogList_descriptor_, &PrintLogList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceAttachLog_descriptor_, &DeviceAttachLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceAttachLogList_descriptor_, &DeviceAttachLogList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipLogonLog_descriptor_, &EquipLogonLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipLogonLogList_descriptor_, &EquipLogonLogList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AlarmMsg_descriptor_, &AlarmMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AlarmMsgList_descriptor_, &AlarmMsgList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_logmessage_2eproto() {
  delete SelectNode::default_instance_;
  delete SelectNode_reflection_;
  delete SelectSQL::default_instance_;
  delete SelectSQL_reflection_;
  delete UrlLog::default_instance_;
  delete UrlLog_reflection_;
  delete UrlLogList::default_instance_;
  delete UrlLogList_reflection_;
  delete ProcessLog::default_instance_;
  delete ProcessLog_reflection_;
  delete ProcessLogList::default_instance_;
  delete ProcessLogList_reflection_;
  delete ScreenLog::default_instance_;
  delete ScreenLog_reflection_;
  delete ScreenLogList::default_instance_;
  delete ScreenLogList_reflection_;
  delete FileOperatorLog::default_instance_;
  delete FileOperatorLog_reflection_;
  delete FileOperatorLogList::default_instance_;
  delete FileOperatorLogList_reflection_;
  delete NetStreamLog::default_instance_;
  delete NetStreamLog_reflection_;
  delete NetStreamLogList::default_instance_;
  delete NetStreamLogList_reflection_;
  delete EquipIdleTimeLog::default_instance_;
  delete EquipIdleTimeLog_reflection_;
  delete EquipIdleTimeLogList::default_instance_;
  delete EquipIdleTimeLogList_reflection_;
  delete MailLog::default_instance_;
  delete MailLog_reflection_;
  delete MailLogList::default_instance_;
  delete MailLogList_reflection_;
  delete PrintLog::default_instance_;
  delete PrintLog_reflection_;
  delete PrintLogList::default_instance_;
  delete PrintLogList_reflection_;
  delete DeviceAttachLog::default_instance_;
  delete DeviceAttachLog_reflection_;
  delete DeviceAttachLogList::default_instance_;
  delete DeviceAttachLogList_reflection_;
  delete EquipLogonLog::default_instance_;
  delete EquipLogonLog_reflection_;
  delete EquipLogonLogList::default_instance_;
  delete EquipLogonLogList_reflection_;
  delete AlarmMsg::default_instance_;
  delete AlarmMsg_reflection_;
  delete AlarmMsgList::default_instance_;
  delete AlarmMsgList_reflection_;
}

void protobuf_AddDesc_logmessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::isafetec::protobuf_AddDesc_cmmmessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020logmessage.proto\022\010isafetec\032\020cmmmessage"
    ".proto\"c\n\nSelectNode\022\017\n\007colName\030\001 \001(\t\022\020\n"
    "\010colWidth\030\002 \001(\005\022\017\n\007showCol\030\003 \001(\005\022\021\n\tdbCo"
    "lName\030\004 \001(\t\022\016\n\006colInt\030\005 \001(\005\"a\n\tSelectSQL"
    "\022\023\n\013dbTableName\030\001 \001(\t\022,\n\016SelectNodelist\030"
    "\002 \003(\0132\024.isafetec.SelectNode\022\021\n\tlogs_type"
    "\030\003 \001(\005\"\324\001\n\006UrlLog\022\n\n\002id\030\001 \001(\005\022\016\n\006userid\030"
    "\002 \001(\005\022\017\n\007equipid\030\003 \001(\005\022\017\n\007winuser\030\004 \001(\t\022"
    "\n\n\002ip\030\005 \001(\t\022\014\n\004host\030\006 \001(\t\022\022\n\nwebstation\030"
    "\007 \001(\t\022\013\n\003url\030\010 \001(\t\022\014\n\004time\030\t \001(\001\022\r\n\005titl"
    "e\030\n \001(\t\022\017\n\007datelen\030\013 \001(\005\022\017\n\007allowed\030\014 \001("
    "\005\022\022\n\nneed_alarm\030\r \001(\010\",\n\nUrlLogList\022\036\n\004l"
    "ist\030\001 \003(\0132\020.isafetec.UrlLog\"\341\001\n\nProcessL"
    "og\022\n\n\002id\030\001 \001(\005\022\016\n\006userid\030\002 \001(\005\022\017\n\007equipi"
    "d\030\003 \001(\005\022\017\n\007winuser\030\004 \001(\t\022\n\n\002ip\030\005 \001(\t\022\014\n\004"
    "host\030\006 \001(\t\022\014\n\004time\030\007 \001(\001\022\013\n\003pid\030\010 \001(\005\022\014\n"
    "\004path\030\t \001(\t\022\r\n\005title\030\n \001(\t\022\020\n\010end_time\030\013"
    " \001(\001\022\014\n\004corp\030\014 \001(\t\022\017\n\007allowed\030\r \001(\005\022\022\n\nn"
    "eed_alarm\030\016 \001(\010\"4\n\016ProcessLogList\022\"\n\004lis"
    "t\030\001 \003(\0132\024.isafetec.ProcessLog\"\367\001\n\tScreen"
    "Log\022\n\n\002id\030\001 \001(\005\022\016\n\006userid\030\002 \001(\005\022\017\n\007equip"
    "id\030\003 \001(\005\022\017\n\007winuser\030\004 \001(\t\022\n\n\002ip\030\005 \001(\t\022\014\n"
    "\004host\030\006 \001(\t\022\014\n\004time\030\007 \001(\001\022\014\n\004with\030\010 \001(\005\022"
    "\016\n\006height\030\t \001(\005\022-\n\tsave_type\030\n \001(\0162\032.isa"
    "fetec.SCREEN_SAVE_TYPE\022\021\n\tfile_size\030\013 \001("
    "\005\022\021\n\tfile_Path\030\014 \001(\t\022\021\n\troot_path\030\r \001(\t\""
    "2\n\rScreenLogList\022!\n\004list\030\001 \003(\0132\023.isafete"
    "c.ScreenLog\"\257\002\n\017FileOperatorLog\022\n\n\002id\030\001 "
    "\001(\005\022\016\n\006userid\030\002 \001(\005\022\017\n\007equipid\030\003 \001(\005\022\017\n\007"
    "winuser\030\004 \001(\t\022\n\n\002ip\030\005 \001(\t\022\014\n\004host\030\006 \001(\t\022"
    "\014\n\004time\030\007 \001(\001\022\024\n\014process_name\030\010 \001(\t\022\025\n\rp"
    "rocess_title\030\t \001(\t\022\n\n\002op\030\n \001(\005\022\017\n\007allowe"
    "d\030\013 \001(\005\022\023\n\013source_path\030\014 \001(\t\022\032\n\022source_d"
    "evice_Type\030\r \001(\005\022\021\n\tdest_path\030\016 \001(\t\022\030\n\020d"
    "est_device_type\030\017 \001(\005\022\016\n\006remark\030\020 \001(\t\">\n"
    "\023FileOperatorLogList\022\'\n\004list\030\001 \003(\0132\031.isa"
    "fetec.FileOperatorLog\"\270\002\n\014NetStreamLog\022\n"
    "\n\002id\030\001 \001(\005\022\016\n\006userid\030\002 \001(\005\022\017\n\007equipid\030\003 "
    "\001(\005\022\017\n\007winuser\030\004 \001(\t\022\n\n\002ip\030\005 \001(\t\022\014\n\004host"
    "\030\006 \001(\t\022\014\n\004time\030\007 \001(\001\022\r\n\005etime\030\010 \001(\001\022\020\n\010i"
    "nterval\030\t \001(\r\022\014\n\004type\030\n \001(\r\022\021\n\tdirection"
    "\030\013 \001(\r\022\020\n\010data_len\030\014 \001(\r\022\020\n\010src_port\030\r \001"
    "(\r\022\021\n\tdest_port\030\016 \001(\r\022\016\n\006src_ip\030\017 \001(\t\022\017\n"
    "\007dest_ip\030\020 \001(\t\022\024\n\014process_path\030\021 \001(\t\022\022\n\n"
    "need_alarm\030\022 \001(\010\"8\n\020NetStreamLogList\022$\n\004"
    "list\030\001 \003(\0132\026.isafetec.NetStreamLog\"\252\001\n\020E"
    "quipIdleTimeLog\022\n\n\002id\030\001 \001(\005\022\016\n\006userid\030\002 "
    "\001(\005\022\017\n\007equipid\030\003 \001(\005\022\017\n\007winuser\030\004 \001(\t\022\n\n"
    "\002ip\030\005 \001(\t\022\014\n\004host\030\006 \001(\t\022\014\n\004time\030\007 \001(\001\022\r\n"
    "\005btime\030\010 \001(\001\022\r\n\005etime\030\t \001(\001\022\022\n\nidleminut"
    "e\030\n \001(\005\"@\n\024EquipIdleTimeLogList\022(\n\004list\030"
    "\001 \003(\0132\032.isafetec.EquipIdleTimeLog\"\351\001\n\007Ma"
    "ilLog\022\n\n\002id\030\001 \001(\005\022\016\n\006userid\030\002 \001(\005\022\017\n\007equ"
    "ipid\030\003 \001(\005\022\017\n\007winuser\030\004 \001(\t\022\n\n\002ip\030\005 \001(\t\022"
    "\014\n\004host\030\006 \001(\t\022\014\n\004time\030\007 \001(\001\022\020\n\010web_mail\030"
    "\010 \001(\005\022\014\n\004from\030\t \001(\t\022\n\n\002to\030\n \001(\t\022\016\n\006copyt"
    "o\030\013 \001(\t\022\017\n\007content\030\014 \001(\t\022\027\n\017attachment_s"
    "ize\030\r \001(\005\022\022\n\nattachment\030\016 \001(\t\".\n\013MailLog"
    "List\022\037\n\004list\030\001 \003(\0132\021.isafetec.MailLog\"\205\002"
    "\n\010PrintLog\022\n\n\002id\030\001 \001(\005\022\016\n\006userid\030\002 \001(\005\022\017"
    "\n\007equipid\030\003 \001(\005\022\017\n\007winuser\030\004 \001(\t\022\n\n\002ip\030\005"
    " \001(\t\022\014\n\004host\030\006 \001(\t\022\014\n\004time\030\007 \001(\001\022\023\n\013prin"
    "tername\030\010 \001(\t\022\020\n\010doc_name\030\t \001(\t\022\022\n\ntotal"
    "_page\030\n \001(\005\022\024\n\014double_print\030\013 \001(\005\022\020\n\010doc"
    "_size\030\014 \001(\005\022\021\n\tpage_type\030\r \001(\t\022\r\n\005color\030"
    "\016 \001(\005\022\016\n\006copies\030\017 \001(\005\"0\n\014PrintLogList\022 \n"
    "\004list\030\001 \003(\0132\022.isafetec.PrintLog\"\360\001\n\017Devi"
    "ceAttachLog\022\n\n\002id\030\001 \001(\005\022\016\n\006userid\030\002 \001(\005\022"
    "\017\n\007equipid\030\003 \001(\005\022\017\n\007winuser\030\004 \001(\t\022\n\n\002ip\030"
    "\005 \001(\t\022\014\n\004host\030\006 \001(\t\022\014\n\004time\030\007 \001(\001\022\016\n\006att"
    "ach\030\010 \001(\005\022\023\n\013device_path\030\t \001(\t\022\023\n\013device"
    "_name\030\n \001(\t\022\024\n\014device_class\030\013 \001(\t\022\023\n\013dev"
    "ice_guid\030\014 \001(\t\022\022\n\nneed_alarm\030\016 \001(\010\">\n\023De"
    "viceAttachLogList\022\'\n\004list\030\001 \003(\0132\031.isafet"
    "ec.DeviceAttachLog\"\217\002\n\rEquipLogonLog\022\n\n\002"
    "id\030\001 \001(\005\022\016\n\006userid\030\002 \001(\005\022\017\n\007equipid\030\003 \001("
    "\005\022\017\n\007winuser\030\004 \001(\t\022\n\n\002ip\030\005 \001(\t\022\014\n\004host\030\006"
    " \001(\t\022\025\n\rpc_logon_time\030\007 \001(\001\022\027\n\017user_logo"
    "n_time\030\010 \001(\001\022\034\n\024pc_last_shudown_time\030\t \001"
    "(\001\022\026\n\016win_logon_time\030\n \001(\001\022\027\n\017win_logoff"
    "_time\030\013 \001(\001\022\'\n\005event\030\014 \001(\0162\030.isafetec.PC"
    "_LOGON_EVENT\":\n\021EquipLogonLogList\022%\n\004lis"
    "t\030\001 \003(\0132\027.isafetec.EquipLogonLog\"\245\001\n\010Ala"
    "rmMsg\022\n\n\002id\030\001 \001(\005\022\016\n\006userid\030\002 \001(\005\022\017\n\007equ"
    "ipid\030\003 \001(\005\022\017\n\007winuser\030\004 \001(\t\022\n\n\002ip\030\005 \001(\t\022"
    "\014\n\004host\030\006 \001(\t\022\014\n\004type\030\007 \001(\005\022\021\n\tCreatedOn"
    "\030\010 \001(\t\022\017\n\007Subject\030\t \001(\t\022\017\n\007Content\030\n \001(\t"
    "\"0\n\014AlarmMsgList\022 \n\004list\030\001 \003(\0132\022.isafete"
    "c.AlarmMsg*5\n\016PC_LOGON_EVENT\022\020\n\014PC_WIN_L"
    "OGON\020\000\022\021\n\rPC_WIN_LOGOFF\020\001", 3585);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "logmessage.proto", &protobuf_RegisterTypes);
  SelectNode::default_instance_ = new SelectNode();
  SelectSQL::default_instance_ = new SelectSQL();
  UrlLog::default_instance_ = new UrlLog();
  UrlLogList::default_instance_ = new UrlLogList();
  ProcessLog::default_instance_ = new ProcessLog();
  ProcessLogList::default_instance_ = new ProcessLogList();
  ScreenLog::default_instance_ = new ScreenLog();
  ScreenLogList::default_instance_ = new ScreenLogList();
  FileOperatorLog::default_instance_ = new FileOperatorLog();
  FileOperatorLogList::default_instance_ = new FileOperatorLogList();
  NetStreamLog::default_instance_ = new NetStreamLog();
  NetStreamLogList::default_instance_ = new NetStreamLogList();
  EquipIdleTimeLog::default_instance_ = new EquipIdleTimeLog();
  EquipIdleTimeLogList::default_instance_ = new EquipIdleTimeLogList();
  MailLog::default_instance_ = new MailLog();
  MailLogList::default_instance_ = new MailLogList();
  PrintLog::default_instance_ = new PrintLog();
  PrintLogList::default_instance_ = new PrintLogList();
  DeviceAttachLog::default_instance_ = new DeviceAttachLog();
  DeviceAttachLogList::default_instance_ = new DeviceAttachLogList();
  EquipLogonLog::default_instance_ = new EquipLogonLog();
  EquipLogonLogList::default_instance_ = new EquipLogonLogList();
  AlarmMsg::default_instance_ = new AlarmMsg();
  AlarmMsgList::default_instance_ = new AlarmMsgList();
  SelectNode::default_instance_->InitAsDefaultInstance();
  SelectSQL::default_instance_->InitAsDefaultInstance();
  UrlLog::default_instance_->InitAsDefaultInstance();
  UrlLogList::default_instance_->InitAsDefaultInstance();
  ProcessLog::default_instance_->InitAsDefaultInstance();
  ProcessLogList::default_instance_->InitAsDefaultInstance();
  ScreenLog::default_instance_->InitAsDefaultInstance();
  ScreenLogList::default_instance_->InitAsDefaultInstance();
  FileOperatorLog::default_instance_->InitAsDefaultInstance();
  FileOperatorLogList::default_instance_->InitAsDefaultInstance();
  NetStreamLog::default_instance_->InitAsDefaultInstance();
  NetStreamLogList::default_instance_->InitAsDefaultInstance();
  EquipIdleTimeLog::default_instance_->InitAsDefaultInstance();
  EquipIdleTimeLogList::default_instance_->InitAsDefaultInstance();
  MailLog::default_instance_->InitAsDefaultInstance();
  MailLogList::default_instance_->InitAsDefaultInstance();
  PrintLog::default_instance_->InitAsDefaultInstance();
  PrintLogList::default_instance_->InitAsDefaultInstance();
  DeviceAttachLog::default_instance_->InitAsDefaultInstance();
  DeviceAttachLogList::default_instance_->InitAsDefaultInstance();
  EquipLogonLog::default_instance_->InitAsDefaultInstance();
  EquipLogonLogList::default_instance_->InitAsDefaultInstance();
  AlarmMsg::default_instance_->InitAsDefaultInstance();
  AlarmMsgList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_logmessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_logmessage_2eproto {
  StaticDescriptorInitializer_logmessage_2eproto() {
    protobuf_AddDesc_logmessage_2eproto();
  }
} static_descriptor_initializer_logmessage_2eproto_;

const ::google::protobuf::EnumDescriptor* PC_LOGON_EVENT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PC_LOGON_EVENT_descriptor_;
}
bool PC_LOGON_EVENT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int SelectNode::kColNameFieldNumber;
const int SelectNode::kColWidthFieldNumber;
const int SelectNode::kShowColFieldNumber;
const int SelectNode::kDbColNameFieldNumber;
const int SelectNode::kColIntFieldNumber;
#endif  // !_MSC_VER

SelectNode::SelectNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SelectNode::InitAsDefaultInstance() {
}

SelectNode::SelectNode(const SelectNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SelectNode::SharedCtor() {
  _cached_size_ = 0;
  colname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  colwidth_ = 0;
  showcol_ = 0;
  dbcolname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  colint_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SelectNode::~SelectNode() {
  SharedDtor();
}

void SelectNode::SharedDtor() {
  if (colname_ != &::google::protobuf::internal::kEmptyString) {
    delete colname_;
  }
  if (dbcolname_ != &::google::protobuf::internal::kEmptyString) {
    delete dbcolname_;
  }
  if (this != default_instance_) {
  }
}

void SelectNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelectNode_descriptor_;
}

const SelectNode& SelectNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logmessage_2eproto();  return *default_instance_;
}

SelectNode* SelectNode::default_instance_ = NULL;

SelectNode* SelectNode::New() const {
  return new SelectNode;
}

void SelectNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_colname()) {
      if (colname_ != &::google::protobuf::internal::kEmptyString) {
        colname_->clear();
      }
    }
    colwidth_ = 0;
    showcol_ = 0;
    if (has_dbcolname()) {
      if (dbcolname_ != &::google::protobuf::internal::kEmptyString) {
        dbcolname_->clear();
      }
    }
    colint_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SelectNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string colName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_colname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->colname().data(), this->colname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_colWidth;
        break;
      }
      
      // optional int32 colWidth = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_colWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &colwidth_)));
          set_has_colwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_showCol;
        break;
      }
      
      // optional int32 showCol = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_showCol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &showcol_)));
          set_has_showcol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_dbColName;
        break;
      }
      
      // optional string dbColName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dbColName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbcolname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dbcolname().data(), this->dbcolname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_colInt;
        break;
      }
      
      // optional int32 colInt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_colInt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &colint_)));
          set_has_colint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SelectNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string colName = 1;
  if (has_colname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->colname().data(), this->colname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->colname(), output);
  }
  
  // optional int32 colWidth = 2;
  if (has_colwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->colwidth(), output);
  }
  
  // optional int32 showCol = 3;
  if (has_showcol()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->showcol(), output);
  }
  
  // optional string dbColName = 4;
  if (has_dbcolname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbcolname().data(), this->dbcolname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->dbcolname(), output);
  }
  
  // optional int32 colInt = 5;
  if (has_colint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->colint(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SelectNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string colName = 1;
  if (has_colname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->colname().data(), this->colname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->colname(), target);
  }
  
  // optional int32 colWidth = 2;
  if (has_colwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->colwidth(), target);
  }
  
  // optional int32 showCol = 3;
  if (has_showcol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->showcol(), target);
  }
  
  // optional string dbColName = 4;
  if (has_dbcolname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbcolname().data(), this->dbcolname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->dbcolname(), target);
  }
  
  // optional int32 colInt = 5;
  if (has_colint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->colint(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SelectNode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string colName = 1;
    if (has_colname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->colname());
    }
    
    // optional int32 colWidth = 2;
    if (has_colwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->colwidth());
    }
    
    // optional int32 showCol = 3;
    if (has_showcol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->showcol());
    }
    
    // optional string dbColName = 4;
    if (has_dbcolname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbcolname());
    }
    
    // optional int32 colInt = 5;
    if (has_colint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->colint());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SelectNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SelectNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SelectNode::MergeFrom(const SelectNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_colname()) {
      set_colname(from.colname());
    }
    if (from.has_colwidth()) {
      set_colwidth(from.colwidth());
    }
    if (from.has_showcol()) {
      set_showcol(from.showcol());
    }
    if (from.has_dbcolname()) {
      set_dbcolname(from.dbcolname());
    }
    if (from.has_colint()) {
      set_colint(from.colint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SelectNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectNode::CopyFrom(const SelectNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectNode::IsInitialized() const {
  
  return true;
}

void SelectNode::Swap(SelectNode* other) {
  if (other != this) {
    std::swap(colname_, other->colname_);
    std::swap(colwidth_, other->colwidth_);
    std::swap(showcol_, other->showcol_);
    std::swap(dbcolname_, other->dbcolname_);
    std::swap(colint_, other->colint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SelectNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SelectNode_descriptor_;
  metadata.reflection = SelectNode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SelectSQL::kDbTableNameFieldNumber;
const int SelectSQL::kSelectNodelistFieldNumber;
const int SelectSQL::kLogsTypeFieldNumber;
#endif  // !_MSC_VER

SelectSQL::SelectSQL()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SelectSQL::InitAsDefaultInstance() {
}

SelectSQL::SelectSQL(const SelectSQL& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SelectSQL::SharedCtor() {
  _cached_size_ = 0;
  dbtablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  logs_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SelectSQL::~SelectSQL() {
  SharedDtor();
}

void SelectSQL::SharedDtor() {
  if (dbtablename_ != &::google::protobuf::internal::kEmptyString) {
    delete dbtablename_;
  }
  if (this != default_instance_) {
  }
}

void SelectSQL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectSQL::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelectSQL_descriptor_;
}

const SelectSQL& SelectSQL::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logmessage_2eproto();  return *default_instance_;
}

SelectSQL* SelectSQL::default_instance_ = NULL;

SelectSQL* SelectSQL::New() const {
  return new SelectSQL;
}

void SelectSQL::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dbtablename()) {
      if (dbtablename_ != &::google::protobuf::internal::kEmptyString) {
        dbtablename_->clear();
      }
    }
    logs_type_ = 0;
  }
  selectnodelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SelectSQL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string dbTableName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbtablename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dbtablename().data(), this->dbtablename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_SelectNodelist;
        break;
      }
      
      // repeated .isafetec.SelectNode SelectNodelist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SelectNodelist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_selectnodelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_SelectNodelist;
        if (input->ExpectTag(24)) goto parse_logs_type;
        break;
      }
      
      // optional int32 logs_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logs_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logs_type_)));
          set_has_logs_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SelectSQL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string dbTableName = 1;
  if (has_dbtablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbtablename().data(), this->dbtablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->dbtablename(), output);
  }
  
  // repeated .isafetec.SelectNode SelectNodelist = 2;
  for (int i = 0; i < this->selectnodelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->selectnodelist(i), output);
  }
  
  // optional int32 logs_type = 3;
  if (has_logs_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->logs_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SelectSQL::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string dbTableName = 1;
  if (has_dbtablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbtablename().data(), this->dbtablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dbtablename(), target);
  }
  
  // repeated .isafetec.SelectNode SelectNodelist = 2;
  for (int i = 0; i < this->selectnodelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->selectnodelist(i), target);
  }
  
  // optional int32 logs_type = 3;
  if (has_logs_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->logs_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SelectSQL::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string dbTableName = 1;
    if (has_dbtablename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbtablename());
    }
    
    // optional int32 logs_type = 3;
    if (has_logs_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logs_type());
    }
    
  }
  // repeated .isafetec.SelectNode SelectNodelist = 2;
  total_size += 1 * this->selectnodelist_size();
  for (int i = 0; i < this->selectnodelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->selectnodelist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectSQL::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SelectSQL* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SelectSQL*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SelectSQL::MergeFrom(const SelectSQL& from) {
  GOOGLE_CHECK_NE(&from, this);
  selectnodelist_.MergeFrom(from.selectnodelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dbtablename()) {
      set_dbtablename(from.dbtablename());
    }
    if (from.has_logs_type()) {
      set_logs_type(from.logs_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SelectSQL::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectSQL::CopyFrom(const SelectSQL& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectSQL::IsInitialized() const {
  
  return true;
}

void SelectSQL::Swap(SelectSQL* other) {
  if (other != this) {
    std::swap(dbtablename_, other->dbtablename_);
    selectnodelist_.Swap(&other->selectnodelist_);
    std::swap(logs_type_, other->logs_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SelectSQL::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SelectSQL_descriptor_;
  metadata.reflection = SelectSQL_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UrlLog::kIdFieldNumber;
const int UrlLog::kUseridFieldNumber;
const int UrlLog::kEquipidFieldNumber;
const int UrlLog::kWinuserFieldNumber;
const int UrlLog::kIpFieldNumber;
const int UrlLog::kHostFieldNumber;
const int UrlLog::kWebstationFieldNumber;
const int UrlLog::kUrlFieldNumber;
const int UrlLog::kTimeFieldNumber;
const int UrlLog::kTitleFieldNumber;
const int UrlLog::kDatelenFieldNumber;
const int UrlLog::kAllowedFieldNumber;
const int UrlLog::kNeedAlarmFieldNumber;
#endif  // !_MSC_VER

UrlLog::UrlLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UrlLog::InitAsDefaultInstance() {
}

UrlLog::UrlLog(const UrlLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UrlLog::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  userid_ = 0;
  equipid_ = 0;
  winuser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  webstation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  datelen_ = 0;
  allowed_ = 0;
  need_alarm_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UrlLog::~UrlLog() {
  SharedDtor();
}

void UrlLog::SharedDtor() {
  if (winuser_ != &::google::protobuf::internal::kEmptyString) {
    delete winuser_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (webstation_ != &::google::protobuf::internal::kEmptyString) {
    delete webstation_;
  }
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (this != default_instance_) {
  }
}

void UrlLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UrlLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UrlLog_descriptor_;
}

const UrlLog& UrlLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logmessage_2eproto();  return *default_instance_;
}

UrlLog* UrlLog::default_instance_ = NULL;

UrlLog* UrlLog::New() const {
  return new UrlLog;
}

void UrlLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    userid_ = 0;
    equipid_ = 0;
    if (has_winuser()) {
      if (winuser_ != &::google::protobuf::internal::kEmptyString) {
        winuser_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::kEmptyString) {
        host_->clear();
      }
    }
    if (has_webstation()) {
      if (webstation_ != &::google::protobuf::internal::kEmptyString) {
        webstation_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    time_ = 0;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    datelen_ = 0;
    allowed_ = 0;
    need_alarm_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UrlLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }
      
      // optional int32 userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equipid;
        break;
      }
      
      // optional int32 equipid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equipid_)));
          set_has_equipid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_winuser;
        break;
      }
      
      // optional string winuser = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_winuser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_winuser()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->winuser().data(), this->winuser().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ip;
        break;
      }
      
      // optional string ip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_host;
        break;
      }
      
      // optional string host = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_webstation;
        break;
      }
      
      // optional string webstation = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_webstation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_webstation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->webstation().data(), this->webstation().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_url;
        break;
      }
      
      // optional string url = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_time;
        break;
      }
      
      // optional double time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_title;
        break;
      }
      
      // optional string title = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_datelen;
        break;
      }
      
      // optional int32 datelen = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_datelen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datelen_)));
          set_has_datelen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_allowed;
        break;
      }
      
      // optional int32 allowed = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allowed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allowed_)));
          set_has_allowed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_need_alarm;
        break;
      }
      
      // optional bool need_alarm = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_alarm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_alarm_)));
          set_has_need_alarm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UrlLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }
  
  // optional int32 equipid = 3;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->equipid(), output);
  }
  
  // optional string winuser = 4;
  if (has_winuser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->winuser().data(), this->winuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->winuser(), output);
  }
  
  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ip(), output);
  }
  
  // optional string host = 6;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->host(), output);
  }
  
  // optional string webstation = 7;
  if (has_webstation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->webstation().data(), this->webstation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->webstation(), output);
  }
  
  // optional string url = 8;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->url(), output);
  }
  
  // optional double time = 9;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->time(), output);
  }
  
  // optional string title = 10;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->title(), output);
  }
  
  // optional int32 datelen = 11;
  if (has_datelen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->datelen(), output);
  }
  
  // optional int32 allowed = 12;
  if (has_allowed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->allowed(), output);
  }
  
  // optional bool need_alarm = 13;
  if (has_need_alarm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->need_alarm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UrlLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }
  
  // optional int32 equipid = 3;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->equipid(), target);
  }
  
  // optional string winuser = 4;
  if (has_winuser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->winuser().data(), this->winuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->winuser(), target);
  }
  
  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ip(), target);
  }
  
  // optional string host = 6;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->host(), target);
  }
  
  // optional string webstation = 7;
  if (has_webstation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->webstation().data(), this->webstation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->webstation(), target);
  }
  
  // optional string url = 8;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->url(), target);
  }
  
  // optional double time = 9;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->time(), target);
  }
  
  // optional string title = 10;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->title(), target);
  }
  
  // optional int32 datelen = 11;
  if (has_datelen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->datelen(), target);
  }
  
  // optional int32 allowed = 12;
  if (has_allowed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->allowed(), target);
  }
  
  // optional bool need_alarm = 13;
  if (has_need_alarm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->need_alarm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UrlLog::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }
    
    // optional int32 equipid = 3;
    if (has_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equipid());
    }
    
    // optional string winuser = 4;
    if (has_winuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->winuser());
    }
    
    // optional string ip = 5;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // optional string host = 6;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }
    
    // optional string webstation = 7;
    if (has_webstation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->webstation());
    }
    
    // optional string url = 8;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double time = 9;
    if (has_time()) {
      total_size += 1 + 8;
    }
    
    // optional string title = 10;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }
    
    // optional int32 datelen = 11;
    if (has_datelen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->datelen());
    }
    
    // optional int32 allowed = 12;
    if (has_allowed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allowed());
    }
    
    // optional bool need_alarm = 13;
    if (has_need_alarm()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UrlLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UrlLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UrlLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UrlLog::MergeFrom(const UrlLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_equipid()) {
      set_equipid(from.equipid());
    }
    if (from.has_winuser()) {
      set_winuser(from.winuser());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_webstation()) {
      set_webstation(from.webstation());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_datelen()) {
      set_datelen(from.datelen());
    }
    if (from.has_allowed()) {
      set_allowed(from.allowed());
    }
    if (from.has_need_alarm()) {
      set_need_alarm(from.need_alarm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UrlLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UrlLog::CopyFrom(const UrlLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UrlLog::IsInitialized() const {
  
  return true;
}

void UrlLog::Swap(UrlLog* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(userid_, other->userid_);
    std::swap(equipid_, other->equipid_);
    std::swap(winuser_, other->winuser_);
    std::swap(ip_, other->ip_);
    std::swap(host_, other->host_);
    std::swap(webstation_, other->webstation_);
    std::swap(url_, other->url_);
    std::swap(time_, other->time_);
    std::swap(title_, other->title_);
    std::swap(datelen_, other->datelen_);
    std::swap(allowed_, other->allowed_);
    std::swap(need_alarm_, other->need_alarm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UrlLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UrlLog_descriptor_;
  metadata.reflection = UrlLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UrlLogList::kListFieldNumber;
#endif  // !_MSC_VER

UrlLogList::UrlLogList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UrlLogList::InitAsDefaultInstance() {
}

UrlLogList::UrlLogList(const UrlLogList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UrlLogList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UrlLogList::~UrlLogList() {
  SharedDtor();
}

void UrlLogList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UrlLogList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UrlLogList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UrlLogList_descriptor_;
}

const UrlLogList& UrlLogList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logmessage_2eproto();  return *default_instance_;
}

UrlLogList* UrlLogList::default_instance_ = NULL;

UrlLogList* UrlLogList::New() const {
  return new UrlLogList;
}

void UrlLogList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UrlLogList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .isafetec.UrlLog list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UrlLogList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .isafetec.UrlLog list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UrlLogList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .isafetec.UrlLog list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UrlLogList::ByteSize() const {
  int total_size = 0;
  
  // repeated .isafetec.UrlLog list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UrlLogList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UrlLogList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UrlLogList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UrlLogList::MergeFrom(const UrlLogList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UrlLogList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UrlLogList::CopyFrom(const UrlLogList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UrlLogList::IsInitialized() const {
  
  return true;
}

void UrlLogList::Swap(UrlLogList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UrlLogList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UrlLogList_descriptor_;
  metadata.reflection = UrlLogList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProcessLog::kIdFieldNumber;
const int ProcessLog::kUseridFieldNumber;
const int ProcessLog::kEquipidFieldNumber;
const int ProcessLog::kWinuserFieldNumber;
const int ProcessLog::kIpFieldNumber;
const int ProcessLog::kHostFieldNumber;
const int ProcessLog::kTimeFieldNumber;
const int ProcessLog::kPidFieldNumber;
const int ProcessLog::kPathFieldNumber;
const int ProcessLog::kTitleFieldNumber;
const int ProcessLog::kEndTimeFieldNumber;
const int ProcessLog::kCorpFieldNumber;
const int ProcessLog::kAllowedFieldNumber;
const int ProcessLog::kNeedAlarmFieldNumber;
#endif  // !_MSC_VER

ProcessLog::ProcessLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProcessLog::InitAsDefaultInstance() {
}

ProcessLog::ProcessLog(const ProcessLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProcessLog::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  userid_ = 0;
  equipid_ = 0;
  winuser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = 0;
  pid_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  end_time_ = 0;
  corp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  allowed_ = 0;
  need_alarm_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcessLog::~ProcessLog() {
  SharedDtor();
}

void ProcessLog::SharedDtor() {
  if (winuser_ != &::google::protobuf::internal::kEmptyString) {
    delete winuser_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (corp_ != &::google::protobuf::internal::kEmptyString) {
    delete corp_;
  }
  if (this != default_instance_) {
  }
}

void ProcessLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessLog_descriptor_;
}

const ProcessLog& ProcessLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logmessage_2eproto();  return *default_instance_;
}

ProcessLog* ProcessLog::default_instance_ = NULL;

ProcessLog* ProcessLog::New() const {
  return new ProcessLog;
}

void ProcessLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    userid_ = 0;
    equipid_ = 0;
    if (has_winuser()) {
      if (winuser_ != &::google::protobuf::internal::kEmptyString) {
        winuser_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::kEmptyString) {
        host_->clear();
      }
    }
    time_ = 0;
    pid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    end_time_ = 0;
    if (has_corp()) {
      if (corp_ != &::google::protobuf::internal::kEmptyString) {
        corp_->clear();
      }
    }
    allowed_ = 0;
    need_alarm_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProcessLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }
      
      // optional int32 userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equipid;
        break;
      }
      
      // optional int32 equipid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equipid_)));
          set_has_equipid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_winuser;
        break;
      }
      
      // optional string winuser = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_winuser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_winuser()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->winuser().data(), this->winuser().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ip;
        break;
      }
      
      // optional string ip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_host;
        break;
      }
      
      // optional string host = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_time;
        break;
      }
      
      // optional double time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_pid;
        break;
      }
      
      // optional int32 pid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_path;
        break;
      }
      
      // optional string path = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_title;
        break;
      }
      
      // optional string title = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_end_time;
        break;
      }
      
      // optional double end_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_corp;
        break;
      }
      
      // optional string corp = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_corp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_corp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->corp().data(), this->corp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_allowed;
        break;
      }
      
      // optional int32 allowed = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allowed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allowed_)));
          set_has_allowed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_need_alarm;
        break;
      }
      
      // optional bool need_alarm = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_alarm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_alarm_)));
          set_has_need_alarm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProcessLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }
  
  // optional int32 equipid = 3;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->equipid(), output);
  }
  
  // optional string winuser = 4;
  if (has_winuser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->winuser().data(), this->winuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->winuser(), output);
  }
  
  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ip(), output);
  }
  
  // optional string host = 6;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->host(), output);
  }
  
  // optional double time = 7;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->time(), output);
  }
  
  // optional int32 pid = 8;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->pid(), output);
  }
  
  // optional string path = 9;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->path(), output);
  }
  
  // optional string title = 10;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->title(), output);
  }
  
  // optional double end_time = 11;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->end_time(), output);
  }
  
  // optional string corp = 12;
  if (has_corp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->corp().data(), this->corp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->corp(), output);
  }
  
  // optional int32 allowed = 13;
  if (has_allowed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->allowed(), output);
  }
  
  // optional bool need_alarm = 14;
  if (has_need_alarm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->need_alarm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProcessLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }
  
  // optional int32 equipid = 3;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->equipid(), target);
  }
  
  // optional string winuser = 4;
  if (has_winuser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->winuser().data(), this->winuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->winuser(), target);
  }
  
  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ip(), target);
  }
  
  // optional string host = 6;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->host(), target);
  }
  
  // optional double time = 7;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->time(), target);
  }
  
  // optional int32 pid = 8;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->pid(), target);
  }
  
  // optional string path = 9;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->path(), target);
  }
  
  // optional string title = 10;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->title(), target);
  }
  
  // optional double end_time = 11;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->end_time(), target);
  }
  
  // optional string corp = 12;
  if (has_corp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->corp().data(), this->corp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->corp(), target);
  }
  
  // optional int32 allowed = 13;
  if (has_allowed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->allowed(), target);
  }
  
  // optional bool need_alarm = 14;
  if (has_need_alarm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->need_alarm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProcessLog::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }
    
    // optional int32 equipid = 3;
    if (has_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equipid());
    }
    
    // optional string winuser = 4;
    if (has_winuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->winuser());
    }
    
    // optional string ip = 5;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // optional string host = 6;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }
    
    // optional double time = 7;
    if (has_time()) {
      total_size += 1 + 8;
    }
    
    // optional int32 pid = 8;
    if (has_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string path = 9;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
    // optional string title = 10;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }
    
    // optional double end_time = 11;
    if (has_end_time()) {
      total_size += 1 + 8;
    }
    
    // optional string corp = 12;
    if (has_corp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->corp());
    }
    
    // optional int32 allowed = 13;
    if (has_allowed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allowed());
    }
    
    // optional bool need_alarm = 14;
    if (has_need_alarm()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProcessLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProcessLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProcessLog::MergeFrom(const ProcessLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_equipid()) {
      set_equipid(from.equipid());
    }
    if (from.has_winuser()) {
      set_winuser(from.winuser());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_pid()) {
      set_pid(from.pid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_corp()) {
      set_corp(from.corp());
    }
    if (from.has_allowed()) {
      set_allowed(from.allowed());
    }
    if (from.has_need_alarm()) {
      set_need_alarm(from.need_alarm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProcessLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessLog::CopyFrom(const ProcessLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessLog::IsInitialized() const {
  
  return true;
}

void ProcessLog::Swap(ProcessLog* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(userid_, other->userid_);
    std::swap(equipid_, other->equipid_);
    std::swap(winuser_, other->winuser_);
    std::swap(ip_, other->ip_);
    std::swap(host_, other->host_);
    std::swap(time_, other->time_);
    std::swap(pid_, other->pid_);
    std::swap(path_, other->path_);
    std::swap(title_, other->title_);
    std::swap(end_time_, other->end_time_);
    std::swap(corp_, other->corp_);
    std::swap(allowed_, other->allowed_);
    std::swap(need_alarm_, other->need_alarm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProcessLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcessLog_descriptor_;
  metadata.reflection = ProcessLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProcessLogList::kListFieldNumber;
#endif  // !_MSC_VER

ProcessLogList::ProcessLogList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProcessLogList::InitAsDefaultInstance() {
}

ProcessLogList::ProcessLogList(const ProcessLogList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProcessLogList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcessLogList::~ProcessLogList() {
  SharedDtor();
}

void ProcessLogList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProcessLogList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessLogList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessLogList_descriptor_;
}

const ProcessLogList& ProcessLogList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logmessage_2eproto();  return *default_instance_;
}

ProcessLogList* ProcessLogList::default_instance_ = NULL;

ProcessLogList* ProcessLogList::New() const {
  return new ProcessLogList;
}

void ProcessLogList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProcessLogList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .isafetec.ProcessLog list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProcessLogList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .isafetec.ProcessLog list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProcessLogList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .isafetec.ProcessLog list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProcessLogList::ByteSize() const {
  int total_size = 0;
  
  // repeated .isafetec.ProcessLog list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessLogList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProcessLogList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProcessLogList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProcessLogList::MergeFrom(const ProcessLogList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProcessLogList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessLogList::CopyFrom(const ProcessLogList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessLogList::IsInitialized() const {
  
  return true;
}

void ProcessLogList::Swap(ProcessLogList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProcessLogList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcessLogList_descriptor_;
  metadata.reflection = ProcessLogList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScreenLog::kIdFieldNumber;
const int ScreenLog::kUseridFieldNumber;
const int ScreenLog::kEquipidFieldNumber;
const int ScreenLog::kWinuserFieldNumber;
const int ScreenLog::kIpFieldNumber;
const int ScreenLog::kHostFieldNumber;
const int ScreenLog::kTimeFieldNumber;
const int ScreenLog::kWithFieldNumber;
const int ScreenLog::kHeightFieldNumber;
const int ScreenLog::kSaveTypeFieldNumber;
const int ScreenLog::kFileSizeFieldNumber;
const int ScreenLog::kFilePathFieldNumber;
const int ScreenLog::kRootPathFieldNumber;
#endif  // !_MSC_VER

ScreenLog::ScreenLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScreenLog::InitAsDefaultInstance() {
}

ScreenLog::ScreenLog(const ScreenLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScreenLog::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  userid_ = 0;
  equipid_ = 0;
  winuser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = 0;
  with_ = 0;
  height_ = 0;
  save_type_ = 0;
  file_size_ = 0;
  file_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  root_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScreenLog::~ScreenLog() {
  SharedDtor();
}

void ScreenLog::SharedDtor() {
  if (winuser_ != &::google::protobuf::internal::kEmptyString) {
    delete winuser_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (file_path_ != &::google::protobuf::internal::kEmptyString) {
    delete file_path_;
  }
  if (root_path_ != &::google::protobuf::internal::kEmptyString) {
    delete root_path_;
  }
  if (this != default_instance_) {
  }
}

void ScreenLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScreenLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScreenLog_descriptor_;
}

const ScreenLog& ScreenLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logmessage_2eproto();  return *default_instance_;
}

ScreenLog* ScreenLog::default_instance_ = NULL;

ScreenLog* ScreenLog::New() const {
  return new ScreenLog;
}

void ScreenLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    userid_ = 0;
    equipid_ = 0;
    if (has_winuser()) {
      if (winuser_ != &::google::protobuf::internal::kEmptyString) {
        winuser_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::kEmptyString) {
        host_->clear();
      }
    }
    time_ = 0;
    with_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    height_ = 0;
    save_type_ = 0;
    file_size_ = 0;
    if (has_file_path()) {
      if (file_path_ != &::google::protobuf::internal::kEmptyString) {
        file_path_->clear();
      }
    }
    if (has_root_path()) {
      if (root_path_ != &::google::protobuf::internal::kEmptyString) {
        root_path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScreenLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }
      
      // optional int32 userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equipid;
        break;
      }
      
      // optional int32 equipid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equipid_)));
          set_has_equipid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_winuser;
        break;
      }
      
      // optional string winuser = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_winuser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_winuser()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->winuser().data(), this->winuser().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ip;
        break;
      }
      
      // optional string ip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_host;
        break;
      }
      
      // optional string host = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_time;
        break;
      }
      
      // optional double time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_with;
        break;
      }
      
      // optional int32 with = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_with:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &with_)));
          set_has_with();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_height;
        break;
      }
      
      // optional int32 height = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_save_type;
        break;
      }
      
      // optional .isafetec.SCREEN_SAVE_TYPE save_type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_save_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::SCREEN_SAVE_TYPE_IsValid(value)) {
            set_save_type(static_cast< isafetec::SCREEN_SAVE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_file_size;
        break;
      }
      
      // optional int32 file_size = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &file_size_)));
          set_has_file_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_file_Path;
        break;
      }
      
      // optional string file_Path = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_Path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_path().data(), this->file_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_root_path;
        break;
      }
      
      // optional string root_path = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_root_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_root_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->root_path().data(), this->root_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScreenLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }
  
  // optional int32 equipid = 3;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->equipid(), output);
  }
  
  // optional string winuser = 4;
  if (has_winuser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->winuser().data(), this->winuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->winuser(), output);
  }
  
  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ip(), output);
  }
  
  // optional string host = 6;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->host(), output);
  }
  
  // optional double time = 7;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->time(), output);
  }
  
  // optional int32 with = 8;
  if (has_with()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->with(), output);
  }
  
  // optional int32 height = 9;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->height(), output);
  }
  
  // optional .isafetec.SCREEN_SAVE_TYPE save_type = 10;
  if (has_save_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->save_type(), output);
  }
  
  // optional int32 file_size = 11;
  if (has_file_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->file_size(), output);
  }
  
  // optional string file_Path = 12;
  if (has_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->file_path(), output);
  }
  
  // optional string root_path = 13;
  if (has_root_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->root_path().data(), this->root_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->root_path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScreenLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }
  
  // optional int32 equipid = 3;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->equipid(), target);
  }
  
  // optional string winuser = 4;
  if (has_winuser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->winuser().data(), this->winuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->winuser(), target);
  }
  
  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ip(), target);
  }
  
  // optional string host = 6;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->host(), target);
  }
  
  // optional double time = 7;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->time(), target);
  }
  
  // optional int32 with = 8;
  if (has_with()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->with(), target);
  }
  
  // optional int32 height = 9;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->height(), target);
  }
  
  // optional .isafetec.SCREEN_SAVE_TYPE save_type = 10;
  if (has_save_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->save_type(), target);
  }
  
  // optional int32 file_size = 11;
  if (has_file_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->file_size(), target);
  }
  
  // optional string file_Path = 12;
  if (has_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->file_path(), target);
  }
  
  // optional string root_path = 13;
  if (has_root_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->root_path().data(), this->root_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->root_path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScreenLog::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }
    
    // optional int32 equipid = 3;
    if (has_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equipid());
    }
    
    // optional string winuser = 4;
    if (has_winuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->winuser());
    }
    
    // optional string ip = 5;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // optional string host = 6;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }
    
    // optional double time = 7;
    if (has_time()) {
      total_size += 1 + 8;
    }
    
    // optional int32 with = 8;
    if (has_with()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->with());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 height = 9;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }
    
    // optional .isafetec.SCREEN_SAVE_TYPE save_type = 10;
    if (has_save_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->save_type());
    }
    
    // optional int32 file_size = 11;
    if (has_file_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->file_size());
    }
    
    // optional string file_Path = 12;
    if (has_file_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_path());
    }
    
    // optional string root_path = 13;
    if (has_root_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->root_path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScreenLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScreenLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScreenLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScreenLog::MergeFrom(const ScreenLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_equipid()) {
      set_equipid(from.equipid());
    }
    if (from.has_winuser()) {
      set_winuser(from.winuser());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_with()) {
      set_with(from.with());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_save_type()) {
      set_save_type(from.save_type());
    }
    if (from.has_file_size()) {
      set_file_size(from.file_size());
    }
    if (from.has_file_path()) {
      set_file_path(from.file_path());
    }
    if (from.has_root_path()) {
      set_root_path(from.root_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScreenLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScreenLog::CopyFrom(const ScreenLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScreenLog::IsInitialized() const {
  
  return true;
}

void ScreenLog::Swap(ScreenLog* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(userid_, other->userid_);
    std::swap(equipid_, other->equipid_);
    std::swap(winuser_, other->winuser_);
    std::swap(ip_, other->ip_);
    std::swap(host_, other->host_);
    std::swap(time_, other->time_);
    std::swap(with_, other->with_);
    std::swap(height_, other->height_);
    std::swap(save_type_, other->save_type_);
    std::swap(file_size_, other->file_size_);
    std::swap(file_path_, other->file_path_);
    std::swap(root_path_, other->root_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScreenLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScreenLog_descriptor_;
  metadata.reflection = ScreenLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScreenLogList::kListFieldNumber;
#endif  // !_MSC_VER

ScreenLogList::ScreenLogList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScreenLogList::InitAsDefaultInstance() {
}

ScreenLogList::ScreenLogList(const ScreenLogList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScreenLogList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScreenLogList::~ScreenLogList() {
  SharedDtor();
}

void ScreenLogList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScreenLogList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScreenLogList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScreenLogList_descriptor_;
}

const ScreenLogList& ScreenLogList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logmessage_2eproto();  return *default_instance_;
}

ScreenLogList* ScreenLogList::default_instance_ = NULL;

ScreenLogList* ScreenLogList::New() const {
  return new ScreenLogList;
}

void ScreenLogList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScreenLogList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .isafetec.ScreenLog list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScreenLogList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .isafetec.ScreenLog list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScreenLogList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .isafetec.ScreenLog list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScreenLogList::ByteSize() const {
  int total_size = 0;
  
  // repeated .isafetec.ScreenLog list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScreenLogList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScreenLogList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScreenLogList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScreenLogList::MergeFrom(const ScreenLogList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScreenLogList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScreenLogList::CopyFrom(const ScreenLogList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScreenLogList::IsInitialized() const {
  
  return true;
}

void ScreenLogList::Swap(ScreenLogList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScreenLogList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScreenLogList_descriptor_;
  metadata.reflection = ScreenLogList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileOperatorLog::kIdFieldNumber;
const int FileOperatorLog::kUseridFieldNumber;
const int FileOperatorLog::kEquipidFieldNumber;
const int FileOperatorLog::kWinuserFieldNumber;
const int FileOperatorLog::kIpFieldNumber;
const int FileOperatorLog::kHostFieldNumber;
const int FileOperatorLog::kTimeFieldNumber;
const int FileOperatorLog::kProcessNameFieldNumber;
const int FileOperatorLog::kProcessTitleFieldNumber;
const int FileOperatorLog::kOpFieldNumber;
const int FileOperatorLog::kAllowedFieldNumber;
const int FileOperatorLog::kSourcePathFieldNumber;
const int FileOperatorLog::kSourceDeviceTypeFieldNumber;
const int FileOperatorLog::kDestPathFieldNumber;
const int FileOperatorLog::kDestDeviceTypeFieldNumber;
const int FileOperatorLog::kRemarkFieldNumber;
#endif  // !_MSC_VER

FileOperatorLog::FileOperatorLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileOperatorLog::InitAsDefaultInstance() {
}

FileOperatorLog::FileOperatorLog(const FileOperatorLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileOperatorLog::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  userid_ = 0;
  equipid_ = 0;
  winuser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = 0;
  process_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  process_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  op_ = 0;
  allowed_ = 0;
  source_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  source_device_type_ = 0;
  dest_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dest_device_type_ = 0;
  remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileOperatorLog::~FileOperatorLog() {
  SharedDtor();
}

void FileOperatorLog::SharedDtor() {
  if (winuser_ != &::google::protobuf::internal::kEmptyString) {
    delete winuser_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (process_name_ != &::google::protobuf::internal::kEmptyString) {
    delete process_name_;
  }
  if (process_title_ != &::google::protobuf::internal::kEmptyString) {
    delete process_title_;
  }
  if (source_path_ != &::google::protobuf::internal::kEmptyString) {
    delete source_path_;
  }
  if (dest_path_ != &::google::protobuf::internal::kEmptyString) {
    delete dest_path_;
  }
  if (remark_ != &::google::protobuf::internal::kEmptyString) {
    delete remark_;
  }
  if (this != default_instance_) {
  }
}

void FileOperatorLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileOperatorLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileOperatorLog_descriptor_;
}

const FileOperatorLog& FileOperatorLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logmessage_2eproto();  return *default_instance_;
}

FileOperatorLog* FileOperatorLog::default_instance_ = NULL;

FileOperatorLog* FileOperatorLog::New() const {
  return new FileOperatorLog;
}

void FileOperatorLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    userid_ = 0;
    equipid_ = 0;
    if (has_winuser()) {
      if (winuser_ != &::google::protobuf::internal::kEmptyString) {
        winuser_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::kEmptyString) {
        host_->clear();
      }
    }
    time_ = 0;
    if (has_process_name()) {
      if (process_name_ != &::google::protobuf::internal::kEmptyString) {
        process_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_process_title()) {
      if (process_title_ != &::google::protobuf::internal::kEmptyString) {
        process_title_->clear();
      }
    }
    op_ = 0;
    allowed_ = 0;
    if (has_source_path()) {
      if (source_path_ != &::google::protobuf::internal::kEmptyString) {
        source_path_->clear();
      }
    }
    source_device_type_ = 0;
    if (has_dest_path()) {
      if (dest_path_ != &::google::protobuf::internal::kEmptyString) {
        dest_path_->clear();
      }
    }
    dest_device_type_ = 0;
    if (has_remark()) {
      if (remark_ != &::google::protobuf::internal::kEmptyString) {
        remark_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileOperatorLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }
      
      // optional int32 userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equipid;
        break;
      }
      
      // optional int32 equipid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equipid_)));
          set_has_equipid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_winuser;
        break;
      }
      
      // optional string winuser = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_winuser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_winuser()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->winuser().data(), this->winuser().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ip;
        break;
      }
      
      // optional string ip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_host;
        break;
      }
      
      // optional string host = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_time;
        break;
      }
      
      // optional double time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_process_name;
        break;
      }
      
      // optional string process_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_process_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_process_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->process_name().data(), this->process_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_process_title;
        break;
      }
      
      // optional string process_title = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_process_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_process_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->process_title().data(), this->process_title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_op;
        break;
      }
      
      // optional int32 op = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_)));
          set_has_op();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_allowed;
        break;
      }
      
      // optional int32 allowed = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allowed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allowed_)));
          set_has_allowed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_source_path;
        break;
      }
      
      // optional string source_path = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_source_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->source_path().data(), this->source_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_source_device_Type;
        break;
      }
      
      // optional int32 source_device_Type = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_device_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_device_type_)));
          set_has_source_device_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_dest_path;
        break;
      }
      
      // optional string dest_path = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dest_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dest_path().data(), this->dest_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_dest_device_type;
        break;
      }
      
      // optional int32 dest_device_type = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_device_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dest_device_type_)));
          set_has_dest_device_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_remark;
        break;
      }
      
      // optional string remark = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->remark().data(), this->remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileOperatorLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }
  
  // optional int32 equipid = 3;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->equipid(), output);
  }
  
  // optional string winuser = 4;
  if (has_winuser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->winuser().data(), this->winuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->winuser(), output);
  }
  
  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ip(), output);
  }
  
  // optional string host = 6;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->host(), output);
  }
  
  // optional double time = 7;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->time(), output);
  }
  
  // optional string process_name = 8;
  if (has_process_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->process_name().data(), this->process_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->process_name(), output);
  }
  
  // optional string process_title = 9;
  if (has_process_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->process_title().data(), this->process_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->process_title(), output);
  }
  
  // optional int32 op = 10;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->op(), output);
  }
  
  // optional int32 allowed = 11;
  if (has_allowed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->allowed(), output);
  }
  
  // optional string source_path = 12;
  if (has_source_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source_path().data(), this->source_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->source_path(), output);
  }
  
  // optional int32 source_device_Type = 13;
  if (has_source_device_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->source_device_type(), output);
  }
  
  // optional string dest_path = 14;
  if (has_dest_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dest_path().data(), this->dest_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->dest_path(), output);
  }
  
  // optional int32 dest_device_type = 15;
  if (has_dest_device_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->dest_device_type(), output);
  }
  
  // optional string remark = 16;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->remark(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileOperatorLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }
  
  // optional int32 equipid = 3;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->equipid(), target);
  }
  
  // optional string winuser = 4;
  if (has_winuser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->winuser().data(), this->winuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->winuser(), target);
  }
  
  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ip(), target);
  }
  
  // optional string host = 6;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->host(), target);
  }
  
  // optional double time = 7;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->time(), target);
  }
  
  // optional string process_name = 8;
  if (has_process_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->process_name().data(), this->process_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->process_name(), target);
  }
  
  // optional string process_title = 9;
  if (has_process_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->process_title().data(), this->process_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->process_title(), target);
  }
  
  // optional int32 op = 10;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->op(), target);
  }
  
  // optional int32 allowed = 11;
  if (has_allowed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->allowed(), target);
  }
  
  // optional string source_path = 12;
  if (has_source_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source_path().data(), this->source_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->source_path(), target);
  }
  
  // optional int32 source_device_Type = 13;
  if (has_source_device_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->source_device_type(), target);
  }
  
  // optional string dest_path = 14;
  if (has_dest_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dest_path().data(), this->dest_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->dest_path(), target);
  }
  
  // optional int32 dest_device_type = 15;
  if (has_dest_device_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->dest_device_type(), target);
  }
  
  // optional string remark = 16;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->remark(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileOperatorLog::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }
    
    // optional int32 equipid = 3;
    if (has_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equipid());
    }
    
    // optional string winuser = 4;
    if (has_winuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->winuser());
    }
    
    // optional string ip = 5;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // optional string host = 6;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }
    
    // optional double time = 7;
    if (has_time()) {
      total_size += 1 + 8;
    }
    
    // optional string process_name = 8;
    if (has_process_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->process_name());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string process_title = 9;
    if (has_process_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->process_title());
    }
    
    // optional int32 op = 10;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->op());
    }
    
    // optional int32 allowed = 11;
    if (has_allowed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allowed());
    }
    
    // optional string source_path = 12;
    if (has_source_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source_path());
    }
    
    // optional int32 source_device_Type = 13;
    if (has_source_device_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->source_device_type());
    }
    
    // optional string dest_path = 14;
    if (has_dest_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dest_path());
    }
    
    // optional int32 dest_device_type = 15;
    if (has_dest_device_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dest_device_type());
    }
    
    // optional string remark = 16;
    if (has_remark()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remark());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileOperatorLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileOperatorLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileOperatorLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileOperatorLog::MergeFrom(const FileOperatorLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_equipid()) {
      set_equipid(from.equipid());
    }
    if (from.has_winuser()) {
      set_winuser(from.winuser());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_process_name()) {
      set_process_name(from.process_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_process_title()) {
      set_process_title(from.process_title());
    }
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_allowed()) {
      set_allowed(from.allowed());
    }
    if (from.has_source_path()) {
      set_source_path(from.source_path());
    }
    if (from.has_source_device_type()) {
      set_source_device_type(from.source_device_type());
    }
    if (from.has_dest_path()) {
      set_dest_path(from.dest_path());
    }
    if (from.has_dest_device_type()) {
      set_dest_device_type(from.dest_device_type());
    }
    if (from.has_remark()) {
      set_remark(from.remark());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileOperatorLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileOperatorLog::CopyFrom(const FileOperatorLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileOperatorLog::IsInitialized() const {
  
  return true;
}

void FileOperatorLog::Swap(FileOperatorLog* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(userid_, other->userid_);
    std::swap(equipid_, other->equipid_);
    std::swap(winuser_, other->winuser_);
    std::swap(ip_, other->ip_);
    std::swap(host_, other->host_);
    std::swap(time_, other->time_);
    std::swap(process_name_, other->process_name_);
    std::swap(process_title_, other->process_title_);
    std::swap(op_, other->op_);
    std::swap(allowed_, other->allowed_);
    std::swap(source_path_, other->source_path_);
    std::swap(source_device_type_, other->source_device_type_);
    std::swap(dest_path_, other->dest_path_);
    std::swap(dest_device_type_, other->dest_device_type_);
    std::swap(remark_, other->remark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileOperatorLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileOperatorLog_descriptor_;
  metadata.reflection = FileOperatorLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileOperatorLogList::kListFieldNumber;
#endif  // !_MSC_VER

FileOperatorLogList::FileOperatorLogList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileOperatorLogList::InitAsDefaultInstance() {
}

FileOperatorLogList::FileOperatorLogList(const FileOperatorLogList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileOperatorLogList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileOperatorLogList::~FileOperatorLogList() {
  SharedDtor();
}

void FileOperatorLogList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FileOperatorLogList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileOperatorLogList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileOperatorLogList_descriptor_;
}

const FileOperatorLogList& FileOperatorLogList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logmessage_2eproto();  return *default_instance_;
}

FileOperatorLogList* FileOperatorLogList::default_instance_ = NULL;

FileOperatorLogList* FileOperatorLogList::New() const {
  return new FileOperatorLogList;
}

void FileOperatorLogList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileOperatorLogList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .isafetec.FileOperatorLog list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileOperatorLogList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .isafetec.FileOperatorLog list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileOperatorLogList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .isafetec.FileOperatorLog list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileOperatorLogList::ByteSize() const {
  int total_size = 0;
  
  // repeated .isafetec.FileOperatorLog list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileOperatorLogList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileOperatorLogList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileOperatorLogList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileOperatorLogList::MergeFrom(const FileOperatorLogList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileOperatorLogList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileOperatorLogList::CopyFrom(const FileOperatorLogList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileOperatorLogList::IsInitialized() const {
  
  return true;
}

void FileOperatorLogList::Swap(FileOperatorLogList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FileOperatorLogList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileOperatorLogList_descriptor_;
  metadata.reflection = FileOperatorLogList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NetStreamLog::kIdFieldNumber;
const int NetStreamLog::kUseridFieldNumber;
const int NetStreamLog::kEquipidFieldNumber;
const int NetStreamLog::kWinuserFieldNumber;
const int NetStreamLog::kIpFieldNumber;
const int NetStreamLog::kHostFieldNumber;
const int NetStreamLog::kTimeFieldNumber;
const int NetStreamLog::kEtimeFieldNumber;
const int NetStreamLog::kIntervalFieldNumber;
const int NetStreamLog::kTypeFieldNumber;
const int NetStreamLog::kDirectionFieldNumber;
const int NetStreamLog::kDataLenFieldNumber;
const int NetStreamLog::kSrcPortFieldNumber;
const int NetStreamLog::kDestPortFieldNumber;
const int NetStreamLog::kSrcIpFieldNumber;
const int NetStreamLog::kDestIpFieldNumber;
const int NetStreamLog::kProcessPathFieldNumber;
const int NetStreamLog::kNeedAlarmFieldNumber;
#endif  // !_MSC_VER

NetStreamLog::NetStreamLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetStreamLog::InitAsDefaultInstance() {
}

NetStreamLog::NetStreamLog(const NetStreamLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetStreamLog::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  userid_ = 0;
  equipid_ = 0;
  winuser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = 0;
  etime_ = 0;
  interval_ = 0u;
  type_ = 0u;
  direction_ = 0u;
  data_len_ = 0u;
  src_port_ = 0u;
  dest_port_ = 0u;
  src_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dest_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  process_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  need_alarm_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetStreamLog::~NetStreamLog() {
  SharedDtor();
}

void NetStreamLog::SharedDtor() {
  if (winuser_ != &::google::protobuf::internal::kEmptyString) {
    delete winuser_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (src_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete src_ip_;
  }
  if (dest_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete dest_ip_;
  }
  if (process_path_ != &::google::protobuf::internal::kEmptyString) {
    delete process_path_;
  }
  if (this != default_instance_) {
  }
}

void NetStreamLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetStreamLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetStreamLog_descriptor_;
}

const NetStreamLog& NetStreamLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logmessage_2eproto();  return *default_instance_;
}

NetStreamLog* NetStreamLog::default_instance_ = NULL;

NetStreamLog* NetStreamLog::New() const {
  return new NetStreamLog;
}

void NetStreamLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    userid_ = 0;
    equipid_ = 0;
    if (has_winuser()) {
      if (winuser_ != &::google::protobuf::internal::kEmptyString) {
        winuser_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::kEmptyString) {
        host_->clear();
      }
    }
    time_ = 0;
    etime_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    interval_ = 0u;
    type_ = 0u;
    direction_ = 0u;
    data_len_ = 0u;
    src_port_ = 0u;
    dest_port_ = 0u;
    if (has_src_ip()) {
      if (src_ip_ != &::google::protobuf::internal::kEmptyString) {
        src_ip_->clear();
      }
    }
    if (has_dest_ip()) {
      if (dest_ip_ != &::google::protobuf::internal::kEmptyString) {
        dest_ip_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_process_path()) {
      if (process_path_ != &::google::protobuf::internal::kEmptyString) {
        process_path_->clear();
      }
    }
    need_alarm_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetStreamLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }
      
      // optional int32 userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equipid;
        break;
      }
      
      // optional int32 equipid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equipid_)));
          set_has_equipid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_winuser;
        break;
      }
      
      // optional string winuser = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_winuser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_winuser()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->winuser().data(), this->winuser().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ip;
        break;
      }
      
      // optional string ip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_host;
        break;
      }
      
      // optional string host = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_time;
        break;
      }
      
      // optional double time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_etime;
        break;
      }
      
      // optional double etime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_etime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &etime_)));
          set_has_etime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_interval;
        break;
      }
      
      // optional uint32 interval = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &interval_)));
          set_has_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_type;
        break;
      }
      
      // optional uint32 type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_direction;
        break;
      }
      
      // optional uint32 direction = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_data_len;
        break;
      }
      
      // optional uint32 data_len = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_len_)));
          set_has_data_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_src_port;
        break;
      }
      
      // optional uint32 src_port = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_port_)));
          set_has_src_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_dest_port;
        break;
      }
      
      // optional uint32 dest_port = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dest_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dest_port_)));
          set_has_dest_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_src_ip;
        break;
      }
      
      // optional string src_ip = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_src_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->src_ip().data(), this->src_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_dest_ip;
        break;
      }
      
      // optional string dest_ip = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dest_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dest_ip().data(), this->dest_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_process_path;
        break;
      }
      
      // optional string process_path = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_process_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_process_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->process_path().data(), this->process_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_need_alarm;
        break;
      }
      
      // optional bool need_alarm = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_alarm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_alarm_)));
          set_has_need_alarm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetStreamLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }
  
  // optional int32 equipid = 3;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->equipid(), output);
  }
  
  // optional string winuser = 4;
  if (has_winuser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->winuser().data(), this->winuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->winuser(), output);
  }
  
  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ip(), output);
  }
  
  // optional string host = 6;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->host(), output);
  }
  
  // optional double time = 7;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->time(), output);
  }
  
  // optional double etime = 8;
  if (has_etime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->etime(), output);
  }
  
  // optional uint32 interval = 9;
  if (has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->interval(), output);
  }
  
  // optional uint32 type = 10;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->type(), output);
  }
  
  // optional uint32 direction = 11;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->direction(), output);
  }
  
  // optional uint32 data_len = 12;
  if (has_data_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->data_len(), output);
  }
  
  // optional uint32 src_port = 13;
  if (has_src_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->src_port(), output);
  }
  
  // optional uint32 dest_port = 14;
  if (has_dest_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->dest_port(), output);
  }
  
  // optional string src_ip = 15;
  if (has_src_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src_ip().data(), this->src_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->src_ip(), output);
  }
  
  // optional string dest_ip = 16;
  if (has_dest_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dest_ip().data(), this->dest_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->dest_ip(), output);
  }
  
  // optional string process_path = 17;
  if (has_process_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->process_path().data(), this->process_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->process_path(), output);
  }
  
  // optional bool need_alarm = 18;
  if (has_need_alarm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->need_alarm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetStreamLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }
  
  // optional int32 equipid = 3;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->equipid(), target);
  }
  
  // optional string winuser = 4;
  if (has_winuser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->winuser().data(), this->winuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->winuser(), target);
  }
  
  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ip(), target);
  }
  
  // optional string host = 6;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->host(), target);
  }
  
  // optional double time = 7;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->time(), target);
  }
  
  // optional double etime = 8;
  if (has_etime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->etime(), target);
  }
  
  // optional uint32 interval = 9;
  if (has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->interval(), target);
  }
  
  // optional uint32 type = 10;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->type(), target);
  }
  
  // optional uint32 direction = 11;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->direction(), target);
  }
  
  // optional uint32 data_len = 12;
  if (has_data_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->data_len(), target);
  }
  
  // optional uint32 src_port = 13;
  if (has_src_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->src_port(), target);
  }
  
  // optional uint32 dest_port = 14;
  if (has_dest_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->dest_port(), target);
  }
  
  // optional string src_ip = 15;
  if (has_src_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->src_ip().data(), this->src_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->src_ip(), target);
  }
  
  // optional string dest_ip = 16;
  if (has_dest_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dest_ip().data(), this->dest_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->dest_ip(), target);
  }
  
  // optional string process_path = 17;
  if (has_process_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->process_path().data(), this->process_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->process_path(), target);
  }
  
  // optional bool need_alarm = 18;
  if (has_need_alarm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->need_alarm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetStreamLog::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }
    
    // optional int32 equipid = 3;
    if (has_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equipid());
    }
    
    // optional string winuser = 4;
    if (has_winuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->winuser());
    }
    
    // optional string ip = 5;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // optional string host = 6;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }
    
    // optional double time = 7;
    if (has_time()) {
      total_size += 1 + 8;
    }
    
    // optional double etime = 8;
    if (has_etime()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 interval = 9;
    if (has_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->interval());
    }
    
    // optional uint32 type = 10;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional uint32 direction = 11;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->direction());
    }
    
    // optional uint32 data_len = 12;
    if (has_data_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_len());
    }
    
    // optional uint32 src_port = 13;
    if (has_src_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_port());
    }
    
    // optional uint32 dest_port = 14;
    if (has_dest_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dest_port());
    }
    
    // optional string src_ip = 15;
    if (has_src_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src_ip());
    }
    
    // optional string dest_ip = 16;
    if (has_dest_ip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dest_ip());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string process_path = 17;
    if (has_process_path()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->process_path());
    }
    
    // optional bool need_alarm = 18;
    if (has_need_alarm()) {
      total_size += 2 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetStreamLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetStreamLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetStreamLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetStreamLog::MergeFrom(const NetStreamLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_equipid()) {
      set_equipid(from.equipid());
    }
    if (from.has_winuser()) {
      set_winuser(from.winuser());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_etime()) {
      set_etime(from.etime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_interval()) {
      set_interval(from.interval());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_data_len()) {
      set_data_len(from.data_len());
    }
    if (from.has_src_port()) {
      set_src_port(from.src_port());
    }
    if (from.has_dest_port()) {
      set_dest_port(from.dest_port());
    }
    if (from.has_src_ip()) {
      set_src_ip(from.src_ip());
    }
    if (from.has_dest_ip()) {
      set_dest_ip(from.dest_ip());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_process_path()) {
      set_process_path(from.process_path());
    }
    if (from.has_need_alarm()) {
      set_need_alarm(from.need_alarm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetStreamLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetStreamLog::CopyFrom(const NetStreamLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetStreamLog::IsInitialized() const {
  
  return true;
}

void NetStreamLog::Swap(NetStreamLog* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(userid_, other->userid_);
    std::swap(equipid_, other->equipid_);
    std::swap(winuser_, other->winuser_);
    std::swap(ip_, other->ip_);
    std::swap(host_, other->host_);
    std::swap(time_, other->time_);
    std::swap(etime_, other->etime_);
    std::swap(interval_, other->interval_);
    std::swap(type_, other->type_);
    std::swap(direction_, other->direction_);
    std::swap(data_len_, other->data_len_);
    std::swap(src_port_, other->src_port_);
    std::swap(dest_port_, other->dest_port_);
    std::swap(src_ip_, other->src_ip_);
    std::swap(dest_ip_, other->dest_ip_);
    std::swap(process_path_, other->process_path_);
    std::swap(need_alarm_, other->need_alarm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetStreamLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetStreamLog_descriptor_;
  metadata.reflection = NetStreamLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NetStreamLogList::kListFieldNumber;
#endif  // !_MSC_VER

NetStreamLogList::NetStreamLogList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetStreamLogList::InitAsDefaultInstance() {
}

NetStreamLogList::NetStreamLogList(const NetStreamLogList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetStreamLogList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetStreamLogList::~NetStreamLogList() {
  SharedDtor();
}

void NetStreamLogList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetStreamLogList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetStreamLogList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetStreamLogList_descriptor_;
}

const NetStreamLogList& NetStreamLogList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logmessage_2eproto();  return *default_instance_;
}

NetStreamLogList* NetStreamLogList::default_instance_ = NULL;

NetStreamLogList* NetStreamLogList::New() const {
  return new NetStreamLogList;
}

void NetStreamLogList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetStreamLogList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .isafetec.NetStreamLog list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetStreamLogList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .isafetec.NetStreamLog list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetStreamLogList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .isafetec.NetStreamLog list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetStreamLogList::ByteSize() const {
  int total_size = 0;
  
  // repeated .isafetec.NetStreamLog list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetStreamLogList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetStreamLogList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetStreamLogList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetStreamLogList::MergeFrom(const NetStreamLogList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetStreamLogList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetStreamLogList::CopyFrom(const NetStreamLogList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetStreamLogList::IsInitialized() const {
  
  return true;
}

void NetStreamLogList::Swap(NetStreamLogList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetStreamLogList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetStreamLogList_descriptor_;
  metadata.reflection = NetStreamLogList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipIdleTimeLog::kIdFieldNumber;
const int EquipIdleTimeLog::kUseridFieldNumber;
const int EquipIdleTimeLog::kEquipidFieldNumber;
const int EquipIdleTimeLog::kWinuserFieldNumber;
const int EquipIdleTimeLog::kIpFieldNumber;
const int EquipIdleTimeLog::kHostFieldNumber;
const int EquipIdleTimeLog::kTimeFieldNumber;
const int EquipIdleTimeLog::kBtimeFieldNumber;
const int EquipIdleTimeLog::kEtimeFieldNumber;
const int EquipIdleTimeLog::kIdleminuteFieldNumber;
#endif  // !_MSC_VER

EquipIdleTimeLog::EquipIdleTimeLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipIdleTimeLog::InitAsDefaultInstance() {
}

EquipIdleTimeLog::EquipIdleTimeLog(const EquipIdleTimeLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipIdleTimeLog::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  userid_ = 0;
  equipid_ = 0;
  winuser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = 0;
  btime_ = 0;
  etime_ = 0;
  idleminute_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipIdleTimeLog::~EquipIdleTimeLog() {
  SharedDtor();
}

void EquipIdleTimeLog::SharedDtor() {
  if (winuser_ != &::google::protobuf::internal::kEmptyString) {
    delete winuser_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (this != default_instance_) {
  }
}

void EquipIdleTimeLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipIdleTimeLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipIdleTimeLog_descriptor_;
}

const EquipIdleTimeLog& EquipIdleTimeLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logmessage_2eproto();  return *default_instance_;
}

EquipIdleTimeLog* EquipIdleTimeLog::default_instance_ = NULL;

EquipIdleTimeLog* EquipIdleTimeLog::New() const {
  return new EquipIdleTimeLog;
}

void EquipIdleTimeLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    userid_ = 0;
    equipid_ = 0;
    if (has_winuser()) {
      if (winuser_ != &::google::protobuf::internal::kEmptyString) {
        winuser_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::kEmptyString) {
        host_->clear();
      }
    }
    time_ = 0;
    btime_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    etime_ = 0;
    idleminute_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipIdleTimeLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }
      
      // optional int32 userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equipid;
        break;
      }
      
      // optional int32 equipid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equipid_)));
          set_has_equipid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_winuser;
        break;
      }
      
      // optional string winuser = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_winuser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_winuser()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->winuser().data(), this->winuser().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ip;
        break;
      }
      
      // optional string ip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_host;
        break;
      }
      
      // optional string host = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_time;
        break;
      }
      
      // optional double time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_btime;
        break;
      }
      
      // optional double btime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_btime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &btime_)));
          set_has_btime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_etime;
        break;
      }
      
      // optional double etime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_etime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &etime_)));
          set_has_etime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_idleminute;
        break;
      }
      
      // optional int32 idleminute = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_idleminute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idleminute_)));
          set_has_idleminute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipIdleTimeLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }
  
  // optional int32 equipid = 3;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->equipid(), output);
  }
  
  // optional string winuser = 4;
  if (has_winuser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->winuser().data(), this->winuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->winuser(), output);
  }
  
  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ip(), output);
  }
  
  // optional string host = 6;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->host(), output);
  }
  
  // optional double time = 7;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->time(), output);
  }
  
  // optional double btime = 8;
  if (has_btime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->btime(), output);
  }
  
  // optional double etime = 9;
  if (has_etime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->etime(), output);
  }
  
  // optional int32 idleminute = 10;
  if (has_idleminute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->idleminute(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipIdleTimeLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }
  
  // optional int32 equipid = 3;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->equipid(), target);
  }
  
  // optional string winuser = 4;
  if (has_winuser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->winuser().data(), this->winuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->winuser(), target);
  }
  
  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ip(), target);
  }
  
  // optional string host = 6;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->host(), target);
  }
  
  // optional double time = 7;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->time(), target);
  }
  
  // optional double btime = 8;
  if (has_btime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->btime(), target);
  }
  
  // optional double etime = 9;
  if (has_etime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->etime(), target);
  }
  
  // optional int32 idleminute = 10;
  if (has_idleminute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->idleminute(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipIdleTimeLog::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }
    
    // optional int32 equipid = 3;
    if (has_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equipid());
    }
    
    // optional string winuser = 4;
    if (has_winuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->winuser());
    }
    
    // optional string ip = 5;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // optional string host = 6;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }
    
    // optional double time = 7;
    if (has_time()) {
      total_size += 1 + 8;
    }
    
    // optional double btime = 8;
    if (has_btime()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double etime = 9;
    if (has_etime()) {
      total_size += 1 + 8;
    }
    
    // optional int32 idleminute = 10;
    if (has_idleminute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idleminute());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipIdleTimeLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipIdleTimeLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipIdleTimeLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipIdleTimeLog::MergeFrom(const EquipIdleTimeLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_equipid()) {
      set_equipid(from.equipid());
    }
    if (from.has_winuser()) {
      set_winuser(from.winuser());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_btime()) {
      set_btime(from.btime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_etime()) {
      set_etime(from.etime());
    }
    if (from.has_idleminute()) {
      set_idleminute(from.idleminute());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipIdleTimeLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipIdleTimeLog::CopyFrom(const EquipIdleTimeLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipIdleTimeLog::IsInitialized() const {
  
  return true;
}

void EquipIdleTimeLog::Swap(EquipIdleTimeLog* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(userid_, other->userid_);
    std::swap(equipid_, other->equipid_);
    std::swap(winuser_, other->winuser_);
    std::swap(ip_, other->ip_);
    std::swap(host_, other->host_);
    std::swap(time_, other->time_);
    std::swap(btime_, other->btime_);
    std::swap(etime_, other->etime_);
    std::swap(idleminute_, other->idleminute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipIdleTimeLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipIdleTimeLog_descriptor_;
  metadata.reflection = EquipIdleTimeLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipIdleTimeLogList::kListFieldNumber;
#endif  // !_MSC_VER

EquipIdleTimeLogList::EquipIdleTimeLogList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipIdleTimeLogList::InitAsDefaultInstance() {
}

EquipIdleTimeLogList::EquipIdleTimeLogList(const EquipIdleTimeLogList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipIdleTimeLogList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipIdleTimeLogList::~EquipIdleTimeLogList() {
  SharedDtor();
}

void EquipIdleTimeLogList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipIdleTimeLogList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipIdleTimeLogList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipIdleTimeLogList_descriptor_;
}

const EquipIdleTimeLogList& EquipIdleTimeLogList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logmessage_2eproto();  return *default_instance_;
}

EquipIdleTimeLogList* EquipIdleTimeLogList::default_instance_ = NULL;

EquipIdleTimeLogList* EquipIdleTimeLogList::New() const {
  return new EquipIdleTimeLogList;
}

void EquipIdleTimeLogList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipIdleTimeLogList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .isafetec.EquipIdleTimeLog list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipIdleTimeLogList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .isafetec.EquipIdleTimeLog list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipIdleTimeLogList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .isafetec.EquipIdleTimeLog list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipIdleTimeLogList::ByteSize() const {
  int total_size = 0;
  
  // repeated .isafetec.EquipIdleTimeLog list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipIdleTimeLogList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipIdleTimeLogList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipIdleTimeLogList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipIdleTimeLogList::MergeFrom(const EquipIdleTimeLogList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipIdleTimeLogList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipIdleTimeLogList::CopyFrom(const EquipIdleTimeLogList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipIdleTimeLogList::IsInitialized() const {
  
  return true;
}

void EquipIdleTimeLogList::Swap(EquipIdleTimeLogList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipIdleTimeLogList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipIdleTimeLogList_descriptor_;
  metadata.reflection = EquipIdleTimeLogList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailLog::kIdFieldNumber;
const int MailLog::kUseridFieldNumber;
const int MailLog::kEquipidFieldNumber;
const int MailLog::kWinuserFieldNumber;
const int MailLog::kIpFieldNumber;
const int MailLog::kHostFieldNumber;
const int MailLog::kTimeFieldNumber;
const int MailLog::kWebMailFieldNumber;
const int MailLog::kFromFieldNumber;
const int MailLog::kToFieldNumber;
const int MailLog::kCopytoFieldNumber;
const int MailLog::kContentFieldNumber;
const int MailLog::kAttachmentSizeFieldNumber;
const int MailLog::kAttachmentFieldNumber;
#endif  // !_MSC_VER

MailLog::MailLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailLog::InitAsDefaultInstance() {
}

MailLog::MailLog(const MailLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailLog::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  userid_ = 0;
  equipid_ = 0;
  winuser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = 0;
  web_mail_ = 0;
  from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  copyto_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attachment_size_ = 0;
  attachment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailLog::~MailLog() {
  SharedDtor();
}

void MailLog::SharedDtor() {
  if (winuser_ != &::google::protobuf::internal::kEmptyString) {
    delete winuser_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    delete to_;
  }
  if (copyto_ != &::google::protobuf::internal::kEmptyString) {
    delete copyto_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (attachment_ != &::google::protobuf::internal::kEmptyString) {
    delete attachment_;
  }
  if (this != default_instance_) {
  }
}

void MailLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailLog_descriptor_;
}

const MailLog& MailLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logmessage_2eproto();  return *default_instance_;
}

MailLog* MailLog::default_instance_ = NULL;

MailLog* MailLog::New() const {
  return new MailLog;
}

void MailLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    userid_ = 0;
    equipid_ = 0;
    if (has_winuser()) {
      if (winuser_ != &::google::protobuf::internal::kEmptyString) {
        winuser_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::kEmptyString) {
        host_->clear();
      }
    }
    time_ = 0;
    web_mail_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_from()) {
      if (from_ != &::google::protobuf::internal::kEmptyString) {
        from_->clear();
      }
    }
    if (has_to()) {
      if (to_ != &::google::protobuf::internal::kEmptyString) {
        to_->clear();
      }
    }
    if (has_copyto()) {
      if (copyto_ != &::google::protobuf::internal::kEmptyString) {
        copyto_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    attachment_size_ = 0;
    if (has_attachment()) {
      if (attachment_ != &::google::protobuf::internal::kEmptyString) {
        attachment_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }
      
      // optional int32 userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equipid;
        break;
      }
      
      // optional int32 equipid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equipid_)));
          set_has_equipid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_winuser;
        break;
      }
      
      // optional string winuser = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_winuser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_winuser()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->winuser().data(), this->winuser().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ip;
        break;
      }
      
      // optional string ip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_host;
        break;
      }
      
      // optional string host = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_time;
        break;
      }
      
      // optional double time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_web_mail;
        break;
      }
      
      // optional int32 web_mail = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_web_mail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &web_mail_)));
          set_has_web_mail();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_from;
        break;
      }
      
      // optional string from = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from().data(), this->from().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_to;
        break;
      }
      
      // optional string to = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->to().data(), this->to().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_copyto;
        break;
      }
      
      // optional string copyto = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_copyto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_copyto()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->copyto().data(), this->copyto().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_content;
        break;
      }
      
      // optional string content = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_attachment_size;
        break;
      }
      
      // optional int32 attachment_size = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attachment_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attachment_size_)));
          set_has_attachment_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_attachment;
        break;
      }
      
      // optional string attachment = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attachment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_attachment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attachment().data(), this->attachment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }
  
  // optional int32 equipid = 3;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->equipid(), output);
  }
  
  // optional string winuser = 4;
  if (has_winuser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->winuser().data(), this->winuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->winuser(), output);
  }
  
  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ip(), output);
  }
  
  // optional string host = 6;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->host(), output);
  }
  
  // optional double time = 7;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->time(), output);
  }
  
  // optional int32 web_mail = 8;
  if (has_web_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->web_mail(), output);
  }
  
  // optional string from = 9;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->from(), output);
  }
  
  // optional string to = 10;
  if (has_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->to(), output);
  }
  
  // optional string copyto = 11;
  if (has_copyto()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->copyto().data(), this->copyto().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->copyto(), output);
  }
  
  // optional string content = 12;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->content(), output);
  }
  
  // optional int32 attachment_size = 13;
  if (has_attachment_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->attachment_size(), output);
  }
  
  // optional string attachment = 14;
  if (has_attachment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attachment().data(), this->attachment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->attachment(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }
  
  // optional int32 equipid = 3;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->equipid(), target);
  }
  
  // optional string winuser = 4;
  if (has_winuser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->winuser().data(), this->winuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->winuser(), target);
  }
  
  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ip(), target);
  }
  
  // optional string host = 6;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->host(), target);
  }
  
  // optional double time = 7;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->time(), target);
  }
  
  // optional int32 web_mail = 8;
  if (has_web_mail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->web_mail(), target);
  }
  
  // optional string from = 9;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->from(), target);
  }
  
  // optional string to = 10;
  if (has_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->to(), target);
  }
  
  // optional string copyto = 11;
  if (has_copyto()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->copyto().data(), this->copyto().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->copyto(), target);
  }
  
  // optional string content = 12;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->content(), target);
  }
  
  // optional int32 attachment_size = 13;
  if (has_attachment_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->attachment_size(), target);
  }
  
  // optional string attachment = 14;
  if (has_attachment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attachment().data(), this->attachment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->attachment(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailLog::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }
    
    // optional int32 equipid = 3;
    if (has_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equipid());
    }
    
    // optional string winuser = 4;
    if (has_winuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->winuser());
    }
    
    // optional string ip = 5;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // optional string host = 6;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }
    
    // optional double time = 7;
    if (has_time()) {
      total_size += 1 + 8;
    }
    
    // optional int32 web_mail = 8;
    if (has_web_mail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->web_mail());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string from = 9;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from());
    }
    
    // optional string to = 10;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to());
    }
    
    // optional string copyto = 11;
    if (has_copyto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->copyto());
    }
    
    // optional string content = 12;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
    // optional int32 attachment_size = 13;
    if (has_attachment_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attachment_size());
    }
    
    // optional string attachment = 14;
    if (has_attachment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->attachment());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailLog::MergeFrom(const MailLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_equipid()) {
      set_equipid(from.equipid());
    }
    if (from.has_winuser()) {
      set_winuser(from.winuser());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_web_mail()) {
      set_web_mail(from.web_mail());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_to()) {
      set_to(from.to());
    }
    if (from.has_copyto()) {
      set_copyto(from.copyto());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_attachment_size()) {
      set_attachment_size(from.attachment_size());
    }
    if (from.has_attachment()) {
      set_attachment(from.attachment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailLog::CopyFrom(const MailLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailLog::IsInitialized() const {
  
  return true;
}

void MailLog::Swap(MailLog* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(userid_, other->userid_);
    std::swap(equipid_, other->equipid_);
    std::swap(winuser_, other->winuser_);
    std::swap(ip_, other->ip_);
    std::swap(host_, other->host_);
    std::swap(time_, other->time_);
    std::swap(web_mail_, other->web_mail_);
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(copyto_, other->copyto_);
    std::swap(content_, other->content_);
    std::swap(attachment_size_, other->attachment_size_);
    std::swap(attachment_, other->attachment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailLog_descriptor_;
  metadata.reflection = MailLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailLogList::kListFieldNumber;
#endif  // !_MSC_VER

MailLogList::MailLogList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailLogList::InitAsDefaultInstance() {
}

MailLogList::MailLogList(const MailLogList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailLogList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailLogList::~MailLogList() {
  SharedDtor();
}

void MailLogList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MailLogList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailLogList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailLogList_descriptor_;
}

const MailLogList& MailLogList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logmessage_2eproto();  return *default_instance_;
}

MailLogList* MailLogList::default_instance_ = NULL;

MailLogList* MailLogList::New() const {
  return new MailLogList;
}

void MailLogList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailLogList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .isafetec.MailLog list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailLogList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .isafetec.MailLog list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailLogList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .isafetec.MailLog list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailLogList::ByteSize() const {
  int total_size = 0;
  
  // repeated .isafetec.MailLog list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailLogList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailLogList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailLogList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailLogList::MergeFrom(const MailLogList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailLogList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailLogList::CopyFrom(const MailLogList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailLogList::IsInitialized() const {
  
  return true;
}

void MailLogList::Swap(MailLogList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailLogList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailLogList_descriptor_;
  metadata.reflection = MailLogList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrintLog::kIdFieldNumber;
const int PrintLog::kUseridFieldNumber;
const int PrintLog::kEquipidFieldNumber;
const int PrintLog::kWinuserFieldNumber;
const int PrintLog::kIpFieldNumber;
const int PrintLog::kHostFieldNumber;
const int PrintLog::kTimeFieldNumber;
const int PrintLog::kPrinternameFieldNumber;
const int PrintLog::kDocNameFieldNumber;
const int PrintLog::kTotalPageFieldNumber;
const int PrintLog::kDoublePrintFieldNumber;
const int PrintLog::kDocSizeFieldNumber;
const int PrintLog::kPageTypeFieldNumber;
const int PrintLog::kColorFieldNumber;
const int PrintLog::kCopiesFieldNumber;
#endif  // !_MSC_VER

PrintLog::PrintLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrintLog::InitAsDefaultInstance() {
}

PrintLog::PrintLog(const PrintLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrintLog::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  userid_ = 0;
  equipid_ = 0;
  winuser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = 0;
  printername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  doc_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  total_page_ = 0;
  double_print_ = 0;
  doc_size_ = 0;
  page_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  color_ = 0;
  copies_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrintLog::~PrintLog() {
  SharedDtor();
}

void PrintLog::SharedDtor() {
  if (winuser_ != &::google::protobuf::internal::kEmptyString) {
    delete winuser_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (printername_ != &::google::protobuf::internal::kEmptyString) {
    delete printername_;
  }
  if (doc_name_ != &::google::protobuf::internal::kEmptyString) {
    delete doc_name_;
  }
  if (page_type_ != &::google::protobuf::internal::kEmptyString) {
    delete page_type_;
  }
  if (this != default_instance_) {
  }
}

void PrintLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrintLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrintLog_descriptor_;
}

const PrintLog& PrintLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logmessage_2eproto();  return *default_instance_;
}

PrintLog* PrintLog::default_instance_ = NULL;

PrintLog* PrintLog::New() const {
  return new PrintLog;
}

void PrintLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    userid_ = 0;
    equipid_ = 0;
    if (has_winuser()) {
      if (winuser_ != &::google::protobuf::internal::kEmptyString) {
        winuser_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::kEmptyString) {
        host_->clear();
      }
    }
    time_ = 0;
    if (has_printername()) {
      if (printername_ != &::google::protobuf::internal::kEmptyString) {
        printername_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_doc_name()) {
      if (doc_name_ != &::google::protobuf::internal::kEmptyString) {
        doc_name_->clear();
      }
    }
    total_page_ = 0;
    double_print_ = 0;
    doc_size_ = 0;
    if (has_page_type()) {
      if (page_type_ != &::google::protobuf::internal::kEmptyString) {
        page_type_->clear();
      }
    }
    color_ = 0;
    copies_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrintLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }
      
      // optional int32 userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equipid;
        break;
      }
      
      // optional int32 equipid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equipid_)));
          set_has_equipid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_winuser;
        break;
      }
      
      // optional string winuser = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_winuser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_winuser()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->winuser().data(), this->winuser().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ip;
        break;
      }
      
      // optional string ip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_host;
        break;
      }
      
      // optional string host = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_time;
        break;
      }
      
      // optional double time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_printername;
        break;
      }
      
      // optional string printername = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_printername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_printername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->printername().data(), this->printername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_doc_name;
        break;
      }
      
      // optional string doc_name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_doc_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_doc_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->doc_name().data(), this->doc_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_total_page;
        break;
      }
      
      // optional int32 total_page = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_page_)));
          set_has_total_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_double_print;
        break;
      }
      
      // optional int32 double_print = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_double_print:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &double_print_)));
          set_has_double_print();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_doc_size;
        break;
      }
      
      // optional int32 doc_size = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_doc_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doc_size_)));
          set_has_doc_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_page_type;
        break;
      }
      
      // optional string page_type = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_page_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->page_type().data(), this->page_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_color;
        break;
      }
      
      // optional int32 color = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_copies;
        break;
      }
      
      // optional int32 copies = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copies:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &copies_)));
          set_has_copies();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrintLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }
  
  // optional int32 equipid = 3;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->equipid(), output);
  }
  
  // optional string winuser = 4;
  if (has_winuser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->winuser().data(), this->winuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->winuser(), output);
  }
  
  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ip(), output);
  }
  
  // optional string host = 6;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->host(), output);
  }
  
  // optional double time = 7;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->time(), output);
  }
  
  // optional string printername = 8;
  if (has_printername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->printername().data(), this->printername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->printername(), output);
  }
  
  // optional string doc_name = 9;
  if (has_doc_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->doc_name().data(), this->doc_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->doc_name(), output);
  }
  
  // optional int32 total_page = 10;
  if (has_total_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->total_page(), output);
  }
  
  // optional int32 double_print = 11;
  if (has_double_print()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->double_print(), output);
  }
  
  // optional int32 doc_size = 12;
  if (has_doc_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->doc_size(), output);
  }
  
  // optional string page_type = 13;
  if (has_page_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page_type().data(), this->page_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->page_type(), output);
  }
  
  // optional int32 color = 14;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->color(), output);
  }
  
  // optional int32 copies = 15;
  if (has_copies()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->copies(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrintLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }
  
  // optional int32 equipid = 3;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->equipid(), target);
  }
  
  // optional string winuser = 4;
  if (has_winuser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->winuser().data(), this->winuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->winuser(), target);
  }
  
  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ip(), target);
  }
  
  // optional string host = 6;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->host(), target);
  }
  
  // optional double time = 7;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->time(), target);
  }
  
  // optional string printername = 8;
  if (has_printername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->printername().data(), this->printername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->printername(), target);
  }
  
  // optional string doc_name = 9;
  if (has_doc_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->doc_name().data(), this->doc_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->doc_name(), target);
  }
  
  // optional int32 total_page = 10;
  if (has_total_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->total_page(), target);
  }
  
  // optional int32 double_print = 11;
  if (has_double_print()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->double_print(), target);
  }
  
  // optional int32 doc_size = 12;
  if (has_doc_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->doc_size(), target);
  }
  
  // optional string page_type = 13;
  if (has_page_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page_type().data(), this->page_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->page_type(), target);
  }
  
  // optional int32 color = 14;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->color(), target);
  }
  
  // optional int32 copies = 15;
  if (has_copies()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->copies(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrintLog::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }
    
    // optional int32 equipid = 3;
    if (has_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equipid());
    }
    
    // optional string winuser = 4;
    if (has_winuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->winuser());
    }
    
    // optional string ip = 5;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // optional string host = 6;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }
    
    // optional double time = 7;
    if (has_time()) {
      total_size += 1 + 8;
    }
    
    // optional string printername = 8;
    if (has_printername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->printername());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string doc_name = 9;
    if (has_doc_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->doc_name());
    }
    
    // optional int32 total_page = 10;
    if (has_total_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_page());
    }
    
    // optional int32 double_print = 11;
    if (has_double_print()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->double_print());
    }
    
    // optional int32 doc_size = 12;
    if (has_doc_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doc_size());
    }
    
    // optional string page_type = 13;
    if (has_page_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->page_type());
    }
    
    // optional int32 color = 14;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }
    
    // optional int32 copies = 15;
    if (has_copies()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->copies());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrintLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrintLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrintLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrintLog::MergeFrom(const PrintLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_equipid()) {
      set_equipid(from.equipid());
    }
    if (from.has_winuser()) {
      set_winuser(from.winuser());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_printername()) {
      set_printername(from.printername());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_doc_name()) {
      set_doc_name(from.doc_name());
    }
    if (from.has_total_page()) {
      set_total_page(from.total_page());
    }
    if (from.has_double_print()) {
      set_double_print(from.double_print());
    }
    if (from.has_doc_size()) {
      set_doc_size(from.doc_size());
    }
    if (from.has_page_type()) {
      set_page_type(from.page_type());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_copies()) {
      set_copies(from.copies());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrintLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrintLog::CopyFrom(const PrintLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrintLog::IsInitialized() const {
  
  return true;
}

void PrintLog::Swap(PrintLog* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(userid_, other->userid_);
    std::swap(equipid_, other->equipid_);
    std::swap(winuser_, other->winuser_);
    std::swap(ip_, other->ip_);
    std::swap(host_, other->host_);
    std::swap(time_, other->time_);
    std::swap(printername_, other->printername_);
    std::swap(doc_name_, other->doc_name_);
    std::swap(total_page_, other->total_page_);
    std::swap(double_print_, other->double_print_);
    std::swap(doc_size_, other->doc_size_);
    std::swap(page_type_, other->page_type_);
    std::swap(color_, other->color_);
    std::swap(copies_, other->copies_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrintLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrintLog_descriptor_;
  metadata.reflection = PrintLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrintLogList::kListFieldNumber;
#endif  // !_MSC_VER

PrintLogList::PrintLogList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrintLogList::InitAsDefaultInstance() {
}

PrintLogList::PrintLogList(const PrintLogList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrintLogList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrintLogList::~PrintLogList() {
  SharedDtor();
}

void PrintLogList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrintLogList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrintLogList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrintLogList_descriptor_;
}

const PrintLogList& PrintLogList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logmessage_2eproto();  return *default_instance_;
}

PrintLogList* PrintLogList::default_instance_ = NULL;

PrintLogList* PrintLogList::New() const {
  return new PrintLogList;
}

void PrintLogList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrintLogList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .isafetec.PrintLog list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrintLogList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .isafetec.PrintLog list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrintLogList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .isafetec.PrintLog list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrintLogList::ByteSize() const {
  int total_size = 0;
  
  // repeated .isafetec.PrintLog list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrintLogList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrintLogList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrintLogList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrintLogList::MergeFrom(const PrintLogList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrintLogList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrintLogList::CopyFrom(const PrintLogList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrintLogList::IsInitialized() const {
  
  return true;
}

void PrintLogList::Swap(PrintLogList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrintLogList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrintLogList_descriptor_;
  metadata.reflection = PrintLogList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceAttachLog::kIdFieldNumber;
const int DeviceAttachLog::kUseridFieldNumber;
const int DeviceAttachLog::kEquipidFieldNumber;
const int DeviceAttachLog::kWinuserFieldNumber;
const int DeviceAttachLog::kIpFieldNumber;
const int DeviceAttachLog::kHostFieldNumber;
const int DeviceAttachLog::kTimeFieldNumber;
const int DeviceAttachLog::kAttachFieldNumber;
const int DeviceAttachLog::kDevicePathFieldNumber;
const int DeviceAttachLog::kDeviceNameFieldNumber;
const int DeviceAttachLog::kDeviceClassFieldNumber;
const int DeviceAttachLog::kDeviceGuidFieldNumber;
const int DeviceAttachLog::kNeedAlarmFieldNumber;
#endif  // !_MSC_VER

DeviceAttachLog::DeviceAttachLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeviceAttachLog::InitAsDefaultInstance() {
}

DeviceAttachLog::DeviceAttachLog(const DeviceAttachLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeviceAttachLog::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  userid_ = 0;
  equipid_ = 0;
  winuser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = 0;
  attach_ = 0;
  device_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_class_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  need_alarm_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceAttachLog::~DeviceAttachLog() {
  SharedDtor();
}

void DeviceAttachLog::SharedDtor() {
  if (winuser_ != &::google::protobuf::internal::kEmptyString) {
    delete winuser_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (device_path_ != &::google::protobuf::internal::kEmptyString) {
    delete device_path_;
  }
  if (device_name_ != &::google::protobuf::internal::kEmptyString) {
    delete device_name_;
  }
  if (device_class_ != &::google::protobuf::internal::kEmptyString) {
    delete device_class_;
  }
  if (device_guid_ != &::google::protobuf::internal::kEmptyString) {
    delete device_guid_;
  }
  if (this != default_instance_) {
  }
}

void DeviceAttachLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceAttachLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceAttachLog_descriptor_;
}

const DeviceAttachLog& DeviceAttachLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logmessage_2eproto();  return *default_instance_;
}

DeviceAttachLog* DeviceAttachLog::default_instance_ = NULL;

DeviceAttachLog* DeviceAttachLog::New() const {
  return new DeviceAttachLog;
}

void DeviceAttachLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    userid_ = 0;
    equipid_ = 0;
    if (has_winuser()) {
      if (winuser_ != &::google::protobuf::internal::kEmptyString) {
        winuser_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::kEmptyString) {
        host_->clear();
      }
    }
    time_ = 0;
    attach_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_device_path()) {
      if (device_path_ != &::google::protobuf::internal::kEmptyString) {
        device_path_->clear();
      }
    }
    if (has_device_name()) {
      if (device_name_ != &::google::protobuf::internal::kEmptyString) {
        device_name_->clear();
      }
    }
    if (has_device_class()) {
      if (device_class_ != &::google::protobuf::internal::kEmptyString) {
        device_class_->clear();
      }
    }
    if (has_device_guid()) {
      if (device_guid_ != &::google::protobuf::internal::kEmptyString) {
        device_guid_->clear();
      }
    }
    need_alarm_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceAttachLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }
      
      // optional int32 userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equipid;
        break;
      }
      
      // optional int32 equipid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equipid_)));
          set_has_equipid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_winuser;
        break;
      }
      
      // optional string winuser = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_winuser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_winuser()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->winuser().data(), this->winuser().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ip;
        break;
      }
      
      // optional string ip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_host;
        break;
      }
      
      // optional string host = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_time;
        break;
      }
      
      // optional double time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_attach;
        break;
      }
      
      // optional int32 attach = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attach:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attach_)));
          set_has_attach();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_device_path;
        break;
      }
      
      // optional string device_path = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_path().data(), this->device_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_device_name;
        break;
      }
      
      // optional string device_name = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_name().data(), this->device_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_device_class;
        break;
      }
      
      // optional string device_class = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_class:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_class()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_class().data(), this->device_class().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_device_guid;
        break;
      }
      
      // optional string device_guid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_guid().data(), this->device_guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_need_alarm;
        break;
      }
      
      // optional bool need_alarm = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_alarm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_alarm_)));
          set_has_need_alarm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeviceAttachLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }
  
  // optional int32 equipid = 3;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->equipid(), output);
  }
  
  // optional string winuser = 4;
  if (has_winuser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->winuser().data(), this->winuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->winuser(), output);
  }
  
  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ip(), output);
  }
  
  // optional string host = 6;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->host(), output);
  }
  
  // optional double time = 7;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->time(), output);
  }
  
  // optional int32 attach = 8;
  if (has_attach()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->attach(), output);
  }
  
  // optional string device_path = 9;
  if (has_device_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_path().data(), this->device_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->device_path(), output);
  }
  
  // optional string device_name = 10;
  if (has_device_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->device_name(), output);
  }
  
  // optional string device_class = 11;
  if (has_device_class()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_class().data(), this->device_class().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->device_class(), output);
  }
  
  // optional string device_guid = 12;
  if (has_device_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_guid().data(), this->device_guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->device_guid(), output);
  }
  
  // optional bool need_alarm = 14;
  if (has_need_alarm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->need_alarm(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeviceAttachLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }
  
  // optional int32 equipid = 3;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->equipid(), target);
  }
  
  // optional string winuser = 4;
  if (has_winuser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->winuser().data(), this->winuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->winuser(), target);
  }
  
  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ip(), target);
  }
  
  // optional string host = 6;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->host(), target);
  }
  
  // optional double time = 7;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->time(), target);
  }
  
  // optional int32 attach = 8;
  if (has_attach()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->attach(), target);
  }
  
  // optional string device_path = 9;
  if (has_device_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_path().data(), this->device_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->device_path(), target);
  }
  
  // optional string device_name = 10;
  if (has_device_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_name().data(), this->device_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->device_name(), target);
  }
  
  // optional string device_class = 11;
  if (has_device_class()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_class().data(), this->device_class().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->device_class(), target);
  }
  
  // optional string device_guid = 12;
  if (has_device_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_guid().data(), this->device_guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->device_guid(), target);
  }
  
  // optional bool need_alarm = 14;
  if (has_need_alarm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->need_alarm(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeviceAttachLog::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }
    
    // optional int32 equipid = 3;
    if (has_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equipid());
    }
    
    // optional string winuser = 4;
    if (has_winuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->winuser());
    }
    
    // optional string ip = 5;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // optional string host = 6;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }
    
    // optional double time = 7;
    if (has_time()) {
      total_size += 1 + 8;
    }
    
    // optional int32 attach = 8;
    if (has_attach()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attach());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string device_path = 9;
    if (has_device_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_path());
    }
    
    // optional string device_name = 10;
    if (has_device_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_name());
    }
    
    // optional string device_class = 11;
    if (has_device_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_class());
    }
    
    // optional string device_guid = 12;
    if (has_device_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_guid());
    }
    
    // optional bool need_alarm = 14;
    if (has_need_alarm()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceAttachLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceAttachLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceAttachLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceAttachLog::MergeFrom(const DeviceAttachLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_equipid()) {
      set_equipid(from.equipid());
    }
    if (from.has_winuser()) {
      set_winuser(from.winuser());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_attach()) {
      set_attach(from.attach());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_device_path()) {
      set_device_path(from.device_path());
    }
    if (from.has_device_name()) {
      set_device_name(from.device_name());
    }
    if (from.has_device_class()) {
      set_device_class(from.device_class());
    }
    if (from.has_device_guid()) {
      set_device_guid(from.device_guid());
    }
    if (from.has_need_alarm()) {
      set_need_alarm(from.need_alarm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceAttachLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceAttachLog::CopyFrom(const DeviceAttachLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceAttachLog::IsInitialized() const {
  
  return true;
}

void DeviceAttachLog::Swap(DeviceAttachLog* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(userid_, other->userid_);
    std::swap(equipid_, other->equipid_);
    std::swap(winuser_, other->winuser_);
    std::swap(ip_, other->ip_);
    std::swap(host_, other->host_);
    std::swap(time_, other->time_);
    std::swap(attach_, other->attach_);
    std::swap(device_path_, other->device_path_);
    std::swap(device_name_, other->device_name_);
    std::swap(device_class_, other->device_class_);
    std::swap(device_guid_, other->device_guid_);
    std::swap(need_alarm_, other->need_alarm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceAttachLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceAttachLog_descriptor_;
  metadata.reflection = DeviceAttachLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceAttachLogList::kListFieldNumber;
#endif  // !_MSC_VER

DeviceAttachLogList::DeviceAttachLogList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeviceAttachLogList::InitAsDefaultInstance() {
}

DeviceAttachLogList::DeviceAttachLogList(const DeviceAttachLogList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeviceAttachLogList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceAttachLogList::~DeviceAttachLogList() {
  SharedDtor();
}

void DeviceAttachLogList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeviceAttachLogList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceAttachLogList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceAttachLogList_descriptor_;
}

const DeviceAttachLogList& DeviceAttachLogList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logmessage_2eproto();  return *default_instance_;
}

DeviceAttachLogList* DeviceAttachLogList::default_instance_ = NULL;

DeviceAttachLogList* DeviceAttachLogList::New() const {
  return new DeviceAttachLogList;
}

void DeviceAttachLogList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceAttachLogList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .isafetec.DeviceAttachLog list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeviceAttachLogList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .isafetec.DeviceAttachLog list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeviceAttachLogList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .isafetec.DeviceAttachLog list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeviceAttachLogList::ByteSize() const {
  int total_size = 0;
  
  // repeated .isafetec.DeviceAttachLog list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceAttachLogList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceAttachLogList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceAttachLogList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceAttachLogList::MergeFrom(const DeviceAttachLogList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceAttachLogList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceAttachLogList::CopyFrom(const DeviceAttachLogList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceAttachLogList::IsInitialized() const {
  
  return true;
}

void DeviceAttachLogList::Swap(DeviceAttachLogList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceAttachLogList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceAttachLogList_descriptor_;
  metadata.reflection = DeviceAttachLogList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipLogonLog::kIdFieldNumber;
const int EquipLogonLog::kUseridFieldNumber;
const int EquipLogonLog::kEquipidFieldNumber;
const int EquipLogonLog::kWinuserFieldNumber;
const int EquipLogonLog::kIpFieldNumber;
const int EquipLogonLog::kHostFieldNumber;
const int EquipLogonLog::kPcLogonTimeFieldNumber;
const int EquipLogonLog::kUserLogonTimeFieldNumber;
const int EquipLogonLog::kPcLastShudownTimeFieldNumber;
const int EquipLogonLog::kWinLogonTimeFieldNumber;
const int EquipLogonLog::kWinLogoffTimeFieldNumber;
const int EquipLogonLog::kEventFieldNumber;
#endif  // !_MSC_VER

EquipLogonLog::EquipLogonLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipLogonLog::InitAsDefaultInstance() {
}

EquipLogonLog::EquipLogonLog(const EquipLogonLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipLogonLog::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  userid_ = 0;
  equipid_ = 0;
  winuser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pc_logon_time_ = 0;
  user_logon_time_ = 0;
  pc_last_shudown_time_ = 0;
  win_logon_time_ = 0;
  win_logoff_time_ = 0;
  event_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipLogonLog::~EquipLogonLog() {
  SharedDtor();
}

void EquipLogonLog::SharedDtor() {
  if (winuser_ != &::google::protobuf::internal::kEmptyString) {
    delete winuser_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (this != default_instance_) {
  }
}

void EquipLogonLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipLogonLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipLogonLog_descriptor_;
}

const EquipLogonLog& EquipLogonLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logmessage_2eproto();  return *default_instance_;
}

EquipLogonLog* EquipLogonLog::default_instance_ = NULL;

EquipLogonLog* EquipLogonLog::New() const {
  return new EquipLogonLog;
}

void EquipLogonLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    userid_ = 0;
    equipid_ = 0;
    if (has_winuser()) {
      if (winuser_ != &::google::protobuf::internal::kEmptyString) {
        winuser_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::kEmptyString) {
        host_->clear();
      }
    }
    pc_logon_time_ = 0;
    user_logon_time_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    pc_last_shudown_time_ = 0;
    win_logon_time_ = 0;
    win_logoff_time_ = 0;
    event_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipLogonLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }
      
      // optional int32 userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equipid;
        break;
      }
      
      // optional int32 equipid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equipid_)));
          set_has_equipid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_winuser;
        break;
      }
      
      // optional string winuser = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_winuser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_winuser()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->winuser().data(), this->winuser().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ip;
        break;
      }
      
      // optional string ip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_host;
        break;
      }
      
      // optional string host = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_pc_logon_time;
        break;
      }
      
      // optional double pc_logon_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_pc_logon_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pc_logon_time_)));
          set_has_pc_logon_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_user_logon_time;
        break;
      }
      
      // optional double user_logon_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_user_logon_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &user_logon_time_)));
          set_has_user_logon_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_pc_last_shudown_time;
        break;
      }
      
      // optional double pc_last_shudown_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_pc_last_shudown_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pc_last_shudown_time_)));
          set_has_pc_last_shudown_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_win_logon_time;
        break;
      }
      
      // optional double win_logon_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_win_logon_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &win_logon_time_)));
          set_has_win_logon_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_win_logoff_time;
        break;
      }
      
      // optional double win_logoff_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_win_logoff_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &win_logoff_time_)));
          set_has_win_logoff_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_event;
        break;
      }
      
      // optional .isafetec.PC_LOGON_EVENT event = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_event:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::PC_LOGON_EVENT_IsValid(value)) {
            set_event(static_cast< isafetec::PC_LOGON_EVENT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipLogonLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }
  
  // optional int32 equipid = 3;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->equipid(), output);
  }
  
  // optional string winuser = 4;
  if (has_winuser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->winuser().data(), this->winuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->winuser(), output);
  }
  
  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ip(), output);
  }
  
  // optional string host = 6;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->host(), output);
  }
  
  // optional double pc_logon_time = 7;
  if (has_pc_logon_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->pc_logon_time(), output);
  }
  
  // optional double user_logon_time = 8;
  if (has_user_logon_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->user_logon_time(), output);
  }
  
  // optional double pc_last_shudown_time = 9;
  if (has_pc_last_shudown_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->pc_last_shudown_time(), output);
  }
  
  // optional double win_logon_time = 10;
  if (has_win_logon_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->win_logon_time(), output);
  }
  
  // optional double win_logoff_time = 11;
  if (has_win_logoff_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->win_logoff_time(), output);
  }
  
  // optional .isafetec.PC_LOGON_EVENT event = 12;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->event(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipLogonLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }
  
  // optional int32 equipid = 3;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->equipid(), target);
  }
  
  // optional string winuser = 4;
  if (has_winuser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->winuser().data(), this->winuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->winuser(), target);
  }
  
  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ip(), target);
  }
  
  // optional string host = 6;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->host(), target);
  }
  
  // optional double pc_logon_time = 7;
  if (has_pc_logon_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->pc_logon_time(), target);
  }
  
  // optional double user_logon_time = 8;
  if (has_user_logon_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->user_logon_time(), target);
  }
  
  // optional double pc_last_shudown_time = 9;
  if (has_pc_last_shudown_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->pc_last_shudown_time(), target);
  }
  
  // optional double win_logon_time = 10;
  if (has_win_logon_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->win_logon_time(), target);
  }
  
  // optional double win_logoff_time = 11;
  if (has_win_logoff_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->win_logoff_time(), target);
  }
  
  // optional .isafetec.PC_LOGON_EVENT event = 12;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->event(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipLogonLog::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }
    
    // optional int32 equipid = 3;
    if (has_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equipid());
    }
    
    // optional string winuser = 4;
    if (has_winuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->winuser());
    }
    
    // optional string ip = 5;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // optional string host = 6;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }
    
    // optional double pc_logon_time = 7;
    if (has_pc_logon_time()) {
      total_size += 1 + 8;
    }
    
    // optional double user_logon_time = 8;
    if (has_user_logon_time()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double pc_last_shudown_time = 9;
    if (has_pc_last_shudown_time()) {
      total_size += 1 + 8;
    }
    
    // optional double win_logon_time = 10;
    if (has_win_logon_time()) {
      total_size += 1 + 8;
    }
    
    // optional double win_logoff_time = 11;
    if (has_win_logoff_time()) {
      total_size += 1 + 8;
    }
    
    // optional .isafetec.PC_LOGON_EVENT event = 12;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipLogonLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipLogonLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipLogonLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipLogonLog::MergeFrom(const EquipLogonLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_equipid()) {
      set_equipid(from.equipid());
    }
    if (from.has_winuser()) {
      set_winuser(from.winuser());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_pc_logon_time()) {
      set_pc_logon_time(from.pc_logon_time());
    }
    if (from.has_user_logon_time()) {
      set_user_logon_time(from.user_logon_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pc_last_shudown_time()) {
      set_pc_last_shudown_time(from.pc_last_shudown_time());
    }
    if (from.has_win_logon_time()) {
      set_win_logon_time(from.win_logon_time());
    }
    if (from.has_win_logoff_time()) {
      set_win_logoff_time(from.win_logoff_time());
    }
    if (from.has_event()) {
      set_event(from.event());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipLogonLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipLogonLog::CopyFrom(const EquipLogonLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipLogonLog::IsInitialized() const {
  
  return true;
}

void EquipLogonLog::Swap(EquipLogonLog* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(userid_, other->userid_);
    std::swap(equipid_, other->equipid_);
    std::swap(winuser_, other->winuser_);
    std::swap(ip_, other->ip_);
    std::swap(host_, other->host_);
    std::swap(pc_logon_time_, other->pc_logon_time_);
    std::swap(user_logon_time_, other->user_logon_time_);
    std::swap(pc_last_shudown_time_, other->pc_last_shudown_time_);
    std::swap(win_logon_time_, other->win_logon_time_);
    std::swap(win_logoff_time_, other->win_logoff_time_);
    std::swap(event_, other->event_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipLogonLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipLogonLog_descriptor_;
  metadata.reflection = EquipLogonLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipLogonLogList::kListFieldNumber;
#endif  // !_MSC_VER

EquipLogonLogList::EquipLogonLogList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipLogonLogList::InitAsDefaultInstance() {
}

EquipLogonLogList::EquipLogonLogList(const EquipLogonLogList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipLogonLogList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipLogonLogList::~EquipLogonLogList() {
  SharedDtor();
}

void EquipLogonLogList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipLogonLogList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipLogonLogList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipLogonLogList_descriptor_;
}

const EquipLogonLogList& EquipLogonLogList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logmessage_2eproto();  return *default_instance_;
}

EquipLogonLogList* EquipLogonLogList::default_instance_ = NULL;

EquipLogonLogList* EquipLogonLogList::New() const {
  return new EquipLogonLogList;
}

void EquipLogonLogList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipLogonLogList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .isafetec.EquipLogonLog list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipLogonLogList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .isafetec.EquipLogonLog list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipLogonLogList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .isafetec.EquipLogonLog list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipLogonLogList::ByteSize() const {
  int total_size = 0;
  
  // repeated .isafetec.EquipLogonLog list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipLogonLogList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipLogonLogList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipLogonLogList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipLogonLogList::MergeFrom(const EquipLogonLogList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipLogonLogList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipLogonLogList::CopyFrom(const EquipLogonLogList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipLogonLogList::IsInitialized() const {
  
  return true;
}

void EquipLogonLogList::Swap(EquipLogonLogList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipLogonLogList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipLogonLogList_descriptor_;
  metadata.reflection = EquipLogonLogList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AlarmMsg::kIdFieldNumber;
const int AlarmMsg::kUseridFieldNumber;
const int AlarmMsg::kEquipidFieldNumber;
const int AlarmMsg::kWinuserFieldNumber;
const int AlarmMsg::kIpFieldNumber;
const int AlarmMsg::kHostFieldNumber;
const int AlarmMsg::kTypeFieldNumber;
const int AlarmMsg::kCreatedOnFieldNumber;
const int AlarmMsg::kSubjectFieldNumber;
const int AlarmMsg::kContentFieldNumber;
#endif  // !_MSC_VER

AlarmMsg::AlarmMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AlarmMsg::InitAsDefaultInstance() {
}

AlarmMsg::AlarmMsg(const AlarmMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AlarmMsg::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  userid_ = 0;
  equipid_ = 0;
  winuser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  createdon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlarmMsg::~AlarmMsg() {
  SharedDtor();
}

void AlarmMsg::SharedDtor() {
  if (winuser_ != &::google::protobuf::internal::kEmptyString) {
    delete winuser_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (createdon_ != &::google::protobuf::internal::kEmptyString) {
    delete createdon_;
  }
  if (subject_ != &::google::protobuf::internal::kEmptyString) {
    delete subject_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void AlarmMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlarmMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlarmMsg_descriptor_;
}

const AlarmMsg& AlarmMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logmessage_2eproto();  return *default_instance_;
}

AlarmMsg* AlarmMsg::default_instance_ = NULL;

AlarmMsg* AlarmMsg::New() const {
  return new AlarmMsg;
}

void AlarmMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    userid_ = 0;
    equipid_ = 0;
    if (has_winuser()) {
      if (winuser_ != &::google::protobuf::internal::kEmptyString) {
        winuser_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::kEmptyString) {
        host_->clear();
      }
    }
    type_ = 0;
    if (has_createdon()) {
      if (createdon_ != &::google::protobuf::internal::kEmptyString) {
        createdon_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_subject()) {
      if (subject_ != &::google::protobuf::internal::kEmptyString) {
        subject_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AlarmMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }
      
      // optional int32 userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equipid;
        break;
      }
      
      // optional int32 equipid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equipid_)));
          set_has_equipid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_winuser;
        break;
      }
      
      // optional string winuser = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_winuser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_winuser()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->winuser().data(), this->winuser().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ip;
        break;
      }
      
      // optional string ip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_host;
        break;
      }
      
      // optional string host = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_type;
        break;
      }
      
      // optional int32 type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_CreatedOn;
        break;
      }
      
      // optional string CreatedOn = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CreatedOn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_createdon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->createdon().data(), this->createdon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_Subject;
        break;
      }
      
      // optional string Subject = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Subject:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subject()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->subject().data(), this->subject().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_Content;
        break;
      }
      
      // optional string Content = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AlarmMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }
  
  // optional int32 equipid = 3;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->equipid(), output);
  }
  
  // optional string winuser = 4;
  if (has_winuser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->winuser().data(), this->winuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->winuser(), output);
  }
  
  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ip(), output);
  }
  
  // optional string host = 6;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->host(), output);
  }
  
  // optional int32 type = 7;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->type(), output);
  }
  
  // optional string CreatedOn = 8;
  if (has_createdon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createdon().data(), this->createdon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->createdon(), output);
  }
  
  // optional string Subject = 9;
  if (has_subject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subject().data(), this->subject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->subject(), output);
  }
  
  // optional string Content = 10;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->content(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AlarmMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }
  
  // optional int32 equipid = 3;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->equipid(), target);
  }
  
  // optional string winuser = 4;
  if (has_winuser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->winuser().data(), this->winuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->winuser(), target);
  }
  
  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ip(), target);
  }
  
  // optional string host = 6;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->host(), target);
  }
  
  // optional int32 type = 7;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->type(), target);
  }
  
  // optional string CreatedOn = 8;
  if (has_createdon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createdon().data(), this->createdon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->createdon(), target);
  }
  
  // optional string Subject = 9;
  if (has_subject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subject().data(), this->subject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->subject(), target);
  }
  
  // optional string Content = 10;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->content(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AlarmMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }
    
    // optional int32 equipid = 3;
    if (has_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equipid());
    }
    
    // optional string winuser = 4;
    if (has_winuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->winuser());
    }
    
    // optional string ip = 5;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // optional string host = 6;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }
    
    // optional int32 type = 7;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional string CreatedOn = 8;
    if (has_createdon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->createdon());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string Subject = 9;
    if (has_subject()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subject());
    }
    
    // optional string Content = 10;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlarmMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AlarmMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AlarmMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AlarmMsg::MergeFrom(const AlarmMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_equipid()) {
      set_equipid(from.equipid());
    }
    if (from.has_winuser()) {
      set_winuser(from.winuser());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_createdon()) {
      set_createdon(from.createdon());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_subject()) {
      set_subject(from.subject());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AlarmMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlarmMsg::CopyFrom(const AlarmMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlarmMsg::IsInitialized() const {
  
  return true;
}

void AlarmMsg::Swap(AlarmMsg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(userid_, other->userid_);
    std::swap(equipid_, other->equipid_);
    std::swap(winuser_, other->winuser_);
    std::swap(ip_, other->ip_);
    std::swap(host_, other->host_);
    std::swap(type_, other->type_);
    std::swap(createdon_, other->createdon_);
    std::swap(subject_, other->subject_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AlarmMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlarmMsg_descriptor_;
  metadata.reflection = AlarmMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AlarmMsgList::kListFieldNumber;
#endif  // !_MSC_VER

AlarmMsgList::AlarmMsgList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AlarmMsgList::InitAsDefaultInstance() {
}

AlarmMsgList::AlarmMsgList(const AlarmMsgList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AlarmMsgList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlarmMsgList::~AlarmMsgList() {
  SharedDtor();
}

void AlarmMsgList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AlarmMsgList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlarmMsgList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlarmMsgList_descriptor_;
}

const AlarmMsgList& AlarmMsgList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_logmessage_2eproto();  return *default_instance_;
}

AlarmMsgList* AlarmMsgList::default_instance_ = NULL;

AlarmMsgList* AlarmMsgList::New() const {
  return new AlarmMsgList;
}

void AlarmMsgList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AlarmMsgList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .isafetec.AlarmMsg list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AlarmMsgList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .isafetec.AlarmMsg list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AlarmMsgList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .isafetec.AlarmMsg list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AlarmMsgList::ByteSize() const {
  int total_size = 0;
  
  // repeated .isafetec.AlarmMsg list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlarmMsgList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AlarmMsgList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AlarmMsgList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AlarmMsgList::MergeFrom(const AlarmMsgList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AlarmMsgList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlarmMsgList::CopyFrom(const AlarmMsgList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlarmMsgList::IsInitialized() const {
  
  return true;
}

void AlarmMsgList::Swap(AlarmMsgList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AlarmMsgList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlarmMsgList_descriptor_;
  metadata.reflection = AlarmMsgList_reflection_;
  return metadata;
}

// SelectNode

// optional string colName = 1;
inline bool SelectNode::has_colname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SelectNode::set_has_colname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SelectNode::clear_has_colname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SelectNode::clear_colname() {
  if (colname_ != &::google::protobuf::internal::kEmptyString) {
    colname_->clear();
  }
  clear_has_colname();
}
inline const ::std::string& SelectNode::colname() const {
  return *colname_;
}
inline void SelectNode::set_colname(const ::std::string& value) {
  set_has_colname();
  if (colname_ == &::google::protobuf::internal::kEmptyString) {
    colname_ = new ::std::string;
  }
  colname_->assign(value);
}
inline void SelectNode::set_colname(const char* value) {
  set_has_colname();
  if (colname_ == &::google::protobuf::internal::kEmptyString) {
    colname_ = new ::std::string;
  }
  colname_->assign(value);
}
inline void SelectNode::set_colname(const char* value, size_t size) {
  set_has_colname();
  if (colname_ == &::google::protobuf::internal::kEmptyString) {
    colname_ = new ::std::string;
  }
  colname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SelectNode::mutable_colname() {
  set_has_colname();
  if (colname_ == &::google::protobuf::internal::kEmptyString) {
    colname_ = new ::std::string;
  }
  return colname_;
}
inline ::std::string* SelectNode::release_colname() {
  clear_has_colname();
  if (colname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = colname_;
    colname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 colWidth = 2;
inline bool SelectNode::has_colwidth() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SelectNode::set_has_colwidth() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SelectNode::clear_has_colwidth() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SelectNode::clear_colwidth() {
  colwidth_ = 0;
  clear_has_colwidth();
}
inline ::google::protobuf::int32 SelectNode::colwidth() const {
  return colwidth_;
}
inline void SelectNode::set_colwidth(::google::protobuf::int32 value) {
  set_has_colwidth();
  colwidth_ = value;
}

// optional int32 showCol = 3;
inline bool SelectNode::has_showcol() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SelectNode::set_has_showcol() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SelectNode::clear_has_showcol() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SelectNode::clear_showcol() {
  showcol_ = 0;
  clear_has_showcol();
}
inline ::google::protobuf::int32 SelectNode::showcol() const {
  return showcol_;
}
inline void SelectNode::set_showcol(::google::protobuf::int32 value) {
  set_has_showcol();
  showcol_ = value;
}

// optional string dbColName = 4;
inline bool SelectNode::has_dbcolname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SelectNode::set_has_dbcolname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SelectNode::clear_has_dbcolname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SelectNode::clear_dbcolname() {
  if (dbcolname_ != &::google::protobuf::internal::kEmptyString) {
    dbcolname_->clear();
  }
  clear_has_dbcolname();
}
inline const ::std::string& SelectNode::dbcolname() const {
  return *dbcolname_;
}
inline void SelectNode::set_dbcolname(const ::std::string& value) {
  set_has_dbcolname();
  if (dbcolname_ == &::google::protobuf::internal::kEmptyString) {
    dbcolname_ = new ::std::string;
  }
  dbcolname_->assign(value);
}
inline void SelectNode::set_dbcolname(const char* value) {
  set_has_dbcolname();
  if (dbcolname_ == &::google::protobuf::internal::kEmptyString) {
    dbcolname_ = new ::std::string;
  }
  dbcolname_->assign(value);
}
inline void SelectNode::set_dbcolname(const char* value, size_t size) {
  set_has_dbcolname();
  if (dbcolname_ == &::google::protobuf::internal::kEmptyString) {
    dbcolname_ = new ::std::string;
  }
  dbcolname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SelectNode::mutable_dbcolname() {
  set_has_dbcolname();
  if (dbcolname_ == &::google::protobuf::internal::kEmptyString) {
    dbcolname_ = new ::std::string;
  }
  return dbcolname_;
}
inline ::std::string* SelectNode::release_dbcolname() {
  clear_has_dbcolname();
  if (dbcolname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dbcolname_;
    dbcolname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 colInt = 5;
inline bool SelectNode::has_colint() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SelectNode::set_has_colint() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SelectNode::clear_has_colint() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SelectNode::clear_colint() {
  colint_ = 0;
  clear_has_colint();
}
inline ::google::protobuf::int32 SelectNode::colint() const {
  return colint_;
}
inline void SelectNode::set_colint(::google::protobuf::int32 value) {
  set_has_colint();
  colint_ = value;
}

// -------------------------------------------------------------------

// SelectSQL

// optional string dbTableName = 1;
inline bool SelectSQL::has_dbtablename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SelectSQL::set_has_dbtablename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SelectSQL::clear_has_dbtablename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SelectSQL::clear_dbtablename() {
  if (dbtablename_ != &::google::protobuf::internal::kEmptyString) {
    dbtablename_->clear();
  }
  clear_has_dbtablename();
}
inline const ::std::string& SelectSQL::dbtablename() const {
  return *dbtablename_;
}
inline void SelectSQL::set_dbtablename(const ::std::string& value) {
  set_has_dbtablename();
  if (dbtablename_ == &::google::protobuf::internal::kEmptyString) {
    dbtablename_ = new ::std::string;
  }
  dbtablename_->assign(value);
}
inline void SelectSQL::set_dbtablename(const char* value) {
  set_has_dbtablename();
  if (dbtablename_ == &::google::protobuf::internal::kEmptyString) {
    dbtablename_ = new ::std::string;
  }
  dbtablename_->assign(value);
}
inline void SelectSQL::set_dbtablename(const char* value, size_t size) {
  set_has_dbtablename();
  if (dbtablename_ == &::google::protobuf::internal::kEmptyString) {
    dbtablename_ = new ::std::string;
  }
  dbtablename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SelectSQL::mutable_dbtablename() {
  set_has_dbtablename();
  if (dbtablename_ == &::google::protobuf::internal::kEmptyString) {
    dbtablename_ = new ::std::string;
  }
  return dbtablename_;
}
inline ::std::string* SelectSQL::release_dbtablename() {
  clear_has_dbtablename();
  if (dbtablename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dbtablename_;
    dbtablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .isafetec.SelectNode SelectNodelist = 2;
inline int SelectSQL::selectnodelist_size() const {
  return selectnodelist_.size();
}
inline void SelectSQL::clear_selectnodelist() {
  selectnodelist_.Clear();
}
inline const ::isafetec::SelectNode& SelectSQL::selectnodelist(int index) const {
  return selectnodelist_.Get(index);
}
inline ::isafetec::SelectNode* SelectSQL::mutable_selectnodelist(int index) {
  return selectnodelist_.Mutable(index);
}
inline ::isafetec::SelectNode* SelectSQL::selectnodelist_ReleaseAt(int index) {
  return selectnodelist_.ReleaseAt(index);
}
inline void SelectSQL::selectnodelist_RemoveAt(int index) {
  selectnodelist_.RemoveAt(index);
}
inline ::isafetec::SelectNode* SelectSQL::add_selectnodelist() {
  return selectnodelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::SelectNode >&
SelectSQL::selectnodelist() const {
  return selectnodelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::SelectNode >*
SelectSQL::mutable_selectnodelist() {
  return &selectnodelist_;
}

// optional int32 logs_type = 3;
inline bool SelectSQL::has_logs_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SelectSQL::set_has_logs_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SelectSQL::clear_has_logs_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SelectSQL::clear_logs_type() {
  logs_type_ = 0;
  clear_has_logs_type();
}
inline ::google::protobuf::int32 SelectSQL::logs_type() const {
  return logs_type_;
}
inline void SelectSQL::set_logs_type(::google::protobuf::int32 value) {
  set_has_logs_type();
  logs_type_ = value;
}

// -------------------------------------------------------------------

// UrlLog

// optional int32 id = 1;
inline bool UrlLog::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UrlLog::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UrlLog::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UrlLog::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UrlLog::id() const {
  return id_;
}
inline void UrlLog::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 userid = 2;
inline bool UrlLog::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UrlLog::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UrlLog::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UrlLog::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 UrlLog::userid() const {
  return userid_;
}
inline void UrlLog::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional int32 equipid = 3;
inline bool UrlLog::has_equipid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UrlLog::set_has_equipid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UrlLog::clear_has_equipid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UrlLog::clear_equipid() {
  equipid_ = 0;
  clear_has_equipid();
}
inline ::google::protobuf::int32 UrlLog::equipid() const {
  return equipid_;
}
inline void UrlLog::set_equipid(::google::protobuf::int32 value) {
  set_has_equipid();
  equipid_ = value;
}

// optional string winuser = 4;
inline bool UrlLog::has_winuser() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UrlLog::set_has_winuser() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UrlLog::clear_has_winuser() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UrlLog::clear_winuser() {
  if (winuser_ != &::google::protobuf::internal::kEmptyString) {
    winuser_->clear();
  }
  clear_has_winuser();
}
inline const ::std::string& UrlLog::winuser() const {
  return *winuser_;
}
inline void UrlLog::set_winuser(const ::std::string& value) {
  set_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    winuser_ = new ::std::string;
  }
  winuser_->assign(value);
}
inline void UrlLog::set_winuser(const char* value) {
  set_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    winuser_ = new ::std::string;
  }
  winuser_->assign(value);
}
inline void UrlLog::set_winuser(const char* value, size_t size) {
  set_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    winuser_ = new ::std::string;
  }
  winuser_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UrlLog::mutable_winuser() {
  set_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    winuser_ = new ::std::string;
  }
  return winuser_;
}
inline ::std::string* UrlLog::release_winuser() {
  clear_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = winuser_;
    winuser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string ip = 5;
inline bool UrlLog::has_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UrlLog::set_has_ip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UrlLog::clear_has_ip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UrlLog::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& UrlLog::ip() const {
  return *ip_;
}
inline void UrlLog::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void UrlLog::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void UrlLog::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UrlLog::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* UrlLog::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string host = 6;
inline bool UrlLog::has_host() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UrlLog::set_has_host() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UrlLog::clear_has_host() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UrlLog::clear_host() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    host_->clear();
  }
  clear_has_host();
}
inline const ::std::string& UrlLog::host() const {
  return *host_;
}
inline void UrlLog::set_host(const ::std::string& value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void UrlLog::set_host(const char* value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void UrlLog::set_host(const char* value, size_t size) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UrlLog::mutable_host() {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  return host_;
}
inline ::std::string* UrlLog::release_host() {
  clear_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = host_;
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string webstation = 7;
inline bool UrlLog::has_webstation() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UrlLog::set_has_webstation() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UrlLog::clear_has_webstation() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UrlLog::clear_webstation() {
  if (webstation_ != &::google::protobuf::internal::kEmptyString) {
    webstation_->clear();
  }
  clear_has_webstation();
}
inline const ::std::string& UrlLog::webstation() const {
  return *webstation_;
}
inline void UrlLog::set_webstation(const ::std::string& value) {
  set_has_webstation();
  if (webstation_ == &::google::protobuf::internal::kEmptyString) {
    webstation_ = new ::std::string;
  }
  webstation_->assign(value);
}
inline void UrlLog::set_webstation(const char* value) {
  set_has_webstation();
  if (webstation_ == &::google::protobuf::internal::kEmptyString) {
    webstation_ = new ::std::string;
  }
  webstation_->assign(value);
}
inline void UrlLog::set_webstation(const char* value, size_t size) {
  set_has_webstation();
  if (webstation_ == &::google::protobuf::internal::kEmptyString) {
    webstation_ = new ::std::string;
  }
  webstation_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UrlLog::mutable_webstation() {
  set_has_webstation();
  if (webstation_ == &::google::protobuf::internal::kEmptyString) {
    webstation_ = new ::std::string;
  }
  return webstation_;
}
inline ::std::string* UrlLog::release_webstation() {
  clear_has_webstation();
  if (webstation_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = webstation_;
    webstation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string url = 8;
inline bool UrlLog::has_url() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UrlLog::set_has_url() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UrlLog::clear_has_url() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UrlLog::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& UrlLog::url() const {
  return *url_;
}
inline void UrlLog::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void UrlLog::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void UrlLog::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UrlLog::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* UrlLog::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional double time = 9;
inline bool UrlLog::has_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UrlLog::set_has_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UrlLog::clear_has_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UrlLog::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline double UrlLog::time() const {
  return time_;
}
inline void UrlLog::set_time(double value) {
  set_has_time();
  time_ = value;
}

// optional string title = 10;
inline bool UrlLog::has_title() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UrlLog::set_has_title() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UrlLog::clear_has_title() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UrlLog::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& UrlLog::title() const {
  return *title_;
}
inline void UrlLog::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void UrlLog::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void UrlLog::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UrlLog::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* UrlLog::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 datelen = 11;
inline bool UrlLog::has_datelen() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UrlLog::set_has_datelen() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UrlLog::clear_has_datelen() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UrlLog::clear_datelen() {
  datelen_ = 0;
  clear_has_datelen();
}
inline ::google::protobuf::int32 UrlLog::datelen() const {
  return datelen_;
}
inline void UrlLog::set_datelen(::google::protobuf::int32 value) {
  set_has_datelen();
  datelen_ = value;
}

// optional int32 allowed = 12;
inline bool UrlLog::has_allowed() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UrlLog::set_has_allowed() {
  _has_bits_[0] |= 0x00000800u;
}
inline void UrlLog::clear_has_allowed() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void UrlLog::clear_allowed() {
  allowed_ = 0;
  clear_has_allowed();
}
inline ::google::protobuf::int32 UrlLog::allowed() const {
  return allowed_;
}
inline void UrlLog::set_allowed(::google::protobuf::int32 value) {
  set_has_allowed();
  allowed_ = value;
}

// optional bool need_alarm = 13;
inline bool UrlLog::has_need_alarm() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void UrlLog::set_has_need_alarm() {
  _has_bits_[0] |= 0x00001000u;
}
inline void UrlLog::clear_has_need_alarm() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void UrlLog::clear_need_alarm() {
  need_alarm_ = false;
  clear_has_need_alarm();
}
inline bool UrlLog::need_alarm() const {
  return need_alarm_;
}
inline void UrlLog::set_need_alarm(bool value) {
  set_has_need_alarm();
  need_alarm_ = value;
}

// -------------------------------------------------------------------

// UrlLogList

// repeated .isafetec.UrlLog list = 1;
inline int UrlLogList::list_size() const {
  return list_.size();
}
inline void UrlLogList::clear_list() {
  list_.Clear();
}
inline const ::isafetec::UrlLog& UrlLogList::list(int index) const {
  return list_.Get(index);
}
inline ::isafetec::UrlLog* UrlLogList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::isafetec::UrlLog* UrlLogList::list_ReleaseAt(int index) {
  return list_.ReleaseAt(index);
}
inline void UrlLogList::list_RemoveAt(int index) {
  list_.RemoveAt(index);
}
inline ::isafetec::UrlLog* UrlLogList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::UrlLog >&
UrlLogList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::UrlLog >*
UrlLogList::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// ProcessLog

// optional int32 id = 1;
inline bool ProcessLog::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProcessLog::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProcessLog::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProcessLog::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ProcessLog::id() const {
  return id_;
}
inline void ProcessLog::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 userid = 2;
inline bool ProcessLog::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProcessLog::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProcessLog::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProcessLog::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 ProcessLog::userid() const {
  return userid_;
}
inline void ProcessLog::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional int32 equipid = 3;
inline bool ProcessLog::has_equipid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProcessLog::set_has_equipid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProcessLog::clear_has_equipid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProcessLog::clear_equipid() {
  equipid_ = 0;
  clear_has_equipid();
}
inline ::google::protobuf::int32 ProcessLog::equipid() const {
  return equipid_;
}
inline void ProcessLog::set_equipid(::google::protobuf::int32 value) {
  set_has_equipid();
  equipid_ = value;
}

// optional string winuser = 4;
inline bool ProcessLog::has_winuser() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProcessLog::set_has_winuser() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProcessLog::clear_has_winuser() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProcessLog::clear_winuser() {
  if (winuser_ != &::google::protobuf::internal::kEmptyString) {
    winuser_->clear();
  }
  clear_has_winuser();
}
inline const ::std::string& ProcessLog::winuser() const {
  return *winuser_;
}
inline void ProcessLog::set_winuser(const ::std::string& value) {
  set_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    winuser_ = new ::std::string;
  }
  winuser_->assign(value);
}
inline void ProcessLog::set_winuser(const char* value) {
  set_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    winuser_ = new ::std::string;
  }
  winuser_->assign(value);
}
inline void ProcessLog::set_winuser(const char* value, size_t size) {
  set_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    winuser_ = new ::std::string;
  }
  winuser_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProcessLog::mutable_winuser() {
  set_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    winuser_ = new ::std::string;
  }
  return winuser_;
}
inline ::std::string* ProcessLog::release_winuser() {
  clear_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = winuser_;
    winuser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string ip = 5;
inline bool ProcessLog::has_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProcessLog::set_has_ip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProcessLog::clear_has_ip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProcessLog::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& ProcessLog::ip() const {
  return *ip_;
}
inline void ProcessLog::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void ProcessLog::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void ProcessLog::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProcessLog::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* ProcessLog::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string host = 6;
inline bool ProcessLog::has_host() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProcessLog::set_has_host() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProcessLog::clear_has_host() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProcessLog::clear_host() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    host_->clear();
  }
  clear_has_host();
}
inline const ::std::string& ProcessLog::host() const {
  return *host_;
}
inline void ProcessLog::set_host(const ::std::string& value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void ProcessLog::set_host(const char* value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void ProcessLog::set_host(const char* value, size_t size) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProcessLog::mutable_host() {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  return host_;
}
inline ::std::string* ProcessLog::release_host() {
  clear_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = host_;
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional double time = 7;
inline bool ProcessLog::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProcessLog::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProcessLog::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProcessLog::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline double ProcessLog::time() const {
  return time_;
}
inline void ProcessLog::set_time(double value) {
  set_has_time();
  time_ = value;
}

// optional int32 pid = 8;
inline bool ProcessLog::has_pid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProcessLog::set_has_pid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProcessLog::clear_has_pid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProcessLog::clear_pid() {
  pid_ = 0;
  clear_has_pid();
}
inline ::google::protobuf::int32 ProcessLog::pid() const {
  return pid_;
}
inline void ProcessLog::set_pid(::google::protobuf::int32 value) {
  set_has_pid();
  pid_ = value;
}

// optional string path = 9;
inline bool ProcessLog::has_path() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProcessLog::set_has_path() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProcessLog::clear_has_path() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProcessLog::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& ProcessLog::path() const {
  return *path_;
}
inline void ProcessLog::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void ProcessLog::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void ProcessLog::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProcessLog::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* ProcessLog::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string title = 10;
inline bool ProcessLog::has_title() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProcessLog::set_has_title() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProcessLog::clear_has_title() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProcessLog::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& ProcessLog::title() const {
  return *title_;
}
inline void ProcessLog::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void ProcessLog::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void ProcessLog::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProcessLog::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* ProcessLog::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional double end_time = 11;
inline bool ProcessLog::has_end_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ProcessLog::set_has_end_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ProcessLog::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ProcessLog::clear_end_time() {
  end_time_ = 0;
  clear_has_end_time();
}
inline double ProcessLog::end_time() const {
  return end_time_;
}
inline void ProcessLog::set_end_time(double value) {
  set_has_end_time();
  end_time_ = value;
}

// optional string corp = 12;
inline bool ProcessLog::has_corp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ProcessLog::set_has_corp() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ProcessLog::clear_has_corp() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ProcessLog::clear_corp() {
  if (corp_ != &::google::protobuf::internal::kEmptyString) {
    corp_->clear();
  }
  clear_has_corp();
}
inline const ::std::string& ProcessLog::corp() const {
  return *corp_;
}
inline void ProcessLog::set_corp(const ::std::string& value) {
  set_has_corp();
  if (corp_ == &::google::protobuf::internal::kEmptyString) {
    corp_ = new ::std::string;
  }
  corp_->assign(value);
}
inline void ProcessLog::set_corp(const char* value) {
  set_has_corp();
  if (corp_ == &::google::protobuf::internal::kEmptyString) {
    corp_ = new ::std::string;
  }
  corp_->assign(value);
}
inline void ProcessLog::set_corp(const char* value, size_t size) {
  set_has_corp();
  if (corp_ == &::google::protobuf::internal::kEmptyString) {
    corp_ = new ::std::string;
  }
  corp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProcessLog::mutable_corp() {
  set_has_corp();
  if (corp_ == &::google::protobuf::internal::kEmptyString) {
    corp_ = new ::std::string;
  }
  return corp_;
}
inline ::std::string* ProcessLog::release_corp() {
  clear_has_corp();
  if (corp_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = corp_;
    corp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 allowed = 13;
inline bool ProcessLog::has_allowed() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ProcessLog::set_has_allowed() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ProcessLog::clear_has_allowed() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ProcessLog::clear_allowed() {
  allowed_ = 0;
  clear_has_allowed();
}
inline ::google::protobuf::int32 ProcessLog::allowed() const {
  return allowed_;
}
inline void ProcessLog::set_allowed(::google::protobuf::int32 value) {
  set_has_allowed();
  allowed_ = value;
}

// optional bool need_alarm = 14;
inline bool ProcessLog::has_need_alarm() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ProcessLog::set_has_need_alarm() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ProcessLog::clear_has_need_alarm() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ProcessLog::clear_need_alarm() {
  need_alarm_ = false;
  clear_has_need_alarm();
}
inline bool ProcessLog::need_alarm() const {
  return need_alarm_;
}
inline void ProcessLog::set_need_alarm(bool value) {
  set_has_need_alarm();
  need_alarm_ = value;
}

// -------------------------------------------------------------------

// ProcessLogList

// repeated .isafetec.ProcessLog list = 1;
inline int ProcessLogList::list_size() const {
  return list_.size();
}
inline void ProcessLogList::clear_list() {
  list_.Clear();
}
inline const ::isafetec::ProcessLog& ProcessLogList::list(int index) const {
  return list_.Get(index);
}
inline ::isafetec::ProcessLog* ProcessLogList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::isafetec::ProcessLog* ProcessLogList::list_ReleaseAt(int index) {
  return list_.ReleaseAt(index);
}
inline void ProcessLogList::list_RemoveAt(int index) {
  list_.RemoveAt(index);
}
inline ::isafetec::ProcessLog* ProcessLogList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::ProcessLog >&
ProcessLogList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::ProcessLog >*
ProcessLogList::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// ScreenLog

// optional int32 id = 1;
inline bool ScreenLog::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScreenLog::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScreenLog::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScreenLog::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ScreenLog::id() const {
  return id_;
}
inline void ScreenLog::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 userid = 2;
inline bool ScreenLog::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScreenLog::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScreenLog::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScreenLog::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 ScreenLog::userid() const {
  return userid_;
}
inline void ScreenLog::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional int32 equipid = 3;
inline bool ScreenLog::has_equipid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScreenLog::set_has_equipid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ScreenLog::clear_has_equipid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ScreenLog::clear_equipid() {
  equipid_ = 0;
  clear_has_equipid();
}
inline ::google::protobuf::int32 ScreenLog::equipid() const {
  return equipid_;
}
inline void ScreenLog::set_equipid(::google::protobuf::int32 value) {
  set_has_equipid();
  equipid_ = value;
}

// optional string winuser = 4;
inline bool ScreenLog::has_winuser() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ScreenLog::set_has_winuser() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ScreenLog::clear_has_winuser() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ScreenLog::clear_winuser() {
  if (winuser_ != &::google::protobuf::internal::kEmptyString) {
    winuser_->clear();
  }
  clear_has_winuser();
}
inline const ::std::string& ScreenLog::winuser() const {
  return *winuser_;
}
inline void ScreenLog::set_winuser(const ::std::string& value) {
  set_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    winuser_ = new ::std::string;
  }
  winuser_->assign(value);
}
inline void ScreenLog::set_winuser(const char* value) {
  set_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    winuser_ = new ::std::string;
  }
  winuser_->assign(value);
}
inline void ScreenLog::set_winuser(const char* value, size_t size) {
  set_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    winuser_ = new ::std::string;
  }
  winuser_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ScreenLog::mutable_winuser() {
  set_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    winuser_ = new ::std::string;
  }
  return winuser_;
}
inline ::std::string* ScreenLog::release_winuser() {
  clear_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = winuser_;
    winuser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string ip = 5;
inline bool ScreenLog::has_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ScreenLog::set_has_ip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ScreenLog::clear_has_ip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ScreenLog::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& ScreenLog::ip() const {
  return *ip_;
}
inline void ScreenLog::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void ScreenLog::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void ScreenLog::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ScreenLog::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* ScreenLog::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string host = 6;
inline bool ScreenLog::has_host() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ScreenLog::set_has_host() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ScreenLog::clear_has_host() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ScreenLog::clear_host() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    host_->clear();
  }
  clear_has_host();
}
inline const ::std::string& ScreenLog::host() const {
  return *host_;
}
inline void ScreenLog::set_host(const ::std::string& value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void ScreenLog::set_host(const char* value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void ScreenLog::set_host(const char* value, size_t size) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ScreenLog::mutable_host() {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  return host_;
}
inline ::std::string* ScreenLog::release_host() {
  clear_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = host_;
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional double time = 7;
inline bool ScreenLog::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ScreenLog::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ScreenLog::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ScreenLog::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline double ScreenLog::time() const {
  return time_;
}
inline void ScreenLog::set_time(double value) {
  set_has_time();
  time_ = value;
}

// optional int32 with = 8;
inline bool ScreenLog::has_with() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ScreenLog::set_has_with() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ScreenLog::clear_has_with() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ScreenLog::clear_with() {
  with_ = 0;
  clear_has_with();
}
inline ::google::protobuf::int32 ScreenLog::with() const {
  return with_;
}
inline void ScreenLog::set_with(::google::protobuf::int32 value) {
  set_has_with();
  with_ = value;
}

// optional int32 height = 9;
inline bool ScreenLog::has_height() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ScreenLog::set_has_height() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ScreenLog::clear_has_height() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ScreenLog::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 ScreenLog::height() const {
  return height_;
}
inline void ScreenLog::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
}

// optional .isafetec.SCREEN_SAVE_TYPE save_type = 10;
inline bool ScreenLog::has_save_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ScreenLog::set_has_save_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ScreenLog::clear_has_save_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ScreenLog::clear_save_type() {
  save_type_ = 0;
  clear_has_save_type();
}
inline isafetec::SCREEN_SAVE_TYPE ScreenLog::save_type() const {
  return static_cast< isafetec::SCREEN_SAVE_TYPE >(save_type_);
}
inline void ScreenLog::set_save_type(isafetec::SCREEN_SAVE_TYPE value) {
  GOOGLE_DCHECK(isafetec::SCREEN_SAVE_TYPE_IsValid(value));
  set_has_save_type();
  save_type_ = value;
}

// optional int32 file_size = 11;
inline bool ScreenLog::has_file_size() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ScreenLog::set_has_file_size() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ScreenLog::clear_has_file_size() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ScreenLog::clear_file_size() {
  file_size_ = 0;
  clear_has_file_size();
}
inline ::google::protobuf::int32 ScreenLog::file_size() const {
  return file_size_;
}
inline void ScreenLog::set_file_size(::google::protobuf::int32 value) {
  set_has_file_size();
  file_size_ = value;
}

// optional string file_Path = 12;
inline bool ScreenLog::has_file_path() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ScreenLog::set_has_file_path() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ScreenLog::clear_has_file_path() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ScreenLog::clear_file_path() {
  if (file_path_ != &::google::protobuf::internal::kEmptyString) {
    file_path_->clear();
  }
  clear_has_file_path();
}
inline const ::std::string& ScreenLog::file_path() const {
  return *file_path_;
}
inline void ScreenLog::set_file_path(const ::std::string& value) {
  set_has_file_path();
  if (file_path_ == &::google::protobuf::internal::kEmptyString) {
    file_path_ = new ::std::string;
  }
  file_path_->assign(value);
}
inline void ScreenLog::set_file_path(const char* value) {
  set_has_file_path();
  if (file_path_ == &::google::protobuf::internal::kEmptyString) {
    file_path_ = new ::std::string;
  }
  file_path_->assign(value);
}
inline void ScreenLog::set_file_path(const char* value, size_t size) {
  set_has_file_path();
  if (file_path_ == &::google::protobuf::internal::kEmptyString) {
    file_path_ = new ::std::string;
  }
  file_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ScreenLog::mutable_file_path() {
  set_has_file_path();
  if (file_path_ == &::google::protobuf::internal::kEmptyString) {
    file_path_ = new ::std::string;
  }
  return file_path_;
}
inline ::std::string* ScreenLog::release_file_path() {
  clear_has_file_path();
  if (file_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = file_path_;
    file_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string root_path = 13;
inline bool ScreenLog::has_root_path() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ScreenLog::set_has_root_path() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ScreenLog::clear_has_root_path() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ScreenLog::clear_root_path() {
  if (root_path_ != &::google::protobuf::internal::kEmptyString) {
    root_path_->clear();
  }
  clear_has_root_path();
}
inline const ::std::string& ScreenLog::root_path() const {
  return *root_path_;
}
inline void ScreenLog::set_root_path(const ::std::string& value) {
  set_has_root_path();
  if (root_path_ == &::google::protobuf::internal::kEmptyString) {
    root_path_ = new ::std::string;
  }
  root_path_->assign(value);
}
inline void ScreenLog::set_root_path(const char* value) {
  set_has_root_path();
  if (root_path_ == &::google::protobuf::internal::kEmptyString) {
    root_path_ = new ::std::string;
  }
  root_path_->assign(value);
}
inline void ScreenLog::set_root_path(const char* value, size_t size) {
  set_has_root_path();
  if (root_path_ == &::google::protobuf::internal::kEmptyString) {
    root_path_ = new ::std::string;
  }
  root_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ScreenLog::mutable_root_path() {
  set_has_root_path();
  if (root_path_ == &::google::protobuf::internal::kEmptyString) {
    root_path_ = new ::std::string;
  }
  return root_path_;
}
inline ::std::string* ScreenLog::release_root_path() {
  clear_has_root_path();
  if (root_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = root_path_;
    root_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ScreenLogList

// repeated .isafetec.ScreenLog list = 1;
inline int ScreenLogList::list_size() const {
  return list_.size();
}
inline void ScreenLogList::clear_list() {
  list_.Clear();
}
inline const ::isafetec::ScreenLog& ScreenLogList::list(int index) const {
  return list_.Get(index);
}
inline ::isafetec::ScreenLog* ScreenLogList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::isafetec::ScreenLog* ScreenLogList::list_ReleaseAt(int index) {
  return list_.ReleaseAt(index);
}
inline void ScreenLogList::list_RemoveAt(int index) {
  list_.RemoveAt(index);
}
inline ::isafetec::ScreenLog* ScreenLogList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::ScreenLog >&
ScreenLogList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::ScreenLog >*
ScreenLogList::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// FileOperatorLog

// optional int32 id = 1;
inline bool FileOperatorLog::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FileOperatorLog::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FileOperatorLog::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FileOperatorLog::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 FileOperatorLog::id() const {
  return id_;
}
inline void FileOperatorLog::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 userid = 2;
inline bool FileOperatorLog::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FileOperatorLog::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FileOperatorLog::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FileOperatorLog::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 FileOperatorLog::userid() const {
  return userid_;
}
inline void FileOperatorLog::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional int32 equipid = 3;
inline bool FileOperatorLog::has_equipid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FileOperatorLog::set_has_equipid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FileOperatorLog::clear_has_equipid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FileOperatorLog::clear_equipid() {
  equipid_ = 0;
  clear_has_equipid();
}
inline ::google::protobuf::int32 FileOperatorLog::equipid() const {
  return equipid_;
}
inline void FileOperatorLog::set_equipid(::google::protobuf::int32 value) {
  set_has_equipid();
  equipid_ = value;
}

// optional string winuser = 4;
inline bool FileOperatorLog::has_winuser() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FileOperatorLog::set_has_winuser() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FileOperatorLog::clear_has_winuser() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FileOperatorLog::clear_winuser() {
  if (winuser_ != &::google::protobuf::internal::kEmptyString) {
    winuser_->clear();
  }
  clear_has_winuser();
}
inline const ::std::string& FileOperatorLog::winuser() const {
  return *winuser_;
}
inline void FileOperatorLog::set_winuser(const ::std::string& value) {
  set_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    winuser_ = new ::std::string;
  }
  winuser_->assign(value);
}
inline void FileOperatorLog::set_winuser(const char* value) {
  set_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    winuser_ = new ::std::string;
  }
  winuser_->assign(value);
}
inline void FileOperatorLog::set_winuser(const char* value, size_t size) {
  set_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    winuser_ = new ::std::string;
  }
  winuser_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileOperatorLog::mutable_winuser() {
  set_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    winuser_ = new ::std::string;
  }
  return winuser_;
}
inline ::std::string* FileOperatorLog::release_winuser() {
  clear_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = winuser_;
    winuser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string ip = 5;
inline bool FileOperatorLog::has_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FileOperatorLog::set_has_ip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FileOperatorLog::clear_has_ip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FileOperatorLog::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& FileOperatorLog::ip() const {
  return *ip_;
}
inline void FileOperatorLog::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void FileOperatorLog::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void FileOperatorLog::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileOperatorLog::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* FileOperatorLog::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string host = 6;
inline bool FileOperatorLog::has_host() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FileOperatorLog::set_has_host() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FileOperatorLog::clear_has_host() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FileOperatorLog::clear_host() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    host_->clear();
  }
  clear_has_host();
}
inline const ::std::string& FileOperatorLog::host() const {
  return *host_;
}
inline void FileOperatorLog::set_host(const ::std::string& value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void FileOperatorLog::set_host(const char* value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void FileOperatorLog::set_host(const char* value, size_t size) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileOperatorLog::mutable_host() {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  return host_;
}
inline ::std::string* FileOperatorLog::release_host() {
  clear_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = host_;
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional double time = 7;
inline bool FileOperatorLog::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FileOperatorLog::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FileOperatorLog::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FileOperatorLog::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline double FileOperatorLog::time() const {
  return time_;
}
inline void FileOperatorLog::set_time(double value) {
  set_has_time();
  time_ = value;
}

// optional string process_name = 8;
inline bool FileOperatorLog::has_process_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FileOperatorLog::set_has_process_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FileOperatorLog::clear_has_process_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FileOperatorLog::clear_process_name() {
  if (process_name_ != &::google::protobuf::internal::kEmptyString) {
    process_name_->clear();
  }
  clear_has_process_name();
}
inline const ::std::string& FileOperatorLog::process_name() const {
  return *process_name_;
}
inline void FileOperatorLog::set_process_name(const ::std::string& value) {
  set_has_process_name();
  if (process_name_ == &::google::protobuf::internal::kEmptyString) {
    process_name_ = new ::std::string;
  }
  process_name_->assign(value);
}
inline void FileOperatorLog::set_process_name(const char* value) {
  set_has_process_name();
  if (process_name_ == &::google::protobuf::internal::kEmptyString) {
    process_name_ = new ::std::string;
  }
  process_name_->assign(value);
}
inline void FileOperatorLog::set_process_name(const char* value, size_t size) {
  set_has_process_name();
  if (process_name_ == &::google::protobuf::internal::kEmptyString) {
    process_name_ = new ::std::string;
  }
  process_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileOperatorLog::mutable_process_name() {
  set_has_process_name();
  if (process_name_ == &::google::protobuf::internal::kEmptyString) {
    process_name_ = new ::std::string;
  }
  return process_name_;
}
inline ::std::string* FileOperatorLog::release_process_name() {
  clear_has_process_name();
  if (process_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = process_name_;
    process_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string process_title = 9;
inline bool FileOperatorLog::has_process_title() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FileOperatorLog::set_has_process_title() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FileOperatorLog::clear_has_process_title() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FileOperatorLog::clear_process_title() {
  if (process_title_ != &::google::protobuf::internal::kEmptyString) {
    process_title_->clear();
  }
  clear_has_process_title();
}
inline const ::std::string& FileOperatorLog::process_title() const {
  return *process_title_;
}
inline void FileOperatorLog::set_process_title(const ::std::string& value) {
  set_has_process_title();
  if (process_title_ == &::google::protobuf::internal::kEmptyString) {
    process_title_ = new ::std::string;
  }
  process_title_->assign(value);
}
inline void FileOperatorLog::set_process_title(const char* value) {
  set_has_process_title();
  if (process_title_ == &::google::protobuf::internal::kEmptyString) {
    process_title_ = new ::std::string;
  }
  process_title_->assign(value);
}
inline void FileOperatorLog::set_process_title(const char* value, size_t size) {
  set_has_process_title();
  if (process_title_ == &::google::protobuf::internal::kEmptyString) {
    process_title_ = new ::std::string;
  }
  process_title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileOperatorLog::mutable_process_title() {
  set_has_process_title();
  if (process_title_ == &::google::protobuf::internal::kEmptyString) {
    process_title_ = new ::std::string;
  }
  return process_title_;
}
inline ::std::string* FileOperatorLog::release_process_title() {
  clear_has_process_title();
  if (process_title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = process_title_;
    process_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 op = 10;
inline bool FileOperatorLog::has_op() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FileOperatorLog::set_has_op() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FileOperatorLog::clear_has_op() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FileOperatorLog::clear_op() {
  op_ = 0;
  clear_has_op();
}
inline ::google::protobuf::int32 FileOperatorLog::op() const {
  return op_;
}
inline void FileOperatorLog::set_op(::google::protobuf::int32 value) {
  set_has_op();
  op_ = value;
}

// optional int32 allowed = 11;
inline bool FileOperatorLog::has_allowed() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FileOperatorLog::set_has_allowed() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FileOperatorLog::clear_has_allowed() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FileOperatorLog::clear_allowed() {
  allowed_ = 0;
  clear_has_allowed();
}
inline ::google::protobuf::int32 FileOperatorLog::allowed() const {
  return allowed_;
}
inline void FileOperatorLog::set_allowed(::google::protobuf::int32 value) {
  set_has_allowed();
  allowed_ = value;
}

// optional string source_path = 12;
inline bool FileOperatorLog::has_source_path() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FileOperatorLog::set_has_source_path() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FileOperatorLog::clear_has_source_path() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FileOperatorLog::clear_source_path() {
  if (source_path_ != &::google::protobuf::internal::kEmptyString) {
    source_path_->clear();
  }
  clear_has_source_path();
}
inline const ::std::string& FileOperatorLog::source_path() const {
  return *source_path_;
}
inline void FileOperatorLog::set_source_path(const ::std::string& value) {
  set_has_source_path();
  if (source_path_ == &::google::protobuf::internal::kEmptyString) {
    source_path_ = new ::std::string;
  }
  source_path_->assign(value);
}
inline void FileOperatorLog::set_source_path(const char* value) {
  set_has_source_path();
  if (source_path_ == &::google::protobuf::internal::kEmptyString) {
    source_path_ = new ::std::string;
  }
  source_path_->assign(value);
}
inline void FileOperatorLog::set_source_path(const char* value, size_t size) {
  set_has_source_path();
  if (source_path_ == &::google::protobuf::internal::kEmptyString) {
    source_path_ = new ::std::string;
  }
  source_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileOperatorLog::mutable_source_path() {
  set_has_source_path();
  if (source_path_ == &::google::protobuf::internal::kEmptyString) {
    source_path_ = new ::std::string;
  }
  return source_path_;
}
inline ::std::string* FileOperatorLog::release_source_path() {
  clear_has_source_path();
  if (source_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = source_path_;
    source_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 source_device_Type = 13;
inline bool FileOperatorLog::has_source_device_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FileOperatorLog::set_has_source_device_type() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FileOperatorLog::clear_has_source_device_type() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FileOperatorLog::clear_source_device_type() {
  source_device_type_ = 0;
  clear_has_source_device_type();
}
inline ::google::protobuf::int32 FileOperatorLog::source_device_type() const {
  return source_device_type_;
}
inline void FileOperatorLog::set_source_device_type(::google::protobuf::int32 value) {
  set_has_source_device_type();
  source_device_type_ = value;
}

// optional string dest_path = 14;
inline bool FileOperatorLog::has_dest_path() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void FileOperatorLog::set_has_dest_path() {
  _has_bits_[0] |= 0x00002000u;
}
inline void FileOperatorLog::clear_has_dest_path() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void FileOperatorLog::clear_dest_path() {
  if (dest_path_ != &::google::protobuf::internal::kEmptyString) {
    dest_path_->clear();
  }
  clear_has_dest_path();
}
inline const ::std::string& FileOperatorLog::dest_path() const {
  return *dest_path_;
}
inline void FileOperatorLog::set_dest_path(const ::std::string& value) {
  set_has_dest_path();
  if (dest_path_ == &::google::protobuf::internal::kEmptyString) {
    dest_path_ = new ::std::string;
  }
  dest_path_->assign(value);
}
inline void FileOperatorLog::set_dest_path(const char* value) {
  set_has_dest_path();
  if (dest_path_ == &::google::protobuf::internal::kEmptyString) {
    dest_path_ = new ::std::string;
  }
  dest_path_->assign(value);
}
inline void FileOperatorLog::set_dest_path(const char* value, size_t size) {
  set_has_dest_path();
  if (dest_path_ == &::google::protobuf::internal::kEmptyString) {
    dest_path_ = new ::std::string;
  }
  dest_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileOperatorLog::mutable_dest_path() {
  set_has_dest_path();
  if (dest_path_ == &::google::protobuf::internal::kEmptyString) {
    dest_path_ = new ::std::string;
  }
  return dest_path_;
}
inline ::std::string* FileOperatorLog::release_dest_path() {
  clear_has_dest_path();
  if (dest_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dest_path_;
    dest_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 dest_device_type = 15;
inline bool FileOperatorLog::has_dest_device_type() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void FileOperatorLog::set_has_dest_device_type() {
  _has_bits_[0] |= 0x00004000u;
}
inline void FileOperatorLog::clear_has_dest_device_type() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void FileOperatorLog::clear_dest_device_type() {
  dest_device_type_ = 0;
  clear_has_dest_device_type();
}
inline ::google::protobuf::int32 FileOperatorLog::dest_device_type() const {
  return dest_device_type_;
}
inline void FileOperatorLog::set_dest_device_type(::google::protobuf::int32 value) {
  set_has_dest_device_type();
  dest_device_type_ = value;
}

// optional string remark = 16;
inline bool FileOperatorLog::has_remark() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void FileOperatorLog::set_has_remark() {
  _has_bits_[0] |= 0x00008000u;
}
inline void FileOperatorLog::clear_has_remark() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void FileOperatorLog::clear_remark() {
  if (remark_ != &::google::protobuf::internal::kEmptyString) {
    remark_->clear();
  }
  clear_has_remark();
}
inline const ::std::string& FileOperatorLog::remark() const {
  return *remark_;
}
inline void FileOperatorLog::set_remark(const ::std::string& value) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  remark_->assign(value);
}
inline void FileOperatorLog::set_remark(const char* value) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  remark_->assign(value);
}
inline void FileOperatorLog::set_remark(const char* value, size_t size) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  remark_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FileOperatorLog::mutable_remark() {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  return remark_;
}
inline ::std::string* FileOperatorLog::release_remark() {
  clear_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = remark_;
    remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// FileOperatorLogList

// repeated .isafetec.FileOperatorLog list = 1;
inline int FileOperatorLogList::list_size() const {
  return list_.size();
}
inline void FileOperatorLogList::clear_list() {
  list_.Clear();
}
inline const ::isafetec::FileOperatorLog& FileOperatorLogList::list(int index) const {
  return list_.Get(index);
}
inline ::isafetec::FileOperatorLog* FileOperatorLogList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::isafetec::FileOperatorLog* FileOperatorLogList::list_ReleaseAt(int index) {
  return list_.ReleaseAt(index);
}
inline void FileOperatorLogList::list_RemoveAt(int index) {
  list_.RemoveAt(index);
}
inline ::isafetec::FileOperatorLog* FileOperatorLogList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::FileOperatorLog >&
FileOperatorLogList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::FileOperatorLog >*
FileOperatorLogList::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// NetStreamLog

// optional int32 id = 1;
inline bool NetStreamLog::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetStreamLog::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetStreamLog::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetStreamLog::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 NetStreamLog::id() const {
  return id_;
}
inline void NetStreamLog::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 userid = 2;
inline bool NetStreamLog::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NetStreamLog::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NetStreamLog::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NetStreamLog::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 NetStreamLog::userid() const {
  return userid_;
}
inline void NetStreamLog::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional int32 equipid = 3;
inline bool NetStreamLog::has_equipid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NetStreamLog::set_has_equipid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NetStreamLog::clear_has_equipid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NetStreamLog::clear_equipid() {
  equipid_ = 0;
  clear_has_equipid();
}
inline ::google::protobuf::int32 NetStreamLog::equipid() const {
  return equipid_;
}
inline void NetStreamLog::set_equipid(::google::protobuf::int32 value) {
  set_has_equipid();
  equipid_ = value;
}

// optional string winuser = 4;
inline bool NetStreamLog::has_winuser() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NetStreamLog::set_has_winuser() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NetStreamLog::clear_has_winuser() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NetStreamLog::clear_winuser() {
  if (winuser_ != &::google::protobuf::internal::kEmptyString) {
    winuser_->clear();
  }
  clear_has_winuser();
}
inline const ::std::string& NetStreamLog::winuser() const {
  return *winuser_;
}
inline void NetStreamLog::set_winuser(const ::std::string& value) {
  set_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    winuser_ = new ::std::string;
  }
  winuser_->assign(value);
}
inline void NetStreamLog::set_winuser(const char* value) {
  set_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    winuser_ = new ::std::string;
  }
  winuser_->assign(value);
}
inline void NetStreamLog::set_winuser(const char* value, size_t size) {
  set_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    winuser_ = new ::std::string;
  }
  winuser_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetStreamLog::mutable_winuser() {
  set_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    winuser_ = new ::std::string;
  }
  return winuser_;
}
inline ::std::string* NetStreamLog::release_winuser() {
  clear_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = winuser_;
    winuser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string ip = 5;
inline bool NetStreamLog::has_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NetStreamLog::set_has_ip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NetStreamLog::clear_has_ip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NetStreamLog::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& NetStreamLog::ip() const {
  return *ip_;
}
inline void NetStreamLog::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void NetStreamLog::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void NetStreamLog::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetStreamLog::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* NetStreamLog::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string host = 6;
inline bool NetStreamLog::has_host() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NetStreamLog::set_has_host() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NetStreamLog::clear_has_host() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NetStreamLog::clear_host() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    host_->clear();
  }
  clear_has_host();
}
inline const ::std::string& NetStreamLog::host() const {
  return *host_;
}
inline void NetStreamLog::set_host(const ::std::string& value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void NetStreamLog::set_host(const char* value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void NetStreamLog::set_host(const char* value, size_t size) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetStreamLog::mutable_host() {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  return host_;
}
inline ::std::string* NetStreamLog::release_host() {
  clear_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = host_;
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional double time = 7;
inline bool NetStreamLog::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NetStreamLog::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NetStreamLog::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NetStreamLog::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline double NetStreamLog::time() const {
  return time_;
}
inline void NetStreamLog::set_time(double value) {
  set_has_time();
  time_ = value;
}

// optional double etime = 8;
inline bool NetStreamLog::has_etime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NetStreamLog::set_has_etime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NetStreamLog::clear_has_etime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NetStreamLog::clear_etime() {
  etime_ = 0;
  clear_has_etime();
}
inline double NetStreamLog::etime() const {
  return etime_;
}
inline void NetStreamLog::set_etime(double value) {
  set_has_etime();
  etime_ = value;
}

// optional uint32 interval = 9;
inline bool NetStreamLog::has_interval() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NetStreamLog::set_has_interval() {
  _has_bits_[0] |= 0x00000100u;
}
inline void NetStreamLog::clear_has_interval() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void NetStreamLog::clear_interval() {
  interval_ = 0u;
  clear_has_interval();
}
inline ::google::protobuf::uint32 NetStreamLog::interval() const {
  return interval_;
}
inline void NetStreamLog::set_interval(::google::protobuf::uint32 value) {
  set_has_interval();
  interval_ = value;
}

// optional uint32 type = 10;
inline bool NetStreamLog::has_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void NetStreamLog::set_has_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void NetStreamLog::clear_has_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void NetStreamLog::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 NetStreamLog::type() const {
  return type_;
}
inline void NetStreamLog::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 direction = 11;
inline bool NetStreamLog::has_direction() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void NetStreamLog::set_has_direction() {
  _has_bits_[0] |= 0x00000400u;
}
inline void NetStreamLog::clear_has_direction() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void NetStreamLog::clear_direction() {
  direction_ = 0u;
  clear_has_direction();
}
inline ::google::protobuf::uint32 NetStreamLog::direction() const {
  return direction_;
}
inline void NetStreamLog::set_direction(::google::protobuf::uint32 value) {
  set_has_direction();
  direction_ = value;
}

// optional uint32 data_len = 12;
inline bool NetStreamLog::has_data_len() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void NetStreamLog::set_has_data_len() {
  _has_bits_[0] |= 0x00000800u;
}
inline void NetStreamLog::clear_has_data_len() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void NetStreamLog::clear_data_len() {
  data_len_ = 0u;
  clear_has_data_len();
}
inline ::google::protobuf::uint32 NetStreamLog::data_len() const {
  return data_len_;
}
inline void NetStreamLog::set_data_len(::google::protobuf::uint32 value) {
  set_has_data_len();
  data_len_ = value;
}

// optional uint32 src_port = 13;
inline bool NetStreamLog::has_src_port() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void NetStreamLog::set_has_src_port() {
  _has_bits_[0] |= 0x00001000u;
}
inline void NetStreamLog::clear_has_src_port() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void NetStreamLog::clear_src_port() {
  src_port_ = 0u;
  clear_has_src_port();
}
inline ::google::protobuf::uint32 NetStreamLog::src_port() const {
  return src_port_;
}
inline void NetStreamLog::set_src_port(::google::protobuf::uint32 value) {
  set_has_src_port();
  src_port_ = value;
}

// optional uint32 dest_port = 14;
inline bool NetStreamLog::has_dest_port() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void NetStreamLog::set_has_dest_port() {
  _has_bits_[0] |= 0x00002000u;
}
inline void NetStreamLog::clear_has_dest_port() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void NetStreamLog::clear_dest_port() {
  dest_port_ = 0u;
  clear_has_dest_port();
}
inline ::google::protobuf::uint32 NetStreamLog::dest_port() const {
  return dest_port_;
}
inline void NetStreamLog::set_dest_port(::google::protobuf::uint32 value) {
  set_has_dest_port();
  dest_port_ = value;
}

// optional string src_ip = 15;
inline bool NetStreamLog::has_src_ip() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void NetStreamLog::set_has_src_ip() {
  _has_bits_[0] |= 0x00004000u;
}
inline void NetStreamLog::clear_has_src_ip() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void NetStreamLog::clear_src_ip() {
  if (src_ip_ != &::google::protobuf::internal::kEmptyString) {
    src_ip_->clear();
  }
  clear_has_src_ip();
}
inline const ::std::string& NetStreamLog::src_ip() const {
  return *src_ip_;
}
inline void NetStreamLog::set_src_ip(const ::std::string& value) {
  set_has_src_ip();
  if (src_ip_ == &::google::protobuf::internal::kEmptyString) {
    src_ip_ = new ::std::string;
  }
  src_ip_->assign(value);
}
inline void NetStreamLog::set_src_ip(const char* value) {
  set_has_src_ip();
  if (src_ip_ == &::google::protobuf::internal::kEmptyString) {
    src_ip_ = new ::std::string;
  }
  src_ip_->assign(value);
}
inline void NetStreamLog::set_src_ip(const char* value, size_t size) {
  set_has_src_ip();
  if (src_ip_ == &::google::protobuf::internal::kEmptyString) {
    src_ip_ = new ::std::string;
  }
  src_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetStreamLog::mutable_src_ip() {
  set_has_src_ip();
  if (src_ip_ == &::google::protobuf::internal::kEmptyString) {
    src_ip_ = new ::std::string;
  }
  return src_ip_;
}
inline ::std::string* NetStreamLog::release_src_ip() {
  clear_has_src_ip();
  if (src_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = src_ip_;
    src_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string dest_ip = 16;
inline bool NetStreamLog::has_dest_ip() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void NetStreamLog::set_has_dest_ip() {
  _has_bits_[0] |= 0x00008000u;
}
inline void NetStreamLog::clear_has_dest_ip() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void NetStreamLog::clear_dest_ip() {
  if (dest_ip_ != &::google::protobuf::internal::kEmptyString) {
    dest_ip_->clear();
  }
  clear_has_dest_ip();
}
inline const ::std::string& NetStreamLog::dest_ip() const {
  return *dest_ip_;
}
inline void NetStreamLog::set_dest_ip(const ::std::string& value) {
  set_has_dest_ip();
  if (dest_ip_ == &::google::protobuf::internal::kEmptyString) {
    dest_ip_ = new ::std::string;
  }
  dest_ip_->assign(value);
}
inline void NetStreamLog::set_dest_ip(const char* value) {
  set_has_dest_ip();
  if (dest_ip_ == &::google::protobuf::internal::kEmptyString) {
    dest_ip_ = new ::std::string;
  }
  dest_ip_->assign(value);
}
inline void NetStreamLog::set_dest_ip(const char* value, size_t size) {
  set_has_dest_ip();
  if (dest_ip_ == &::google::protobuf::internal::kEmptyString) {
    dest_ip_ = new ::std::string;
  }
  dest_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetStreamLog::mutable_dest_ip() {
  set_has_dest_ip();
  if (dest_ip_ == &::google::protobuf::internal::kEmptyString) {
    dest_ip_ = new ::std::string;
  }
  return dest_ip_;
}
inline ::std::string* NetStreamLog::release_dest_ip() {
  clear_has_dest_ip();
  if (dest_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dest_ip_;
    dest_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string process_path = 17;
inline bool NetStreamLog::has_process_path() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void NetStreamLog::set_has_process_path() {
  _has_bits_[0] |= 0x00010000u;
}
inline void NetStreamLog::clear_has_process_path() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void NetStreamLog::clear_process_path() {
  if (process_path_ != &::google::protobuf::internal::kEmptyString) {
    process_path_->clear();
  }
  clear_has_process_path();
}
inline const ::std::string& NetStreamLog::process_path() const {
  return *process_path_;
}
inline void NetStreamLog::set_process_path(const ::std::string& value) {
  set_has_process_path();
  if (process_path_ == &::google::protobuf::internal::kEmptyString) {
    process_path_ = new ::std::string;
  }
  process_path_->assign(value);
}
inline void NetStreamLog::set_process_path(const char* value) {
  set_has_process_path();
  if (process_path_ == &::google::protobuf::internal::kEmptyString) {
    process_path_ = new ::std::string;
  }
  process_path_->assign(value);
}
inline void NetStreamLog::set_process_path(const char* value, size_t size) {
  set_has_process_path();
  if (process_path_ == &::google::protobuf::internal::kEmptyString) {
    process_path_ = new ::std::string;
  }
  process_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetStreamLog::mutable_process_path() {
  set_has_process_path();
  if (process_path_ == &::google::protobuf::internal::kEmptyString) {
    process_path_ = new ::std::string;
  }
  return process_path_;
}
inline ::std::string* NetStreamLog::release_process_path() {
  clear_has_process_path();
  if (process_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = process_path_;
    process_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool need_alarm = 18;
inline bool NetStreamLog::has_need_alarm() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void NetStreamLog::set_has_need_alarm() {
  _has_bits_[0] |= 0x00020000u;
}
inline void NetStreamLog::clear_has_need_alarm() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void NetStreamLog::clear_need_alarm() {
  need_alarm_ = false;
  clear_has_need_alarm();
}
inline bool NetStreamLog::need_alarm() const {
  return need_alarm_;
}
inline void NetStreamLog::set_need_alarm(bool value) {
  set_has_need_alarm();
  need_alarm_ = value;
}

// -------------------------------------------------------------------

// NetStreamLogList

// repeated .isafetec.NetStreamLog list = 1;
inline int NetStreamLogList::list_size() const {
  return list_.size();
}
inline void NetStreamLogList::clear_list() {
  list_.Clear();
}
inline const ::isafetec::NetStreamLog& NetStreamLogList::list(int index) const {
  return list_.Get(index);
}
inline ::isafetec::NetStreamLog* NetStreamLogList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::isafetec::NetStreamLog* NetStreamLogList::list_ReleaseAt(int index) {
  return list_.ReleaseAt(index);
}
inline void NetStreamLogList::list_RemoveAt(int index) {
  list_.RemoveAt(index);
}
inline ::isafetec::NetStreamLog* NetStreamLogList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::NetStreamLog >&
NetStreamLogList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::NetStreamLog >*
NetStreamLogList::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// EquipIdleTimeLog

// optional int32 id = 1;
inline bool EquipIdleTimeLog::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipIdleTimeLog::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipIdleTimeLog::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipIdleTimeLog::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 EquipIdleTimeLog::id() const {
  return id_;
}
inline void EquipIdleTimeLog::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 userid = 2;
inline bool EquipIdleTimeLog::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipIdleTimeLog::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipIdleTimeLog::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipIdleTimeLog::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 EquipIdleTimeLog::userid() const {
  return userid_;
}
inline void EquipIdleTimeLog::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional int32 equipid = 3;
inline bool EquipIdleTimeLog::has_equipid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EquipIdleTimeLog::set_has_equipid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EquipIdleTimeLog::clear_has_equipid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EquipIdleTimeLog::clear_equipid() {
  equipid_ = 0;
  clear_has_equipid();
}
inline ::google::protobuf::int32 EquipIdleTimeLog::equipid() const {
  return equipid_;
}
inline void EquipIdleTimeLog::set_equipid(::google::protobuf::int32 value) {
  set_has_equipid();
  equipid_ = value;
}

// optional string winuser = 4;
inline bool EquipIdleTimeLog::has_winuser() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EquipIdleTimeLog::set_has_winuser() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EquipIdleTimeLog::clear_has_winuser() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EquipIdleTimeLog::clear_winuser() {
  if (winuser_ != &::google::protobuf::internal::kEmptyString) {
    winuser_->clear();
  }
  clear_has_winuser();
}
inline const ::std::string& EquipIdleTimeLog::winuser() const {
  return *winuser_;
}
inline void EquipIdleTimeLog::set_winuser(const ::std::string& value) {
  set_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    winuser_ = new ::std::string;
  }
  winuser_->assign(value);
}
inline void EquipIdleTimeLog::set_winuser(const char* value) {
  set_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    winuser_ = new ::std::string;
  }
  winuser_->assign(value);
}
inline void EquipIdleTimeLog::set_winuser(const char* value, size_t size) {
  set_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    winuser_ = new ::std::string;
  }
  winuser_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EquipIdleTimeLog::mutable_winuser() {
  set_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    winuser_ = new ::std::string;
  }
  return winuser_;
}
inline ::std::string* EquipIdleTimeLog::release_winuser() {
  clear_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = winuser_;
    winuser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string ip = 5;
inline bool EquipIdleTimeLog::has_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EquipIdleTimeLog::set_has_ip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EquipIdleTimeLog::clear_has_ip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EquipIdleTimeLog::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& EquipIdleTimeLog::ip() const {
  return *ip_;
}
inline void EquipIdleTimeLog::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void EquipIdleTimeLog::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void EquipIdleTimeLog::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EquipIdleTimeLog::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* EquipIdleTimeLog::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string host = 6;
inline bool EquipIdleTimeLog::has_host() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EquipIdleTimeLog::set_has_host() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EquipIdleTimeLog::clear_has_host() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EquipIdleTimeLog::clear_host() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    host_->clear();
  }
  clear_has_host();
}
inline const ::std::string& EquipIdleTimeLog::host() const {
  return *host_;
}
inline void EquipIdleTimeLog::set_host(const ::std::string& value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void EquipIdleTimeLog::set_host(const char* value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void EquipIdleTimeLog::set_host(const char* value, size_t size) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EquipIdleTimeLog::mutable_host() {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  return host_;
}
inline ::std::string* EquipIdleTimeLog::release_host() {
  clear_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = host_;
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional double time = 7;
inline bool EquipIdleTimeLog::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EquipIdleTimeLog::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EquipIdleTimeLog::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EquipIdleTimeLog::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline double EquipIdleTimeLog::time() const {
  return time_;
}
inline void EquipIdleTimeLog::set_time(double value) {
  set_has_time();
  time_ = value;
}

// optional double btime = 8;
inline bool EquipIdleTimeLog::has_btime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EquipIdleTimeLog::set_has_btime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EquipIdleTimeLog::clear_has_btime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EquipIdleTimeLog::clear_btime() {
  btime_ = 0;
  clear_has_btime();
}
inline double EquipIdleTimeLog::btime() const {
  return btime_;
}
inline void EquipIdleTimeLog::set_btime(double value) {
  set_has_btime();
  btime_ = value;
}

// optional double etime = 9;
inline bool EquipIdleTimeLog::has_etime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void EquipIdleTimeLog::set_has_etime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void EquipIdleTimeLog::clear_has_etime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void EquipIdleTimeLog::clear_etime() {
  etime_ = 0;
  clear_has_etime();
}
inline double EquipIdleTimeLog::etime() const {
  return etime_;
}
inline void EquipIdleTimeLog::set_etime(double value) {
  set_has_etime();
  etime_ = value;
}

// optional int32 idleminute = 10;
inline bool EquipIdleTimeLog::has_idleminute() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void EquipIdleTimeLog::set_has_idleminute() {
  _has_bits_[0] |= 0x00000200u;
}
inline void EquipIdleTimeLog::clear_has_idleminute() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void EquipIdleTimeLog::clear_idleminute() {
  idleminute_ = 0;
  clear_has_idleminute();
}
inline ::google::protobuf::int32 EquipIdleTimeLog::idleminute() const {
  return idleminute_;
}
inline void EquipIdleTimeLog::set_idleminute(::google::protobuf::int32 value) {
  set_has_idleminute();
  idleminute_ = value;
}

// -------------------------------------------------------------------

// EquipIdleTimeLogList

// repeated .isafetec.EquipIdleTimeLog list = 1;
inline int EquipIdleTimeLogList::list_size() const {
  return list_.size();
}
inline void EquipIdleTimeLogList::clear_list() {
  list_.Clear();
}
inline const ::isafetec::EquipIdleTimeLog& EquipIdleTimeLogList::list(int index) const {
  return list_.Get(index);
}
inline ::isafetec::EquipIdleTimeLog* EquipIdleTimeLogList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::isafetec::EquipIdleTimeLog* EquipIdleTimeLogList::list_ReleaseAt(int index) {
  return list_.ReleaseAt(index);
}
inline void EquipIdleTimeLogList::list_RemoveAt(int index) {
  list_.RemoveAt(index);
}
inline ::isafetec::EquipIdleTimeLog* EquipIdleTimeLogList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::EquipIdleTimeLog >&
EquipIdleTimeLogList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::EquipIdleTimeLog >*
EquipIdleTimeLogList::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// MailLog

// optional int32 id = 1;
inline bool MailLog::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MailLog::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MailLog::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MailLog::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 MailLog::id() const {
  return id_;
}
inline void MailLog::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 userid = 2;
inline bool MailLog::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MailLog::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MailLog::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MailLog::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 MailLog::userid() const {
  return userid_;
}
inline void MailLog::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional int32 equipid = 3;
inline bool MailLog::has_equipid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MailLog::set_has_equipid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MailLog::clear_has_equipid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MailLog::clear_equipid() {
  equipid_ = 0;
  clear_has_equipid();
}
inline ::google::protobuf::int32 MailLog::equipid() const {
  return equipid_;
}
inline void MailLog::set_equipid(::google::protobuf::int32 value) {
  set_has_equipid();
  equipid_ = value;
}

// optional string winuser = 4;
inline bool MailLog::has_winuser() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MailLog::set_has_winuser() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MailLog::clear_has_winuser() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MailLog::clear_winuser() {
  if (winuser_ != &::google::protobuf::internal::kEmptyString) {
    winuser_->clear();
  }
  clear_has_winuser();
}
inline const ::std::string& MailLog::winuser() const {
  return *winuser_;
}
inline void MailLog::set_winuser(const ::std::string& value) {
  set_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    winuser_ = new ::std::string;
  }
  winuser_->assign(value);
}
inline void MailLog::set_winuser(const char* value) {
  set_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    winuser_ = new ::std::string;
  }
  winuser_->assign(value);
}
inline void MailLog::set_winuser(const char* value, size_t size) {
  set_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    winuser_ = new ::std::string;
  }
  winuser_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MailLog::mutable_winuser() {
  set_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    winuser_ = new ::std::string;
  }
  return winuser_;
}
inline ::std::string* MailLog::release_winuser() {
  clear_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = winuser_;
    winuser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string ip = 5;
inline bool MailLog::has_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MailLog::set_has_ip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MailLog::clear_has_ip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MailLog::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& MailLog::ip() const {
  return *ip_;
}
inline void MailLog::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void MailLog::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void MailLog::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MailLog::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* MailLog::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string host = 6;
inline bool MailLog::has_host() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MailLog::set_has_host() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MailLog::clear_has_host() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MailLog::clear_host() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    host_->clear();
  }
  clear_has_host();
}
inline const ::std::string& MailLog::host() const {
  return *host_;
}
inline void MailLog::set_host(const ::std::string& value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void MailLog::set_host(const char* value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void MailLog::set_host(const char* value, size_t size) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MailLog::mutable_host() {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  return host_;
}
inline ::std::string* MailLog::release_host() {
  clear_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = host_;
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional double time = 7;
inline bool MailLog::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MailLog::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MailLog::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MailLog::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline double MailLog::time() const {
  return time_;
}
inline void MailLog::set_time(double value) {
  set_has_time();
  time_ = value;
}

// optional int32 web_mail = 8;
inline bool MailLog::has_web_mail() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MailLog::set_has_web_mail() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MailLog::clear_has_web_mail() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MailLog::clear_web_mail() {
  web_mail_ = 0;
  clear_has_web_mail();
}
inline ::google::protobuf::int32 MailLog::web_mail() const {
  return web_mail_;
}
inline void MailLog::set_web_mail(::google::protobuf::int32 value) {
  set_has_web_mail();
  web_mail_ = value;
}

// optional string from = 9;
inline bool MailLog::has_from() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MailLog::set_has_from() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MailLog::clear_has_from() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MailLog::clear_from() {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    from_->clear();
  }
  clear_has_from();
}
inline const ::std::string& MailLog::from() const {
  return *from_;
}
inline void MailLog::set_from(const ::std::string& value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void MailLog::set_from(const char* value) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void MailLog::set_from(const char* value, size_t size) {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  from_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MailLog::mutable_from() {
  set_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    from_ = new ::std::string;
  }
  return from_;
}
inline ::std::string* MailLog::release_from() {
  clear_has_from();
  if (from_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = from_;
    from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string to = 10;
inline bool MailLog::has_to() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MailLog::set_has_to() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MailLog::clear_has_to() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MailLog::clear_to() {
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    to_->clear();
  }
  clear_has_to();
}
inline const ::std::string& MailLog::to() const {
  return *to_;
}
inline void MailLog::set_to(const ::std::string& value) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  to_->assign(value);
}
inline void MailLog::set_to(const char* value) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  to_->assign(value);
}
inline void MailLog::set_to(const char* value, size_t size) {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  to_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MailLog::mutable_to() {
  set_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    to_ = new ::std::string;
  }
  return to_;
}
inline ::std::string* MailLog::release_to() {
  clear_has_to();
  if (to_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = to_;
    to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string copyto = 11;
inline bool MailLog::has_copyto() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MailLog::set_has_copyto() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MailLog::clear_has_copyto() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MailLog::clear_copyto() {
  if (copyto_ != &::google::protobuf::internal::kEmptyString) {
    copyto_->clear();
  }
  clear_has_copyto();
}
inline const ::std::string& MailLog::copyto() const {
  return *copyto_;
}
inline void MailLog::set_copyto(const ::std::string& value) {
  set_has_copyto();
  if (copyto_ == &::google::protobuf::internal::kEmptyString) {
    copyto_ = new ::std::string;
  }
  copyto_->assign(value);
}
inline void MailLog::set_copyto(const char* value) {
  set_has_copyto();
  if (copyto_ == &::google::protobuf::internal::kEmptyString) {
    copyto_ = new ::std::string;
  }
  copyto_->assign(value);
}
inline void MailLog::set_copyto(const char* value, size_t size) {
  set_has_copyto();
  if (copyto_ == &::google::protobuf::internal::kEmptyString) {
    copyto_ = new ::std::string;
  }
  copyto_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MailLog::mutable_copyto() {
  set_has_copyto();
  if (copyto_ == &::google::protobuf::internal::kEmptyString) {
    copyto_ = new ::std::string;
  }
  return copyto_;
}
inline ::std::string* MailLog::release_copyto() {
  clear_has_copyto();
  if (copyto_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = copyto_;
    copyto_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string content = 12;
inline bool MailLog::has_content() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MailLog::set_has_content() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MailLog::clear_has_content() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MailLog::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& MailLog::content() const {
  return *content_;
}
inline void MailLog::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void MailLog::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void MailLog::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MailLog::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* MailLog::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 attachment_size = 13;
inline bool MailLog::has_attachment_size() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MailLog::set_has_attachment_size() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MailLog::clear_has_attachment_size() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MailLog::clear_attachment_size() {
  attachment_size_ = 0;
  clear_has_attachment_size();
}
inline ::google::protobuf::int32 MailLog::attachment_size() const {
  return attachment_size_;
}
inline void MailLog::set_attachment_size(::google::protobuf::int32 value) {
  set_has_attachment_size();
  attachment_size_ = value;
}

// optional string attachment = 14;
inline bool MailLog::has_attachment() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MailLog::set_has_attachment() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MailLog::clear_has_attachment() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MailLog::clear_attachment() {
  if (attachment_ != &::google::protobuf::internal::kEmptyString) {
    attachment_->clear();
  }
  clear_has_attachment();
}
inline const ::std::string& MailLog::attachment() const {
  return *attachment_;
}
inline void MailLog::set_attachment(const ::std::string& value) {
  set_has_attachment();
  if (attachment_ == &::google::protobuf::internal::kEmptyString) {
    attachment_ = new ::std::string;
  }
  attachment_->assign(value);
}
inline void MailLog::set_attachment(const char* value) {
  set_has_attachment();
  if (attachment_ == &::google::protobuf::internal::kEmptyString) {
    attachment_ = new ::std::string;
  }
  attachment_->assign(value);
}
inline void MailLog::set_attachment(const char* value, size_t size) {
  set_has_attachment();
  if (attachment_ == &::google::protobuf::internal::kEmptyString) {
    attachment_ = new ::std::string;
  }
  attachment_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MailLog::mutable_attachment() {
  set_has_attachment();
  if (attachment_ == &::google::protobuf::internal::kEmptyString) {
    attachment_ = new ::std::string;
  }
  return attachment_;
}
inline ::std::string* MailLog::release_attachment() {
  clear_has_attachment();
  if (attachment_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = attachment_;
    attachment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// MailLogList

// repeated .isafetec.MailLog list = 1;
inline int MailLogList::list_size() const {
  return list_.size();
}
inline void MailLogList::clear_list() {
  list_.Clear();
}
inline const ::isafetec::MailLog& MailLogList::list(int index) const {
  return list_.Get(index);
}
inline ::isafetec::MailLog* MailLogList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::isafetec::MailLog* MailLogList::list_ReleaseAt(int index) {
  return list_.ReleaseAt(index);
}
inline void MailLogList::list_RemoveAt(int index) {
  list_.RemoveAt(index);
}
inline ::isafetec::MailLog* MailLogList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::MailLog >&
MailLogList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::MailLog >*
MailLogList::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// PrintLog

// optional int32 id = 1;
inline bool PrintLog::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrintLog::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrintLog::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrintLog::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PrintLog::id() const {
  return id_;
}
inline void PrintLog::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 userid = 2;
inline bool PrintLog::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrintLog::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrintLog::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrintLog::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 PrintLog::userid() const {
  return userid_;
}
inline void PrintLog::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional int32 equipid = 3;
inline bool PrintLog::has_equipid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrintLog::set_has_equipid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrintLog::clear_has_equipid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrintLog::clear_equipid() {
  equipid_ = 0;
  clear_has_equipid();
}
inline ::google::protobuf::int32 PrintLog::equipid() const {
  return equipid_;
}
inline void PrintLog::set_equipid(::google::protobuf::int32 value) {
  set_has_equipid();
  equipid_ = value;
}

// optional string winuser = 4;
inline bool PrintLog::has_winuser() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrintLog::set_has_winuser() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrintLog::clear_has_winuser() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrintLog::clear_winuser() {
  if (winuser_ != &::google::protobuf::internal::kEmptyString) {
    winuser_->clear();
  }
  clear_has_winuser();
}
inline const ::std::string& PrintLog::winuser() const {
  return *winuser_;
}
inline void PrintLog::set_winuser(const ::std::string& value) {
  set_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    winuser_ = new ::std::string;
  }
  winuser_->assign(value);
}
inline void PrintLog::set_winuser(const char* value) {
  set_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    winuser_ = new ::std::string;
  }
  winuser_->assign(value);
}
inline void PrintLog::set_winuser(const char* value, size_t size) {
  set_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    winuser_ = new ::std::string;
  }
  winuser_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrintLog::mutable_winuser() {
  set_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    winuser_ = new ::std::string;
  }
  return winuser_;
}
inline ::std::string* PrintLog::release_winuser() {
  clear_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = winuser_;
    winuser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string ip = 5;
inline bool PrintLog::has_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PrintLog::set_has_ip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PrintLog::clear_has_ip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PrintLog::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& PrintLog::ip() const {
  return *ip_;
}
inline void PrintLog::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void PrintLog::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void PrintLog::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrintLog::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* PrintLog::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string host = 6;
inline bool PrintLog::has_host() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PrintLog::set_has_host() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PrintLog::clear_has_host() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PrintLog::clear_host() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    host_->clear();
  }
  clear_has_host();
}
inline const ::std::string& PrintLog::host() const {
  return *host_;
}
inline void PrintLog::set_host(const ::std::string& value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void PrintLog::set_host(const char* value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void PrintLog::set_host(const char* value, size_t size) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrintLog::mutable_host() {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  return host_;
}
inline ::std::string* PrintLog::release_host() {
  clear_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = host_;
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional double time = 7;
inline bool PrintLog::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PrintLog::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PrintLog::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PrintLog::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline double PrintLog::time() const {
  return time_;
}
inline void PrintLog::set_time(double value) {
  set_has_time();
  time_ = value;
}

// optional string printername = 8;
inline bool PrintLog::has_printername() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PrintLog::set_has_printername() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PrintLog::clear_has_printername() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PrintLog::clear_printername() {
  if (printername_ != &::google::protobuf::internal::kEmptyString) {
    printername_->clear();
  }
  clear_has_printername();
}
inline const ::std::string& PrintLog::printername() const {
  return *printername_;
}
inline void PrintLog::set_printername(const ::std::string& value) {
  set_has_printername();
  if (printername_ == &::google::protobuf::internal::kEmptyString) {
    printername_ = new ::std::string;
  }
  printername_->assign(value);
}
inline void PrintLog::set_printername(const char* value) {
  set_has_printername();
  if (printername_ == &::google::protobuf::internal::kEmptyString) {
    printername_ = new ::std::string;
  }
  printername_->assign(value);
}
inline void PrintLog::set_printername(const char* value, size_t size) {
  set_has_printername();
  if (printername_ == &::google::protobuf::internal::kEmptyString) {
    printername_ = new ::std::string;
  }
  printername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrintLog::mutable_printername() {
  set_has_printername();
  if (printername_ == &::google::protobuf::internal::kEmptyString) {
    printername_ = new ::std::string;
  }
  return printername_;
}
inline ::std::string* PrintLog::release_printername() {
  clear_has_printername();
  if (printername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = printername_;
    printername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string doc_name = 9;
inline bool PrintLog::has_doc_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PrintLog::set_has_doc_name() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PrintLog::clear_has_doc_name() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PrintLog::clear_doc_name() {
  if (doc_name_ != &::google::protobuf::internal::kEmptyString) {
    doc_name_->clear();
  }
  clear_has_doc_name();
}
inline const ::std::string& PrintLog::doc_name() const {
  return *doc_name_;
}
inline void PrintLog::set_doc_name(const ::std::string& value) {
  set_has_doc_name();
  if (doc_name_ == &::google::protobuf::internal::kEmptyString) {
    doc_name_ = new ::std::string;
  }
  doc_name_->assign(value);
}
inline void PrintLog::set_doc_name(const char* value) {
  set_has_doc_name();
  if (doc_name_ == &::google::protobuf::internal::kEmptyString) {
    doc_name_ = new ::std::string;
  }
  doc_name_->assign(value);
}
inline void PrintLog::set_doc_name(const char* value, size_t size) {
  set_has_doc_name();
  if (doc_name_ == &::google::protobuf::internal::kEmptyString) {
    doc_name_ = new ::std::string;
  }
  doc_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrintLog::mutable_doc_name() {
  set_has_doc_name();
  if (doc_name_ == &::google::protobuf::internal::kEmptyString) {
    doc_name_ = new ::std::string;
  }
  return doc_name_;
}
inline ::std::string* PrintLog::release_doc_name() {
  clear_has_doc_name();
  if (doc_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = doc_name_;
    doc_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 total_page = 10;
inline bool PrintLog::has_total_page() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PrintLog::set_has_total_page() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PrintLog::clear_has_total_page() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PrintLog::clear_total_page() {
  total_page_ = 0;
  clear_has_total_page();
}
inline ::google::protobuf::int32 PrintLog::total_page() const {
  return total_page_;
}
inline void PrintLog::set_total_page(::google::protobuf::int32 value) {
  set_has_total_page();
  total_page_ = value;
}

// optional int32 double_print = 11;
inline bool PrintLog::has_double_print() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PrintLog::set_has_double_print() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PrintLog::clear_has_double_print() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PrintLog::clear_double_print() {
  double_print_ = 0;
  clear_has_double_print();
}
inline ::google::protobuf::int32 PrintLog::double_print() const {
  return double_print_;
}
inline void PrintLog::set_double_print(::google::protobuf::int32 value) {
  set_has_double_print();
  double_print_ = value;
}

// optional int32 doc_size = 12;
inline bool PrintLog::has_doc_size() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PrintLog::set_has_doc_size() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PrintLog::clear_has_doc_size() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PrintLog::clear_doc_size() {
  doc_size_ = 0;
  clear_has_doc_size();
}
inline ::google::protobuf::int32 PrintLog::doc_size() const {
  return doc_size_;
}
inline void PrintLog::set_doc_size(::google::protobuf::int32 value) {
  set_has_doc_size();
  doc_size_ = value;
}

// optional string page_type = 13;
inline bool PrintLog::has_page_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PrintLog::set_has_page_type() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PrintLog::clear_has_page_type() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PrintLog::clear_page_type() {
  if (page_type_ != &::google::protobuf::internal::kEmptyString) {
    page_type_->clear();
  }
  clear_has_page_type();
}
inline const ::std::string& PrintLog::page_type() const {
  return *page_type_;
}
inline void PrintLog::set_page_type(const ::std::string& value) {
  set_has_page_type();
  if (page_type_ == &::google::protobuf::internal::kEmptyString) {
    page_type_ = new ::std::string;
  }
  page_type_->assign(value);
}
inline void PrintLog::set_page_type(const char* value) {
  set_has_page_type();
  if (page_type_ == &::google::protobuf::internal::kEmptyString) {
    page_type_ = new ::std::string;
  }
  page_type_->assign(value);
}
inline void PrintLog::set_page_type(const char* value, size_t size) {
  set_has_page_type();
  if (page_type_ == &::google::protobuf::internal::kEmptyString) {
    page_type_ = new ::std::string;
  }
  page_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrintLog::mutable_page_type() {
  set_has_page_type();
  if (page_type_ == &::google::protobuf::internal::kEmptyString) {
    page_type_ = new ::std::string;
  }
  return page_type_;
}
inline ::std::string* PrintLog::release_page_type() {
  clear_has_page_type();
  if (page_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = page_type_;
    page_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 color = 14;
inline bool PrintLog::has_color() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PrintLog::set_has_color() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PrintLog::clear_has_color() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PrintLog::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::google::protobuf::int32 PrintLog::color() const {
  return color_;
}
inline void PrintLog::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
}

// optional int32 copies = 15;
inline bool PrintLog::has_copies() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PrintLog::set_has_copies() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PrintLog::clear_has_copies() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PrintLog::clear_copies() {
  copies_ = 0;
  clear_has_copies();
}
inline ::google::protobuf::int32 PrintLog::copies() const {
  return copies_;
}
inline void PrintLog::set_copies(::google::protobuf::int32 value) {
  set_has_copies();
  copies_ = value;
}

// -------------------------------------------------------------------

// PrintLogList

// repeated .isafetec.PrintLog list = 1;
inline int PrintLogList::list_size() const {
  return list_.size();
}
inline void PrintLogList::clear_list() {
  list_.Clear();
}
inline const ::isafetec::PrintLog& PrintLogList::list(int index) const {
  return list_.Get(index);
}
inline ::isafetec::PrintLog* PrintLogList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::isafetec::PrintLog* PrintLogList::list_ReleaseAt(int index) {
  return list_.ReleaseAt(index);
}
inline void PrintLogList::list_RemoveAt(int index) {
  list_.RemoveAt(index);
}
inline ::isafetec::PrintLog* PrintLogList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::PrintLog >&
PrintLogList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::PrintLog >*
PrintLogList::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// DeviceAttachLog

// optional int32 id = 1;
inline bool DeviceAttachLog::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceAttachLog::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeviceAttachLog::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeviceAttachLog::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 DeviceAttachLog::id() const {
  return id_;
}
inline void DeviceAttachLog::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 userid = 2;
inline bool DeviceAttachLog::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceAttachLog::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeviceAttachLog::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeviceAttachLog::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 DeviceAttachLog::userid() const {
  return userid_;
}
inline void DeviceAttachLog::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional int32 equipid = 3;
inline bool DeviceAttachLog::has_equipid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeviceAttachLog::set_has_equipid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeviceAttachLog::clear_has_equipid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeviceAttachLog::clear_equipid() {
  equipid_ = 0;
  clear_has_equipid();
}
inline ::google::protobuf::int32 DeviceAttachLog::equipid() const {
  return equipid_;
}
inline void DeviceAttachLog::set_equipid(::google::protobuf::int32 value) {
  set_has_equipid();
  equipid_ = value;
}

// optional string winuser = 4;
inline bool DeviceAttachLog::has_winuser() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DeviceAttachLog::set_has_winuser() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DeviceAttachLog::clear_has_winuser() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DeviceAttachLog::clear_winuser() {
  if (winuser_ != &::google::protobuf::internal::kEmptyString) {
    winuser_->clear();
  }
  clear_has_winuser();
}
inline const ::std::string& DeviceAttachLog::winuser() const {
  return *winuser_;
}
inline void DeviceAttachLog::set_winuser(const ::std::string& value) {
  set_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    winuser_ = new ::std::string;
  }
  winuser_->assign(value);
}
inline void DeviceAttachLog::set_winuser(const char* value) {
  set_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    winuser_ = new ::std::string;
  }
  winuser_->assign(value);
}
inline void DeviceAttachLog::set_winuser(const char* value, size_t size) {
  set_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    winuser_ = new ::std::string;
  }
  winuser_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeviceAttachLog::mutable_winuser() {
  set_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    winuser_ = new ::std::string;
  }
  return winuser_;
}
inline ::std::string* DeviceAttachLog::release_winuser() {
  clear_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = winuser_;
    winuser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string ip = 5;
inline bool DeviceAttachLog::has_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DeviceAttachLog::set_has_ip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DeviceAttachLog::clear_has_ip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DeviceAttachLog::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& DeviceAttachLog::ip() const {
  return *ip_;
}
inline void DeviceAttachLog::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void DeviceAttachLog::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void DeviceAttachLog::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeviceAttachLog::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* DeviceAttachLog::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string host = 6;
inline bool DeviceAttachLog::has_host() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DeviceAttachLog::set_has_host() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DeviceAttachLog::clear_has_host() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DeviceAttachLog::clear_host() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    host_->clear();
  }
  clear_has_host();
}
inline const ::std::string& DeviceAttachLog::host() const {
  return *host_;
}
inline void DeviceAttachLog::set_host(const ::std::string& value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void DeviceAttachLog::set_host(const char* value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void DeviceAttachLog::set_host(const char* value, size_t size) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeviceAttachLog::mutable_host() {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  return host_;
}
inline ::std::string* DeviceAttachLog::release_host() {
  clear_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = host_;
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional double time = 7;
inline bool DeviceAttachLog::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DeviceAttachLog::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DeviceAttachLog::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DeviceAttachLog::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline double DeviceAttachLog::time() const {
  return time_;
}
inline void DeviceAttachLog::set_time(double value) {
  set_has_time();
  time_ = value;
}

// optional int32 attach = 8;
inline bool DeviceAttachLog::has_attach() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DeviceAttachLog::set_has_attach() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DeviceAttachLog::clear_has_attach() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DeviceAttachLog::clear_attach() {
  attach_ = 0;
  clear_has_attach();
}
inline ::google::protobuf::int32 DeviceAttachLog::attach() const {
  return attach_;
}
inline void DeviceAttachLog::set_attach(::google::protobuf::int32 value) {
  set_has_attach();
  attach_ = value;
}

// optional string device_path = 9;
inline bool DeviceAttachLog::has_device_path() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DeviceAttachLog::set_has_device_path() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DeviceAttachLog::clear_has_device_path() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DeviceAttachLog::clear_device_path() {
  if (device_path_ != &::google::protobuf::internal::kEmptyString) {
    device_path_->clear();
  }
  clear_has_device_path();
}
inline const ::std::string& DeviceAttachLog::device_path() const {
  return *device_path_;
}
inline void DeviceAttachLog::set_device_path(const ::std::string& value) {
  set_has_device_path();
  if (device_path_ == &::google::protobuf::internal::kEmptyString) {
    device_path_ = new ::std::string;
  }
  device_path_->assign(value);
}
inline void DeviceAttachLog::set_device_path(const char* value) {
  set_has_device_path();
  if (device_path_ == &::google::protobuf::internal::kEmptyString) {
    device_path_ = new ::std::string;
  }
  device_path_->assign(value);
}
inline void DeviceAttachLog::set_device_path(const char* value, size_t size) {
  set_has_device_path();
  if (device_path_ == &::google::protobuf::internal::kEmptyString) {
    device_path_ = new ::std::string;
  }
  device_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeviceAttachLog::mutable_device_path() {
  set_has_device_path();
  if (device_path_ == &::google::protobuf::internal::kEmptyString) {
    device_path_ = new ::std::string;
  }
  return device_path_;
}
inline ::std::string* DeviceAttachLog::release_device_path() {
  clear_has_device_path();
  if (device_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_path_;
    device_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string device_name = 10;
inline bool DeviceAttachLog::has_device_name() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DeviceAttachLog::set_has_device_name() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DeviceAttachLog::clear_has_device_name() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DeviceAttachLog::clear_device_name() {
  if (device_name_ != &::google::protobuf::internal::kEmptyString) {
    device_name_->clear();
  }
  clear_has_device_name();
}
inline const ::std::string& DeviceAttachLog::device_name() const {
  return *device_name_;
}
inline void DeviceAttachLog::set_device_name(const ::std::string& value) {
  set_has_device_name();
  if (device_name_ == &::google::protobuf::internal::kEmptyString) {
    device_name_ = new ::std::string;
  }
  device_name_->assign(value);
}
inline void DeviceAttachLog::set_device_name(const char* value) {
  set_has_device_name();
  if (device_name_ == &::google::protobuf::internal::kEmptyString) {
    device_name_ = new ::std::string;
  }
  device_name_->assign(value);
}
inline void DeviceAttachLog::set_device_name(const char* value, size_t size) {
  set_has_device_name();
  if (device_name_ == &::google::protobuf::internal::kEmptyString) {
    device_name_ = new ::std::string;
  }
  device_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeviceAttachLog::mutable_device_name() {
  set_has_device_name();
  if (device_name_ == &::google::protobuf::internal::kEmptyString) {
    device_name_ = new ::std::string;
  }
  return device_name_;
}
inline ::std::string* DeviceAttachLog::release_device_name() {
  clear_has_device_name();
  if (device_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_name_;
    device_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string device_class = 11;
inline bool DeviceAttachLog::has_device_class() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DeviceAttachLog::set_has_device_class() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DeviceAttachLog::clear_has_device_class() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DeviceAttachLog::clear_device_class() {
  if (device_class_ != &::google::protobuf::internal::kEmptyString) {
    device_class_->clear();
  }
  clear_has_device_class();
}
inline const ::std::string& DeviceAttachLog::device_class() const {
  return *device_class_;
}
inline void DeviceAttachLog::set_device_class(const ::std::string& value) {
  set_has_device_class();
  if (device_class_ == &::google::protobuf::internal::kEmptyString) {
    device_class_ = new ::std::string;
  }
  device_class_->assign(value);
}
inline void DeviceAttachLog::set_device_class(const char* value) {
  set_has_device_class();
  if (device_class_ == &::google::protobuf::internal::kEmptyString) {
    device_class_ = new ::std::string;
  }
  device_class_->assign(value);
}
inline void DeviceAttachLog::set_device_class(const char* value, size_t size) {
  set_has_device_class();
  if (device_class_ == &::google::protobuf::internal::kEmptyString) {
    device_class_ = new ::std::string;
  }
  device_class_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeviceAttachLog::mutable_device_class() {
  set_has_device_class();
  if (device_class_ == &::google::protobuf::internal::kEmptyString) {
    device_class_ = new ::std::string;
  }
  return device_class_;
}
inline ::std::string* DeviceAttachLog::release_device_class() {
  clear_has_device_class();
  if (device_class_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_class_;
    device_class_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string device_guid = 12;
inline bool DeviceAttachLog::has_device_guid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DeviceAttachLog::set_has_device_guid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DeviceAttachLog::clear_has_device_guid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DeviceAttachLog::clear_device_guid() {
  if (device_guid_ != &::google::protobuf::internal::kEmptyString) {
    device_guid_->clear();
  }
  clear_has_device_guid();
}
inline const ::std::string& DeviceAttachLog::device_guid() const {
  return *device_guid_;
}
inline void DeviceAttachLog::set_device_guid(const ::std::string& value) {
  set_has_device_guid();
  if (device_guid_ == &::google::protobuf::internal::kEmptyString) {
    device_guid_ = new ::std::string;
  }
  device_guid_->assign(value);
}
inline void DeviceAttachLog::set_device_guid(const char* value) {
  set_has_device_guid();
  if (device_guid_ == &::google::protobuf::internal::kEmptyString) {
    device_guid_ = new ::std::string;
  }
  device_guid_->assign(value);
}
inline void DeviceAttachLog::set_device_guid(const char* value, size_t size) {
  set_has_device_guid();
  if (device_guid_ == &::google::protobuf::internal::kEmptyString) {
    device_guid_ = new ::std::string;
  }
  device_guid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeviceAttachLog::mutable_device_guid() {
  set_has_device_guid();
  if (device_guid_ == &::google::protobuf::internal::kEmptyString) {
    device_guid_ = new ::std::string;
  }
  return device_guid_;
}
inline ::std::string* DeviceAttachLog::release_device_guid() {
  clear_has_device_guid();
  if (device_guid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = device_guid_;
    device_guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool need_alarm = 14;
inline bool DeviceAttachLog::has_need_alarm() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DeviceAttachLog::set_has_need_alarm() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DeviceAttachLog::clear_has_need_alarm() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DeviceAttachLog::clear_need_alarm() {
  need_alarm_ = false;
  clear_has_need_alarm();
}
inline bool DeviceAttachLog::need_alarm() const {
  return need_alarm_;
}
inline void DeviceAttachLog::set_need_alarm(bool value) {
  set_has_need_alarm();
  need_alarm_ = value;
}

// -------------------------------------------------------------------

// DeviceAttachLogList

// repeated .isafetec.DeviceAttachLog list = 1;
inline int DeviceAttachLogList::list_size() const {
  return list_.size();
}
inline void DeviceAttachLogList::clear_list() {
  list_.Clear();
}
inline const ::isafetec::DeviceAttachLog& DeviceAttachLogList::list(int index) const {
  return list_.Get(index);
}
inline ::isafetec::DeviceAttachLog* DeviceAttachLogList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::isafetec::DeviceAttachLog* DeviceAttachLogList::list_ReleaseAt(int index) {
  return list_.ReleaseAt(index);
}
inline void DeviceAttachLogList::list_RemoveAt(int index) {
  list_.RemoveAt(index);
}
inline ::isafetec::DeviceAttachLog* DeviceAttachLogList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::DeviceAttachLog >&
DeviceAttachLogList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::DeviceAttachLog >*
DeviceAttachLogList::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// EquipLogonLog

// optional int32 id = 1;
inline bool EquipLogonLog::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipLogonLog::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipLogonLog::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipLogonLog::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 EquipLogonLog::id() const {
  return id_;
}
inline void EquipLogonLog::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 userid = 2;
inline bool EquipLogonLog::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipLogonLog::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipLogonLog::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipLogonLog::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 EquipLogonLog::userid() const {
  return userid_;
}
inline void EquipLogonLog::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional int32 equipid = 3;
inline bool EquipLogonLog::has_equipid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EquipLogonLog::set_has_equipid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EquipLogonLog::clear_has_equipid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EquipLogonLog::clear_equipid() {
  equipid_ = 0;
  clear_has_equipid();
}
inline ::google::protobuf::int32 EquipLogonLog::equipid() const {
  return equipid_;
}
inline void EquipLogonLog::set_equipid(::google::protobuf::int32 value) {
  set_has_equipid();
  equipid_ = value;
}

// optional string winuser = 4;
inline bool EquipLogonLog::has_winuser() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EquipLogonLog::set_has_winuser() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EquipLogonLog::clear_has_winuser() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EquipLogonLog::clear_winuser() {
  if (winuser_ != &::google::protobuf::internal::kEmptyString) {
    winuser_->clear();
  }
  clear_has_winuser();
}
inline const ::std::string& EquipLogonLog::winuser() const {
  return *winuser_;
}
inline void EquipLogonLog::set_winuser(const ::std::string& value) {
  set_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    winuser_ = new ::std::string;
  }
  winuser_->assign(value);
}
inline void EquipLogonLog::set_winuser(const char* value) {
  set_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    winuser_ = new ::std::string;
  }
  winuser_->assign(value);
}
inline void EquipLogonLog::set_winuser(const char* value, size_t size) {
  set_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    winuser_ = new ::std::string;
  }
  winuser_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EquipLogonLog::mutable_winuser() {
  set_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    winuser_ = new ::std::string;
  }
  return winuser_;
}
inline ::std::string* EquipLogonLog::release_winuser() {
  clear_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = winuser_;
    winuser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string ip = 5;
inline bool EquipLogonLog::has_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EquipLogonLog::set_has_ip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EquipLogonLog::clear_has_ip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EquipLogonLog::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& EquipLogonLog::ip() const {
  return *ip_;
}
inline void EquipLogonLog::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void EquipLogonLog::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void EquipLogonLog::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EquipLogonLog::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* EquipLogonLog::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string host = 6;
inline bool EquipLogonLog::has_host() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EquipLogonLog::set_has_host() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EquipLogonLog::clear_has_host() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EquipLogonLog::clear_host() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    host_->clear();
  }
  clear_has_host();
}
inline const ::std::string& EquipLogonLog::host() const {
  return *host_;
}
inline void EquipLogonLog::set_host(const ::std::string& value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void EquipLogonLog::set_host(const char* value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void EquipLogonLog::set_host(const char* value, size_t size) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EquipLogonLog::mutable_host() {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  return host_;
}
inline ::std::string* EquipLogonLog::release_host() {
  clear_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = host_;
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional double pc_logon_time = 7;
inline bool EquipLogonLog::has_pc_logon_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EquipLogonLog::set_has_pc_logon_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EquipLogonLog::clear_has_pc_logon_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EquipLogonLog::clear_pc_logon_time() {
  pc_logon_time_ = 0;
  clear_has_pc_logon_time();
}
inline double EquipLogonLog::pc_logon_time() const {
  return pc_logon_time_;
}
inline void EquipLogonLog::set_pc_logon_time(double value) {
  set_has_pc_logon_time();
  pc_logon_time_ = value;
}

// optional double user_logon_time = 8;
inline bool EquipLogonLog::has_user_logon_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EquipLogonLog::set_has_user_logon_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EquipLogonLog::clear_has_user_logon_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EquipLogonLog::clear_user_logon_time() {
  user_logon_time_ = 0;
  clear_has_user_logon_time();
}
inline double EquipLogonLog::user_logon_time() const {
  return user_logon_time_;
}
inline void EquipLogonLog::set_user_logon_time(double value) {
  set_has_user_logon_time();
  user_logon_time_ = value;
}

// optional double pc_last_shudown_time = 9;
inline bool EquipLogonLog::has_pc_last_shudown_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void EquipLogonLog::set_has_pc_last_shudown_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void EquipLogonLog::clear_has_pc_last_shudown_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void EquipLogonLog::clear_pc_last_shudown_time() {
  pc_last_shudown_time_ = 0;
  clear_has_pc_last_shudown_time();
}
inline double EquipLogonLog::pc_last_shudown_time() const {
  return pc_last_shudown_time_;
}
inline void EquipLogonLog::set_pc_last_shudown_time(double value) {
  set_has_pc_last_shudown_time();
  pc_last_shudown_time_ = value;
}

// optional double win_logon_time = 10;
inline bool EquipLogonLog::has_win_logon_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void EquipLogonLog::set_has_win_logon_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void EquipLogonLog::clear_has_win_logon_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void EquipLogonLog::clear_win_logon_time() {
  win_logon_time_ = 0;
  clear_has_win_logon_time();
}
inline double EquipLogonLog::win_logon_time() const {
  return win_logon_time_;
}
inline void EquipLogonLog::set_win_logon_time(double value) {
  set_has_win_logon_time();
  win_logon_time_ = value;
}

// optional double win_logoff_time = 11;
inline bool EquipLogonLog::has_win_logoff_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void EquipLogonLog::set_has_win_logoff_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void EquipLogonLog::clear_has_win_logoff_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void EquipLogonLog::clear_win_logoff_time() {
  win_logoff_time_ = 0;
  clear_has_win_logoff_time();
}
inline double EquipLogonLog::win_logoff_time() const {
  return win_logoff_time_;
}
inline void EquipLogonLog::set_win_logoff_time(double value) {
  set_has_win_logoff_time();
  win_logoff_time_ = value;
}

// optional .isafetec.PC_LOGON_EVENT event = 12;
inline bool EquipLogonLog::has_event() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void EquipLogonLog::set_has_event() {
  _has_bits_[0] |= 0x00000800u;
}
inline void EquipLogonLog::clear_has_event() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void EquipLogonLog::clear_event() {
  event_ = 0;
  clear_has_event();
}
inline isafetec::PC_LOGON_EVENT EquipLogonLog::event() const {
  return static_cast< isafetec::PC_LOGON_EVENT >(event_);
}
inline void EquipLogonLog::set_event(isafetec::PC_LOGON_EVENT value) {
  GOOGLE_DCHECK(isafetec::PC_LOGON_EVENT_IsValid(value));
  set_has_event();
  event_ = value;
}

// -------------------------------------------------------------------

// EquipLogonLogList

// repeated .isafetec.EquipLogonLog list = 1;
inline int EquipLogonLogList::list_size() const {
  return list_.size();
}
inline void EquipLogonLogList::clear_list() {
  list_.Clear();
}
inline const ::isafetec::EquipLogonLog& EquipLogonLogList::list(int index) const {
  return list_.Get(index);
}
inline ::isafetec::EquipLogonLog* EquipLogonLogList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::isafetec::EquipLogonLog* EquipLogonLogList::list_ReleaseAt(int index) {
  return list_.ReleaseAt(index);
}
inline void EquipLogonLogList::list_RemoveAt(int index) {
  list_.RemoveAt(index);
}
inline ::isafetec::EquipLogonLog* EquipLogonLogList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::EquipLogonLog >&
EquipLogonLogList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::EquipLogonLog >*
EquipLogonLogList::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// AlarmMsg

// optional int32 id = 1;
inline bool AlarmMsg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AlarmMsg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AlarmMsg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AlarmMsg::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 AlarmMsg::id() const {
  return id_;
}
inline void AlarmMsg::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 userid = 2;
inline bool AlarmMsg::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AlarmMsg::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AlarmMsg::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AlarmMsg::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 AlarmMsg::userid() const {
  return userid_;
}
inline void AlarmMsg::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional int32 equipid = 3;
inline bool AlarmMsg::has_equipid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AlarmMsg::set_has_equipid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AlarmMsg::clear_has_equipid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AlarmMsg::clear_equipid() {
  equipid_ = 0;
  clear_has_equipid();
}
inline ::google::protobuf::int32 AlarmMsg::equipid() const {
  return equipid_;
}
inline void AlarmMsg::set_equipid(::google::protobuf::int32 value) {
  set_has_equipid();
  equipid_ = value;
}

// optional string winuser = 4;
inline bool AlarmMsg::has_winuser() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AlarmMsg::set_has_winuser() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AlarmMsg::clear_has_winuser() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AlarmMsg::clear_winuser() {
  if (winuser_ != &::google::protobuf::internal::kEmptyString) {
    winuser_->clear();
  }
  clear_has_winuser();
}
inline const ::std::string& AlarmMsg::winuser() const {
  return *winuser_;
}
inline void AlarmMsg::set_winuser(const ::std::string& value) {
  set_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    winuser_ = new ::std::string;
  }
  winuser_->assign(value);
}
inline void AlarmMsg::set_winuser(const char* value) {
  set_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    winuser_ = new ::std::string;
  }
  winuser_->assign(value);
}
inline void AlarmMsg::set_winuser(const char* value, size_t size) {
  set_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    winuser_ = new ::std::string;
  }
  winuser_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AlarmMsg::mutable_winuser() {
  set_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    winuser_ = new ::std::string;
  }
  return winuser_;
}
inline ::std::string* AlarmMsg::release_winuser() {
  clear_has_winuser();
  if (winuser_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = winuser_;
    winuser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string ip = 5;
inline bool AlarmMsg::has_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AlarmMsg::set_has_ip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AlarmMsg::clear_has_ip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AlarmMsg::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& AlarmMsg::ip() const {
  return *ip_;
}
inline void AlarmMsg::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void AlarmMsg::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void AlarmMsg::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AlarmMsg::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* AlarmMsg::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string host = 6;
inline bool AlarmMsg::has_host() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AlarmMsg::set_has_host() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AlarmMsg::clear_has_host() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AlarmMsg::clear_host() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    host_->clear();
  }
  clear_has_host();
}
inline const ::std::string& AlarmMsg::host() const {
  return *host_;
}
inline void AlarmMsg::set_host(const ::std::string& value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void AlarmMsg::set_host(const char* value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void AlarmMsg::set_host(const char* value, size_t size) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AlarmMsg::mutable_host() {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  return host_;
}
inline ::std::string* AlarmMsg::release_host() {
  clear_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = host_;
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 type = 7;
inline bool AlarmMsg::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AlarmMsg::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AlarmMsg::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AlarmMsg::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 AlarmMsg::type() const {
  return type_;
}
inline void AlarmMsg::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string CreatedOn = 8;
inline bool AlarmMsg::has_createdon() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AlarmMsg::set_has_createdon() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AlarmMsg::clear_has_createdon() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AlarmMsg::clear_createdon() {
  if (createdon_ != &::google::protobuf::internal::kEmptyString) {
    createdon_->clear();
  }
  clear_has_createdon();
}
inline const ::std::string& AlarmMsg::createdon() const {
  return *createdon_;
}
inline void AlarmMsg::set_createdon(const ::std::string& value) {
  set_has_createdon();
  if (createdon_ == &::google::protobuf::internal::kEmptyString) {
    createdon_ = new ::std::string;
  }
  createdon_->assign(value);
}
inline void AlarmMsg::set_createdon(const char* value) {
  set_has_createdon();
  if (createdon_ == &::google::protobuf::internal::kEmptyString) {
    createdon_ = new ::std::string;
  }
  createdon_->assign(value);
}
inline void AlarmMsg::set_createdon(const char* value, size_t size) {
  set_has_createdon();
  if (createdon_ == &::google::protobuf::internal::kEmptyString) {
    createdon_ = new ::std::string;
  }
  createdon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AlarmMsg::mutable_createdon() {
  set_has_createdon();
  if (createdon_ == &::google::protobuf::internal::kEmptyString) {
    createdon_ = new ::std::string;
  }
  return createdon_;
}
inline ::std::string* AlarmMsg::release_createdon() {
  clear_has_createdon();
  if (createdon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = createdon_;
    createdon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string Subject = 9;
inline bool AlarmMsg::has_subject() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AlarmMsg::set_has_subject() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AlarmMsg::clear_has_subject() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AlarmMsg::clear_subject() {
  if (subject_ != &::google::protobuf::internal::kEmptyString) {
    subject_->clear();
  }
  clear_has_subject();
}
inline const ::std::string& AlarmMsg::subject() const {
  return *subject_;
}
inline void AlarmMsg::set_subject(const ::std::string& value) {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::kEmptyString) {
    subject_ = new ::std::string;
  }
  subject_->assign(value);
}
inline void AlarmMsg::set_subject(const char* value) {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::kEmptyString) {
    subject_ = new ::std::string;
  }
  subject_->assign(value);
}
inline void AlarmMsg::set_subject(const char* value, size_t size) {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::kEmptyString) {
    subject_ = new ::std::string;
  }
  subject_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AlarmMsg::mutable_subject() {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::kEmptyString) {
    subject_ = new ::std::string;
  }
  return subject_;
}
inline ::std::string* AlarmMsg::release_subject() {
  clear_has_subject();
  if (subject_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = subject_;
    subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string Content = 10;
inline bool AlarmMsg::has_content() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AlarmMsg::set_has_content() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AlarmMsg::clear_has_content() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AlarmMsg::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& AlarmMsg::content() const {
  return *content_;
}
inline void AlarmMsg::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void AlarmMsg::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void AlarmMsg::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AlarmMsg::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* AlarmMsg::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// AlarmMsgList

// repeated .isafetec.AlarmMsg list = 1;
inline int AlarmMsgList::list_size() const {
  return list_.size();
}
inline void AlarmMsgList::clear_list() {
  list_.Clear();
}
inline const ::isafetec::AlarmMsg& AlarmMsgList::list(int index) const {
  return list_.Get(index);
}
inline ::isafetec::AlarmMsg* AlarmMsgList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::isafetec::AlarmMsg* AlarmMsgList::list_ReleaseAt(int index) {
  return list_.ReleaseAt(index);
}
inline void AlarmMsgList::list_RemoveAt(int index) {
  list_.RemoveAt(index);
}
inline ::isafetec::AlarmMsg* AlarmMsgList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::AlarmMsg >&
AlarmMsgList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::AlarmMsg >*
AlarmMsgList::mutable_list() {
  return &list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace isafetec

// @@protoc_insertion_point(global_scope)
