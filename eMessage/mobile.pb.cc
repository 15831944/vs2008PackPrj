// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mobile.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace isafetec {

namespace {

const ::google::protobuf::Descriptor* PrtStationQRCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtStationQRCode_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScanQRCodeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScanQRCodeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MobileUserCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MobileUserCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* QRCodeBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QRCodeBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtStationQRCodeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtStationQRCodeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MobileOrderInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MobileOrderInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* QR_Code_Info_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Pay_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Pay_State_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_mobile_2eproto() {
  protobuf_AddDesc_mobile_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mobile.proto");
  GOOGLE_CHECK(file != NULL);
  PrtStationQRCode_descriptor_ = file->message_type(0);
  static const int PrtStationQRCode_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationQRCode, prtstation_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationQRCode, prtstation_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationQRCode, printer_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationQRCode, equip_brand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationQRCode, equip_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationQRCode, equip_paper_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationQRCode, equip_color_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationQRCode, support_copy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationQRCode, support_fax_),
  };
  PrtStationQRCode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtStationQRCode_descriptor_,
      PrtStationQRCode::default_instance_,
      PrtStationQRCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationQRCode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationQRCode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtStationQRCode));
  ScanQRCodeInfo_descriptor_ = file->message_type(1);
  static const int ScanQRCodeInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanQRCodeInfo, qr_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanQRCodeInfo, scan_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanQRCodeInfo, scan_dev_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanQRCodeInfo, scan_app_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanQRCodeInfo, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanQRCodeInfo, userpwd_),
  };
  ScanQRCodeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScanQRCodeInfo_descriptor_,
      ScanQRCodeInfo::default_instance_,
      ScanQRCodeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanQRCodeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanQRCodeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScanQRCodeInfo));
  MobileUserCommand_descriptor_ = file->message_type(2);
  static const int MobileUserCommand_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileUserCommand, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileUserCommand, content_),
  };
  MobileUserCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MobileUserCommand_descriptor_,
      MobileUserCommand::default_instance_,
      MobileUserCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileUserCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileUserCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MobileUserCommand));
  QRCodeBaseInfo_descriptor_ = file->message_type(3);
  static const int QRCodeBaseInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QRCodeBaseInfo, base_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QRCodeBaseInfo, dynamic_timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QRCodeBaseInfo, factor_),
  };
  QRCodeBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QRCodeBaseInfo_descriptor_,
      QRCodeBaseInfo::default_instance_,
      QRCodeBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QRCodeBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QRCodeBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QRCodeBaseInfo));
  PrtStationQRCodeInfo_descriptor_ = file->message_type(4);
  static const int PrtStationQRCodeInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationQRCodeInfo, prtid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationQRCodeInfo, enable_login_qrcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationQRCodeInfo, enable_payment_qrcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationQRCodeInfo, login_qrcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationQRCodeInfo, payment_qrcode_),
  };
  PrtStationQRCodeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtStationQRCodeInfo_descriptor_,
      PrtStationQRCodeInfo::default_instance_,
      PrtStationQRCodeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationQRCodeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationQRCodeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtStationQRCodeInfo));
  MobileOrderInfo_descriptor_ = file->message_type(5);
  static const int MobileOrderInfo_offsets_[32] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileOrderInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileOrderInfo, orderno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileOrderInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileOrderInfo, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileOrderInfo, accountname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileOrderInfo, realname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileOrderInfo, prtid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileOrderInfo, spendmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileOrderInfo, paytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileOrderInfo, payaccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileOrderInfo, paycompany_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileOrderInfo, paymoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileOrderInfo, payredpacket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileOrderInfo, paypreferential_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileOrderInfo, jobtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileOrderInfo, jobid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileOrderInfo, totalpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileOrderInfo, realpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileOrderInfo, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileOrderInfo, copies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileOrderInfo, pricetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileOrderInfo, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileOrderInfo, pagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileOrderInfo, papersize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileOrderInfo, projectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileOrderInfo, createon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileOrderInfo, paytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileOrderInfo, paystate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileOrderInfo, jobopstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileOrderInfo, jobcompletetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileOrderInfo, jobcompletenotifytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileOrderInfo, comment_),
  };
  MobileOrderInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MobileOrderInfo_descriptor_,
      MobileOrderInfo::default_instance_,
      MobileOrderInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileOrderInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MobileOrderInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MobileOrderInfo));
  QR_Code_Info_Type_descriptor_ = file->enum_type(0);
  Pay_Type_descriptor_ = file->enum_type(1);
  Pay_State_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mobile_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtStationQRCode_descriptor_, &PrtStationQRCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScanQRCodeInfo_descriptor_, &ScanQRCodeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MobileUserCommand_descriptor_, &MobileUserCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QRCodeBaseInfo_descriptor_, &QRCodeBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtStationQRCodeInfo_descriptor_, &PrtStationQRCodeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MobileOrderInfo_descriptor_, &MobileOrderInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mobile_2eproto() {
  delete PrtStationQRCode::default_instance_;
  delete PrtStationQRCode_reflection_;
  delete ScanQRCodeInfo::default_instance_;
  delete ScanQRCodeInfo_reflection_;
  delete MobileUserCommand::default_instance_;
  delete MobileUserCommand_reflection_;
  delete QRCodeBaseInfo::default_instance_;
  delete QRCodeBaseInfo_reflection_;
  delete PrtStationQRCodeInfo::default_instance_;
  delete PrtStationQRCodeInfo_reflection_;
  delete MobileOrderInfo::default_instance_;
  delete MobileOrderInfo_reflection_;
}

void protobuf_AddDesc_mobile_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::isafetec::protobuf_AddDesc_cmmmessage_2eproto();
  ::isafetec::protobuf_AddDesc_printermessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014mobile.proto\022\010isafetec\032\020cmmmessage.pro"
    "to\032\024printermessage.proto\"\336\001\n\020PrtStationQ"
    "RCode\022\025\n\rprtStation_id\030\001 \001(\005\022\025\n\rprtStati"
    "on_ip\030\002 \001(\t\022\024\n\014printer_name\030\003 \001(\t\022\023\n\013equ"
    "ip_Brand\030\004 \001(\005\022\022\n\nequip_Type\030\005 \001(\t\022\030\n\020eq"
    "uip_Paper_Type\030\006 \001(\005\022\030\n\020equip_Color_Type"
    "\030\007 \001(\t\022\024\n\014Support_Copy\030\010 \001(\005\022\023\n\013Support_"
    "Fax\030\t \001(\005\"\241\001\n\016ScanQRCodeInfo\022+\n\007QR_Code\030"
    "\001 \002(\0132\032.isafetec.PrtStationQRCode\022\021\n\tsca"
    "n_Time\030\002 \001(\t\022\025\n\rscan_Dev_Type\030\003 \001(\t\022\025\n\rs"
    "can_App_Type\030\004 \001(\t\022\020\n\010userName\030\005 \001(\t\022\017\n\007"
    "userPwd\030\006 \001(\t\"1\n\021MobileUserCommand\022\013\n\003cm"
    "d\030\001 \001(\005\022\017\n\007content\030\002 \001(\t\"K\n\016QRCodeBaseIn"
    "fo\022\020\n\010Base_Url\030\001 \001(\t\022\027\n\017Dynamic_Timeout\030"
    "\002 \001(\005\022\016\n\006Factor\030\003 \001(\t\"\303\001\n\024PrtStationQRCo"
    "deInfo\022\r\n\005PrtId\030\001 \002(\005\022\033\n\023Enable_Login_QR"
    "Code\030\002 \001(\005\022\035\n\025Enable_Payment_QRCode\030\003 \001("
    "\005\022.\n\014Login_QRCode\030\004 \001(\0132\030.isafetec.QRCod"
    "eBaseInfo\0220\n\016Payment_QRCode\030\005 \001(\0132\030.isaf"
    "etec.QRCodeBaseInfo\"\324\005\n\017MobileOrderInfo\022"
    "\n\n\002id\030\001 \001(\005\022\017\n\007OrderNo\030\002 \001(\t\022\016\n\006UserId\030\003"
    " \002(\005\022\021\n\tAccountId\030\004 \002(\005\022\023\n\013AccountName\030\005"
    " \001(\t\022\020\n\010RealName\030\006 \001(\t\022\r\n\005PrtId\030\007 \002(\005\022\022\n"
    "\nSpendMoney\030\010 \002(\005\022#\n\007PayType\030\t \001(\0162\022.isa"
    "fetec.Pay_Type\022\022\n\nPayAccount\030\n \001(\t\022\022\n\nPa"
    "yCompany\030\013 \001(\t\022\020\n\010PayMoney\030\014 \001(\005\022\024\n\014PayR"
    "edPacket\030\r \001(\005\022\027\n\017PayPreferential\030\016 \001(\005\022"
    "#\n\007JobType\030\017 \001(\0162\022.isafetec.JOB_TYPE\022\r\n\005"
    "JobId\030\020 \001(\005\022\021\n\tTotalPage\030\021 \001(\005\022\020\n\010RealPa"
    "ge\030\022 \001(\005\022\r\n\005Color\030\023 \001(\005\022\016\n\006Copies\030\024 \001(\005\022"
    "+\n\tPriceType\030\025 \001(\0162\030.isafetec.JOB_PRICE_"
    "TYPE\022\r\n\005Price\030\026 \001(\005\022\020\n\010PageType\030\027 \001(\t\022\021\n"
    "\tPaperSize\030\030 \001(\005\022\021\n\tProjectId\030\031 \001(\005\022\020\n\010C"
    "reateOn\030\032 \001(\001\022\017\n\007PayTime\030\033 \001(\001\022%\n\010PaySta"
    "te\030\034 \001(\0162\023.isafetec.Pay_State\022*\n\nJobOpSt"
    "ate\030\035 \001(\0162\026.isafetec.Job_Op_State\022\027\n\017Job"
    "CompleteTime\030\036 \001(\001\022\035\n\025JobCompleteNotifyT"
    "ime\030\037 \001(\001\022\017\n\007comment\030  \001(\t*E\n\021QR_Code_In"
    "fo_Type\022\026\n\022QR_Info_Type_Login\020\000\022\030\n\024QR_In"
    "fo_Type_Payment\020\001*r\n\010Pay_Type\022\023\n\017Pay_Typ"
    "e_OnCard\020\000\022\023\n\017Pay_Type_WeChat\020\001\022\022\n\016Pay_T"
    "ype_ZhiFB\020\002\022\024\n\020Pay_Type_NetBank\020\003\022\022\n\016Pay"
    "_Type_Other\020\004*\255\001\n\tPay_State\022\024\n\020Pay_State"
    "_UnKnow\020\000\022\022\n\016Pay_State_Succ\020\001\022\022\n\016Pay_Sta"
    "te_Wait\020\002\022\024\n\020Pay_State_Cancel\020\003\022\025\n\021Pay_S"
    "tate_Timeout\020\004\022\031\n\025Pay_State_Exceptional\020"
    "\005\022\032\n\026Pay_State_OrderGenFail\020\006", 1869);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mobile.proto", &protobuf_RegisterTypes);
  PrtStationQRCode::default_instance_ = new PrtStationQRCode();
  ScanQRCodeInfo::default_instance_ = new ScanQRCodeInfo();
  MobileUserCommand::default_instance_ = new MobileUserCommand();
  QRCodeBaseInfo::default_instance_ = new QRCodeBaseInfo();
  PrtStationQRCodeInfo::default_instance_ = new PrtStationQRCodeInfo();
  MobileOrderInfo::default_instance_ = new MobileOrderInfo();
  PrtStationQRCode::default_instance_->InitAsDefaultInstance();
  ScanQRCodeInfo::default_instance_->InitAsDefaultInstance();
  MobileUserCommand::default_instance_->InitAsDefaultInstance();
  QRCodeBaseInfo::default_instance_->InitAsDefaultInstance();
  PrtStationQRCodeInfo::default_instance_->InitAsDefaultInstance();
  MobileOrderInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mobile_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mobile_2eproto {
  StaticDescriptorInitializer_mobile_2eproto() {
    protobuf_AddDesc_mobile_2eproto();
  }
} static_descriptor_initializer_mobile_2eproto_;

const ::google::protobuf::EnumDescriptor* QR_Code_Info_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QR_Code_Info_Type_descriptor_;
}
bool QR_Code_Info_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Pay_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pay_Type_descriptor_;
}
bool Pay_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Pay_State_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pay_State_descriptor_;
}
bool Pay_State_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PrtStationQRCode::kPrtStationIdFieldNumber;
const int PrtStationQRCode::kPrtStationIpFieldNumber;
const int PrtStationQRCode::kPrinterNameFieldNumber;
const int PrtStationQRCode::kEquipBrandFieldNumber;
const int PrtStationQRCode::kEquipTypeFieldNumber;
const int PrtStationQRCode::kEquipPaperTypeFieldNumber;
const int PrtStationQRCode::kEquipColorTypeFieldNumber;
const int PrtStationQRCode::kSupportCopyFieldNumber;
const int PrtStationQRCode::kSupportFaxFieldNumber;
#endif  // !_MSC_VER

PrtStationQRCode::PrtStationQRCode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrtStationQRCode::InitAsDefaultInstance() {
}

PrtStationQRCode::PrtStationQRCode(const PrtStationQRCode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrtStationQRCode::SharedCtor() {
  _cached_size_ = 0;
  prtstation_id_ = 0;
  prtstation_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  printer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  equip_brand_ = 0;
  equip_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  equip_paper_type_ = 0;
  equip_color_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  support_copy_ = 0;
  support_fax_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtStationQRCode::~PrtStationQRCode() {
  SharedDtor();
}

void PrtStationQRCode::SharedDtor() {
  if (prtstation_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete prtstation_ip_;
  }
  if (printer_name_ != &::google::protobuf::internal::kEmptyString) {
    delete printer_name_;
  }
  if (equip_type_ != &::google::protobuf::internal::kEmptyString) {
    delete equip_type_;
  }
  if (equip_color_type_ != &::google::protobuf::internal::kEmptyString) {
    delete equip_color_type_;
  }
  if (this != default_instance_) {
  }
}

void PrtStationQRCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtStationQRCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtStationQRCode_descriptor_;
}

const PrtStationQRCode& PrtStationQRCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mobile_2eproto();  return *default_instance_;
}

PrtStationQRCode* PrtStationQRCode::default_instance_ = NULL;

PrtStationQRCode* PrtStationQRCode::New() const {
  return new PrtStationQRCode;
}

void PrtStationQRCode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prtstation_id_ = 0;
    if (has_prtstation_ip()) {
      if (prtstation_ip_ != &::google::protobuf::internal::kEmptyString) {
        prtstation_ip_->clear();
      }
    }
    if (has_printer_name()) {
      if (printer_name_ != &::google::protobuf::internal::kEmptyString) {
        printer_name_->clear();
      }
    }
    equip_brand_ = 0;
    if (has_equip_type()) {
      if (equip_type_ != &::google::protobuf::internal::kEmptyString) {
        equip_type_->clear();
      }
    }
    equip_paper_type_ = 0;
    if (has_equip_color_type()) {
      if (equip_color_type_ != &::google::protobuf::internal::kEmptyString) {
        equip_color_type_->clear();
      }
    }
    support_copy_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    support_fax_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtStationQRCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 prtStation_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prtstation_id_)));
          set_has_prtstation_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_prtStation_ip;
        break;
      }
      
      // optional string prtStation_ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prtStation_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prtstation_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->prtstation_ip().data(), this->prtstation_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_printer_name;
        break;
      }
      
      // optional string printer_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_printer_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_printer_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->printer_name().data(), this->printer_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_equip_Brand;
        break;
      }
      
      // optional int32 equip_Brand = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_Brand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_brand_)));
          set_has_equip_brand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_equip_Type;
        break;
      }
      
      // optional string equip_Type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_Type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equip_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->equip_type().data(), this->equip_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_equip_Paper_Type;
        break;
      }
      
      // optional int32 equip_Paper_Type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_Paper_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_paper_type_)));
          set_has_equip_paper_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_equip_Color_Type;
        break;
      }
      
      // optional string equip_Color_Type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_Color_Type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equip_color_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->equip_color_type().data(), this->equip_color_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_Support_Copy;
        break;
      }
      
      // optional int32 Support_Copy = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Support_Copy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &support_copy_)));
          set_has_support_copy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_Support_Fax;
        break;
      }
      
      // optional int32 Support_Fax = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Support_Fax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &support_fax_)));
          set_has_support_fax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrtStationQRCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 prtStation_id = 1;
  if (has_prtstation_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->prtstation_id(), output);
  }
  
  // optional string prtStation_ip = 2;
  if (has_prtstation_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prtstation_ip().data(), this->prtstation_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->prtstation_ip(), output);
  }
  
  // optional string printer_name = 3;
  if (has_printer_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->printer_name().data(), this->printer_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->printer_name(), output);
  }
  
  // optional int32 equip_Brand = 4;
  if (has_equip_brand()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->equip_brand(), output);
  }
  
  // optional string equip_Type = 5;
  if (has_equip_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equip_type().data(), this->equip_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->equip_type(), output);
  }
  
  // optional int32 equip_Paper_Type = 6;
  if (has_equip_paper_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->equip_paper_type(), output);
  }
  
  // optional string equip_Color_Type = 7;
  if (has_equip_color_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equip_color_type().data(), this->equip_color_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->equip_color_type(), output);
  }
  
  // optional int32 Support_Copy = 8;
  if (has_support_copy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->support_copy(), output);
  }
  
  // optional int32 Support_Fax = 9;
  if (has_support_fax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->support_fax(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrtStationQRCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 prtStation_id = 1;
  if (has_prtstation_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->prtstation_id(), target);
  }
  
  // optional string prtStation_ip = 2;
  if (has_prtstation_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prtstation_ip().data(), this->prtstation_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->prtstation_ip(), target);
  }
  
  // optional string printer_name = 3;
  if (has_printer_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->printer_name().data(), this->printer_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->printer_name(), target);
  }
  
  // optional int32 equip_Brand = 4;
  if (has_equip_brand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->equip_brand(), target);
  }
  
  // optional string equip_Type = 5;
  if (has_equip_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equip_type().data(), this->equip_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->equip_type(), target);
  }
  
  // optional int32 equip_Paper_Type = 6;
  if (has_equip_paper_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->equip_paper_type(), target);
  }
  
  // optional string equip_Color_Type = 7;
  if (has_equip_color_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equip_color_type().data(), this->equip_color_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->equip_color_type(), target);
  }
  
  // optional int32 Support_Copy = 8;
  if (has_support_copy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->support_copy(), target);
  }
  
  // optional int32 Support_Fax = 9;
  if (has_support_fax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->support_fax(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrtStationQRCode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 prtStation_id = 1;
    if (has_prtstation_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prtstation_id());
    }
    
    // optional string prtStation_ip = 2;
    if (has_prtstation_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prtstation_ip());
    }
    
    // optional string printer_name = 3;
    if (has_printer_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->printer_name());
    }
    
    // optional int32 equip_Brand = 4;
    if (has_equip_brand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_brand());
    }
    
    // optional string equip_Type = 5;
    if (has_equip_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equip_type());
    }
    
    // optional int32 equip_Paper_Type = 6;
    if (has_equip_paper_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_paper_type());
    }
    
    // optional string equip_Color_Type = 7;
    if (has_equip_color_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equip_color_type());
    }
    
    // optional int32 Support_Copy = 8;
    if (has_support_copy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->support_copy());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 Support_Fax = 9;
    if (has_support_fax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->support_fax());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtStationQRCode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtStationQRCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtStationQRCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtStationQRCode::MergeFrom(const PrtStationQRCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prtstation_id()) {
      set_prtstation_id(from.prtstation_id());
    }
    if (from.has_prtstation_ip()) {
      set_prtstation_ip(from.prtstation_ip());
    }
    if (from.has_printer_name()) {
      set_printer_name(from.printer_name());
    }
    if (from.has_equip_brand()) {
      set_equip_brand(from.equip_brand());
    }
    if (from.has_equip_type()) {
      set_equip_type(from.equip_type());
    }
    if (from.has_equip_paper_type()) {
      set_equip_paper_type(from.equip_paper_type());
    }
    if (from.has_equip_color_type()) {
      set_equip_color_type(from.equip_color_type());
    }
    if (from.has_support_copy()) {
      set_support_copy(from.support_copy());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_support_fax()) {
      set_support_fax(from.support_fax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtStationQRCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtStationQRCode::CopyFrom(const PrtStationQRCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtStationQRCode::IsInitialized() const {
  
  return true;
}

void PrtStationQRCode::Swap(PrtStationQRCode* other) {
  if (other != this) {
    std::swap(prtstation_id_, other->prtstation_id_);
    std::swap(prtstation_ip_, other->prtstation_ip_);
    std::swap(printer_name_, other->printer_name_);
    std::swap(equip_brand_, other->equip_brand_);
    std::swap(equip_type_, other->equip_type_);
    std::swap(equip_paper_type_, other->equip_paper_type_);
    std::swap(equip_color_type_, other->equip_color_type_);
    std::swap(support_copy_, other->support_copy_);
    std::swap(support_fax_, other->support_fax_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtStationQRCode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtStationQRCode_descriptor_;
  metadata.reflection = PrtStationQRCode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScanQRCodeInfo::kQRCodeFieldNumber;
const int ScanQRCodeInfo::kScanTimeFieldNumber;
const int ScanQRCodeInfo::kScanDevTypeFieldNumber;
const int ScanQRCodeInfo::kScanAppTypeFieldNumber;
const int ScanQRCodeInfo::kUserNameFieldNumber;
const int ScanQRCodeInfo::kUserPwdFieldNumber;
#endif  // !_MSC_VER

ScanQRCodeInfo::ScanQRCodeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScanQRCodeInfo::InitAsDefaultInstance() {
  qr_code_ = const_cast< ::isafetec::PrtStationQRCode*>(&::isafetec::PrtStationQRCode::default_instance());
}

ScanQRCodeInfo::ScanQRCodeInfo(const ScanQRCodeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScanQRCodeInfo::SharedCtor() {
  _cached_size_ = 0;
  qr_code_ = NULL;
  scan_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scan_dev_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scan_app_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScanQRCodeInfo::~ScanQRCodeInfo() {
  SharedDtor();
}

void ScanQRCodeInfo::SharedDtor() {
  if (scan_time_ != &::google::protobuf::internal::kEmptyString) {
    delete scan_time_;
  }
  if (scan_dev_type_ != &::google::protobuf::internal::kEmptyString) {
    delete scan_dev_type_;
  }
  if (scan_app_type_ != &::google::protobuf::internal::kEmptyString) {
    delete scan_app_type_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (userpwd_ != &::google::protobuf::internal::kEmptyString) {
    delete userpwd_;
  }
  if (this != default_instance_) {
    delete qr_code_;
  }
}

void ScanQRCodeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScanQRCodeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScanQRCodeInfo_descriptor_;
}

const ScanQRCodeInfo& ScanQRCodeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mobile_2eproto();  return *default_instance_;
}

ScanQRCodeInfo* ScanQRCodeInfo::default_instance_ = NULL;

ScanQRCodeInfo* ScanQRCodeInfo::New() const {
  return new ScanQRCodeInfo;
}

void ScanQRCodeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_qr_code()) {
      if (qr_code_ != NULL) qr_code_->::isafetec::PrtStationQRCode::Clear();
    }
    if (has_scan_time()) {
      if (scan_time_ != &::google::protobuf::internal::kEmptyString) {
        scan_time_->clear();
      }
    }
    if (has_scan_dev_type()) {
      if (scan_dev_type_ != &::google::protobuf::internal::kEmptyString) {
        scan_dev_type_->clear();
      }
    }
    if (has_scan_app_type()) {
      if (scan_app_type_ != &::google::protobuf::internal::kEmptyString) {
        scan_app_type_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_userpwd()) {
      if (userpwd_ != &::google::protobuf::internal::kEmptyString) {
        userpwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScanQRCodeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .isafetec.PrtStationQRCode QR_Code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qr_code()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_scan_Time;
        break;
      }
      
      // optional string scan_Time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scan_Time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scan_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scan_time().data(), this->scan_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_scan_Dev_Type;
        break;
      }
      
      // optional string scan_Dev_Type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scan_Dev_Type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scan_dev_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scan_dev_type().data(), this->scan_dev_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_scan_App_Type;
        break;
      }
      
      // optional string scan_App_Type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scan_App_Type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scan_app_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scan_app_type().data(), this->scan_app_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_userName;
        break;
      }
      
      // optional string userName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_userPwd;
        break;
      }
      
      // optional string userPwd = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userPwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userpwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userpwd().data(), this->userpwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScanQRCodeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .isafetec.PrtStationQRCode QR_Code = 1;
  if (has_qr_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->qr_code(), output);
  }
  
  // optional string scan_Time = 2;
  if (has_scan_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scan_time().data(), this->scan_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->scan_time(), output);
  }
  
  // optional string scan_Dev_Type = 3;
  if (has_scan_dev_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scan_dev_type().data(), this->scan_dev_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->scan_dev_type(), output);
  }
  
  // optional string scan_App_Type = 4;
  if (has_scan_app_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scan_app_type().data(), this->scan_app_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->scan_app_type(), output);
  }
  
  // optional string userName = 5;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->username(), output);
  }
  
  // optional string userPwd = 6;
  if (has_userpwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userpwd().data(), this->userpwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->userpwd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScanQRCodeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .isafetec.PrtStationQRCode QR_Code = 1;
  if (has_qr_code()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->qr_code(), target);
  }
  
  // optional string scan_Time = 2;
  if (has_scan_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scan_time().data(), this->scan_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->scan_time(), target);
  }
  
  // optional string scan_Dev_Type = 3;
  if (has_scan_dev_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scan_dev_type().data(), this->scan_dev_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->scan_dev_type(), target);
  }
  
  // optional string scan_App_Type = 4;
  if (has_scan_app_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scan_app_type().data(), this->scan_app_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->scan_app_type(), target);
  }
  
  // optional string userName = 5;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->username(), target);
  }
  
  // optional string userPwd = 6;
  if (has_userpwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userpwd().data(), this->userpwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->userpwd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScanQRCodeInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .isafetec.PrtStationQRCode QR_Code = 1;
    if (has_qr_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->qr_code());
    }
    
    // optional string scan_Time = 2;
    if (has_scan_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scan_time());
    }
    
    // optional string scan_Dev_Type = 3;
    if (has_scan_dev_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scan_dev_type());
    }
    
    // optional string scan_App_Type = 4;
    if (has_scan_app_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scan_app_type());
    }
    
    // optional string userName = 5;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // optional string userPwd = 6;
    if (has_userpwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userpwd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScanQRCodeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScanQRCodeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScanQRCodeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScanQRCodeInfo::MergeFrom(const ScanQRCodeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_qr_code()) {
      mutable_qr_code()->::isafetec::PrtStationQRCode::MergeFrom(from.qr_code());
    }
    if (from.has_scan_time()) {
      set_scan_time(from.scan_time());
    }
    if (from.has_scan_dev_type()) {
      set_scan_dev_type(from.scan_dev_type());
    }
    if (from.has_scan_app_type()) {
      set_scan_app_type(from.scan_app_type());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_userpwd()) {
      set_userpwd(from.userpwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScanQRCodeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanQRCodeInfo::CopyFrom(const ScanQRCodeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanQRCodeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ScanQRCodeInfo::Swap(ScanQRCodeInfo* other) {
  if (other != this) {
    std::swap(qr_code_, other->qr_code_);
    std::swap(scan_time_, other->scan_time_);
    std::swap(scan_dev_type_, other->scan_dev_type_);
    std::swap(scan_app_type_, other->scan_app_type_);
    std::swap(username_, other->username_);
    std::swap(userpwd_, other->userpwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScanQRCodeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScanQRCodeInfo_descriptor_;
  metadata.reflection = ScanQRCodeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MobileUserCommand::kCmdFieldNumber;
const int MobileUserCommand::kContentFieldNumber;
#endif  // !_MSC_VER

MobileUserCommand::MobileUserCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MobileUserCommand::InitAsDefaultInstance() {
}

MobileUserCommand::MobileUserCommand(const MobileUserCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MobileUserCommand::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MobileUserCommand::~MobileUserCommand() {
  SharedDtor();
}

void MobileUserCommand::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void MobileUserCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MobileUserCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MobileUserCommand_descriptor_;
}

const MobileUserCommand& MobileUserCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mobile_2eproto();  return *default_instance_;
}

MobileUserCommand* MobileUserCommand::default_instance_ = NULL;

MobileUserCommand* MobileUserCommand::New() const {
  return new MobileUserCommand;
}

void MobileUserCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MobileUserCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }
      
      // optional string content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MobileUserCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd(), output);
  }
  
  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MobileUserCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cmd = 1;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd(), target);
  }
  
  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MobileUserCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd());
    }
    
    // optional string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MobileUserCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MobileUserCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MobileUserCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MobileUserCommand::MergeFrom(const MobileUserCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MobileUserCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MobileUserCommand::CopyFrom(const MobileUserCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MobileUserCommand::IsInitialized() const {
  
  return true;
}

void MobileUserCommand::Swap(MobileUserCommand* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MobileUserCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MobileUserCommand_descriptor_;
  metadata.reflection = MobileUserCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QRCodeBaseInfo::kBaseUrlFieldNumber;
const int QRCodeBaseInfo::kDynamicTimeoutFieldNumber;
const int QRCodeBaseInfo::kFactorFieldNumber;
#endif  // !_MSC_VER

QRCodeBaseInfo::QRCodeBaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QRCodeBaseInfo::InitAsDefaultInstance() {
}

QRCodeBaseInfo::QRCodeBaseInfo(const QRCodeBaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QRCodeBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  base_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dynamic_timeout_ = 0;
  factor_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QRCodeBaseInfo::~QRCodeBaseInfo() {
  SharedDtor();
}

void QRCodeBaseInfo::SharedDtor() {
  if (base_url_ != &::google::protobuf::internal::kEmptyString) {
    delete base_url_;
  }
  if (factor_ != &::google::protobuf::internal::kEmptyString) {
    delete factor_;
  }
  if (this != default_instance_) {
  }
}

void QRCodeBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QRCodeBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QRCodeBaseInfo_descriptor_;
}

const QRCodeBaseInfo& QRCodeBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mobile_2eproto();  return *default_instance_;
}

QRCodeBaseInfo* QRCodeBaseInfo::default_instance_ = NULL;

QRCodeBaseInfo* QRCodeBaseInfo::New() const {
  return new QRCodeBaseInfo;
}

void QRCodeBaseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_url()) {
      if (base_url_ != &::google::protobuf::internal::kEmptyString) {
        base_url_->clear();
      }
    }
    dynamic_timeout_ = 0;
    if (has_factor()) {
      if (factor_ != &::google::protobuf::internal::kEmptyString) {
        factor_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QRCodeBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Base_Url = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_base_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->base_url().data(), this->base_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Dynamic_Timeout;
        break;
      }
      
      // optional int32 Dynamic_Timeout = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Dynamic_Timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dynamic_timeout_)));
          set_has_dynamic_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Factor;
        break;
      }
      
      // optional string Factor = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Factor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_factor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->factor().data(), this->factor().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QRCodeBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string Base_Url = 1;
  if (has_base_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->base_url().data(), this->base_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->base_url(), output);
  }
  
  // optional int32 Dynamic_Timeout = 2;
  if (has_dynamic_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dynamic_timeout(), output);
  }
  
  // optional string Factor = 3;
  if (has_factor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->factor().data(), this->factor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->factor(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QRCodeBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Base_Url = 1;
  if (has_base_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->base_url().data(), this->base_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->base_url(), target);
  }
  
  // optional int32 Dynamic_Timeout = 2;
  if (has_dynamic_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dynamic_timeout(), target);
  }
  
  // optional string Factor = 3;
  if (has_factor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->factor().data(), this->factor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->factor(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QRCodeBaseInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Base_Url = 1;
    if (has_base_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->base_url());
    }
    
    // optional int32 Dynamic_Timeout = 2;
    if (has_dynamic_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dynamic_timeout());
    }
    
    // optional string Factor = 3;
    if (has_factor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->factor());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QRCodeBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QRCodeBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QRCodeBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QRCodeBaseInfo::MergeFrom(const QRCodeBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_url()) {
      set_base_url(from.base_url());
    }
    if (from.has_dynamic_timeout()) {
      set_dynamic_timeout(from.dynamic_timeout());
    }
    if (from.has_factor()) {
      set_factor(from.factor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QRCodeBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QRCodeBaseInfo::CopyFrom(const QRCodeBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QRCodeBaseInfo::IsInitialized() const {
  
  return true;
}

void QRCodeBaseInfo::Swap(QRCodeBaseInfo* other) {
  if (other != this) {
    std::swap(base_url_, other->base_url_);
    std::swap(dynamic_timeout_, other->dynamic_timeout_);
    std::swap(factor_, other->factor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QRCodeBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QRCodeBaseInfo_descriptor_;
  metadata.reflection = QRCodeBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtStationQRCodeInfo::kPrtIdFieldNumber;
const int PrtStationQRCodeInfo::kEnableLoginQRCodeFieldNumber;
const int PrtStationQRCodeInfo::kEnablePaymentQRCodeFieldNumber;
const int PrtStationQRCodeInfo::kLoginQRCodeFieldNumber;
const int PrtStationQRCodeInfo::kPaymentQRCodeFieldNumber;
#endif  // !_MSC_VER

PrtStationQRCodeInfo::PrtStationQRCodeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrtStationQRCodeInfo::InitAsDefaultInstance() {
  login_qrcode_ = const_cast< ::isafetec::QRCodeBaseInfo*>(&::isafetec::QRCodeBaseInfo::default_instance());
  payment_qrcode_ = const_cast< ::isafetec::QRCodeBaseInfo*>(&::isafetec::QRCodeBaseInfo::default_instance());
}

PrtStationQRCodeInfo::PrtStationQRCodeInfo(const PrtStationQRCodeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrtStationQRCodeInfo::SharedCtor() {
  _cached_size_ = 0;
  prtid_ = 0;
  enable_login_qrcode_ = 0;
  enable_payment_qrcode_ = 0;
  login_qrcode_ = NULL;
  payment_qrcode_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtStationQRCodeInfo::~PrtStationQRCodeInfo() {
  SharedDtor();
}

void PrtStationQRCodeInfo::SharedDtor() {
  if (this != default_instance_) {
    delete login_qrcode_;
    delete payment_qrcode_;
  }
}

void PrtStationQRCodeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtStationQRCodeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtStationQRCodeInfo_descriptor_;
}

const PrtStationQRCodeInfo& PrtStationQRCodeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mobile_2eproto();  return *default_instance_;
}

PrtStationQRCodeInfo* PrtStationQRCodeInfo::default_instance_ = NULL;

PrtStationQRCodeInfo* PrtStationQRCodeInfo::New() const {
  return new PrtStationQRCodeInfo;
}

void PrtStationQRCodeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prtid_ = 0;
    enable_login_qrcode_ = 0;
    enable_payment_qrcode_ = 0;
    if (has_login_qrcode()) {
      if (login_qrcode_ != NULL) login_qrcode_->::isafetec::QRCodeBaseInfo::Clear();
    }
    if (has_payment_qrcode()) {
      if (payment_qrcode_ != NULL) payment_qrcode_->::isafetec::QRCodeBaseInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtStationQRCodeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 PrtId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prtid_)));
          set_has_prtid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Enable_Login_QRCode;
        break;
      }
      
      // optional int32 Enable_Login_QRCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Enable_Login_QRCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enable_login_qrcode_)));
          set_has_enable_login_qrcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Enable_Payment_QRCode;
        break;
      }
      
      // optional int32 Enable_Payment_QRCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Enable_Payment_QRCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enable_payment_qrcode_)));
          set_has_enable_payment_qrcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Login_QRCode;
        break;
      }
      
      // optional .isafetec.QRCodeBaseInfo Login_QRCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Login_QRCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login_qrcode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Payment_QRCode;
        break;
      }
      
      // optional .isafetec.QRCodeBaseInfo Payment_QRCode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Payment_QRCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_payment_qrcode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrtStationQRCodeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 PrtId = 1;
  if (has_prtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->prtid(), output);
  }
  
  // optional int32 Enable_Login_QRCode = 2;
  if (has_enable_login_qrcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->enable_login_qrcode(), output);
  }
  
  // optional int32 Enable_Payment_QRCode = 3;
  if (has_enable_payment_qrcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->enable_payment_qrcode(), output);
  }
  
  // optional .isafetec.QRCodeBaseInfo Login_QRCode = 4;
  if (has_login_qrcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->login_qrcode(), output);
  }
  
  // optional .isafetec.QRCodeBaseInfo Payment_QRCode = 5;
  if (has_payment_qrcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->payment_qrcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrtStationQRCodeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 PrtId = 1;
  if (has_prtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->prtid(), target);
  }
  
  // optional int32 Enable_Login_QRCode = 2;
  if (has_enable_login_qrcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->enable_login_qrcode(), target);
  }
  
  // optional int32 Enable_Payment_QRCode = 3;
  if (has_enable_payment_qrcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->enable_payment_qrcode(), target);
  }
  
  // optional .isafetec.QRCodeBaseInfo Login_QRCode = 4;
  if (has_login_qrcode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->login_qrcode(), target);
  }
  
  // optional .isafetec.QRCodeBaseInfo Payment_QRCode = 5;
  if (has_payment_qrcode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->payment_qrcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrtStationQRCodeInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 PrtId = 1;
    if (has_prtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prtid());
    }
    
    // optional int32 Enable_Login_QRCode = 2;
    if (has_enable_login_qrcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enable_login_qrcode());
    }
    
    // optional int32 Enable_Payment_QRCode = 3;
    if (has_enable_payment_qrcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enable_payment_qrcode());
    }
    
    // optional .isafetec.QRCodeBaseInfo Login_QRCode = 4;
    if (has_login_qrcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login_qrcode());
    }
    
    // optional .isafetec.QRCodeBaseInfo Payment_QRCode = 5;
    if (has_payment_qrcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->payment_qrcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtStationQRCodeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtStationQRCodeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtStationQRCodeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtStationQRCodeInfo::MergeFrom(const PrtStationQRCodeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prtid()) {
      set_prtid(from.prtid());
    }
    if (from.has_enable_login_qrcode()) {
      set_enable_login_qrcode(from.enable_login_qrcode());
    }
    if (from.has_enable_payment_qrcode()) {
      set_enable_payment_qrcode(from.enable_payment_qrcode());
    }
    if (from.has_login_qrcode()) {
      mutable_login_qrcode()->::isafetec::QRCodeBaseInfo::MergeFrom(from.login_qrcode());
    }
    if (from.has_payment_qrcode()) {
      mutable_payment_qrcode()->::isafetec::QRCodeBaseInfo::MergeFrom(from.payment_qrcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtStationQRCodeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtStationQRCodeInfo::CopyFrom(const PrtStationQRCodeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtStationQRCodeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PrtStationQRCodeInfo::Swap(PrtStationQRCodeInfo* other) {
  if (other != this) {
    std::swap(prtid_, other->prtid_);
    std::swap(enable_login_qrcode_, other->enable_login_qrcode_);
    std::swap(enable_payment_qrcode_, other->enable_payment_qrcode_);
    std::swap(login_qrcode_, other->login_qrcode_);
    std::swap(payment_qrcode_, other->payment_qrcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtStationQRCodeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtStationQRCodeInfo_descriptor_;
  metadata.reflection = PrtStationQRCodeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MobileOrderInfo::kIdFieldNumber;
const int MobileOrderInfo::kOrderNoFieldNumber;
const int MobileOrderInfo::kUserIdFieldNumber;
const int MobileOrderInfo::kAccountIdFieldNumber;
const int MobileOrderInfo::kAccountNameFieldNumber;
const int MobileOrderInfo::kRealNameFieldNumber;
const int MobileOrderInfo::kPrtIdFieldNumber;
const int MobileOrderInfo::kSpendMoneyFieldNumber;
const int MobileOrderInfo::kPayTypeFieldNumber;
const int MobileOrderInfo::kPayAccountFieldNumber;
const int MobileOrderInfo::kPayCompanyFieldNumber;
const int MobileOrderInfo::kPayMoneyFieldNumber;
const int MobileOrderInfo::kPayRedPacketFieldNumber;
const int MobileOrderInfo::kPayPreferentialFieldNumber;
const int MobileOrderInfo::kJobTypeFieldNumber;
const int MobileOrderInfo::kJobIdFieldNumber;
const int MobileOrderInfo::kTotalPageFieldNumber;
const int MobileOrderInfo::kRealPageFieldNumber;
const int MobileOrderInfo::kColorFieldNumber;
const int MobileOrderInfo::kCopiesFieldNumber;
const int MobileOrderInfo::kPriceTypeFieldNumber;
const int MobileOrderInfo::kPriceFieldNumber;
const int MobileOrderInfo::kPageTypeFieldNumber;
const int MobileOrderInfo::kPaperSizeFieldNumber;
const int MobileOrderInfo::kProjectIdFieldNumber;
const int MobileOrderInfo::kCreateOnFieldNumber;
const int MobileOrderInfo::kPayTimeFieldNumber;
const int MobileOrderInfo::kPayStateFieldNumber;
const int MobileOrderInfo::kJobOpStateFieldNumber;
const int MobileOrderInfo::kJobCompleteTimeFieldNumber;
const int MobileOrderInfo::kJobCompleteNotifyTimeFieldNumber;
const int MobileOrderInfo::kCommentFieldNumber;
#endif  // !_MSC_VER

MobileOrderInfo::MobileOrderInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MobileOrderInfo::InitAsDefaultInstance() {
}

MobileOrderInfo::MobileOrderInfo(const MobileOrderInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MobileOrderInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  orderno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = 0;
  accountid_ = 0;
  accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  realname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prtid_ = 0;
  spendmoney_ = 0;
  paytype_ = 0;
  payaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  paycompany_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  paymoney_ = 0;
  payredpacket_ = 0;
  paypreferential_ = 0;
  jobtype_ = 0;
  jobid_ = 0;
  totalpage_ = 0;
  realpage_ = 0;
  color_ = 0;
  copies_ = 0;
  pricetype_ = 0;
  price_ = 0;
  pagetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  papersize_ = 0;
  projectid_ = 0;
  createon_ = 0;
  paytime_ = 0;
  paystate_ = 0;
  jobopstate_ = 0;
  jobcompletetime_ = 0;
  jobcompletenotifytime_ = 0;
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MobileOrderInfo::~MobileOrderInfo() {
  SharedDtor();
}

void MobileOrderInfo::SharedDtor() {
  if (orderno_ != &::google::protobuf::internal::kEmptyString) {
    delete orderno_;
  }
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (realname_ != &::google::protobuf::internal::kEmptyString) {
    delete realname_;
  }
  if (payaccount_ != &::google::protobuf::internal::kEmptyString) {
    delete payaccount_;
  }
  if (paycompany_ != &::google::protobuf::internal::kEmptyString) {
    delete paycompany_;
  }
  if (pagetype_ != &::google::protobuf::internal::kEmptyString) {
    delete pagetype_;
  }
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (this != default_instance_) {
  }
}

void MobileOrderInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MobileOrderInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MobileOrderInfo_descriptor_;
}

const MobileOrderInfo& MobileOrderInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mobile_2eproto();  return *default_instance_;
}

MobileOrderInfo* MobileOrderInfo::default_instance_ = NULL;

MobileOrderInfo* MobileOrderInfo::New() const {
  return new MobileOrderInfo;
}

void MobileOrderInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_orderno()) {
      if (orderno_ != &::google::protobuf::internal::kEmptyString) {
        orderno_->clear();
      }
    }
    userid_ = 0;
    accountid_ = 0;
    if (has_accountname()) {
      if (accountname_ != &::google::protobuf::internal::kEmptyString) {
        accountname_->clear();
      }
    }
    if (has_realname()) {
      if (realname_ != &::google::protobuf::internal::kEmptyString) {
        realname_->clear();
      }
    }
    prtid_ = 0;
    spendmoney_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    paytype_ = 0;
    if (has_payaccount()) {
      if (payaccount_ != &::google::protobuf::internal::kEmptyString) {
        payaccount_->clear();
      }
    }
    if (has_paycompany()) {
      if (paycompany_ != &::google::protobuf::internal::kEmptyString) {
        paycompany_->clear();
      }
    }
    paymoney_ = 0;
    payredpacket_ = 0;
    paypreferential_ = 0;
    jobtype_ = 0;
    jobid_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    totalpage_ = 0;
    realpage_ = 0;
    color_ = 0;
    copies_ = 0;
    pricetype_ = 0;
    price_ = 0;
    if (has_pagetype()) {
      if (pagetype_ != &::google::protobuf::internal::kEmptyString) {
        pagetype_->clear();
      }
    }
    papersize_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    projectid_ = 0;
    createon_ = 0;
    paytime_ = 0;
    paystate_ = 0;
    jobopstate_ = 0;
    jobcompletetime_ = 0;
    jobcompletenotifytime_ = 0;
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MobileOrderInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_OrderNo;
        break;
      }
      
      // optional string OrderNo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OrderNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderno().data(), this->orderno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_UserId;
        break;
      }
      
      // required int32 UserId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UserId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_AccountId;
        break;
      }
      
      // required int32 AccountId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AccountId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_AccountName;
        break;
      }
      
      // optional string AccountName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AccountName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountname().data(), this->accountname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_RealName;
        break;
      }
      
      // optional string RealName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RealName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_realname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->realname().data(), this->realname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_PrtId;
        break;
      }
      
      // required int32 PrtId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PrtId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prtid_)));
          set_has_prtid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_SpendMoney;
        break;
      }
      
      // required int32 SpendMoney = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SpendMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spendmoney_)));
          set_has_spendmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_PayType;
        break;
      }
      
      // optional .isafetec.Pay_Type PayType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PayType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::Pay_Type_IsValid(value)) {
            set_paytype(static_cast< isafetec::Pay_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_PayAccount;
        break;
      }
      
      // optional string PayAccount = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PayAccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_payaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->payaccount().data(), this->payaccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_PayCompany;
        break;
      }
      
      // optional string PayCompany = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PayCompany:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_paycompany()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->paycompany().data(), this->paycompany().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_PayMoney;
        break;
      }
      
      // optional int32 PayMoney = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PayMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paymoney_)));
          set_has_paymoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_PayRedPacket;
        break;
      }
      
      // optional int32 PayRedPacket = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PayRedPacket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &payredpacket_)));
          set_has_payredpacket();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_PayPreferential;
        break;
      }
      
      // optional int32 PayPreferential = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PayPreferential:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paypreferential_)));
          set_has_paypreferential();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_JobType;
        break;
      }
      
      // optional .isafetec.JOB_TYPE JobType = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_JobType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::JOB_TYPE_IsValid(value)) {
            set_jobtype(static_cast< isafetec::JOB_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_JobId;
        break;
      }
      
      // optional int32 JobId = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_JobId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jobid_)));
          set_has_jobid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_TotalPage;
        break;
      }
      
      // optional int32 TotalPage = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TotalPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalpage_)));
          set_has_totalpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_RealPage;
        break;
      }
      
      // optional int32 RealPage = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RealPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &realpage_)));
          set_has_realpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_Color;
        break;
      }
      
      // optional int32 Color = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_Copies;
        break;
      }
      
      // optional int32 Copies = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Copies:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &copies_)));
          set_has_copies();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_PriceType;
        break;
      }
      
      // optional .isafetec.JOB_PRICE_TYPE PriceType = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PriceType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::JOB_PRICE_TYPE_IsValid(value)) {
            set_pricetype(static_cast< isafetec::JOB_PRICE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(21, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_Price;
        break;
      }
      
      // optional int32 Price = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_PageType;
        break;
      }
      
      // optional string PageType = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PageType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pagetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pagetype().data(), this->pagetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_PaperSize;
        break;
      }
      
      // optional int32 PaperSize = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PaperSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &papersize_)));
          set_has_papersize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_ProjectId;
        break;
      }
      
      // optional int32 ProjectId = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ProjectId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &projectid_)));
          set_has_projectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(209)) goto parse_CreateOn;
        break;
      }
      
      // optional double CreateOn = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CreateOn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &createon_)));
          set_has_createon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(217)) goto parse_PayTime;
        break;
      }
      
      // optional double PayTime = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &paytime_)));
          set_has_paytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_PayState;
        break;
      }
      
      // optional .isafetec.Pay_State PayState = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PayState:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::Pay_State_IsValid(value)) {
            set_paystate(static_cast< isafetec::Pay_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(28, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_JobOpState;
        break;
      }
      
      // optional .isafetec.Job_Op_State JobOpState = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_JobOpState:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::Job_Op_State_IsValid(value)) {
            set_jobopstate(static_cast< isafetec::Job_Op_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(29, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(241)) goto parse_JobCompleteTime;
        break;
      }
      
      // optional double JobCompleteTime = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_JobCompleteTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jobcompletetime_)));
          set_has_jobcompletetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(249)) goto parse_JobCompleteNotifyTime;
        break;
      }
      
      // optional double JobCompleteNotifyTime = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_JobCompleteNotifyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jobcompletenotifytime_)));
          set_has_jobcompletenotifytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_comment;
        break;
      }
      
      // optional string comment = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MobileOrderInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string OrderNo = 2;
  if (has_orderno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderno().data(), this->orderno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->orderno(), output);
  }
  
  // required int32 UserId = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->userid(), output);
  }
  
  // required int32 AccountId = 4;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->accountid(), output);
  }
  
  // optional string AccountName = 5;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->accountname(), output);
  }
  
  // optional string RealName = 6;
  if (has_realname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->realname().data(), this->realname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->realname(), output);
  }
  
  // required int32 PrtId = 7;
  if (has_prtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->prtid(), output);
  }
  
  // required int32 SpendMoney = 8;
  if (has_spendmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->spendmoney(), output);
  }
  
  // optional .isafetec.Pay_Type PayType = 9;
  if (has_paytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->paytype(), output);
  }
  
  // optional string PayAccount = 10;
  if (has_payaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->payaccount().data(), this->payaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->payaccount(), output);
  }
  
  // optional string PayCompany = 11;
  if (has_paycompany()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paycompany().data(), this->paycompany().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->paycompany(), output);
  }
  
  // optional int32 PayMoney = 12;
  if (has_paymoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->paymoney(), output);
  }
  
  // optional int32 PayRedPacket = 13;
  if (has_payredpacket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->payredpacket(), output);
  }
  
  // optional int32 PayPreferential = 14;
  if (has_paypreferential()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->paypreferential(), output);
  }
  
  // optional .isafetec.JOB_TYPE JobType = 15;
  if (has_jobtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->jobtype(), output);
  }
  
  // optional int32 JobId = 16;
  if (has_jobid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->jobid(), output);
  }
  
  // optional int32 TotalPage = 17;
  if (has_totalpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->totalpage(), output);
  }
  
  // optional int32 RealPage = 18;
  if (has_realpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->realpage(), output);
  }
  
  // optional int32 Color = 19;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->color(), output);
  }
  
  // optional int32 Copies = 20;
  if (has_copies()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->copies(), output);
  }
  
  // optional .isafetec.JOB_PRICE_TYPE PriceType = 21;
  if (has_pricetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->pricetype(), output);
  }
  
  // optional int32 Price = 22;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->price(), output);
  }
  
  // optional string PageType = 23;
  if (has_pagetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pagetype().data(), this->pagetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->pagetype(), output);
  }
  
  // optional int32 PaperSize = 24;
  if (has_papersize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->papersize(), output);
  }
  
  // optional int32 ProjectId = 25;
  if (has_projectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->projectid(), output);
  }
  
  // optional double CreateOn = 26;
  if (has_createon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->createon(), output);
  }
  
  // optional double PayTime = 27;
  if (has_paytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->paytime(), output);
  }
  
  // optional .isafetec.Pay_State PayState = 28;
  if (has_paystate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      28, this->paystate(), output);
  }
  
  // optional .isafetec.Job_Op_State JobOpState = 29;
  if (has_jobopstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      29, this->jobopstate(), output);
  }
  
  // optional double JobCompleteTime = 30;
  if (has_jobcompletetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->jobcompletetime(), output);
  }
  
  // optional double JobCompleteNotifyTime = 31;
  if (has_jobcompletenotifytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->jobcompletenotifytime(), output);
  }
  
  // optional string comment = 32;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      32, this->comment(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MobileOrderInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string OrderNo = 2;
  if (has_orderno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderno().data(), this->orderno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->orderno(), target);
  }
  
  // required int32 UserId = 3;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->userid(), target);
  }
  
  // required int32 AccountId = 4;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->accountid(), target);
  }
  
  // optional string AccountName = 5;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->accountname(), target);
  }
  
  // optional string RealName = 6;
  if (has_realname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->realname().data(), this->realname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->realname(), target);
  }
  
  // required int32 PrtId = 7;
  if (has_prtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->prtid(), target);
  }
  
  // required int32 SpendMoney = 8;
  if (has_spendmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->spendmoney(), target);
  }
  
  // optional .isafetec.Pay_Type PayType = 9;
  if (has_paytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->paytype(), target);
  }
  
  // optional string PayAccount = 10;
  if (has_payaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->payaccount().data(), this->payaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->payaccount(), target);
  }
  
  // optional string PayCompany = 11;
  if (has_paycompany()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paycompany().data(), this->paycompany().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->paycompany(), target);
  }
  
  // optional int32 PayMoney = 12;
  if (has_paymoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->paymoney(), target);
  }
  
  // optional int32 PayRedPacket = 13;
  if (has_payredpacket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->payredpacket(), target);
  }
  
  // optional int32 PayPreferential = 14;
  if (has_paypreferential()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->paypreferential(), target);
  }
  
  // optional .isafetec.JOB_TYPE JobType = 15;
  if (has_jobtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->jobtype(), target);
  }
  
  // optional int32 JobId = 16;
  if (has_jobid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->jobid(), target);
  }
  
  // optional int32 TotalPage = 17;
  if (has_totalpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->totalpage(), target);
  }
  
  // optional int32 RealPage = 18;
  if (has_realpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->realpage(), target);
  }
  
  // optional int32 Color = 19;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->color(), target);
  }
  
  // optional int32 Copies = 20;
  if (has_copies()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->copies(), target);
  }
  
  // optional .isafetec.JOB_PRICE_TYPE PriceType = 21;
  if (has_pricetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->pricetype(), target);
  }
  
  // optional int32 Price = 22;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->price(), target);
  }
  
  // optional string PageType = 23;
  if (has_pagetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pagetype().data(), this->pagetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->pagetype(), target);
  }
  
  // optional int32 PaperSize = 24;
  if (has_papersize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->papersize(), target);
  }
  
  // optional int32 ProjectId = 25;
  if (has_projectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->projectid(), target);
  }
  
  // optional double CreateOn = 26;
  if (has_createon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->createon(), target);
  }
  
  // optional double PayTime = 27;
  if (has_paytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->paytime(), target);
  }
  
  // optional .isafetec.Pay_State PayState = 28;
  if (has_paystate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      28, this->paystate(), target);
  }
  
  // optional .isafetec.Job_Op_State JobOpState = 29;
  if (has_jobopstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      29, this->jobopstate(), target);
  }
  
  // optional double JobCompleteTime = 30;
  if (has_jobcompletetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->jobcompletetime(), target);
  }
  
  // optional double JobCompleteNotifyTime = 31;
  if (has_jobcompletenotifytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->jobcompletenotifytime(), target);
  }
  
  // optional string comment = 32;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->comment(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MobileOrderInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string OrderNo = 2;
    if (has_orderno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderno());
    }
    
    // required int32 UserId = 3;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }
    
    // required int32 AccountId = 4;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accountid());
    }
    
    // optional string AccountName = 5;
    if (has_accountname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountname());
    }
    
    // optional string RealName = 6;
    if (has_realname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->realname());
    }
    
    // required int32 PrtId = 7;
    if (has_prtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prtid());
    }
    
    // required int32 SpendMoney = 8;
    if (has_spendmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spendmoney());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .isafetec.Pay_Type PayType = 9;
    if (has_paytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->paytype());
    }
    
    // optional string PayAccount = 10;
    if (has_payaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->payaccount());
    }
    
    // optional string PayCompany = 11;
    if (has_paycompany()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->paycompany());
    }
    
    // optional int32 PayMoney = 12;
    if (has_paymoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->paymoney());
    }
    
    // optional int32 PayRedPacket = 13;
    if (has_payredpacket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->payredpacket());
    }
    
    // optional int32 PayPreferential = 14;
    if (has_paypreferential()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->paypreferential());
    }
    
    // optional .isafetec.JOB_TYPE JobType = 15;
    if (has_jobtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->jobtype());
    }
    
    // optional int32 JobId = 16;
    if (has_jobid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jobid());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 TotalPage = 17;
    if (has_totalpage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalpage());
    }
    
    // optional int32 RealPage = 18;
    if (has_realpage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->realpage());
    }
    
    // optional int32 Color = 19;
    if (has_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }
    
    // optional int32 Copies = 20;
    if (has_copies()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->copies());
    }
    
    // optional .isafetec.JOB_PRICE_TYPE PriceType = 21;
    if (has_pricetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pricetype());
    }
    
    // optional int32 Price = 22;
    if (has_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }
    
    // optional string PageType = 23;
    if (has_pagetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pagetype());
    }
    
    // optional int32 PaperSize = 24;
    if (has_papersize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->papersize());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 ProjectId = 25;
    if (has_projectid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->projectid());
    }
    
    // optional double CreateOn = 26;
    if (has_createon()) {
      total_size += 2 + 8;
    }
    
    // optional double PayTime = 27;
    if (has_paytime()) {
      total_size += 2 + 8;
    }
    
    // optional .isafetec.Pay_State PayState = 28;
    if (has_paystate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->paystate());
    }
    
    // optional .isafetec.Job_Op_State JobOpState = 29;
    if (has_jobopstate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->jobopstate());
    }
    
    // optional double JobCompleteTime = 30;
    if (has_jobcompletetime()) {
      total_size += 2 + 8;
    }
    
    // optional double JobCompleteNotifyTime = 31;
    if (has_jobcompletenotifytime()) {
      total_size += 2 + 8;
    }
    
    // optional string comment = 32;
    if (has_comment()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MobileOrderInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MobileOrderInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MobileOrderInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MobileOrderInfo::MergeFrom(const MobileOrderInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_orderno()) {
      set_orderno(from.orderno());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_accountname()) {
      set_accountname(from.accountname());
    }
    if (from.has_realname()) {
      set_realname(from.realname());
    }
    if (from.has_prtid()) {
      set_prtid(from.prtid());
    }
    if (from.has_spendmoney()) {
      set_spendmoney(from.spendmoney());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_paytype()) {
      set_paytype(from.paytype());
    }
    if (from.has_payaccount()) {
      set_payaccount(from.payaccount());
    }
    if (from.has_paycompany()) {
      set_paycompany(from.paycompany());
    }
    if (from.has_paymoney()) {
      set_paymoney(from.paymoney());
    }
    if (from.has_payredpacket()) {
      set_payredpacket(from.payredpacket());
    }
    if (from.has_paypreferential()) {
      set_paypreferential(from.paypreferential());
    }
    if (from.has_jobtype()) {
      set_jobtype(from.jobtype());
    }
    if (from.has_jobid()) {
      set_jobid(from.jobid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_totalpage()) {
      set_totalpage(from.totalpage());
    }
    if (from.has_realpage()) {
      set_realpage(from.realpage());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_copies()) {
      set_copies(from.copies());
    }
    if (from.has_pricetype()) {
      set_pricetype(from.pricetype());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_pagetype()) {
      set_pagetype(from.pagetype());
    }
    if (from.has_papersize()) {
      set_papersize(from.papersize());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_projectid()) {
      set_projectid(from.projectid());
    }
    if (from.has_createon()) {
      set_createon(from.createon());
    }
    if (from.has_paytime()) {
      set_paytime(from.paytime());
    }
    if (from.has_paystate()) {
      set_paystate(from.paystate());
    }
    if (from.has_jobopstate()) {
      set_jobopstate(from.jobopstate());
    }
    if (from.has_jobcompletetime()) {
      set_jobcompletetime(from.jobcompletetime());
    }
    if (from.has_jobcompletenotifytime()) {
      set_jobcompletenotifytime(from.jobcompletenotifytime());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MobileOrderInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MobileOrderInfo::CopyFrom(const MobileOrderInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MobileOrderInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000cc) != 0x000000cc) return false;
  
  return true;
}

void MobileOrderInfo::Swap(MobileOrderInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(orderno_, other->orderno_);
    std::swap(userid_, other->userid_);
    std::swap(accountid_, other->accountid_);
    std::swap(accountname_, other->accountname_);
    std::swap(realname_, other->realname_);
    std::swap(prtid_, other->prtid_);
    std::swap(spendmoney_, other->spendmoney_);
    std::swap(paytype_, other->paytype_);
    std::swap(payaccount_, other->payaccount_);
    std::swap(paycompany_, other->paycompany_);
    std::swap(paymoney_, other->paymoney_);
    std::swap(payredpacket_, other->payredpacket_);
    std::swap(paypreferential_, other->paypreferential_);
    std::swap(jobtype_, other->jobtype_);
    std::swap(jobid_, other->jobid_);
    std::swap(totalpage_, other->totalpage_);
    std::swap(realpage_, other->realpage_);
    std::swap(color_, other->color_);
    std::swap(copies_, other->copies_);
    std::swap(pricetype_, other->pricetype_);
    std::swap(price_, other->price_);
    std::swap(pagetype_, other->pagetype_);
    std::swap(papersize_, other->papersize_);
    std::swap(projectid_, other->projectid_);
    std::swap(createon_, other->createon_);
    std::swap(paytime_, other->paytime_);
    std::swap(paystate_, other->paystate_);
    std::swap(jobopstate_, other->jobopstate_);
    std::swap(jobcompletetime_, other->jobcompletetime_);
    std::swap(jobcompletenotifytime_, other->jobcompletenotifytime_);
    std::swap(comment_, other->comment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MobileOrderInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MobileOrderInfo_descriptor_;
  metadata.reflection = MobileOrderInfo_reflection_;
  return metadata;
}

// PrtStationQRCode

// optional int32 prtStation_id = 1;
inline bool PrtStationQRCode::has_prtstation_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrtStationQRCode::set_has_prtstation_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrtStationQRCode::clear_has_prtstation_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrtStationQRCode::clear_prtstation_id() {
  prtstation_id_ = 0;
  clear_has_prtstation_id();
}
inline ::google::protobuf::int32 PrtStationQRCode::prtstation_id() const {
  return prtstation_id_;
}
inline void PrtStationQRCode::set_prtstation_id(::google::protobuf::int32 value) {
  set_has_prtstation_id();
  prtstation_id_ = value;
}

// optional string prtStation_ip = 2;
inline bool PrtStationQRCode::has_prtstation_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrtStationQRCode::set_has_prtstation_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrtStationQRCode::clear_has_prtstation_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrtStationQRCode::clear_prtstation_ip() {
  if (prtstation_ip_ != &::google::protobuf::internal::kEmptyString) {
    prtstation_ip_->clear();
  }
  clear_has_prtstation_ip();
}
inline const ::std::string& PrtStationQRCode::prtstation_ip() const {
  return *prtstation_ip_;
}
inline void PrtStationQRCode::set_prtstation_ip(const ::std::string& value) {
  set_has_prtstation_ip();
  if (prtstation_ip_ == &::google::protobuf::internal::kEmptyString) {
    prtstation_ip_ = new ::std::string;
  }
  prtstation_ip_->assign(value);
}
inline void PrtStationQRCode::set_prtstation_ip(const char* value) {
  set_has_prtstation_ip();
  if (prtstation_ip_ == &::google::protobuf::internal::kEmptyString) {
    prtstation_ip_ = new ::std::string;
  }
  prtstation_ip_->assign(value);
}
inline void PrtStationQRCode::set_prtstation_ip(const char* value, size_t size) {
  set_has_prtstation_ip();
  if (prtstation_ip_ == &::google::protobuf::internal::kEmptyString) {
    prtstation_ip_ = new ::std::string;
  }
  prtstation_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtStationQRCode::mutable_prtstation_ip() {
  set_has_prtstation_ip();
  if (prtstation_ip_ == &::google::protobuf::internal::kEmptyString) {
    prtstation_ip_ = new ::std::string;
  }
  return prtstation_ip_;
}
inline ::std::string* PrtStationQRCode::release_prtstation_ip() {
  clear_has_prtstation_ip();
  if (prtstation_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = prtstation_ip_;
    prtstation_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string printer_name = 3;
inline bool PrtStationQRCode::has_printer_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrtStationQRCode::set_has_printer_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrtStationQRCode::clear_has_printer_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrtStationQRCode::clear_printer_name() {
  if (printer_name_ != &::google::protobuf::internal::kEmptyString) {
    printer_name_->clear();
  }
  clear_has_printer_name();
}
inline const ::std::string& PrtStationQRCode::printer_name() const {
  return *printer_name_;
}
inline void PrtStationQRCode::set_printer_name(const ::std::string& value) {
  set_has_printer_name();
  if (printer_name_ == &::google::protobuf::internal::kEmptyString) {
    printer_name_ = new ::std::string;
  }
  printer_name_->assign(value);
}
inline void PrtStationQRCode::set_printer_name(const char* value) {
  set_has_printer_name();
  if (printer_name_ == &::google::protobuf::internal::kEmptyString) {
    printer_name_ = new ::std::string;
  }
  printer_name_->assign(value);
}
inline void PrtStationQRCode::set_printer_name(const char* value, size_t size) {
  set_has_printer_name();
  if (printer_name_ == &::google::protobuf::internal::kEmptyString) {
    printer_name_ = new ::std::string;
  }
  printer_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtStationQRCode::mutable_printer_name() {
  set_has_printer_name();
  if (printer_name_ == &::google::protobuf::internal::kEmptyString) {
    printer_name_ = new ::std::string;
  }
  return printer_name_;
}
inline ::std::string* PrtStationQRCode::release_printer_name() {
  clear_has_printer_name();
  if (printer_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = printer_name_;
    printer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 equip_Brand = 4;
inline bool PrtStationQRCode::has_equip_brand() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrtStationQRCode::set_has_equip_brand() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrtStationQRCode::clear_has_equip_brand() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrtStationQRCode::clear_equip_brand() {
  equip_brand_ = 0;
  clear_has_equip_brand();
}
inline ::google::protobuf::int32 PrtStationQRCode::equip_brand() const {
  return equip_brand_;
}
inline void PrtStationQRCode::set_equip_brand(::google::protobuf::int32 value) {
  set_has_equip_brand();
  equip_brand_ = value;
}

// optional string equip_Type = 5;
inline bool PrtStationQRCode::has_equip_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PrtStationQRCode::set_has_equip_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PrtStationQRCode::clear_has_equip_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PrtStationQRCode::clear_equip_type() {
  if (equip_type_ != &::google::protobuf::internal::kEmptyString) {
    equip_type_->clear();
  }
  clear_has_equip_type();
}
inline const ::std::string& PrtStationQRCode::equip_type() const {
  return *equip_type_;
}
inline void PrtStationQRCode::set_equip_type(const ::std::string& value) {
  set_has_equip_type();
  if (equip_type_ == &::google::protobuf::internal::kEmptyString) {
    equip_type_ = new ::std::string;
  }
  equip_type_->assign(value);
}
inline void PrtStationQRCode::set_equip_type(const char* value) {
  set_has_equip_type();
  if (equip_type_ == &::google::protobuf::internal::kEmptyString) {
    equip_type_ = new ::std::string;
  }
  equip_type_->assign(value);
}
inline void PrtStationQRCode::set_equip_type(const char* value, size_t size) {
  set_has_equip_type();
  if (equip_type_ == &::google::protobuf::internal::kEmptyString) {
    equip_type_ = new ::std::string;
  }
  equip_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtStationQRCode::mutable_equip_type() {
  set_has_equip_type();
  if (equip_type_ == &::google::protobuf::internal::kEmptyString) {
    equip_type_ = new ::std::string;
  }
  return equip_type_;
}
inline ::std::string* PrtStationQRCode::release_equip_type() {
  clear_has_equip_type();
  if (equip_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = equip_type_;
    equip_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 equip_Paper_Type = 6;
inline bool PrtStationQRCode::has_equip_paper_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PrtStationQRCode::set_has_equip_paper_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PrtStationQRCode::clear_has_equip_paper_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PrtStationQRCode::clear_equip_paper_type() {
  equip_paper_type_ = 0;
  clear_has_equip_paper_type();
}
inline ::google::protobuf::int32 PrtStationQRCode::equip_paper_type() const {
  return equip_paper_type_;
}
inline void PrtStationQRCode::set_equip_paper_type(::google::protobuf::int32 value) {
  set_has_equip_paper_type();
  equip_paper_type_ = value;
}

// optional string equip_Color_Type = 7;
inline bool PrtStationQRCode::has_equip_color_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PrtStationQRCode::set_has_equip_color_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PrtStationQRCode::clear_has_equip_color_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PrtStationQRCode::clear_equip_color_type() {
  if (equip_color_type_ != &::google::protobuf::internal::kEmptyString) {
    equip_color_type_->clear();
  }
  clear_has_equip_color_type();
}
inline const ::std::string& PrtStationQRCode::equip_color_type() const {
  return *equip_color_type_;
}
inline void PrtStationQRCode::set_equip_color_type(const ::std::string& value) {
  set_has_equip_color_type();
  if (equip_color_type_ == &::google::protobuf::internal::kEmptyString) {
    equip_color_type_ = new ::std::string;
  }
  equip_color_type_->assign(value);
}
inline void PrtStationQRCode::set_equip_color_type(const char* value) {
  set_has_equip_color_type();
  if (equip_color_type_ == &::google::protobuf::internal::kEmptyString) {
    equip_color_type_ = new ::std::string;
  }
  equip_color_type_->assign(value);
}
inline void PrtStationQRCode::set_equip_color_type(const char* value, size_t size) {
  set_has_equip_color_type();
  if (equip_color_type_ == &::google::protobuf::internal::kEmptyString) {
    equip_color_type_ = new ::std::string;
  }
  equip_color_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtStationQRCode::mutable_equip_color_type() {
  set_has_equip_color_type();
  if (equip_color_type_ == &::google::protobuf::internal::kEmptyString) {
    equip_color_type_ = new ::std::string;
  }
  return equip_color_type_;
}
inline ::std::string* PrtStationQRCode::release_equip_color_type() {
  clear_has_equip_color_type();
  if (equip_color_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = equip_color_type_;
    equip_color_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 Support_Copy = 8;
inline bool PrtStationQRCode::has_support_copy() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PrtStationQRCode::set_has_support_copy() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PrtStationQRCode::clear_has_support_copy() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PrtStationQRCode::clear_support_copy() {
  support_copy_ = 0;
  clear_has_support_copy();
}
inline ::google::protobuf::int32 PrtStationQRCode::support_copy() const {
  return support_copy_;
}
inline void PrtStationQRCode::set_support_copy(::google::protobuf::int32 value) {
  set_has_support_copy();
  support_copy_ = value;
}

// optional int32 Support_Fax = 9;
inline bool PrtStationQRCode::has_support_fax() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PrtStationQRCode::set_has_support_fax() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PrtStationQRCode::clear_has_support_fax() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PrtStationQRCode::clear_support_fax() {
  support_fax_ = 0;
  clear_has_support_fax();
}
inline ::google::protobuf::int32 PrtStationQRCode::support_fax() const {
  return support_fax_;
}
inline void PrtStationQRCode::set_support_fax(::google::protobuf::int32 value) {
  set_has_support_fax();
  support_fax_ = value;
}

// -------------------------------------------------------------------

// ScanQRCodeInfo

// required .isafetec.PrtStationQRCode QR_Code = 1;
inline bool ScanQRCodeInfo::has_qr_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScanQRCodeInfo::set_has_qr_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScanQRCodeInfo::clear_has_qr_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScanQRCodeInfo::clear_qr_code() {
  if (qr_code_ != NULL) qr_code_->::isafetec::PrtStationQRCode::Clear();
  clear_has_qr_code();
}
inline const ::isafetec::PrtStationQRCode& ScanQRCodeInfo::qr_code() const {
  return qr_code_ != NULL ? *qr_code_ : *default_instance_->qr_code_;
}
inline ::isafetec::PrtStationQRCode* ScanQRCodeInfo::mutable_qr_code() {
  set_has_qr_code();
  if (qr_code_ == NULL) qr_code_ = new ::isafetec::PrtStationQRCode;
  return qr_code_;
}
inline ::isafetec::PrtStationQRCode* ScanQRCodeInfo::release_qr_code() {
  clear_has_qr_code();
  ::isafetec::PrtStationQRCode* temp = qr_code_;
  qr_code_ = NULL;
  return temp;
}

// optional string scan_Time = 2;
inline bool ScanQRCodeInfo::has_scan_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScanQRCodeInfo::set_has_scan_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScanQRCodeInfo::clear_has_scan_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScanQRCodeInfo::clear_scan_time() {
  if (scan_time_ != &::google::protobuf::internal::kEmptyString) {
    scan_time_->clear();
  }
  clear_has_scan_time();
}
inline const ::std::string& ScanQRCodeInfo::scan_time() const {
  return *scan_time_;
}
inline void ScanQRCodeInfo::set_scan_time(const ::std::string& value) {
  set_has_scan_time();
  if (scan_time_ == &::google::protobuf::internal::kEmptyString) {
    scan_time_ = new ::std::string;
  }
  scan_time_->assign(value);
}
inline void ScanQRCodeInfo::set_scan_time(const char* value) {
  set_has_scan_time();
  if (scan_time_ == &::google::protobuf::internal::kEmptyString) {
    scan_time_ = new ::std::string;
  }
  scan_time_->assign(value);
}
inline void ScanQRCodeInfo::set_scan_time(const char* value, size_t size) {
  set_has_scan_time();
  if (scan_time_ == &::google::protobuf::internal::kEmptyString) {
    scan_time_ = new ::std::string;
  }
  scan_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ScanQRCodeInfo::mutable_scan_time() {
  set_has_scan_time();
  if (scan_time_ == &::google::protobuf::internal::kEmptyString) {
    scan_time_ = new ::std::string;
  }
  return scan_time_;
}
inline ::std::string* ScanQRCodeInfo::release_scan_time() {
  clear_has_scan_time();
  if (scan_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = scan_time_;
    scan_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string scan_Dev_Type = 3;
inline bool ScanQRCodeInfo::has_scan_dev_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScanQRCodeInfo::set_has_scan_dev_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ScanQRCodeInfo::clear_has_scan_dev_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ScanQRCodeInfo::clear_scan_dev_type() {
  if (scan_dev_type_ != &::google::protobuf::internal::kEmptyString) {
    scan_dev_type_->clear();
  }
  clear_has_scan_dev_type();
}
inline const ::std::string& ScanQRCodeInfo::scan_dev_type() const {
  return *scan_dev_type_;
}
inline void ScanQRCodeInfo::set_scan_dev_type(const ::std::string& value) {
  set_has_scan_dev_type();
  if (scan_dev_type_ == &::google::protobuf::internal::kEmptyString) {
    scan_dev_type_ = new ::std::string;
  }
  scan_dev_type_->assign(value);
}
inline void ScanQRCodeInfo::set_scan_dev_type(const char* value) {
  set_has_scan_dev_type();
  if (scan_dev_type_ == &::google::protobuf::internal::kEmptyString) {
    scan_dev_type_ = new ::std::string;
  }
  scan_dev_type_->assign(value);
}
inline void ScanQRCodeInfo::set_scan_dev_type(const char* value, size_t size) {
  set_has_scan_dev_type();
  if (scan_dev_type_ == &::google::protobuf::internal::kEmptyString) {
    scan_dev_type_ = new ::std::string;
  }
  scan_dev_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ScanQRCodeInfo::mutable_scan_dev_type() {
  set_has_scan_dev_type();
  if (scan_dev_type_ == &::google::protobuf::internal::kEmptyString) {
    scan_dev_type_ = new ::std::string;
  }
  return scan_dev_type_;
}
inline ::std::string* ScanQRCodeInfo::release_scan_dev_type() {
  clear_has_scan_dev_type();
  if (scan_dev_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = scan_dev_type_;
    scan_dev_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string scan_App_Type = 4;
inline bool ScanQRCodeInfo::has_scan_app_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ScanQRCodeInfo::set_has_scan_app_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ScanQRCodeInfo::clear_has_scan_app_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ScanQRCodeInfo::clear_scan_app_type() {
  if (scan_app_type_ != &::google::protobuf::internal::kEmptyString) {
    scan_app_type_->clear();
  }
  clear_has_scan_app_type();
}
inline const ::std::string& ScanQRCodeInfo::scan_app_type() const {
  return *scan_app_type_;
}
inline void ScanQRCodeInfo::set_scan_app_type(const ::std::string& value) {
  set_has_scan_app_type();
  if (scan_app_type_ == &::google::protobuf::internal::kEmptyString) {
    scan_app_type_ = new ::std::string;
  }
  scan_app_type_->assign(value);
}
inline void ScanQRCodeInfo::set_scan_app_type(const char* value) {
  set_has_scan_app_type();
  if (scan_app_type_ == &::google::protobuf::internal::kEmptyString) {
    scan_app_type_ = new ::std::string;
  }
  scan_app_type_->assign(value);
}
inline void ScanQRCodeInfo::set_scan_app_type(const char* value, size_t size) {
  set_has_scan_app_type();
  if (scan_app_type_ == &::google::protobuf::internal::kEmptyString) {
    scan_app_type_ = new ::std::string;
  }
  scan_app_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ScanQRCodeInfo::mutable_scan_app_type() {
  set_has_scan_app_type();
  if (scan_app_type_ == &::google::protobuf::internal::kEmptyString) {
    scan_app_type_ = new ::std::string;
  }
  return scan_app_type_;
}
inline ::std::string* ScanQRCodeInfo::release_scan_app_type() {
  clear_has_scan_app_type();
  if (scan_app_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = scan_app_type_;
    scan_app_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string userName = 5;
inline bool ScanQRCodeInfo::has_username() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ScanQRCodeInfo::set_has_username() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ScanQRCodeInfo::clear_has_username() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ScanQRCodeInfo::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& ScanQRCodeInfo::username() const {
  return *username_;
}
inline void ScanQRCodeInfo::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void ScanQRCodeInfo::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void ScanQRCodeInfo::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ScanQRCodeInfo::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* ScanQRCodeInfo::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string userPwd = 6;
inline bool ScanQRCodeInfo::has_userpwd() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ScanQRCodeInfo::set_has_userpwd() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ScanQRCodeInfo::clear_has_userpwd() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ScanQRCodeInfo::clear_userpwd() {
  if (userpwd_ != &::google::protobuf::internal::kEmptyString) {
    userpwd_->clear();
  }
  clear_has_userpwd();
}
inline const ::std::string& ScanQRCodeInfo::userpwd() const {
  return *userpwd_;
}
inline void ScanQRCodeInfo::set_userpwd(const ::std::string& value) {
  set_has_userpwd();
  if (userpwd_ == &::google::protobuf::internal::kEmptyString) {
    userpwd_ = new ::std::string;
  }
  userpwd_->assign(value);
}
inline void ScanQRCodeInfo::set_userpwd(const char* value) {
  set_has_userpwd();
  if (userpwd_ == &::google::protobuf::internal::kEmptyString) {
    userpwd_ = new ::std::string;
  }
  userpwd_->assign(value);
}
inline void ScanQRCodeInfo::set_userpwd(const char* value, size_t size) {
  set_has_userpwd();
  if (userpwd_ == &::google::protobuf::internal::kEmptyString) {
    userpwd_ = new ::std::string;
  }
  userpwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ScanQRCodeInfo::mutable_userpwd() {
  set_has_userpwd();
  if (userpwd_ == &::google::protobuf::internal::kEmptyString) {
    userpwd_ = new ::std::string;
  }
  return userpwd_;
}
inline ::std::string* ScanQRCodeInfo::release_userpwd() {
  clear_has_userpwd();
  if (userpwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userpwd_;
    userpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// MobileUserCommand

// optional int32 cmd = 1;
inline bool MobileUserCommand::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MobileUserCommand::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MobileUserCommand::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MobileUserCommand::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
inline ::google::protobuf::int32 MobileUserCommand::cmd() const {
  return cmd_;
}
inline void MobileUserCommand::set_cmd(::google::protobuf::int32 value) {
  set_has_cmd();
  cmd_ = value;
}

// optional string content = 2;
inline bool MobileUserCommand::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MobileUserCommand::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MobileUserCommand::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MobileUserCommand::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& MobileUserCommand::content() const {
  return *content_;
}
inline void MobileUserCommand::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void MobileUserCommand::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void MobileUserCommand::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileUserCommand::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* MobileUserCommand::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// QRCodeBaseInfo

// optional string Base_Url = 1;
inline bool QRCodeBaseInfo::has_base_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QRCodeBaseInfo::set_has_base_url() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QRCodeBaseInfo::clear_has_base_url() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QRCodeBaseInfo::clear_base_url() {
  if (base_url_ != &::google::protobuf::internal::kEmptyString) {
    base_url_->clear();
  }
  clear_has_base_url();
}
inline const ::std::string& QRCodeBaseInfo::base_url() const {
  return *base_url_;
}
inline void QRCodeBaseInfo::set_base_url(const ::std::string& value) {
  set_has_base_url();
  if (base_url_ == &::google::protobuf::internal::kEmptyString) {
    base_url_ = new ::std::string;
  }
  base_url_->assign(value);
}
inline void QRCodeBaseInfo::set_base_url(const char* value) {
  set_has_base_url();
  if (base_url_ == &::google::protobuf::internal::kEmptyString) {
    base_url_ = new ::std::string;
  }
  base_url_->assign(value);
}
inline void QRCodeBaseInfo::set_base_url(const char* value, size_t size) {
  set_has_base_url();
  if (base_url_ == &::google::protobuf::internal::kEmptyString) {
    base_url_ = new ::std::string;
  }
  base_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QRCodeBaseInfo::mutable_base_url() {
  set_has_base_url();
  if (base_url_ == &::google::protobuf::internal::kEmptyString) {
    base_url_ = new ::std::string;
  }
  return base_url_;
}
inline ::std::string* QRCodeBaseInfo::release_base_url() {
  clear_has_base_url();
  if (base_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = base_url_;
    base_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 Dynamic_Timeout = 2;
inline bool QRCodeBaseInfo::has_dynamic_timeout() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QRCodeBaseInfo::set_has_dynamic_timeout() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QRCodeBaseInfo::clear_has_dynamic_timeout() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QRCodeBaseInfo::clear_dynamic_timeout() {
  dynamic_timeout_ = 0;
  clear_has_dynamic_timeout();
}
inline ::google::protobuf::int32 QRCodeBaseInfo::dynamic_timeout() const {
  return dynamic_timeout_;
}
inline void QRCodeBaseInfo::set_dynamic_timeout(::google::protobuf::int32 value) {
  set_has_dynamic_timeout();
  dynamic_timeout_ = value;
}

// optional string Factor = 3;
inline bool QRCodeBaseInfo::has_factor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QRCodeBaseInfo::set_has_factor() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QRCodeBaseInfo::clear_has_factor() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QRCodeBaseInfo::clear_factor() {
  if (factor_ != &::google::protobuf::internal::kEmptyString) {
    factor_->clear();
  }
  clear_has_factor();
}
inline const ::std::string& QRCodeBaseInfo::factor() const {
  return *factor_;
}
inline void QRCodeBaseInfo::set_factor(const ::std::string& value) {
  set_has_factor();
  if (factor_ == &::google::protobuf::internal::kEmptyString) {
    factor_ = new ::std::string;
  }
  factor_->assign(value);
}
inline void QRCodeBaseInfo::set_factor(const char* value) {
  set_has_factor();
  if (factor_ == &::google::protobuf::internal::kEmptyString) {
    factor_ = new ::std::string;
  }
  factor_->assign(value);
}
inline void QRCodeBaseInfo::set_factor(const char* value, size_t size) {
  set_has_factor();
  if (factor_ == &::google::protobuf::internal::kEmptyString) {
    factor_ = new ::std::string;
  }
  factor_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QRCodeBaseInfo::mutable_factor() {
  set_has_factor();
  if (factor_ == &::google::protobuf::internal::kEmptyString) {
    factor_ = new ::std::string;
  }
  return factor_;
}
inline ::std::string* QRCodeBaseInfo::release_factor() {
  clear_has_factor();
  if (factor_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = factor_;
    factor_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PrtStationQRCodeInfo

// required int32 PrtId = 1;
inline bool PrtStationQRCodeInfo::has_prtid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrtStationQRCodeInfo::set_has_prtid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrtStationQRCodeInfo::clear_has_prtid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrtStationQRCodeInfo::clear_prtid() {
  prtid_ = 0;
  clear_has_prtid();
}
inline ::google::protobuf::int32 PrtStationQRCodeInfo::prtid() const {
  return prtid_;
}
inline void PrtStationQRCodeInfo::set_prtid(::google::protobuf::int32 value) {
  set_has_prtid();
  prtid_ = value;
}

// optional int32 Enable_Login_QRCode = 2;
inline bool PrtStationQRCodeInfo::has_enable_login_qrcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrtStationQRCodeInfo::set_has_enable_login_qrcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrtStationQRCodeInfo::clear_has_enable_login_qrcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrtStationQRCodeInfo::clear_enable_login_qrcode() {
  enable_login_qrcode_ = 0;
  clear_has_enable_login_qrcode();
}
inline ::google::protobuf::int32 PrtStationQRCodeInfo::enable_login_qrcode() const {
  return enable_login_qrcode_;
}
inline void PrtStationQRCodeInfo::set_enable_login_qrcode(::google::protobuf::int32 value) {
  set_has_enable_login_qrcode();
  enable_login_qrcode_ = value;
}

// optional int32 Enable_Payment_QRCode = 3;
inline bool PrtStationQRCodeInfo::has_enable_payment_qrcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrtStationQRCodeInfo::set_has_enable_payment_qrcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrtStationQRCodeInfo::clear_has_enable_payment_qrcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrtStationQRCodeInfo::clear_enable_payment_qrcode() {
  enable_payment_qrcode_ = 0;
  clear_has_enable_payment_qrcode();
}
inline ::google::protobuf::int32 PrtStationQRCodeInfo::enable_payment_qrcode() const {
  return enable_payment_qrcode_;
}
inline void PrtStationQRCodeInfo::set_enable_payment_qrcode(::google::protobuf::int32 value) {
  set_has_enable_payment_qrcode();
  enable_payment_qrcode_ = value;
}

// optional .isafetec.QRCodeBaseInfo Login_QRCode = 4;
inline bool PrtStationQRCodeInfo::has_login_qrcode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrtStationQRCodeInfo::set_has_login_qrcode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrtStationQRCodeInfo::clear_has_login_qrcode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrtStationQRCodeInfo::clear_login_qrcode() {
  if (login_qrcode_ != NULL) login_qrcode_->::isafetec::QRCodeBaseInfo::Clear();
  clear_has_login_qrcode();
}
inline const ::isafetec::QRCodeBaseInfo& PrtStationQRCodeInfo::login_qrcode() const {
  return login_qrcode_ != NULL ? *login_qrcode_ : *default_instance_->login_qrcode_;
}
inline ::isafetec::QRCodeBaseInfo* PrtStationQRCodeInfo::mutable_login_qrcode() {
  set_has_login_qrcode();
  if (login_qrcode_ == NULL) login_qrcode_ = new ::isafetec::QRCodeBaseInfo;
  return login_qrcode_;
}
inline ::isafetec::QRCodeBaseInfo* PrtStationQRCodeInfo::release_login_qrcode() {
  clear_has_login_qrcode();
  ::isafetec::QRCodeBaseInfo* temp = login_qrcode_;
  login_qrcode_ = NULL;
  return temp;
}

// optional .isafetec.QRCodeBaseInfo Payment_QRCode = 5;
inline bool PrtStationQRCodeInfo::has_payment_qrcode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PrtStationQRCodeInfo::set_has_payment_qrcode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PrtStationQRCodeInfo::clear_has_payment_qrcode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PrtStationQRCodeInfo::clear_payment_qrcode() {
  if (payment_qrcode_ != NULL) payment_qrcode_->::isafetec::QRCodeBaseInfo::Clear();
  clear_has_payment_qrcode();
}
inline const ::isafetec::QRCodeBaseInfo& PrtStationQRCodeInfo::payment_qrcode() const {
  return payment_qrcode_ != NULL ? *payment_qrcode_ : *default_instance_->payment_qrcode_;
}
inline ::isafetec::QRCodeBaseInfo* PrtStationQRCodeInfo::mutable_payment_qrcode() {
  set_has_payment_qrcode();
  if (payment_qrcode_ == NULL) payment_qrcode_ = new ::isafetec::QRCodeBaseInfo;
  return payment_qrcode_;
}
inline ::isafetec::QRCodeBaseInfo* PrtStationQRCodeInfo::release_payment_qrcode() {
  clear_has_payment_qrcode();
  ::isafetec::QRCodeBaseInfo* temp = payment_qrcode_;
  payment_qrcode_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// MobileOrderInfo

// optional int32 id = 1;
inline bool MobileOrderInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MobileOrderInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MobileOrderInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MobileOrderInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 MobileOrderInfo::id() const {
  return id_;
}
inline void MobileOrderInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string OrderNo = 2;
inline bool MobileOrderInfo::has_orderno() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MobileOrderInfo::set_has_orderno() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MobileOrderInfo::clear_has_orderno() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MobileOrderInfo::clear_orderno() {
  if (orderno_ != &::google::protobuf::internal::kEmptyString) {
    orderno_->clear();
  }
  clear_has_orderno();
}
inline const ::std::string& MobileOrderInfo::orderno() const {
  return *orderno_;
}
inline void MobileOrderInfo::set_orderno(const ::std::string& value) {
  set_has_orderno();
  if (orderno_ == &::google::protobuf::internal::kEmptyString) {
    orderno_ = new ::std::string;
  }
  orderno_->assign(value);
}
inline void MobileOrderInfo::set_orderno(const char* value) {
  set_has_orderno();
  if (orderno_ == &::google::protobuf::internal::kEmptyString) {
    orderno_ = new ::std::string;
  }
  orderno_->assign(value);
}
inline void MobileOrderInfo::set_orderno(const char* value, size_t size) {
  set_has_orderno();
  if (orderno_ == &::google::protobuf::internal::kEmptyString) {
    orderno_ = new ::std::string;
  }
  orderno_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileOrderInfo::mutable_orderno() {
  set_has_orderno();
  if (orderno_ == &::google::protobuf::internal::kEmptyString) {
    orderno_ = new ::std::string;
  }
  return orderno_;
}
inline ::std::string* MobileOrderInfo::release_orderno() {
  clear_has_orderno();
  if (orderno_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = orderno_;
    orderno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 UserId = 3;
inline bool MobileOrderInfo::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MobileOrderInfo::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MobileOrderInfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MobileOrderInfo::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 MobileOrderInfo::userid() const {
  return userid_;
}
inline void MobileOrderInfo::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// required int32 AccountId = 4;
inline bool MobileOrderInfo::has_accountid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MobileOrderInfo::set_has_accountid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MobileOrderInfo::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MobileOrderInfo::clear_accountid() {
  accountid_ = 0;
  clear_has_accountid();
}
inline ::google::protobuf::int32 MobileOrderInfo::accountid() const {
  return accountid_;
}
inline void MobileOrderInfo::set_accountid(::google::protobuf::int32 value) {
  set_has_accountid();
  accountid_ = value;
}

// optional string AccountName = 5;
inline bool MobileOrderInfo::has_accountname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MobileOrderInfo::set_has_accountname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MobileOrderInfo::clear_has_accountname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MobileOrderInfo::clear_accountname() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    accountname_->clear();
  }
  clear_has_accountname();
}
inline const ::std::string& MobileOrderInfo::accountname() const {
  return *accountname_;
}
inline void MobileOrderInfo::set_accountname(const ::std::string& value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void MobileOrderInfo::set_accountname(const char* value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void MobileOrderInfo::set_accountname(const char* value, size_t size) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileOrderInfo::mutable_accountname() {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  return accountname_;
}
inline ::std::string* MobileOrderInfo::release_accountname() {
  clear_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accountname_;
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string RealName = 6;
inline bool MobileOrderInfo::has_realname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MobileOrderInfo::set_has_realname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MobileOrderInfo::clear_has_realname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MobileOrderInfo::clear_realname() {
  if (realname_ != &::google::protobuf::internal::kEmptyString) {
    realname_->clear();
  }
  clear_has_realname();
}
inline const ::std::string& MobileOrderInfo::realname() const {
  return *realname_;
}
inline void MobileOrderInfo::set_realname(const ::std::string& value) {
  set_has_realname();
  if (realname_ == &::google::protobuf::internal::kEmptyString) {
    realname_ = new ::std::string;
  }
  realname_->assign(value);
}
inline void MobileOrderInfo::set_realname(const char* value) {
  set_has_realname();
  if (realname_ == &::google::protobuf::internal::kEmptyString) {
    realname_ = new ::std::string;
  }
  realname_->assign(value);
}
inline void MobileOrderInfo::set_realname(const char* value, size_t size) {
  set_has_realname();
  if (realname_ == &::google::protobuf::internal::kEmptyString) {
    realname_ = new ::std::string;
  }
  realname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileOrderInfo::mutable_realname() {
  set_has_realname();
  if (realname_ == &::google::protobuf::internal::kEmptyString) {
    realname_ = new ::std::string;
  }
  return realname_;
}
inline ::std::string* MobileOrderInfo::release_realname() {
  clear_has_realname();
  if (realname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = realname_;
    realname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 PrtId = 7;
inline bool MobileOrderInfo::has_prtid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MobileOrderInfo::set_has_prtid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MobileOrderInfo::clear_has_prtid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MobileOrderInfo::clear_prtid() {
  prtid_ = 0;
  clear_has_prtid();
}
inline ::google::protobuf::int32 MobileOrderInfo::prtid() const {
  return prtid_;
}
inline void MobileOrderInfo::set_prtid(::google::protobuf::int32 value) {
  set_has_prtid();
  prtid_ = value;
}

// required int32 SpendMoney = 8;
inline bool MobileOrderInfo::has_spendmoney() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MobileOrderInfo::set_has_spendmoney() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MobileOrderInfo::clear_has_spendmoney() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MobileOrderInfo::clear_spendmoney() {
  spendmoney_ = 0;
  clear_has_spendmoney();
}
inline ::google::protobuf::int32 MobileOrderInfo::spendmoney() const {
  return spendmoney_;
}
inline void MobileOrderInfo::set_spendmoney(::google::protobuf::int32 value) {
  set_has_spendmoney();
  spendmoney_ = value;
}

// optional .isafetec.Pay_Type PayType = 9;
inline bool MobileOrderInfo::has_paytype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MobileOrderInfo::set_has_paytype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MobileOrderInfo::clear_has_paytype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MobileOrderInfo::clear_paytype() {
  paytype_ = 0;
  clear_has_paytype();
}
inline isafetec::Pay_Type MobileOrderInfo::paytype() const {
  return static_cast< isafetec::Pay_Type >(paytype_);
}
inline void MobileOrderInfo::set_paytype(isafetec::Pay_Type value) {
  GOOGLE_DCHECK(isafetec::Pay_Type_IsValid(value));
  set_has_paytype();
  paytype_ = value;
}

// optional string PayAccount = 10;
inline bool MobileOrderInfo::has_payaccount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MobileOrderInfo::set_has_payaccount() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MobileOrderInfo::clear_has_payaccount() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MobileOrderInfo::clear_payaccount() {
  if (payaccount_ != &::google::protobuf::internal::kEmptyString) {
    payaccount_->clear();
  }
  clear_has_payaccount();
}
inline const ::std::string& MobileOrderInfo::payaccount() const {
  return *payaccount_;
}
inline void MobileOrderInfo::set_payaccount(const ::std::string& value) {
  set_has_payaccount();
  if (payaccount_ == &::google::protobuf::internal::kEmptyString) {
    payaccount_ = new ::std::string;
  }
  payaccount_->assign(value);
}
inline void MobileOrderInfo::set_payaccount(const char* value) {
  set_has_payaccount();
  if (payaccount_ == &::google::protobuf::internal::kEmptyString) {
    payaccount_ = new ::std::string;
  }
  payaccount_->assign(value);
}
inline void MobileOrderInfo::set_payaccount(const char* value, size_t size) {
  set_has_payaccount();
  if (payaccount_ == &::google::protobuf::internal::kEmptyString) {
    payaccount_ = new ::std::string;
  }
  payaccount_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileOrderInfo::mutable_payaccount() {
  set_has_payaccount();
  if (payaccount_ == &::google::protobuf::internal::kEmptyString) {
    payaccount_ = new ::std::string;
  }
  return payaccount_;
}
inline ::std::string* MobileOrderInfo::release_payaccount() {
  clear_has_payaccount();
  if (payaccount_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = payaccount_;
    payaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string PayCompany = 11;
inline bool MobileOrderInfo::has_paycompany() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MobileOrderInfo::set_has_paycompany() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MobileOrderInfo::clear_has_paycompany() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MobileOrderInfo::clear_paycompany() {
  if (paycompany_ != &::google::protobuf::internal::kEmptyString) {
    paycompany_->clear();
  }
  clear_has_paycompany();
}
inline const ::std::string& MobileOrderInfo::paycompany() const {
  return *paycompany_;
}
inline void MobileOrderInfo::set_paycompany(const ::std::string& value) {
  set_has_paycompany();
  if (paycompany_ == &::google::protobuf::internal::kEmptyString) {
    paycompany_ = new ::std::string;
  }
  paycompany_->assign(value);
}
inline void MobileOrderInfo::set_paycompany(const char* value) {
  set_has_paycompany();
  if (paycompany_ == &::google::protobuf::internal::kEmptyString) {
    paycompany_ = new ::std::string;
  }
  paycompany_->assign(value);
}
inline void MobileOrderInfo::set_paycompany(const char* value, size_t size) {
  set_has_paycompany();
  if (paycompany_ == &::google::protobuf::internal::kEmptyString) {
    paycompany_ = new ::std::string;
  }
  paycompany_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileOrderInfo::mutable_paycompany() {
  set_has_paycompany();
  if (paycompany_ == &::google::protobuf::internal::kEmptyString) {
    paycompany_ = new ::std::string;
  }
  return paycompany_;
}
inline ::std::string* MobileOrderInfo::release_paycompany() {
  clear_has_paycompany();
  if (paycompany_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = paycompany_;
    paycompany_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 PayMoney = 12;
inline bool MobileOrderInfo::has_paymoney() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MobileOrderInfo::set_has_paymoney() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MobileOrderInfo::clear_has_paymoney() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MobileOrderInfo::clear_paymoney() {
  paymoney_ = 0;
  clear_has_paymoney();
}
inline ::google::protobuf::int32 MobileOrderInfo::paymoney() const {
  return paymoney_;
}
inline void MobileOrderInfo::set_paymoney(::google::protobuf::int32 value) {
  set_has_paymoney();
  paymoney_ = value;
}

// optional int32 PayRedPacket = 13;
inline bool MobileOrderInfo::has_payredpacket() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MobileOrderInfo::set_has_payredpacket() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MobileOrderInfo::clear_has_payredpacket() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MobileOrderInfo::clear_payredpacket() {
  payredpacket_ = 0;
  clear_has_payredpacket();
}
inline ::google::protobuf::int32 MobileOrderInfo::payredpacket() const {
  return payredpacket_;
}
inline void MobileOrderInfo::set_payredpacket(::google::protobuf::int32 value) {
  set_has_payredpacket();
  payredpacket_ = value;
}

// optional int32 PayPreferential = 14;
inline bool MobileOrderInfo::has_paypreferential() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MobileOrderInfo::set_has_paypreferential() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MobileOrderInfo::clear_has_paypreferential() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MobileOrderInfo::clear_paypreferential() {
  paypreferential_ = 0;
  clear_has_paypreferential();
}
inline ::google::protobuf::int32 MobileOrderInfo::paypreferential() const {
  return paypreferential_;
}
inline void MobileOrderInfo::set_paypreferential(::google::protobuf::int32 value) {
  set_has_paypreferential();
  paypreferential_ = value;
}

// optional .isafetec.JOB_TYPE JobType = 15;
inline bool MobileOrderInfo::has_jobtype() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MobileOrderInfo::set_has_jobtype() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MobileOrderInfo::clear_has_jobtype() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MobileOrderInfo::clear_jobtype() {
  jobtype_ = 0;
  clear_has_jobtype();
}
inline isafetec::JOB_TYPE MobileOrderInfo::jobtype() const {
  return static_cast< isafetec::JOB_TYPE >(jobtype_);
}
inline void MobileOrderInfo::set_jobtype(isafetec::JOB_TYPE value) {
  GOOGLE_DCHECK(isafetec::JOB_TYPE_IsValid(value));
  set_has_jobtype();
  jobtype_ = value;
}

// optional int32 JobId = 16;
inline bool MobileOrderInfo::has_jobid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MobileOrderInfo::set_has_jobid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void MobileOrderInfo::clear_has_jobid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void MobileOrderInfo::clear_jobid() {
  jobid_ = 0;
  clear_has_jobid();
}
inline ::google::protobuf::int32 MobileOrderInfo::jobid() const {
  return jobid_;
}
inline void MobileOrderInfo::set_jobid(::google::protobuf::int32 value) {
  set_has_jobid();
  jobid_ = value;
}

// optional int32 TotalPage = 17;
inline bool MobileOrderInfo::has_totalpage() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void MobileOrderInfo::set_has_totalpage() {
  _has_bits_[0] |= 0x00010000u;
}
inline void MobileOrderInfo::clear_has_totalpage() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void MobileOrderInfo::clear_totalpage() {
  totalpage_ = 0;
  clear_has_totalpage();
}
inline ::google::protobuf::int32 MobileOrderInfo::totalpage() const {
  return totalpage_;
}
inline void MobileOrderInfo::set_totalpage(::google::protobuf::int32 value) {
  set_has_totalpage();
  totalpage_ = value;
}

// optional int32 RealPage = 18;
inline bool MobileOrderInfo::has_realpage() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void MobileOrderInfo::set_has_realpage() {
  _has_bits_[0] |= 0x00020000u;
}
inline void MobileOrderInfo::clear_has_realpage() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void MobileOrderInfo::clear_realpage() {
  realpage_ = 0;
  clear_has_realpage();
}
inline ::google::protobuf::int32 MobileOrderInfo::realpage() const {
  return realpage_;
}
inline void MobileOrderInfo::set_realpage(::google::protobuf::int32 value) {
  set_has_realpage();
  realpage_ = value;
}

// optional int32 Color = 19;
inline bool MobileOrderInfo::has_color() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void MobileOrderInfo::set_has_color() {
  _has_bits_[0] |= 0x00040000u;
}
inline void MobileOrderInfo::clear_has_color() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void MobileOrderInfo::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::google::protobuf::int32 MobileOrderInfo::color() const {
  return color_;
}
inline void MobileOrderInfo::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
}

// optional int32 Copies = 20;
inline bool MobileOrderInfo::has_copies() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void MobileOrderInfo::set_has_copies() {
  _has_bits_[0] |= 0x00080000u;
}
inline void MobileOrderInfo::clear_has_copies() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void MobileOrderInfo::clear_copies() {
  copies_ = 0;
  clear_has_copies();
}
inline ::google::protobuf::int32 MobileOrderInfo::copies() const {
  return copies_;
}
inline void MobileOrderInfo::set_copies(::google::protobuf::int32 value) {
  set_has_copies();
  copies_ = value;
}

// optional .isafetec.JOB_PRICE_TYPE PriceType = 21;
inline bool MobileOrderInfo::has_pricetype() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void MobileOrderInfo::set_has_pricetype() {
  _has_bits_[0] |= 0x00100000u;
}
inline void MobileOrderInfo::clear_has_pricetype() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void MobileOrderInfo::clear_pricetype() {
  pricetype_ = 0;
  clear_has_pricetype();
}
inline isafetec::JOB_PRICE_TYPE MobileOrderInfo::pricetype() const {
  return static_cast< isafetec::JOB_PRICE_TYPE >(pricetype_);
}
inline void MobileOrderInfo::set_pricetype(isafetec::JOB_PRICE_TYPE value) {
  GOOGLE_DCHECK(isafetec::JOB_PRICE_TYPE_IsValid(value));
  set_has_pricetype();
  pricetype_ = value;
}

// optional int32 Price = 22;
inline bool MobileOrderInfo::has_price() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void MobileOrderInfo::set_has_price() {
  _has_bits_[0] |= 0x00200000u;
}
inline void MobileOrderInfo::clear_has_price() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void MobileOrderInfo::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline ::google::protobuf::int32 MobileOrderInfo::price() const {
  return price_;
}
inline void MobileOrderInfo::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
}

// optional string PageType = 23;
inline bool MobileOrderInfo::has_pagetype() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void MobileOrderInfo::set_has_pagetype() {
  _has_bits_[0] |= 0x00400000u;
}
inline void MobileOrderInfo::clear_has_pagetype() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void MobileOrderInfo::clear_pagetype() {
  if (pagetype_ != &::google::protobuf::internal::kEmptyString) {
    pagetype_->clear();
  }
  clear_has_pagetype();
}
inline const ::std::string& MobileOrderInfo::pagetype() const {
  return *pagetype_;
}
inline void MobileOrderInfo::set_pagetype(const ::std::string& value) {
  set_has_pagetype();
  if (pagetype_ == &::google::protobuf::internal::kEmptyString) {
    pagetype_ = new ::std::string;
  }
  pagetype_->assign(value);
}
inline void MobileOrderInfo::set_pagetype(const char* value) {
  set_has_pagetype();
  if (pagetype_ == &::google::protobuf::internal::kEmptyString) {
    pagetype_ = new ::std::string;
  }
  pagetype_->assign(value);
}
inline void MobileOrderInfo::set_pagetype(const char* value, size_t size) {
  set_has_pagetype();
  if (pagetype_ == &::google::protobuf::internal::kEmptyString) {
    pagetype_ = new ::std::string;
  }
  pagetype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileOrderInfo::mutable_pagetype() {
  set_has_pagetype();
  if (pagetype_ == &::google::protobuf::internal::kEmptyString) {
    pagetype_ = new ::std::string;
  }
  return pagetype_;
}
inline ::std::string* MobileOrderInfo::release_pagetype() {
  clear_has_pagetype();
  if (pagetype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pagetype_;
    pagetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 PaperSize = 24;
inline bool MobileOrderInfo::has_papersize() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void MobileOrderInfo::set_has_papersize() {
  _has_bits_[0] |= 0x00800000u;
}
inline void MobileOrderInfo::clear_has_papersize() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void MobileOrderInfo::clear_papersize() {
  papersize_ = 0;
  clear_has_papersize();
}
inline ::google::protobuf::int32 MobileOrderInfo::papersize() const {
  return papersize_;
}
inline void MobileOrderInfo::set_papersize(::google::protobuf::int32 value) {
  set_has_papersize();
  papersize_ = value;
}

// optional int32 ProjectId = 25;
inline bool MobileOrderInfo::has_projectid() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void MobileOrderInfo::set_has_projectid() {
  _has_bits_[0] |= 0x01000000u;
}
inline void MobileOrderInfo::clear_has_projectid() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void MobileOrderInfo::clear_projectid() {
  projectid_ = 0;
  clear_has_projectid();
}
inline ::google::protobuf::int32 MobileOrderInfo::projectid() const {
  return projectid_;
}
inline void MobileOrderInfo::set_projectid(::google::protobuf::int32 value) {
  set_has_projectid();
  projectid_ = value;
}

// optional double CreateOn = 26;
inline bool MobileOrderInfo::has_createon() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void MobileOrderInfo::set_has_createon() {
  _has_bits_[0] |= 0x02000000u;
}
inline void MobileOrderInfo::clear_has_createon() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void MobileOrderInfo::clear_createon() {
  createon_ = 0;
  clear_has_createon();
}
inline double MobileOrderInfo::createon() const {
  return createon_;
}
inline void MobileOrderInfo::set_createon(double value) {
  set_has_createon();
  createon_ = value;
}

// optional double PayTime = 27;
inline bool MobileOrderInfo::has_paytime() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void MobileOrderInfo::set_has_paytime() {
  _has_bits_[0] |= 0x04000000u;
}
inline void MobileOrderInfo::clear_has_paytime() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void MobileOrderInfo::clear_paytime() {
  paytime_ = 0;
  clear_has_paytime();
}
inline double MobileOrderInfo::paytime() const {
  return paytime_;
}
inline void MobileOrderInfo::set_paytime(double value) {
  set_has_paytime();
  paytime_ = value;
}

// optional .isafetec.Pay_State PayState = 28;
inline bool MobileOrderInfo::has_paystate() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void MobileOrderInfo::set_has_paystate() {
  _has_bits_[0] |= 0x08000000u;
}
inline void MobileOrderInfo::clear_has_paystate() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void MobileOrderInfo::clear_paystate() {
  paystate_ = 0;
  clear_has_paystate();
}
inline isafetec::Pay_State MobileOrderInfo::paystate() const {
  return static_cast< isafetec::Pay_State >(paystate_);
}
inline void MobileOrderInfo::set_paystate(isafetec::Pay_State value) {
  GOOGLE_DCHECK(isafetec::Pay_State_IsValid(value));
  set_has_paystate();
  paystate_ = value;
}

// optional .isafetec.Job_Op_State JobOpState = 29;
inline bool MobileOrderInfo::has_jobopstate() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void MobileOrderInfo::set_has_jobopstate() {
  _has_bits_[0] |= 0x10000000u;
}
inline void MobileOrderInfo::clear_has_jobopstate() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void MobileOrderInfo::clear_jobopstate() {
  jobopstate_ = 0;
  clear_has_jobopstate();
}
inline isafetec::Job_Op_State MobileOrderInfo::jobopstate() const {
  return static_cast< isafetec::Job_Op_State >(jobopstate_);
}
inline void MobileOrderInfo::set_jobopstate(isafetec::Job_Op_State value) {
  GOOGLE_DCHECK(isafetec::Job_Op_State_IsValid(value));
  set_has_jobopstate();
  jobopstate_ = value;
}

// optional double JobCompleteTime = 30;
inline bool MobileOrderInfo::has_jobcompletetime() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void MobileOrderInfo::set_has_jobcompletetime() {
  _has_bits_[0] |= 0x20000000u;
}
inline void MobileOrderInfo::clear_has_jobcompletetime() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void MobileOrderInfo::clear_jobcompletetime() {
  jobcompletetime_ = 0;
  clear_has_jobcompletetime();
}
inline double MobileOrderInfo::jobcompletetime() const {
  return jobcompletetime_;
}
inline void MobileOrderInfo::set_jobcompletetime(double value) {
  set_has_jobcompletetime();
  jobcompletetime_ = value;
}

// optional double JobCompleteNotifyTime = 31;
inline bool MobileOrderInfo::has_jobcompletenotifytime() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void MobileOrderInfo::set_has_jobcompletenotifytime() {
  _has_bits_[0] |= 0x40000000u;
}
inline void MobileOrderInfo::clear_has_jobcompletenotifytime() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void MobileOrderInfo::clear_jobcompletenotifytime() {
  jobcompletenotifytime_ = 0;
  clear_has_jobcompletenotifytime();
}
inline double MobileOrderInfo::jobcompletenotifytime() const {
  return jobcompletenotifytime_;
}
inline void MobileOrderInfo::set_jobcompletenotifytime(double value) {
  set_has_jobcompletenotifytime();
  jobcompletenotifytime_ = value;
}

// optional string comment = 32;
inline bool MobileOrderInfo::has_comment() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void MobileOrderInfo::set_has_comment() {
  _has_bits_[0] |= 0x80000000u;
}
inline void MobileOrderInfo::clear_has_comment() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void MobileOrderInfo::clear_comment() {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& MobileOrderInfo::comment() const {
  return *comment_;
}
inline void MobileOrderInfo::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void MobileOrderInfo::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void MobileOrderInfo::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MobileOrderInfo::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  return comment_;
}
inline ::std::string* MobileOrderInfo::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace isafetec

// @@protoc_insertion_point(global_scope)
