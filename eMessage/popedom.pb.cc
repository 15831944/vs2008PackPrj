// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "popedom.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace isafetec {

namespace {

const ::google::protobuf::Descriptor* PopedomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PopedomInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PopedomInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PopedomInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PopedomInfoNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PopedomInfoNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* PopedomNodeList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PopedomNodeList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_popedom_2eproto() {
  protobuf_AddDesc_popedom_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "popedom.proto");
  GOOGLE_CHECK(file != NULL);
  PopedomInfo_descriptor_ = file->message_type(0);
  static const int PopedomInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopedomInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopedomInfo, maintype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopedomInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopedomInfo, typename__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopedomInfo, iconpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopedomInfo, attributetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopedomInfo, menushow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopedomInfo, menuindex_),
  };
  PopedomInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PopedomInfo_descriptor_,
      PopedomInfo::default_instance_,
      PopedomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopedomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopedomInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PopedomInfo));
  PopedomInfoList_descriptor_ = file->message_type(1);
  static const int PopedomInfoList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopedomInfoList, list_),
  };
  PopedomInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PopedomInfoList_descriptor_,
      PopedomInfoList::default_instance_,
      PopedomInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopedomInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopedomInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PopedomInfoList));
  PopedomInfoNode_descriptor_ = file->message_type(2);
  static const int PopedomInfoNode_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopedomInfoNode, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopedomInfoNode, maintype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopedomInfoNode, mainname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopedomInfoNode, mainiconpath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopedomInfoNode, list_),
  };
  PopedomInfoNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PopedomInfoNode_descriptor_,
      PopedomInfoNode::default_instance_,
      PopedomInfoNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopedomInfoNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopedomInfoNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PopedomInfoNode));
  PopedomNodeList_descriptor_ = file->message_type(3);
  static const int PopedomNodeList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopedomNodeList, list_),
  };
  PopedomNodeList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PopedomNodeList_descriptor_,
      PopedomNodeList::default_instance_,
      PopedomNodeList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopedomNodeList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PopedomNodeList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PopedomNodeList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_popedom_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PopedomInfo_descriptor_, &PopedomInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PopedomInfoList_descriptor_, &PopedomInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PopedomInfoNode_descriptor_, &PopedomInfoNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PopedomNodeList_descriptor_, &PopedomNodeList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_popedom_2eproto() {
  delete PopedomInfo::default_instance_;
  delete PopedomInfo_reflection_;
  delete PopedomInfoList::default_instance_;
  delete PopedomInfoList_reflection_;
  delete PopedomInfoNode::default_instance_;
  delete PopedomInfoNode_reflection_;
  delete PopedomNodeList::default_instance_;
  delete PopedomNodeList_reflection_;
}

void protobuf_AddDesc_popedom_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rpopedom.proto\022\010isafetec\"\231\001\n\013PopedomInf"
    "o\022\n\n\002id\030\001 \001(\005\022\020\n\010maintype\030\002 \001(\005\022\014\n\004type\030"
    "\003 \001(\005\022\020\n\010typename\030\004 \001(\t\022\020\n\010iconpath\030\005 \001("
    "\t\022\025\n\rattributetype\030\006 \001(\005\022\020\n\010menushow\030\007 \001"
    "(\005\022\021\n\tmenuindex\030\010 \001(\005\"6\n\017PopedomInfoList"
    "\022#\n\004list\030\001 \003(\0132\025.isafetec.PopedomInfo\"\200\001"
    "\n\017PopedomInfoNode\022\n\n\002id\030\001 \001(\005\022\020\n\010maintyp"
    "e\030\002 \001(\005\022\020\n\010mainname\030\003 \001(\t\022\024\n\014mainiconpat"
    "h\030\004 \001(\t\022\'\n\004list\030\005 \001(\0132\031.isafetec.Popedom"
    "InfoList\":\n\017PopedomNodeList\022\'\n\004list\030\001 \003("
    "\0132\031.isafetec.PopedomInfoNode", 428);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "popedom.proto", &protobuf_RegisterTypes);
  PopedomInfo::default_instance_ = new PopedomInfo();
  PopedomInfoList::default_instance_ = new PopedomInfoList();
  PopedomInfoNode::default_instance_ = new PopedomInfoNode();
  PopedomNodeList::default_instance_ = new PopedomNodeList();
  PopedomInfo::default_instance_->InitAsDefaultInstance();
  PopedomInfoList::default_instance_->InitAsDefaultInstance();
  PopedomInfoNode::default_instance_->InitAsDefaultInstance();
  PopedomNodeList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_popedom_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_popedom_2eproto {
  StaticDescriptorInitializer_popedom_2eproto() {
    protobuf_AddDesc_popedom_2eproto();
  }
} static_descriptor_initializer_popedom_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int PopedomInfo::kIdFieldNumber;
const int PopedomInfo::kMaintypeFieldNumber;
const int PopedomInfo::kTypeFieldNumber;
const int PopedomInfo::kTypenameFieldNumber;
const int PopedomInfo::kIconpathFieldNumber;
const int PopedomInfo::kAttributetypeFieldNumber;
const int PopedomInfo::kMenushowFieldNumber;
const int PopedomInfo::kMenuindexFieldNumber;
#endif  // !_MSC_VER

PopedomInfo::PopedomInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PopedomInfo::InitAsDefaultInstance() {
}

PopedomInfo::PopedomInfo(const PopedomInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PopedomInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  maintype_ = 0;
  type_ = 0;
  typename__ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iconpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attributetype_ = 0;
  menushow_ = 0;
  menuindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PopedomInfo::~PopedomInfo() {
  SharedDtor();
}

void PopedomInfo::SharedDtor() {
  if (typename__ != &::google::protobuf::internal::kEmptyString) {
    delete typename__;
  }
  if (iconpath_ != &::google::protobuf::internal::kEmptyString) {
    delete iconpath_;
  }
  if (this != default_instance_) {
  }
}

void PopedomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PopedomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PopedomInfo_descriptor_;
}

const PopedomInfo& PopedomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_popedom_2eproto();  return *default_instance_;
}

PopedomInfo* PopedomInfo::default_instance_ = NULL;

PopedomInfo* PopedomInfo::New() const {
  return new PopedomInfo;
}

void PopedomInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    maintype_ = 0;
    type_ = 0;
    if (has_typename_()) {
      if (typename__ != &::google::protobuf::internal::kEmptyString) {
        typename__->clear();
      }
    }
    if (has_iconpath()) {
      if (iconpath_ != &::google::protobuf::internal::kEmptyString) {
        iconpath_->clear();
      }
    }
    attributetype_ = 0;
    menushow_ = 0;
    menuindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PopedomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_maintype;
        break;
      }
      
      // optional int32 maintype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maintype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maintype_)));
          set_has_maintype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_typename;
        break;
      }
      
      // optional string typename = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_typename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_typename_()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->typename_().data(), this->typename_().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_iconpath;
        break;
      }
      
      // optional string iconpath = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_iconpath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iconpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->iconpath().data(), this->iconpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_attributetype;
        break;
      }
      
      // optional int32 attributetype = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attributetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attributetype_)));
          set_has_attributetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_menushow;
        break;
      }
      
      // optional int32 menushow = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_menushow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &menushow_)));
          set_has_menushow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_menuindex;
        break;
      }
      
      // optional int32 menuindex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_menuindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &menuindex_)));
          set_has_menuindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PopedomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 maintype = 2;
  if (has_maintype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maintype(), output);
  }
  
  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }
  
  // optional string typename = 4;
  if (has_typename_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->typename_().data(), this->typename_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->typename_(), output);
  }
  
  // optional string iconpath = 5;
  if (has_iconpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->iconpath().data(), this->iconpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->iconpath(), output);
  }
  
  // optional int32 attributetype = 6;
  if (has_attributetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->attributetype(), output);
  }
  
  // optional int32 menushow = 7;
  if (has_menushow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->menushow(), output);
  }
  
  // optional int32 menuindex = 8;
  if (has_menuindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->menuindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PopedomInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 maintype = 2;
  if (has_maintype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maintype(), target);
  }
  
  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }
  
  // optional string typename = 4;
  if (has_typename_()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->typename_().data(), this->typename_().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->typename_(), target);
  }
  
  // optional string iconpath = 5;
  if (has_iconpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->iconpath().data(), this->iconpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->iconpath(), target);
  }
  
  // optional int32 attributetype = 6;
  if (has_attributetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->attributetype(), target);
  }
  
  // optional int32 menushow = 7;
  if (has_menushow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->menushow(), target);
  }
  
  // optional int32 menuindex = 8;
  if (has_menuindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->menuindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PopedomInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 maintype = 2;
    if (has_maintype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maintype());
    }
    
    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional string typename = 4;
    if (has_typename_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->typename_());
    }
    
    // optional string iconpath = 5;
    if (has_iconpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iconpath());
    }
    
    // optional int32 attributetype = 6;
    if (has_attributetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attributetype());
    }
    
    // optional int32 menushow = 7;
    if (has_menushow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->menushow());
    }
    
    // optional int32 menuindex = 8;
    if (has_menuindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->menuindex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PopedomInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PopedomInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PopedomInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PopedomInfo::MergeFrom(const PopedomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_maintype()) {
      set_maintype(from.maintype());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_typename_()) {
      set_typename_(from.typename_());
    }
    if (from.has_iconpath()) {
      set_iconpath(from.iconpath());
    }
    if (from.has_attributetype()) {
      set_attributetype(from.attributetype());
    }
    if (from.has_menushow()) {
      set_menushow(from.menushow());
    }
    if (from.has_menuindex()) {
      set_menuindex(from.menuindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PopedomInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PopedomInfo::CopyFrom(const PopedomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PopedomInfo::IsInitialized() const {
  
  return true;
}

void PopedomInfo::Swap(PopedomInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(maintype_, other->maintype_);
    std::swap(type_, other->type_);
    std::swap(typename__, other->typename__);
    std::swap(iconpath_, other->iconpath_);
    std::swap(attributetype_, other->attributetype_);
    std::swap(menushow_, other->menushow_);
    std::swap(menuindex_, other->menuindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PopedomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PopedomInfo_descriptor_;
  metadata.reflection = PopedomInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PopedomInfoList::kListFieldNumber;
#endif  // !_MSC_VER

PopedomInfoList::PopedomInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PopedomInfoList::InitAsDefaultInstance() {
}

PopedomInfoList::PopedomInfoList(const PopedomInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PopedomInfoList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PopedomInfoList::~PopedomInfoList() {
  SharedDtor();
}

void PopedomInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PopedomInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PopedomInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PopedomInfoList_descriptor_;
}

const PopedomInfoList& PopedomInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_popedom_2eproto();  return *default_instance_;
}

PopedomInfoList* PopedomInfoList::default_instance_ = NULL;

PopedomInfoList* PopedomInfoList::New() const {
  return new PopedomInfoList;
}

void PopedomInfoList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PopedomInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .isafetec.PopedomInfo list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PopedomInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .isafetec.PopedomInfo list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PopedomInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .isafetec.PopedomInfo list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PopedomInfoList::ByteSize() const {
  int total_size = 0;
  
  // repeated .isafetec.PopedomInfo list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PopedomInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PopedomInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PopedomInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PopedomInfoList::MergeFrom(const PopedomInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PopedomInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PopedomInfoList::CopyFrom(const PopedomInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PopedomInfoList::IsInitialized() const {
  
  return true;
}

void PopedomInfoList::Swap(PopedomInfoList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PopedomInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PopedomInfoList_descriptor_;
  metadata.reflection = PopedomInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PopedomInfoNode::kIdFieldNumber;
const int PopedomInfoNode::kMaintypeFieldNumber;
const int PopedomInfoNode::kMainnameFieldNumber;
const int PopedomInfoNode::kMainiconpathFieldNumber;
const int PopedomInfoNode::kListFieldNumber;
#endif  // !_MSC_VER

PopedomInfoNode::PopedomInfoNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PopedomInfoNode::InitAsDefaultInstance() {
  list_ = const_cast< ::isafetec::PopedomInfoList*>(&::isafetec::PopedomInfoList::default_instance());
}

PopedomInfoNode::PopedomInfoNode(const PopedomInfoNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PopedomInfoNode::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  maintype_ = 0;
  mainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mainiconpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  list_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PopedomInfoNode::~PopedomInfoNode() {
  SharedDtor();
}

void PopedomInfoNode::SharedDtor() {
  if (mainname_ != &::google::protobuf::internal::kEmptyString) {
    delete mainname_;
  }
  if (mainiconpath_ != &::google::protobuf::internal::kEmptyString) {
    delete mainiconpath_;
  }
  if (this != default_instance_) {
    delete list_;
  }
}

void PopedomInfoNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PopedomInfoNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PopedomInfoNode_descriptor_;
}

const PopedomInfoNode& PopedomInfoNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_popedom_2eproto();  return *default_instance_;
}

PopedomInfoNode* PopedomInfoNode::default_instance_ = NULL;

PopedomInfoNode* PopedomInfoNode::New() const {
  return new PopedomInfoNode;
}

void PopedomInfoNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    maintype_ = 0;
    if (has_mainname()) {
      if (mainname_ != &::google::protobuf::internal::kEmptyString) {
        mainname_->clear();
      }
    }
    if (has_mainiconpath()) {
      if (mainiconpath_ != &::google::protobuf::internal::kEmptyString) {
        mainiconpath_->clear();
      }
    }
    if (has_list()) {
      if (list_ != NULL) list_->::isafetec::PopedomInfoList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PopedomInfoNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_maintype;
        break;
      }
      
      // optional int32 maintype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maintype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maintype_)));
          set_has_maintype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mainname;
        break;
      }
      
      // optional string mainname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mainname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mainname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mainname().data(), this->mainname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mainiconpath;
        break;
      }
      
      // optional string mainiconpath = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mainiconpath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mainiconpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mainiconpath().data(), this->mainiconpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_list;
        break;
      }
      
      // optional .isafetec.PopedomInfoList list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PopedomInfoNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 maintype = 2;
  if (has_maintype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maintype(), output);
  }
  
  // optional string mainname = 3;
  if (has_mainname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mainname().data(), this->mainname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->mainname(), output);
  }
  
  // optional string mainiconpath = 4;
  if (has_mainiconpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mainiconpath().data(), this->mainiconpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->mainiconpath(), output);
  }
  
  // optional .isafetec.PopedomInfoList list = 5;
  if (has_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->list(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PopedomInfoNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 maintype = 2;
  if (has_maintype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maintype(), target);
  }
  
  // optional string mainname = 3;
  if (has_mainname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mainname().data(), this->mainname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mainname(), target);
  }
  
  // optional string mainiconpath = 4;
  if (has_mainiconpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mainiconpath().data(), this->mainiconpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mainiconpath(), target);
  }
  
  // optional .isafetec.PopedomInfoList list = 5;
  if (has_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->list(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PopedomInfoNode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 maintype = 2;
    if (has_maintype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maintype());
    }
    
    // optional string mainname = 3;
    if (has_mainname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mainname());
    }
    
    // optional string mainiconpath = 4;
    if (has_mainiconpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mainiconpath());
    }
    
    // optional .isafetec.PopedomInfoList list = 5;
    if (has_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PopedomInfoNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PopedomInfoNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PopedomInfoNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PopedomInfoNode::MergeFrom(const PopedomInfoNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_maintype()) {
      set_maintype(from.maintype());
    }
    if (from.has_mainname()) {
      set_mainname(from.mainname());
    }
    if (from.has_mainiconpath()) {
      set_mainiconpath(from.mainiconpath());
    }
    if (from.has_list()) {
      mutable_list()->::isafetec::PopedomInfoList::MergeFrom(from.list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PopedomInfoNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PopedomInfoNode::CopyFrom(const PopedomInfoNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PopedomInfoNode::IsInitialized() const {
  
  return true;
}

void PopedomInfoNode::Swap(PopedomInfoNode* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(maintype_, other->maintype_);
    std::swap(mainname_, other->mainname_);
    std::swap(mainiconpath_, other->mainiconpath_);
    std::swap(list_, other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PopedomInfoNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PopedomInfoNode_descriptor_;
  metadata.reflection = PopedomInfoNode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PopedomNodeList::kListFieldNumber;
#endif  // !_MSC_VER

PopedomNodeList::PopedomNodeList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PopedomNodeList::InitAsDefaultInstance() {
}

PopedomNodeList::PopedomNodeList(const PopedomNodeList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PopedomNodeList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PopedomNodeList::~PopedomNodeList() {
  SharedDtor();
}

void PopedomNodeList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PopedomNodeList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PopedomNodeList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PopedomNodeList_descriptor_;
}

const PopedomNodeList& PopedomNodeList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_popedom_2eproto();  return *default_instance_;
}

PopedomNodeList* PopedomNodeList::default_instance_ = NULL;

PopedomNodeList* PopedomNodeList::New() const {
  return new PopedomNodeList;
}

void PopedomNodeList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PopedomNodeList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .isafetec.PopedomInfoNode list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PopedomNodeList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .isafetec.PopedomInfoNode list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PopedomNodeList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .isafetec.PopedomInfoNode list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PopedomNodeList::ByteSize() const {
  int total_size = 0;
  
  // repeated .isafetec.PopedomInfoNode list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PopedomNodeList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PopedomNodeList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PopedomNodeList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PopedomNodeList::MergeFrom(const PopedomNodeList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PopedomNodeList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PopedomNodeList::CopyFrom(const PopedomNodeList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PopedomNodeList::IsInitialized() const {
  
  return true;
}

void PopedomNodeList::Swap(PopedomNodeList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PopedomNodeList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PopedomNodeList_descriptor_;
  metadata.reflection = PopedomNodeList_reflection_;
  return metadata;
}

// PopedomInfo

// optional int32 id = 1;
inline bool PopedomInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PopedomInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PopedomInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PopedomInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PopedomInfo::id() const {
  return id_;
}
inline void PopedomInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 maintype = 2;
inline bool PopedomInfo::has_maintype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PopedomInfo::set_has_maintype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PopedomInfo::clear_has_maintype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PopedomInfo::clear_maintype() {
  maintype_ = 0;
  clear_has_maintype();
}
inline ::google::protobuf::int32 PopedomInfo::maintype() const {
  return maintype_;
}
inline void PopedomInfo::set_maintype(::google::protobuf::int32 value) {
  set_has_maintype();
  maintype_ = value;
}

// optional int32 type = 3;
inline bool PopedomInfo::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PopedomInfo::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PopedomInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PopedomInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 PopedomInfo::type() const {
  return type_;
}
inline void PopedomInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string typename = 4;
inline bool PopedomInfo::has_typename_() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PopedomInfo::set_has_typename_() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PopedomInfo::clear_has_typename_() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PopedomInfo::clear_typename_() {
  if (typename__ != &::google::protobuf::internal::kEmptyString) {
    typename__->clear();
  }
  clear_has_typename_();
}
inline const ::std::string& PopedomInfo::typename_() const {
  return *typename__;
}
inline void PopedomInfo::set_typename_(const ::std::string& value) {
  set_has_typename_();
  if (typename__ == &::google::protobuf::internal::kEmptyString) {
    typename__ = new ::std::string;
  }
  typename__->assign(value);
}
inline void PopedomInfo::set_typename_(const char* value) {
  set_has_typename_();
  if (typename__ == &::google::protobuf::internal::kEmptyString) {
    typename__ = new ::std::string;
  }
  typename__->assign(value);
}
inline void PopedomInfo::set_typename_(const char* value, size_t size) {
  set_has_typename_();
  if (typename__ == &::google::protobuf::internal::kEmptyString) {
    typename__ = new ::std::string;
  }
  typename__->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PopedomInfo::mutable_typename_() {
  set_has_typename_();
  if (typename__ == &::google::protobuf::internal::kEmptyString) {
    typename__ = new ::std::string;
  }
  return typename__;
}
inline ::std::string* PopedomInfo::release_typename_() {
  clear_has_typename_();
  if (typename__ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = typename__;
    typename__ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string iconpath = 5;
inline bool PopedomInfo::has_iconpath() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PopedomInfo::set_has_iconpath() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PopedomInfo::clear_has_iconpath() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PopedomInfo::clear_iconpath() {
  if (iconpath_ != &::google::protobuf::internal::kEmptyString) {
    iconpath_->clear();
  }
  clear_has_iconpath();
}
inline const ::std::string& PopedomInfo::iconpath() const {
  return *iconpath_;
}
inline void PopedomInfo::set_iconpath(const ::std::string& value) {
  set_has_iconpath();
  if (iconpath_ == &::google::protobuf::internal::kEmptyString) {
    iconpath_ = new ::std::string;
  }
  iconpath_->assign(value);
}
inline void PopedomInfo::set_iconpath(const char* value) {
  set_has_iconpath();
  if (iconpath_ == &::google::protobuf::internal::kEmptyString) {
    iconpath_ = new ::std::string;
  }
  iconpath_->assign(value);
}
inline void PopedomInfo::set_iconpath(const char* value, size_t size) {
  set_has_iconpath();
  if (iconpath_ == &::google::protobuf::internal::kEmptyString) {
    iconpath_ = new ::std::string;
  }
  iconpath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PopedomInfo::mutable_iconpath() {
  set_has_iconpath();
  if (iconpath_ == &::google::protobuf::internal::kEmptyString) {
    iconpath_ = new ::std::string;
  }
  return iconpath_;
}
inline ::std::string* PopedomInfo::release_iconpath() {
  clear_has_iconpath();
  if (iconpath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = iconpath_;
    iconpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 attributetype = 6;
inline bool PopedomInfo::has_attributetype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PopedomInfo::set_has_attributetype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PopedomInfo::clear_has_attributetype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PopedomInfo::clear_attributetype() {
  attributetype_ = 0;
  clear_has_attributetype();
}
inline ::google::protobuf::int32 PopedomInfo::attributetype() const {
  return attributetype_;
}
inline void PopedomInfo::set_attributetype(::google::protobuf::int32 value) {
  set_has_attributetype();
  attributetype_ = value;
}

// optional int32 menushow = 7;
inline bool PopedomInfo::has_menushow() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PopedomInfo::set_has_menushow() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PopedomInfo::clear_has_menushow() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PopedomInfo::clear_menushow() {
  menushow_ = 0;
  clear_has_menushow();
}
inline ::google::protobuf::int32 PopedomInfo::menushow() const {
  return menushow_;
}
inline void PopedomInfo::set_menushow(::google::protobuf::int32 value) {
  set_has_menushow();
  menushow_ = value;
}

// optional int32 menuindex = 8;
inline bool PopedomInfo::has_menuindex() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PopedomInfo::set_has_menuindex() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PopedomInfo::clear_has_menuindex() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PopedomInfo::clear_menuindex() {
  menuindex_ = 0;
  clear_has_menuindex();
}
inline ::google::protobuf::int32 PopedomInfo::menuindex() const {
  return menuindex_;
}
inline void PopedomInfo::set_menuindex(::google::protobuf::int32 value) {
  set_has_menuindex();
  menuindex_ = value;
}

// -------------------------------------------------------------------

// PopedomInfoList

// repeated .isafetec.PopedomInfo list = 1;
inline int PopedomInfoList::list_size() const {
  return list_.size();
}
inline void PopedomInfoList::clear_list() {
  list_.Clear();
}
inline const ::isafetec::PopedomInfo& PopedomInfoList::list(int index) const {
  return list_.Get(index);
}
inline ::isafetec::PopedomInfo* PopedomInfoList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::isafetec::PopedomInfo* PopedomInfoList::list_ReleaseAt(int index) {
  return list_.ReleaseAt(index);
}
inline void PopedomInfoList::list_RemoveAt(int index) {
  list_.RemoveAt(index);
}
inline ::isafetec::PopedomInfo* PopedomInfoList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::PopedomInfo >&
PopedomInfoList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::PopedomInfo >*
PopedomInfoList::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// PopedomInfoNode

// optional int32 id = 1;
inline bool PopedomInfoNode::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PopedomInfoNode::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PopedomInfoNode::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PopedomInfoNode::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PopedomInfoNode::id() const {
  return id_;
}
inline void PopedomInfoNode::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 maintype = 2;
inline bool PopedomInfoNode::has_maintype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PopedomInfoNode::set_has_maintype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PopedomInfoNode::clear_has_maintype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PopedomInfoNode::clear_maintype() {
  maintype_ = 0;
  clear_has_maintype();
}
inline ::google::protobuf::int32 PopedomInfoNode::maintype() const {
  return maintype_;
}
inline void PopedomInfoNode::set_maintype(::google::protobuf::int32 value) {
  set_has_maintype();
  maintype_ = value;
}

// optional string mainname = 3;
inline bool PopedomInfoNode::has_mainname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PopedomInfoNode::set_has_mainname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PopedomInfoNode::clear_has_mainname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PopedomInfoNode::clear_mainname() {
  if (mainname_ != &::google::protobuf::internal::kEmptyString) {
    mainname_->clear();
  }
  clear_has_mainname();
}
inline const ::std::string& PopedomInfoNode::mainname() const {
  return *mainname_;
}
inline void PopedomInfoNode::set_mainname(const ::std::string& value) {
  set_has_mainname();
  if (mainname_ == &::google::protobuf::internal::kEmptyString) {
    mainname_ = new ::std::string;
  }
  mainname_->assign(value);
}
inline void PopedomInfoNode::set_mainname(const char* value) {
  set_has_mainname();
  if (mainname_ == &::google::protobuf::internal::kEmptyString) {
    mainname_ = new ::std::string;
  }
  mainname_->assign(value);
}
inline void PopedomInfoNode::set_mainname(const char* value, size_t size) {
  set_has_mainname();
  if (mainname_ == &::google::protobuf::internal::kEmptyString) {
    mainname_ = new ::std::string;
  }
  mainname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PopedomInfoNode::mutable_mainname() {
  set_has_mainname();
  if (mainname_ == &::google::protobuf::internal::kEmptyString) {
    mainname_ = new ::std::string;
  }
  return mainname_;
}
inline ::std::string* PopedomInfoNode::release_mainname() {
  clear_has_mainname();
  if (mainname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mainname_;
    mainname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string mainiconpath = 4;
inline bool PopedomInfoNode::has_mainiconpath() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PopedomInfoNode::set_has_mainiconpath() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PopedomInfoNode::clear_has_mainiconpath() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PopedomInfoNode::clear_mainiconpath() {
  if (mainiconpath_ != &::google::protobuf::internal::kEmptyString) {
    mainiconpath_->clear();
  }
  clear_has_mainiconpath();
}
inline const ::std::string& PopedomInfoNode::mainiconpath() const {
  return *mainiconpath_;
}
inline void PopedomInfoNode::set_mainiconpath(const ::std::string& value) {
  set_has_mainiconpath();
  if (mainiconpath_ == &::google::protobuf::internal::kEmptyString) {
    mainiconpath_ = new ::std::string;
  }
  mainiconpath_->assign(value);
}
inline void PopedomInfoNode::set_mainiconpath(const char* value) {
  set_has_mainiconpath();
  if (mainiconpath_ == &::google::protobuf::internal::kEmptyString) {
    mainiconpath_ = new ::std::string;
  }
  mainiconpath_->assign(value);
}
inline void PopedomInfoNode::set_mainiconpath(const char* value, size_t size) {
  set_has_mainiconpath();
  if (mainiconpath_ == &::google::protobuf::internal::kEmptyString) {
    mainiconpath_ = new ::std::string;
  }
  mainiconpath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PopedomInfoNode::mutable_mainiconpath() {
  set_has_mainiconpath();
  if (mainiconpath_ == &::google::protobuf::internal::kEmptyString) {
    mainiconpath_ = new ::std::string;
  }
  return mainiconpath_;
}
inline ::std::string* PopedomInfoNode::release_mainiconpath() {
  clear_has_mainiconpath();
  if (mainiconpath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mainiconpath_;
    mainiconpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .isafetec.PopedomInfoList list = 5;
inline bool PopedomInfoNode::has_list() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PopedomInfoNode::set_has_list() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PopedomInfoNode::clear_has_list() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PopedomInfoNode::clear_list() {
  if (list_ != NULL) list_->::isafetec::PopedomInfoList::Clear();
  clear_has_list();
}
inline const ::isafetec::PopedomInfoList& PopedomInfoNode::list() const {
  return list_ != NULL ? *list_ : *default_instance_->list_;
}
inline ::isafetec::PopedomInfoList* PopedomInfoNode::mutable_list() {
  set_has_list();
  if (list_ == NULL) list_ = new ::isafetec::PopedomInfoList;
  return list_;
}
inline ::isafetec::PopedomInfoList* PopedomInfoNode::release_list() {
  clear_has_list();
  ::isafetec::PopedomInfoList* temp = list_;
  list_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PopedomNodeList

// repeated .isafetec.PopedomInfoNode list = 1;
inline int PopedomNodeList::list_size() const {
  return list_.size();
}
inline void PopedomNodeList::clear_list() {
  list_.Clear();
}
inline const ::isafetec::PopedomInfoNode& PopedomNodeList::list(int index) const {
  return list_.Get(index);
}
inline ::isafetec::PopedomInfoNode* PopedomNodeList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::isafetec::PopedomInfoNode* PopedomNodeList::list_ReleaseAt(int index) {
  return list_.ReleaseAt(index);
}
inline void PopedomNodeList::list_RemoveAt(int index) {
  list_.RemoveAt(index);
}
inline ::isafetec::PopedomInfoNode* PopedomNodeList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::PopedomInfoNode >&
PopedomNodeList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::PopedomInfoNode >*
PopedomNodeList::mutable_list() {
  return &list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace isafetec

// @@protoc_insertion_point(global_scope)
