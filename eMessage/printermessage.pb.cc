// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "printermessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace isafetec {

namespace {

const ::google::protobuf::Descriptor* PrintSecPolicy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrintSecPolicy_reflection_ = NULL;
const ::google::protobuf::Descriptor* JobSubmitCtrl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JobSubmitCtrl_reflection_ = NULL;
const ::google::protobuf::Descriptor* JobFilterPolciy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JobFilterPolciy_reflection_ = NULL;
const ::google::protobuf::Descriptor* JobAuditProcess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JobAuditProcess_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubmitPrintJob_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubmitPrintJob_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubmitPrintJobList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubmitPrintJobList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtSationReqPrintJob_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtSationReqPrintJob_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtSationReqPrintJobList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtSationReqPrintJobList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtSationReqPrintHistoryJob_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtSationReqPrintHistoryJob_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtSationReqPrintHistoryJobList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtSationReqPrintHistoryJobList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtStationLogon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtStationLogon_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtStationUserAccount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtStationUserAccount_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtStationPrice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtStationPrice_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtStationPriceStep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtStationPriceStep_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtStationPriceStepList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtStationPriceStepList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtCopyPrice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtCopyPrice_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtCopyPriceStep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtCopyPriceStep_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtCopyPriceStepList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtCopyPriceStepList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtScanPrice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtScanPrice_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtScanPriceStep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtScanPriceStep_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtScanPriceStepList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtScanPriceStepList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtStationCheckUserResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtStationCheckUserResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtStationChargeErr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtStationChargeErr_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtStationInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtStationInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AutoAddPrtStationInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AutoAddPrtStationInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrintProjectSampleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrintProjectSampleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrintStationSampleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrintStationSampleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrintJobSecTypeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrintJobSecTypeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrintCtlReqInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrintCtlReqInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrintCltLogon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrintCltLogon_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrintCltLoginVerifyCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrintCltLoginVerifyCode_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrintCltCheckUserResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrintCltCheckUserResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrintCtrlPolicy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrintCtrlPolicy_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtOrderCmpltInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtOrderCmpltInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RechargeFromCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RechargeFromCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* RechargeFromCardErr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RechargeFromCardErr_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtChargeResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtChargeResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtCopyCharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtCopyCharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtScanCharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtScanCharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtStationCharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtStationCharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtStationChargeOnEveryPage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtStationChargeOnEveryPage_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtStationAlarm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtStationAlarm_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtChargeToolLogon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtChargeToolLogon_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtChargeToolCheckResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtChargeToolCheckResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtChargeToolOPLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtChargeToolOPLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtUserSelfChargeOPLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtUserSelfChargeOPLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtUserSelfChargeOpLogACK_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtUserSelfChargeOpLogACK_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtAdminInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtAdminInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtAdminInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtAdminInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrintDocumentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrintDocumentInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FtpConfigInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FtpConfigInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CFuncPolicy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CFuncPolicy_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtCenterSvr_UserPrintReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtCenterSvr_UserPrintReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdjustPrintCountInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdjustPrintCountInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScanToMailAddrList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScanToMailAddrList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtTranscriptIToolLogon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtTranscriptIToolLogon_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtTranscriptIToolCheckResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtTranscriptIToolCheckResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtDbConfigInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtDbConfigInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqChargePrintTicket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqChargePrintTicket_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChargePrintTicket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChargePrintTicket_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrintLimitPolicy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrintLimitPolicy_reflection_ = NULL;
const ::google::protobuf::Descriptor* CopyLimitPolicy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CopyLimitPolicy_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScanLimitPolicy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScanLimitPolicy_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrinterMeterLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrinterMeterLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrinterShareInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrinterShareInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Job_Op_State_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Printer_Paper_Source_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Print_Job_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* JOB_STORAGE_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* JOB_PRICE_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ScanChargeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* JOb_CHECK_BY_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* JOB_CHECK_FAILURE_ACTION_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* JOB_SUBMIT_MODE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* JOB_PRINT_MODE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* JOB_FILTER_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PRT_REQ_JOB_BY_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SUBMIT_JOB_STATE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CHARGE_FOR_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PRINT_POLICY_MASK_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* COPY_POLICY_MASK_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SCAN_POLICY_MASK_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FAX_POLICY_MASK_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PrtDbType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* JOB_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* JOB_LIMIT_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* JOB_LIMIT_PERIOD_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_printermessage_2eproto() {
  protobuf_AddDesc_printermessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "printermessage.proto");
  GOOGLE_CHECK(file != NULL);
  PrintSecPolicy_descriptor_ = file->message_type(0);
  static const int PrintSecPolicy_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintSecPolicy, active_footer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintSecPolicy, active_header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintSecPolicy, active_watermark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintSecPolicy, footer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintSecPolicy, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintSecPolicy, watermark_),
  };
  PrintSecPolicy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrintSecPolicy_descriptor_,
      PrintSecPolicy::default_instance_,
      PrintSecPolicy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintSecPolicy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintSecPolicy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrintSecPolicy));
  JobSubmitCtrl_descriptor_ = file->message_type(1);
  static const int JobSubmitCtrl_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobSubmitCtrl, max_page_each_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobSubmitCtrl, max_size_each_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobSubmitCtrl, max_size_all_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobSubmitCtrl, cur_all_size_),
  };
  JobSubmitCtrl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JobSubmitCtrl_descriptor_,
      JobSubmitCtrl::default_instance_,
      JobSubmitCtrl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobSubmitCtrl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobSubmitCtrl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JobSubmitCtrl));
  JobFilterPolciy_descriptor_ = file->message_type(2);
  static const int JobFilterPolciy_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobFilterPolciy, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobFilterPolciy, key_word_),
  };
  JobFilterPolciy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JobFilterPolciy_descriptor_,
      JobFilterPolciy::default_instance_,
      JobFilterPolciy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobFilterPolciy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobFilterPolciy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JobFilterPolciy));
  JobAuditProcess_descriptor_ = file->message_type(3);
  static const int JobAuditProcess_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobAuditProcess, check_by_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobAuditProcess, admin_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobAuditProcess, flt_policy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobAuditProcess, next_action_),
  };
  JobAuditProcess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JobAuditProcess_descriptor_,
      JobAuditProcess::default_instance_,
      JobAuditProcess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobAuditProcess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobAuditProcess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JobAuditProcess));
  SubmitPrintJob_descriptor_ = file->message_type(4);
  static const int SubmitPrintJob_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitPrintJob, equip_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitPrintJob, equip_host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitPrintJob, win_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitPrintJob, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitPrintJob, job_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitPrintJob, paper_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitPrintJob, page_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitPrintJob, copies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitPrintJob, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitPrintJob, total_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitPrintJob, orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitPrintJob, double_print_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitPrintJob, doc_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitPrintJob, printer_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitPrintJob, submit_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitPrintJob, doc_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitPrintJob, zip_job_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitPrintJob, job_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitPrintJob, job_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitPrintJob, project_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitPrintJob, order_prtstation_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitPrintJob, direct_prtstation_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitPrintJob, sec_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitPrintJob, paper_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitPrintJob, image_use_physical_area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitPrintJob, collate_),
  };
  SubmitPrintJob_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubmitPrintJob_descriptor_,
      SubmitPrintJob::default_instance_,
      SubmitPrintJob_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitPrintJob, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitPrintJob, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubmitPrintJob));
  SubmitPrintJobList_descriptor_ = file->message_type(5);
  static const int SubmitPrintJobList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitPrintJobList, list_),
  };
  SubmitPrintJobList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubmitPrintJobList_descriptor_,
      SubmitPrintJobList::default_instance_,
      SubmitPrintJobList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitPrintJobList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitPrintJobList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubmitPrintJobList));
  PrtSationReqPrintJob_descriptor_ = file->message_type(6);
  static const int PrtSationReqPrintJob_offsets_[35] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintJob, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintJob, job_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintJob, job_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintJob, submit_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintJob, job_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintJob, zip_job_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintJob, doc_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintJob, paper_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintJob, page_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintJob, copies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintJob, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintJob, total_page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintJob, orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintJob, double_print_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintJob, equip_host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintJob, win_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintJob, equip_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintJob, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintJob, job_req_by_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintJob, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintJob, left_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintJob, special_left_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintJob, price_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintJob, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintJob, project_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintJob, project_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintJob, sec_policy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintJob, printed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintJob, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintJob, printed_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintJob, paper_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintJob, print_job_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintJob, print_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintJob, print_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintJob, tiff_use_physical_area_),
  };
  PrtSationReqPrintJob_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtSationReqPrintJob_descriptor_,
      PrtSationReqPrintJob::default_instance_,
      PrtSationReqPrintJob_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintJob, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintJob, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtSationReqPrintJob));
  PrtSationReqPrintJobList_descriptor_ = file->message_type(7);
  static const int PrtSationReqPrintJobList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintJobList, list_),
  };
  PrtSationReqPrintJobList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtSationReqPrintJobList_descriptor_,
      PrtSationReqPrintJobList::default_instance_,
      PrtSationReqPrintJobList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintJobList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintJobList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtSationReqPrintJobList));
  PrtSationReqPrintHistoryJob_descriptor_ = file->message_type(8);
  static const int PrtSationReqPrintHistoryJob_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintHistoryJob, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintHistoryJob, job_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintHistoryJob, job_file_deleted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintHistoryJob, job_last_print_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintHistoryJob, job_delete_time_),
  };
  PrtSationReqPrintHistoryJob_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtSationReqPrintHistoryJob_descriptor_,
      PrtSationReqPrintHistoryJob::default_instance_,
      PrtSationReqPrintHistoryJob_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintHistoryJob, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintHistoryJob, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtSationReqPrintHistoryJob));
  PrtSationReqPrintHistoryJobList_descriptor_ = file->message_type(9);
  static const int PrtSationReqPrintHistoryJobList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintHistoryJobList, list_),
  };
  PrtSationReqPrintHistoryJobList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtSationReqPrintHistoryJobList_descriptor_,
      PrtSationReqPrintHistoryJobList::default_instance_,
      PrtSationReqPrintHistoryJobList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintHistoryJobList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtSationReqPrintHistoryJobList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtSationReqPrintHistoryJobList));
  CardInfo_descriptor_ = file->message_type(10);
  static const int CardInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, dep_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, left_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, pwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, id_card_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, citizen_card_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, mobile_no_),
  };
  CardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CardInfo_descriptor_,
      CardInfo::default_instance_,
      CardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CardInfo));
  PrtStationLogon_descriptor_ = file->message_type(11);
  static const int PrtStationLogon_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationLogon, ptr_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationLogon, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationLogon, pwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationLogon, audit_ok_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationLogon, card_),
  };
  PrtStationLogon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtStationLogon_descriptor_,
      PrtStationLogon::default_instance_,
      PrtStationLogon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationLogon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationLogon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtStationLogon));
  PrtStationUserAccount_descriptor_ = file->message_type(12);
  static const int PrtStationUserAccount_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationUserAccount, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationUserAccount, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationUserAccount, left_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationUserAccount, special_left_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationUserAccount, account_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationUserAccount, real_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationUserAccount, card_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationUserAccount, id_card_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationUserAccount, citizen_card_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationUserAccount, mobile_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationUserAccount, dep_name_),
  };
  PrtStationUserAccount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtStationUserAccount_descriptor_,
      PrtStationUserAccount::default_instance_,
      PrtStationUserAccount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationUserAccount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationUserAccount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtStationUserAccount));
  PrtStationPrice_descriptor_ = file->message_type(13);
  static const int PrtStationPrice_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationPrice, price_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationPrice, a3_hb_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationPrice, a3_color_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationPrice, a4_hb_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationPrice, a4_color_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationPrice, a3_hb_price_duplex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationPrice, a3_color_price_duplex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationPrice, a4_hb_price_duplex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationPrice, a4_color_price_duplex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationPrice, issupportprintduplexprice_),
  };
  PrtStationPrice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtStationPrice_descriptor_,
      PrtStationPrice::default_instance_,
      PrtStationPrice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationPrice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationPrice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtStationPrice));
  PrtStationPriceStep_descriptor_ = file->message_type(14);
  static const int PrtStationPriceStep_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationPriceStep, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationPriceStep, pricedesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationPriceStep, pagemin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationPriceStep, pagemax_),
  };
  PrtStationPriceStep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtStationPriceStep_descriptor_,
      PrtStationPriceStep::default_instance_,
      PrtStationPriceStep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationPriceStep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationPriceStep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtStationPriceStep));
  PrtStationPriceStepList_descriptor_ = file->message_type(15);
  static const int PrtStationPriceStepList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationPriceStepList, list_),
  };
  PrtStationPriceStepList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtStationPriceStepList_descriptor_,
      PrtStationPriceStepList::default_instance_,
      PrtStationPriceStepList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationPriceStepList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationPriceStepList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtStationPriceStepList));
  PrtCopyPrice_descriptor_ = file->message_type(16);
  static const int PrtCopyPrice_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCopyPrice, price_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCopyPrice, a3_hb_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCopyPrice, a3_color_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCopyPrice, a4_hb_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCopyPrice, a4_color_price_),
  };
  PrtCopyPrice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtCopyPrice_descriptor_,
      PrtCopyPrice::default_instance_,
      PrtCopyPrice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCopyPrice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCopyPrice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtCopyPrice));
  PrtCopyPriceStep_descriptor_ = file->message_type(17);
  static const int PrtCopyPriceStep_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCopyPriceStep, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCopyPriceStep, pricedesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCopyPriceStep, pagemin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCopyPriceStep, pagemax_),
  };
  PrtCopyPriceStep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtCopyPriceStep_descriptor_,
      PrtCopyPriceStep::default_instance_,
      PrtCopyPriceStep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCopyPriceStep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCopyPriceStep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtCopyPriceStep));
  PrtCopyPriceStepList_descriptor_ = file->message_type(18);
  static const int PrtCopyPriceStepList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCopyPriceStepList, list_),
  };
  PrtCopyPriceStepList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtCopyPriceStepList_descriptor_,
      PrtCopyPriceStepList::default_instance_,
      PrtCopyPriceStepList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCopyPriceStepList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCopyPriceStepList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtCopyPriceStepList));
  PrtScanPrice_descriptor_ = file->message_type(19);
  static const int PrtScanPrice_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtScanPrice, price_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtScanPrice, hb_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtScanPrice, color_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtScanPrice, unit_),
  };
  PrtScanPrice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtScanPrice_descriptor_,
      PrtScanPrice::default_instance_,
      PrtScanPrice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtScanPrice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtScanPrice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtScanPrice));
  PrtScanPriceStep_descriptor_ = file->message_type(20);
  static const int PrtScanPriceStep_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtScanPriceStep, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtScanPriceStep, pricedesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtScanPriceStep, pagemin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtScanPriceStep, pagemax_),
  };
  PrtScanPriceStep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtScanPriceStep_descriptor_,
      PrtScanPriceStep::default_instance_,
      PrtScanPriceStep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtScanPriceStep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtScanPriceStep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtScanPriceStep));
  PrtScanPriceStepList_descriptor_ = file->message_type(21);
  static const int PrtScanPriceStepList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtScanPriceStepList, list_),
  };
  PrtScanPriceStepList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtScanPriceStepList_descriptor_,
      PrtScanPriceStepList::default_instance_,
      PrtScanPriceStepList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtScanPriceStepList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtScanPriceStepList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtScanPriceStepList));
  PrtStationCheckUserResult_descriptor_ = file->message_type(22);
  static const int PrtStationCheckUserResult_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationCheckUserResult, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationCheckUserResult, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationCheckUserResult, copy_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationCheckUserResult, scan_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationCheckUserResult, prt_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationCheckUserResult, print_price_step_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationCheckUserResult, copy_price_step_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationCheckUserResult, scan_price_step_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationCheckUserResult, print_limit_policy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationCheckUserResult, copy_limit_policy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationCheckUserResult, scan_limit_policy_),
  };
  PrtStationCheckUserResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtStationCheckUserResult_descriptor_,
      PrtStationCheckUserResult::default_instance_,
      PrtStationCheckUserResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationCheckUserResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationCheckUserResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtStationCheckUserResult));
  PrtStationChargeErr_descriptor_ = file->message_type(23);
  static const int PrtStationChargeErr_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationChargeErr, job_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationChargeErr, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationChargeErr, need_update_job_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationChargeErr, job_new_state_),
  };
  PrtStationChargeErr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtStationChargeErr_descriptor_,
      PrtStationChargeErr::default_instance_,
      PrtStationChargeErr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationChargeErr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationChargeErr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtStationChargeErr));
  PrtStationInfo_descriptor_ = file->message_type(24);
  static const int PrtStationInfo_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationInfo, allow_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationInfo, check_order_internal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationInfo, allow_direct_print_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationInfo, check_direct_job_internal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationInfo, on_server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationInfo, printer_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationInfo, fun_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationInfo, support_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationInfo, begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationInfo, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationInfo, prt_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationInfo, support_duplex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationInfo, print_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationInfo, copy_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationInfo, scan_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationInfo, printer_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationInfo, print_station_ip_),
  };
  PrtStationInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtStationInfo_descriptor_,
      PrtStationInfo::default_instance_,
      PrtStationInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtStationInfo));
  AutoAddPrtStationInfo_descriptor_ = file->message_type(25);
  static const int AutoAddPrtStationInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAddPrtStationInfo, printer_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAddPrtStationInfo, printer_resolution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAddPrtStationInfo, printer_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAddPrtStationInfo, printer_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAddPrtStationInfo, prt_station_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAddPrtStationInfo, prt_station_comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAddPrtStationInfo, a3_hb_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAddPrtStationInfo, a3_color_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAddPrtStationInfo, a4_hb_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAddPrtStationInfo, a4_color_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAddPrtStationInfo, printer_ip_),
  };
  AutoAddPrtStationInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AutoAddPrtStationInfo_descriptor_,
      AutoAddPrtStationInfo::default_instance_,
      AutoAddPrtStationInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAddPrtStationInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutoAddPrtStationInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AutoAddPrtStationInfo));
  PrintProjectSampleInfo_descriptor_ = file->message_type(26);
  static const int PrintProjectSampleInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintProjectSampleInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintProjectSampleInfo, name_),
  };
  PrintProjectSampleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrintProjectSampleInfo_descriptor_,
      PrintProjectSampleInfo::default_instance_,
      PrintProjectSampleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintProjectSampleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintProjectSampleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrintProjectSampleInfo));
  PrintStationSampleInfo_descriptor_ = file->message_type(27);
  static const int PrintStationSampleInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintStationSampleInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintStationSampleInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintStationSampleInfo, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintStationSampleInfo, comment_),
  };
  PrintStationSampleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrintStationSampleInfo_descriptor_,
      PrintStationSampleInfo::default_instance_,
      PrintStationSampleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintStationSampleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintStationSampleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrintStationSampleInfo));
  PrintJobSecTypeInfo_descriptor_ = file->message_type(28);
  static const int PrintJobSecTypeInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintJobSecTypeInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintJobSecTypeInfo, desc_),
  };
  PrintJobSecTypeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrintJobSecTypeInfo_descriptor_,
      PrintJobSecTypeInfo::default_instance_,
      PrintJobSecTypeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintJobSecTypeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintJobSecTypeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrintJobSecTypeInfo));
  PrintCtlReqInfo_descriptor_ = file->message_type(29);
  static const int PrintCtlReqInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCtlReqInfo, order_print_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCtlReqInfo, project_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCtlReqInfo, direct_print_list_),
  };
  PrintCtlReqInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrintCtlReqInfo_descriptor_,
      PrintCtlReqInfo::default_instance_,
      PrintCtlReqInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCtlReqInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCtlReqInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrintCtlReqInfo));
  PrintCltLogon_descriptor_ = file->message_type(30);
  static const int PrintCltLogon_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCltLogon, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCltLogon, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCltLogon, pwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCltLogon, project_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCltLogon, print_station_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCltLogon, order_station_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCltLogon, job_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCltLogon, page_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCltLogon, page_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCltLogon, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCltLogon, job_size_),
  };
  PrintCltLogon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrintCltLogon_descriptor_,
      PrintCltLogon::default_instance_,
      PrintCltLogon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCltLogon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCltLogon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrintCltLogon));
  PrintCltLoginVerifyCode_descriptor_ = file->message_type(31);
  static const int PrintCltLoginVerifyCode_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCltLoginVerifyCode, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCltLoginVerifyCode, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCltLoginVerifyCode, logintype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCltLoginVerifyCode, verifycode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCltLoginVerifyCode, job_id_),
  };
  PrintCltLoginVerifyCode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrintCltLoginVerifyCode_descriptor_,
      PrintCltLoginVerifyCode::default_instance_,
      PrintCltLoginVerifyCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCltLoginVerifyCode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCltLoginVerifyCode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrintCltLoginVerifyCode));
  PrintCltCheckUserResult_descriptor_ = file->message_type(32);
  static const int PrintCltCheckUserResult_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCltCheckUserResult, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCltCheckUserResult, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCltCheckUserResult, left_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCltCheckUserResult, special_left_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCltCheckUserResult, a3_quota_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCltCheckUserResult, a4_quota_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCltCheckUserResult, period_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCltCheckUserResult, a3_printed_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCltCheckUserResult, a4_printed_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCltCheckUserResult, project_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCltCheckUserResult, print_station_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCltCheckUserResult, order_station_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCltCheckUserResult, job_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCltCheckUserResult, filter_),
  };
  PrintCltCheckUserResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrintCltCheckUserResult_descriptor_,
      PrintCltCheckUserResult::default_instance_,
      PrintCltCheckUserResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCltCheckUserResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCltCheckUserResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrintCltCheckUserResult));
  PrintCtrlPolicy_descriptor_ = file->message_type(33);
  static const int PrintCtrlPolicy_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCtrlPolicy, submit_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCtrlPolicy, print_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCtrlPolicy, prt_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCtrlPolicy, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCtrlPolicy, enable_doc_log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCtrlPolicy, doc_type_),
  };
  PrintCtrlPolicy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrintCtrlPolicy_descriptor_,
      PrintCtrlPolicy::default_instance_,
      PrintCtrlPolicy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCtrlPolicy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintCtrlPolicy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrintCtrlPolicy));
  PrtOrderCmpltInfo_descriptor_ = file->message_type(34);
  static const int PrtOrderCmpltInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtOrderCmpltInfo, prt_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtOrderCmpltInfo, job_id_),
  };
  PrtOrderCmpltInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtOrderCmpltInfo_descriptor_,
      PrtOrderCmpltInfo::default_instance_,
      PrtOrderCmpltInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtOrderCmpltInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtOrderCmpltInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtOrderCmpltInfo));
  RechargeFromCard_descriptor_ = file->message_type(35);
  static const int RechargeFromCard_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeFromCard, prt_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeFromCard, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeFromCard, card_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeFromCard, left_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeFromCard, should_spend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeFromCard, recharge_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeFromCard, recharge_for_),
  };
  RechargeFromCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RechargeFromCard_descriptor_,
      RechargeFromCard::default_instance_,
      RechargeFromCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeFromCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeFromCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RechargeFromCard));
  RechargeFromCardErr_descriptor_ = file->message_type(36);
  static const int RechargeFromCardErr_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeFromCardErr, prt_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeFromCardErr, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeFromCardErr, card_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeFromCardErr, err_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeFromCardErr, should_spend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeFromCardErr, recharge_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeFromCardErr, recharge_for_),
  };
  RechargeFromCardErr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RechargeFromCardErr_descriptor_,
      RechargeFromCardErr::default_instance_,
      RechargeFromCardErr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeFromCardErr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeFromCardErr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RechargeFromCardErr));
  PrtChargeResult_descriptor_ = file->message_type(37);
  static const int PrtChargeResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtChargeResult, seed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtChargeResult, res_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtChargeResult, charge_for_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtChargeResult, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtChargeResult, file_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtChargeResult, other_info_),
  };
  PrtChargeResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtChargeResult_descriptor_,
      PrtChargeResult::default_instance_,
      PrtChargeResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtChargeResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtChargeResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtChargeResult));
  PrtCopyCharge_descriptor_ = file->message_type(38);
  static const int PrtCopyCharge_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCopyCharge, prt_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCopyCharge, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCopyCharge, price_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCopyCharge, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCopyCharge, page_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCopyCharge, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCopyCharge, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCopyCharge, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCopyCharge, should_spend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCopyCharge, real_spend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCopyCharge, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCopyCharge, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCopyCharge, seed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCopyCharge, job_id_),
  };
  PrtCopyCharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtCopyCharge_descriptor_,
      PrtCopyCharge::default_instance_,
      PrtCopyCharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCopyCharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCopyCharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtCopyCharge));
  PrtScanCharge_descriptor_ = file->message_type(39);
  static const int PrtScanCharge_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtScanCharge, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtScanCharge, prt_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtScanCharge, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtScanCharge, price_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtScanCharge, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtScanCharge, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtScanCharge, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtScanCharge, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtScanCharge, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtScanCharge, http_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtScanCharge, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtScanCharge, should_spend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtScanCharge, real_spend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtScanCharge, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtScanCharge, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtScanCharge, seed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtScanCharge, job_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtScanCharge, page_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtScanCharge, charge_type_),
  };
  PrtScanCharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtScanCharge_descriptor_,
      PrtScanCharge::default_instance_,
      PrtScanCharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtScanCharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtScanCharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtScanCharge));
  PrtStationCharge_descriptor_ = file->message_type(40);
  static const int PrtStationCharge_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationCharge, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationCharge, job_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationCharge, prt_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationCharge, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationCharge, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationCharge, page_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationCharge, price_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationCharge, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationCharge, total_page_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationCharge, printed_page_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationCharge, printed_copies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationCharge, printed_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationCharge, printed_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationCharge, should_spend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationCharge, real_spend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationCharge, printed_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationCharge, project_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationCharge, project_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationCharge, job_req_by_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationCharge, seed_),
  };
  PrtStationCharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtStationCharge_descriptor_,
      PrtStationCharge::default_instance_,
      PrtStationCharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationCharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationCharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtStationCharge));
  PrtStationChargeOnEveryPage_descriptor_ = file->message_type(41);
  static const int PrtStationChargeOnEveryPage_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationChargeOnEveryPage, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationChargeOnEveryPage, printed_page_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationChargeOnEveryPage, real_spend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationChargeOnEveryPage, all_printed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationChargeOnEveryPage, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationChargeOnEveryPage, job_req_by_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationChargeOnEveryPage, job_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationChargeOnEveryPage, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationChargeOnEveryPage, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationChargeOnEveryPage, seed_),
  };
  PrtStationChargeOnEveryPage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtStationChargeOnEveryPage_descriptor_,
      PrtStationChargeOnEveryPage::default_instance_,
      PrtStationChargeOnEveryPage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationChargeOnEveryPage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationChargeOnEveryPage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtStationChargeOnEveryPage));
  PrtStationAlarm_descriptor_ = file->message_type(42);
  static const int PrtStationAlarm_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationAlarm, prt_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationAlarm, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationAlarm, subject_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationAlarm, content_),
  };
  PrtStationAlarm_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtStationAlarm_descriptor_,
      PrtStationAlarm::default_instance_,
      PrtStationAlarm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationAlarm, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationAlarm, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtStationAlarm));
  PrtChargeToolLogon_descriptor_ = file->message_type(43);
  static const int PrtChargeToolLogon_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtChargeToolLogon, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtChargeToolLogon, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtChargeToolLogon, pwd_),
  };
  PrtChargeToolLogon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtChargeToolLogon_descriptor_,
      PrtChargeToolLogon::default_instance_,
      PrtChargeToolLogon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtChargeToolLogon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtChargeToolLogon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtChargeToolLogon));
  PrtChargeToolCheckResult_descriptor_ = file->message_type(44);
  static const int PrtChargeToolCheckResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtChargeToolCheckResult, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtChargeToolCheckResult, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtChargeToolCheckResult, pwd_),
  };
  PrtChargeToolCheckResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtChargeToolCheckResult_descriptor_,
      PrtChargeToolCheckResult::default_instance_,
      PrtChargeToolCheckResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtChargeToolCheckResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtChargeToolCheckResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtChargeToolCheckResult));
  PrtChargeToolOPLog_descriptor_ = file->message_type(45);
  static const int PrtChargeToolOPLog_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtChargeToolOPLog, admin_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtChargeToolOPLog, admin_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtChargeToolOPLog, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtChargeToolOPLog, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtChargeToolOPLog, specail_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtChargeToolOPLog, card_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtChargeToolOPLog, name_),
  };
  PrtChargeToolOPLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtChargeToolOPLog_descriptor_,
      PrtChargeToolOPLog::default_instance_,
      PrtChargeToolOPLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtChargeToolOPLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtChargeToolOPLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtChargeToolOPLog));
  PrtUserSelfChargeOPLog_descriptor_ = file->message_type(46);
  static const int PrtUserSelfChargeOPLog_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtUserSelfChargeOPLog, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtUserSelfChargeOPLog, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtUserSelfChargeOPLog, prt_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtUserSelfChargeOPLog, op_for_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtUserSelfChargeOPLog, reserve1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtUserSelfChargeOPLog, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtUserSelfChargeOPLog, specail_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtUserSelfChargeOPLog, card_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtUserSelfChargeOPLog, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtUserSelfChargeOPLog, time_),
  };
  PrtUserSelfChargeOPLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtUserSelfChargeOPLog_descriptor_,
      PrtUserSelfChargeOPLog::default_instance_,
      PrtUserSelfChargeOPLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtUserSelfChargeOPLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtUserSelfChargeOPLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtUserSelfChargeOPLog));
  PrtUserSelfChargeOpLogACK_descriptor_ = file->message_type(47);
  static const int PrtUserSelfChargeOpLogACK_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtUserSelfChargeOpLogACK, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtUserSelfChargeOpLogACK, prt_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtUserSelfChargeOpLogACK, res_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtUserSelfChargeOpLogACK, op_for_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtUserSelfChargeOpLogACK, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtUserSelfChargeOpLogACK, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtUserSelfChargeOpLogACK, time_),
  };
  PrtUserSelfChargeOpLogACK_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtUserSelfChargeOpLogACK_descriptor_,
      PrtUserSelfChargeOpLogACK::default_instance_,
      PrtUserSelfChargeOpLogACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtUserSelfChargeOpLogACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtUserSelfChargeOpLogACK, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtUserSelfChargeOpLogACK));
  PrtAdminInfo_descriptor_ = file->message_type(48);
  static const int PrtAdminInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtAdminInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtAdminInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtAdminInfo, realname_),
  };
  PrtAdminInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtAdminInfo_descriptor_,
      PrtAdminInfo::default_instance_,
      PrtAdminInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtAdminInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtAdminInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtAdminInfo));
  PrtAdminInfoList_descriptor_ = file->message_type(49);
  static const int PrtAdminInfoList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtAdminInfoList, list_),
  };
  PrtAdminInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtAdminInfoList_descriptor_,
      PrtAdminInfoList::default_instance_,
      PrtAdminInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtAdminInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtAdminInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtAdminInfoList));
  PrintDocumentInfo_descriptor_ = file->message_type(50);
  static const int PrintDocumentInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintDocumentInfo, equip_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintDocumentInfo, equip_host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintDocumentInfo, win_user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintDocumentInfo, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintDocumentInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintDocumentInfo, doc_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintDocumentInfo, printer_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintDocumentInfo, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintDocumentInfo, doc_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintDocumentInfo, zip_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintDocumentInfo, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintDocumentInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintDocumentInfo, orig_path_),
  };
  PrintDocumentInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrintDocumentInfo_descriptor_,
      PrintDocumentInfo::default_instance_,
      PrintDocumentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintDocumentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintDocumentInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrintDocumentInfo));
  FtpConfigInfo_descriptor_ = file->message_type(51);
  static const int FtpConfigInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FtpConfigInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FtpConfigInfo, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FtpConfigInfo, disk_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FtpConfigInfo, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FtpConfigInfo, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FtpConfigInfo, pwd_),
  };
  FtpConfigInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FtpConfigInfo_descriptor_,
      FtpConfigInfo::default_instance_,
      FtpConfigInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FtpConfigInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FtpConfigInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FtpConfigInfo));
  CFuncPolicy_descriptor_ = file->message_type(52);
  static const int CFuncPolicy_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFuncPolicy, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFuncPolicy, prtid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFuncPolicy, printpolicymask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFuncPolicy, copypolicymask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFuncPolicy, scanpolicymask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFuncPolicy, faxpolicymask_),
  };
  CFuncPolicy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CFuncPolicy_descriptor_,
      CFuncPolicy::default_instance_,
      CFuncPolicy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFuncPolicy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CFuncPolicy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CFuncPolicy));
  PrtCenterSvr_UserPrintReq_descriptor_ = file->message_type(53);
  static const int PrtCenterSvr_UserPrintReq_offsets_[39] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCenterSvr_UserPrintReq, prt_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCenterSvr_UserPrintReq, prt_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCenterSvr_UserPrintReq, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCenterSvr_UserPrintReq, doc_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCenterSvr_UserPrintReq, doc_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCenterSvr_UserPrintReq, page_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCenterSvr_UserPrintReq, page_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCenterSvr_UserPrintReq, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCenterSvr_UserPrintReq, job_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCenterSvr_UserPrintReq, job_id_sqllite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCenterSvr_UserPrintReq, jobid_ji2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCenterSvr_UserPrintReq, printername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCenterSvr_UserPrintReq, machinename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCenterSvr_UserPrintReq, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCenterSvr_UserPrintReq, doucment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCenterSvr_UserPrintReq, notifyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCenterSvr_UserPrintReq, datatype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCenterSvr_UserPrintReq, paramenters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCenterSvr_UserPrintReq, driver_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCenterSvr_UserPrintReq, device_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCenterSvr_UserPrintReq, pstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCenterSvr_UserPrintReq, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCenterSvr_UserPrintReq, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCenterSvr_UserPrintReq, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCenterSvr_UserPrintReq, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCenterSvr_UserPrintReq, untiltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCenterSvr_UserPrintReq, totalpages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCenterSvr_UserPrintReq, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCenterSvr_UserPrintReq, submitted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCenterSvr_UserPrintReq, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCenterSvr_UserPrintReq, pagesprinted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCenterSvr_UserPrintReq, spl_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCenterSvr_UserPrintReq, ret_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCenterSvr_UserPrintReq, ret_ack_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCenterSvr_UserPrintReq, paper_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCenterSvr_UserPrintReq, dm_copies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCenterSvr_UserPrintReq, dm_orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCenterSvr_UserPrintReq, double_print_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCenterSvr_UserPrintReq, submit_time_),
  };
  PrtCenterSvr_UserPrintReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtCenterSvr_UserPrintReq_descriptor_,
      PrtCenterSvr_UserPrintReq::default_instance_,
      PrtCenterSvr_UserPrintReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCenterSvr_UserPrintReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtCenterSvr_UserPrintReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtCenterSvr_UserPrintReq));
  AdjustPrintCountInfo_descriptor_ = file->message_type(54);
  static const int AdjustPrintCountInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdjustPrintCountInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdjustPrintCountInfo, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdjustPrintCountInfo, shouldprintedcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdjustPrintCountInfo, printedcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdjustPrintCountInfo, printerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdjustPrintCountInfo, oriprintjob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdjustPrintCountInfo, shouldspend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdjustPrintCountInfo, printedspend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdjustPrintCountInfo, jobid_),
  };
  AdjustPrintCountInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdjustPrintCountInfo_descriptor_,
      AdjustPrintCountInfo::default_instance_,
      AdjustPrintCountInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdjustPrintCountInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdjustPrintCountInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdjustPrintCountInfo));
  ScanToMailAddrList_descriptor_ = file->message_type(55);
  static const int ScanToMailAddrList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanToMailAddrList, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanToMailAddrList, mailaddress_),
  };
  ScanToMailAddrList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScanToMailAddrList_descriptor_,
      ScanToMailAddrList::default_instance_,
      ScanToMailAddrList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanToMailAddrList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanToMailAddrList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScanToMailAddrList));
  PrtTranscriptIToolLogon_descriptor_ = file->message_type(56);
  static const int PrtTranscriptIToolLogon_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtTranscriptIToolLogon, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtTranscriptIToolLogon, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtTranscriptIToolLogon, pwd_),
  };
  PrtTranscriptIToolLogon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtTranscriptIToolLogon_descriptor_,
      PrtTranscriptIToolLogon::default_instance_,
      PrtTranscriptIToolLogon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtTranscriptIToolLogon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtTranscriptIToolLogon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtTranscriptIToolLogon));
  PrtTranscriptIToolCheckResult_descriptor_ = file->message_type(57);
  static const int PrtTranscriptIToolCheckResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtTranscriptIToolCheckResult, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtTranscriptIToolCheckResult, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtTranscriptIToolCheckResult, pwd_),
  };
  PrtTranscriptIToolCheckResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtTranscriptIToolCheckResult_descriptor_,
      PrtTranscriptIToolCheckResult::default_instance_,
      PrtTranscriptIToolCheckResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtTranscriptIToolCheckResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtTranscriptIToolCheckResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtTranscriptIToolCheckResult));
  PrtDbConfigInfo_descriptor_ = file->message_type(58);
  static const int PrtDbConfigInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtDbConfigInfo, dbtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtDbConfigInfo, dbip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtDbConfigInfo, dbport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtDbConfigInfo, dbname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtDbConfigInfo, dbuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtDbConfigInfo, dbpwd_),
  };
  PrtDbConfigInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtDbConfigInfo_descriptor_,
      PrtDbConfigInfo::default_instance_,
      PrtDbConfigInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtDbConfigInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtDbConfigInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtDbConfigInfo));
  ReqChargePrintTicket_descriptor_ = file->message_type(59);
  static const int ReqChargePrintTicket_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChargePrintTicket, account_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChargePrintTicket, real_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChargePrintTicket, card_no_),
  };
  ReqChargePrintTicket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqChargePrintTicket_descriptor_,
      ReqChargePrintTicket::default_instance_,
      ReqChargePrintTicket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChargePrintTicket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqChargePrintTicket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqChargePrintTicket));
  ChargePrintTicket_descriptor_ = file->message_type(60);
  static const int ChargePrintTicket_offsets_[35] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrintTicket, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrintTicket, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrintTicket, left_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrintTicket, special_left_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrintTicket, account_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrintTicket, real_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrintTicket, card_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrintTicket, print_count_a4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrintTicket, print_count_a3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrintTicket, print_price_a4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrintTicket, print_price_a3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrintTicket, print_spend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrintTicket, copy_count_a4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrintTicket, copy_count_a3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrintTicket, copy_price_a4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrintTicket, copy_price_a3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrintTicket, copy_spend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrintTicket, scan_unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrintTicket, scan_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrintTicket, scan_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrintTicket, scan_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrintTicket, scan_spend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrintTicket, fax_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrintTicket, fax_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrintTicket, fax_spend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrintTicket, cash_pledge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrintTicket, cash_back_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrintTicket, other_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrintTicket, before_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrintTicket, after_money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrintTicket, purchase_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrintTicket, termid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrintTicket, verification_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrintTicket, ticket_printed_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrintTicket, ticket_log_id_),
  };
  ChargePrintTicket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChargePrintTicket_descriptor_,
      ChargePrintTicket::default_instance_,
      ChargePrintTicket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrintTicket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePrintTicket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChargePrintTicket));
  PrintLimitPolicy_descriptor_ = file->message_type(61);
  static const int PrintLimitPolicy_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintLimitPolicy, job_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintLimitPolicy, job_limit_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintLimitPolicy, job_limit_period_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintLimitPolicy, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintLimitPolicy, limitpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintLimitPolicy, haveoppage_),
  };
  PrintLimitPolicy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrintLimitPolicy_descriptor_,
      PrintLimitPolicy::default_instance_,
      PrintLimitPolicy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintLimitPolicy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrintLimitPolicy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrintLimitPolicy));
  CopyLimitPolicy_descriptor_ = file->message_type(62);
  static const int CopyLimitPolicy_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyLimitPolicy, job_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyLimitPolicy, job_limit_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyLimitPolicy, job_limit_period_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyLimitPolicy, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyLimitPolicy, limitpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyLimitPolicy, haveoppage_),
  };
  CopyLimitPolicy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CopyLimitPolicy_descriptor_,
      CopyLimitPolicy::default_instance_,
      CopyLimitPolicy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyLimitPolicy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CopyLimitPolicy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CopyLimitPolicy));
  ScanLimitPolicy_descriptor_ = file->message_type(63);
  static const int ScanLimitPolicy_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanLimitPolicy, job_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanLimitPolicy, job_limit_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanLimitPolicy, job_limit_period_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanLimitPolicy, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanLimitPolicy, limitpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanLimitPolicy, haveoppage_),
  };
  ScanLimitPolicy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScanLimitPolicy_descriptor_,
      ScanLimitPolicy::default_instance_,
      ScanLimitPolicy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanLimitPolicy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScanLimitPolicy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScanLimitPolicy));
  PrinterMeterLog_descriptor_ = file->message_type(64);
  static const int PrinterMeterLog_offsets_[38] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterMeterLog, printid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterMeterLog, recordprintmetertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterMeterLog, opadminid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterMeterLog, a4printtotalpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterMeterLog, a4printcolorpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterMeterLog, a4printhbpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterMeterLog, a3printtotalpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterMeterLog, a3printcolorpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterMeterLog, a3printhbpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterMeterLog, otherprinttotalpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterMeterLog, otherprintcolorpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterMeterLog, otherprinthbpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterMeterLog, a4copytotalpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterMeterLog, a4copycolorpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterMeterLog, a4copyhbpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterMeterLog, a3copytotalpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterMeterLog, a3copycolorpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterMeterLog, a3copyhbpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterMeterLog, othercopytotalpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterMeterLog, othercopycolorpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterMeterLog, othercopyhbpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterMeterLog, scantotalpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterMeterLog, scanbigcolorpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterMeterLog, scanbighbpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterMeterLog, scansmallcolorpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterMeterLog, scansmallhbpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterMeterLog, a4faxtotalpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterMeterLog, a4faxcolorpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterMeterLog, a4faxhbpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterMeterLog, a3faxtotalpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterMeterLog, a3faxcolorpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterMeterLog, a3faxhbpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterMeterLog, otherfaxtotalpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterMeterLog, otherfaxcolorpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterMeterLog, otherfaxhbpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterMeterLog, otheroptotalpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterMeterLog, otheropcolorpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterMeterLog, otherophbpage_),
  };
  PrinterMeterLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrinterMeterLog_descriptor_,
      PrinterMeterLog::default_instance_,
      PrinterMeterLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterMeterLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterMeterLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrinterMeterLog));
  PrinterShareInfo_descriptor_ = file->message_type(65);
  static const int PrinterShareInfo_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterShareInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterShareInfo, pc_ip_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterShareInfo, printer_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterShareInfo, print_share_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterShareInfo, printer_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterShareInfo, printer_dpi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterShareInfo, printer_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterShareInfo, begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterShareInfo, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterShareInfo, support_duplex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterShareInfo, support_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterShareInfo, pc_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterShareInfo, pc_host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterShareInfo, pc_mac_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterShareInfo, pc_disknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterShareInfo, print_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterShareInfo, tel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterShareInfo, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterShareInfo, comment_),
  };
  PrinterShareInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrinterShareInfo_descriptor_,
      PrinterShareInfo::default_instance_,
      PrinterShareInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterShareInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrinterShareInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrinterShareInfo));
  Job_Op_State_descriptor_ = file->enum_type(0);
  Printer_Paper_Source_descriptor_ = file->enum_type(1);
  Print_Job_Type_descriptor_ = file->enum_type(2);
  JOB_STORAGE_TYPE_descriptor_ = file->enum_type(3);
  JOB_PRICE_TYPE_descriptor_ = file->enum_type(4);
  ScanChargeType_descriptor_ = file->enum_type(5);
  JOb_CHECK_BY_descriptor_ = file->enum_type(6);
  JOB_CHECK_FAILURE_ACTION_TYPE_descriptor_ = file->enum_type(7);
  JOB_SUBMIT_MODE_descriptor_ = file->enum_type(8);
  JOB_PRINT_MODE_descriptor_ = file->enum_type(9);
  JOB_FILTER_TYPE_descriptor_ = file->enum_type(10);
  PRT_REQ_JOB_BY_descriptor_ = file->enum_type(11);
  SUBMIT_JOB_STATE_descriptor_ = file->enum_type(12);
  CHARGE_FOR_descriptor_ = file->enum_type(13);
  PRINT_POLICY_MASK_descriptor_ = file->enum_type(14);
  COPY_POLICY_MASK_descriptor_ = file->enum_type(15);
  SCAN_POLICY_MASK_descriptor_ = file->enum_type(16);
  FAX_POLICY_MASK_descriptor_ = file->enum_type(17);
  PrtDbType_descriptor_ = file->enum_type(18);
  JOB_TYPE_descriptor_ = file->enum_type(19);
  JOB_LIMIT_TYPE_descriptor_ = file->enum_type(20);
  JOB_LIMIT_PERIOD_TYPE_descriptor_ = file->enum_type(21);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_printermessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrintSecPolicy_descriptor_, &PrintSecPolicy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JobSubmitCtrl_descriptor_, &JobSubmitCtrl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JobFilterPolciy_descriptor_, &JobFilterPolciy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JobAuditProcess_descriptor_, &JobAuditProcess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubmitPrintJob_descriptor_, &SubmitPrintJob::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubmitPrintJobList_descriptor_, &SubmitPrintJobList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtSationReqPrintJob_descriptor_, &PrtSationReqPrintJob::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtSationReqPrintJobList_descriptor_, &PrtSationReqPrintJobList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtSationReqPrintHistoryJob_descriptor_, &PrtSationReqPrintHistoryJob::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtSationReqPrintHistoryJobList_descriptor_, &PrtSationReqPrintHistoryJobList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CardInfo_descriptor_, &CardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtStationLogon_descriptor_, &PrtStationLogon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtStationUserAccount_descriptor_, &PrtStationUserAccount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtStationPrice_descriptor_, &PrtStationPrice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtStationPriceStep_descriptor_, &PrtStationPriceStep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtStationPriceStepList_descriptor_, &PrtStationPriceStepList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtCopyPrice_descriptor_, &PrtCopyPrice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtCopyPriceStep_descriptor_, &PrtCopyPriceStep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtCopyPriceStepList_descriptor_, &PrtCopyPriceStepList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtScanPrice_descriptor_, &PrtScanPrice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtScanPriceStep_descriptor_, &PrtScanPriceStep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtScanPriceStepList_descriptor_, &PrtScanPriceStepList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtStationCheckUserResult_descriptor_, &PrtStationCheckUserResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtStationChargeErr_descriptor_, &PrtStationChargeErr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtStationInfo_descriptor_, &PrtStationInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AutoAddPrtStationInfo_descriptor_, &AutoAddPrtStationInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrintProjectSampleInfo_descriptor_, &PrintProjectSampleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrintStationSampleInfo_descriptor_, &PrintStationSampleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrintJobSecTypeInfo_descriptor_, &PrintJobSecTypeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrintCtlReqInfo_descriptor_, &PrintCtlReqInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrintCltLogon_descriptor_, &PrintCltLogon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrintCltLoginVerifyCode_descriptor_, &PrintCltLoginVerifyCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrintCltCheckUserResult_descriptor_, &PrintCltCheckUserResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrintCtrlPolicy_descriptor_, &PrintCtrlPolicy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtOrderCmpltInfo_descriptor_, &PrtOrderCmpltInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RechargeFromCard_descriptor_, &RechargeFromCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RechargeFromCardErr_descriptor_, &RechargeFromCardErr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtChargeResult_descriptor_, &PrtChargeResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtCopyCharge_descriptor_, &PrtCopyCharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtScanCharge_descriptor_, &PrtScanCharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtStationCharge_descriptor_, &PrtStationCharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtStationChargeOnEveryPage_descriptor_, &PrtStationChargeOnEveryPage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtStationAlarm_descriptor_, &PrtStationAlarm::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtChargeToolLogon_descriptor_, &PrtChargeToolLogon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtChargeToolCheckResult_descriptor_, &PrtChargeToolCheckResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtChargeToolOPLog_descriptor_, &PrtChargeToolOPLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtUserSelfChargeOPLog_descriptor_, &PrtUserSelfChargeOPLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtUserSelfChargeOpLogACK_descriptor_, &PrtUserSelfChargeOpLogACK::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtAdminInfo_descriptor_, &PrtAdminInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtAdminInfoList_descriptor_, &PrtAdminInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrintDocumentInfo_descriptor_, &PrintDocumentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FtpConfigInfo_descriptor_, &FtpConfigInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CFuncPolicy_descriptor_, &CFuncPolicy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtCenterSvr_UserPrintReq_descriptor_, &PrtCenterSvr_UserPrintReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdjustPrintCountInfo_descriptor_, &AdjustPrintCountInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScanToMailAddrList_descriptor_, &ScanToMailAddrList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtTranscriptIToolLogon_descriptor_, &PrtTranscriptIToolLogon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtTranscriptIToolCheckResult_descriptor_, &PrtTranscriptIToolCheckResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtDbConfigInfo_descriptor_, &PrtDbConfigInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqChargePrintTicket_descriptor_, &ReqChargePrintTicket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChargePrintTicket_descriptor_, &ChargePrintTicket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrintLimitPolicy_descriptor_, &PrintLimitPolicy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CopyLimitPolicy_descriptor_, &CopyLimitPolicy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScanLimitPolicy_descriptor_, &ScanLimitPolicy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrinterMeterLog_descriptor_, &PrinterMeterLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrinterShareInfo_descriptor_, &PrinterShareInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_printermessage_2eproto() {
  delete PrintSecPolicy::default_instance_;
  delete PrintSecPolicy_reflection_;
  delete JobSubmitCtrl::default_instance_;
  delete JobSubmitCtrl_reflection_;
  delete JobFilterPolciy::default_instance_;
  delete JobFilterPolciy_reflection_;
  delete JobAuditProcess::default_instance_;
  delete JobAuditProcess_reflection_;
  delete SubmitPrintJob::default_instance_;
  delete SubmitPrintJob_reflection_;
  delete SubmitPrintJobList::default_instance_;
  delete SubmitPrintJobList_reflection_;
  delete PrtSationReqPrintJob::default_instance_;
  delete PrtSationReqPrintJob_reflection_;
  delete PrtSationReqPrintJobList::default_instance_;
  delete PrtSationReqPrintJobList_reflection_;
  delete PrtSationReqPrintHistoryJob::default_instance_;
  delete PrtSationReqPrintHistoryJob_reflection_;
  delete PrtSationReqPrintHistoryJobList::default_instance_;
  delete PrtSationReqPrintHistoryJobList_reflection_;
  delete CardInfo::default_instance_;
  delete CardInfo_reflection_;
  delete PrtStationLogon::default_instance_;
  delete PrtStationLogon_reflection_;
  delete PrtStationUserAccount::default_instance_;
  delete PrtStationUserAccount_reflection_;
  delete PrtStationPrice::default_instance_;
  delete PrtStationPrice_reflection_;
  delete PrtStationPriceStep::default_instance_;
  delete PrtStationPriceStep_reflection_;
  delete PrtStationPriceStepList::default_instance_;
  delete PrtStationPriceStepList_reflection_;
  delete PrtCopyPrice::default_instance_;
  delete PrtCopyPrice_reflection_;
  delete PrtCopyPriceStep::default_instance_;
  delete PrtCopyPriceStep_reflection_;
  delete PrtCopyPriceStepList::default_instance_;
  delete PrtCopyPriceStepList_reflection_;
  delete PrtScanPrice::default_instance_;
  delete PrtScanPrice_reflection_;
  delete PrtScanPriceStep::default_instance_;
  delete PrtScanPriceStep_reflection_;
  delete PrtScanPriceStepList::default_instance_;
  delete PrtScanPriceStepList_reflection_;
  delete PrtStationCheckUserResult::default_instance_;
  delete PrtStationCheckUserResult_reflection_;
  delete PrtStationChargeErr::default_instance_;
  delete PrtStationChargeErr_reflection_;
  delete PrtStationInfo::default_instance_;
  delete PrtStationInfo_reflection_;
  delete AutoAddPrtStationInfo::default_instance_;
  delete AutoAddPrtStationInfo_reflection_;
  delete PrintProjectSampleInfo::default_instance_;
  delete PrintProjectSampleInfo_reflection_;
  delete PrintStationSampleInfo::default_instance_;
  delete PrintStationSampleInfo_reflection_;
  delete PrintJobSecTypeInfo::default_instance_;
  delete PrintJobSecTypeInfo_reflection_;
  delete PrintCtlReqInfo::default_instance_;
  delete PrintCtlReqInfo_reflection_;
  delete PrintCltLogon::default_instance_;
  delete PrintCltLogon_reflection_;
  delete PrintCltLoginVerifyCode::default_instance_;
  delete PrintCltLoginVerifyCode_reflection_;
  delete PrintCltCheckUserResult::default_instance_;
  delete PrintCltCheckUserResult_reflection_;
  delete PrintCtrlPolicy::default_instance_;
  delete PrintCtrlPolicy_reflection_;
  delete PrtOrderCmpltInfo::default_instance_;
  delete PrtOrderCmpltInfo_reflection_;
  delete RechargeFromCard::default_instance_;
  delete RechargeFromCard_reflection_;
  delete RechargeFromCardErr::default_instance_;
  delete RechargeFromCardErr_reflection_;
  delete PrtChargeResult::default_instance_;
  delete PrtChargeResult_reflection_;
  delete PrtCopyCharge::default_instance_;
  delete PrtCopyCharge_reflection_;
  delete PrtScanCharge::default_instance_;
  delete PrtScanCharge_reflection_;
  delete PrtStationCharge::default_instance_;
  delete PrtStationCharge_reflection_;
  delete PrtStationChargeOnEveryPage::default_instance_;
  delete PrtStationChargeOnEveryPage_reflection_;
  delete PrtStationAlarm::default_instance_;
  delete PrtStationAlarm_reflection_;
  delete PrtChargeToolLogon::default_instance_;
  delete PrtChargeToolLogon_reflection_;
  delete PrtChargeToolCheckResult::default_instance_;
  delete PrtChargeToolCheckResult_reflection_;
  delete PrtChargeToolOPLog::default_instance_;
  delete PrtChargeToolOPLog_reflection_;
  delete PrtUserSelfChargeOPLog::default_instance_;
  delete PrtUserSelfChargeOPLog_reflection_;
  delete PrtUserSelfChargeOpLogACK::default_instance_;
  delete PrtUserSelfChargeOpLogACK_reflection_;
  delete PrtAdminInfo::default_instance_;
  delete PrtAdminInfo_reflection_;
  delete PrtAdminInfoList::default_instance_;
  delete PrtAdminInfoList_reflection_;
  delete PrintDocumentInfo::default_instance_;
  delete PrintDocumentInfo_reflection_;
  delete FtpConfigInfo::default_instance_;
  delete FtpConfigInfo_reflection_;
  delete CFuncPolicy::default_instance_;
  delete CFuncPolicy_reflection_;
  delete PrtCenterSvr_UserPrintReq::default_instance_;
  delete PrtCenterSvr_UserPrintReq_reflection_;
  delete AdjustPrintCountInfo::default_instance_;
  delete AdjustPrintCountInfo_reflection_;
  delete ScanToMailAddrList::default_instance_;
  delete ScanToMailAddrList_reflection_;
  delete PrtTranscriptIToolLogon::default_instance_;
  delete PrtTranscriptIToolLogon_reflection_;
  delete PrtTranscriptIToolCheckResult::default_instance_;
  delete PrtTranscriptIToolCheckResult_reflection_;
  delete PrtDbConfigInfo::default_instance_;
  delete PrtDbConfigInfo_reflection_;
  delete ReqChargePrintTicket::default_instance_;
  delete ReqChargePrintTicket_reflection_;
  delete ChargePrintTicket::default_instance_;
  delete ChargePrintTicket_reflection_;
  delete PrintLimitPolicy::default_instance_;
  delete PrintLimitPolicy_reflection_;
  delete CopyLimitPolicy::default_instance_;
  delete CopyLimitPolicy_reflection_;
  delete ScanLimitPolicy::default_instance_;
  delete ScanLimitPolicy_reflection_;
  delete PrinterMeterLog::default_instance_;
  delete PrinterMeterLog_reflection_;
  delete PrinterShareInfo::default_instance_;
  delete PrinterShareInfo_reflection_;
}

void protobuf_AddDesc_printermessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024printermessage.proto\022\010isafetec\"\213\001\n\016Pri"
    "ntSecPolicy\022\025\n\ractive_footer\030\001 \001(\005\022\025\n\rac"
    "tive_header\030\002 \001(\005\022\030\n\020active_watermark\030\003 "
    "\001(\005\022\016\n\006footer\030\004 \001(\t\022\016\n\006header\030\005 \001(\t\022\021\n\tw"
    "atermark\030\006 \001(\t\"s\n\rJobSubmitCtrl\022\032\n\022max_p"
    "age_each_time\030\001 \001(\005\022\032\n\022max_size_each_tim"
    "e\030\002 \001(\005\022\024\n\014max_size_all\030\003 \001(\005\022\024\n\014cur_all"
    "_size\030\004 \001(\005\"L\n\017JobFilterPolciy\022\'\n\004type\030\001"
    " \001(\0162\031.isafetec.JOB_FILTER_TYPE\022\020\n\010key_w"
    "ord\030\002 \001(\t\"\272\001\n\017JobAuditProcess\022(\n\010check_b"
    "y\030\001 \001(\0162\026.isafetec.JOb_CHECK_BY\022\020\n\010admin"
    "_id\030\002 \001(\005\022-\n\nflt_policy\030\003 \001(\0132\031.isafetec"
    ".JobFilterPolciy\022<\n\013next_action\030\004 \001(\0162\'."
    "isafetec.JOB_CHECK_FAILURE_ACTION_TYPE\"\333"
    "\004\n\016SubmitPrintJob\022\020\n\010equip_id\030\001 \001(\005\022\022\n\ne"
    "quip_host\030\002 \001(\t\022\020\n\010win_user\030\003 \001(\t\022\017\n\007use"
    "r_id\030\004 \001(\005\022\016\n\006job_id\030\005 \001(\005\022\022\n\npaper_size"
    "\030\006 \001(\005\022\021\n\tpage_type\030\007 \001(\t\022\016\n\006copies\030\010 \001("
    "\005\022\r\n\005color\030\t \001(\005\022\022\n\ntotal_page\030\n \001(\005\022\023\n\013"
    "orientation\030\013 \001(\005\022\024\n\014double_print\030\014 \001(\005\022"
    "\020\n\010doc_name\030\r \001(\t\022\024\n\014printer_name\030\016 \001(\t\022"
    "\023\n\013submit_time\030\017 \001(\001\022\020\n\010doc_size\030\020 \001(\005\022\024"
    "\n\014zip_job_size\030\021 \001(\005\022\020\n\010job_path\030\022 \001(\t\022\017"
    "\n\007job_dir\030\023 \001(\t\022\022\n\nproject_id\030\024 \001(\005\022\033\n\023o"
    "rder_PrtStation_id\030\025 \001(\005\022\034\n\024direct_PrtSt"
    "ation_id\030\026 \001(\005\022,\n\010sec_type\030\027 \001(\0162\032.isafe"
    "tec.JOB_STORAGE_TYPE\0224\n\014paper_source\030\030 \001"
    "(\0162\036.isafetec.Printer_Paper_Source\022\037\n\027im"
    "age_use_physical_area\030\031 \001(\010\022\017\n\007collate\030\032"
    " \001(\005\"<\n\022SubmitPrintJobList\022&\n\004list\030\001 \003(\013"
    "2\030.isafetec.SubmitPrintJob\"\311\006\n\024PrtSation"
    "ReqPrintJob\022\n\n\002id\030\001 \001(\005\022\020\n\010job_path\030\002 \001("
    "\t\022\017\n\007job_dir\030\003 \001(\t\022\023\n\013submit_time\030\004 \001(\001\022"
    "\020\n\010job_size\030\005 \001(\005\022\024\n\014zip_job_size\030\006 \001(\005\022"
    "\020\n\010doc_name\030\007 \001(\t\022\022\n\npaper_size\030\010 \001(\005\022\021\n"
    "\tpage_type\030\t \001(\t\022\016\n\006copies\030\n \001(\005\022\r\n\005colo"
    "r\030\013 \001(\005\022\022\n\ntotal_page\030\014 \001(\005\022\023\n\013orientati"
    "on\030\r \001(\005\022\024\n\014double_print\030\016 \001(\005\022\022\n\nequip_"
    "host\030\017 \001(\t\022\020\n\010win_user\030\020 \001(\t\022\020\n\010equip_ip"
    "\030\021 \001(\t\022\021\n\tuser_name\030\022 \001(\t\022,\n\njob_req_by\030"
    "\023 \001(\0162\030.isafetec.PRT_REQ_JOB_BY\022\017\n\007user_"
    "id\030\024 \001(\005\022\022\n\nleft_money\030\026 \001(\001\022\032\n\022special_"
    "left_money\030\027 \001(\001\022,\n\nprice_type\030\030 \001(\0162\030.i"
    "safetec.JOB_PRICE_TYPE\022\r\n\005price\030\031 \001(\001\022\022\n"
    "\nproject_id\030\032 \001(\005\022\024\n\014project_name\030\033 \001(\t\022"
    ",\n\nsec_policy\030\034 \001(\0132\030.isafetec.PrintSecP"
    "olicy\022\017\n\007printed\030\035 \001(\005\022\014\n\004guid\030\036 \001(\t\022\022\n\n"
    "printed_id\030\037 \001(\005\0224\n\014paper_source\030  \001(\0162\036"
    ".isafetec.Printer_Paper_Source\0220\n\016print_"
    "job_type\030! \001(\0162\030.isafetec.Print_Job_Type"
    "\022\022\n\nprint_from\030\" \001(\005\022\020\n\010print_to\030# \001(\005\022\036"
    "\n\026tiff_use_physical_area\030$ \001(\005\"H\n\030PrtSat"
    "ionReqPrintJobList\022,\n\004list\030\001 \003(\0132\036.isafe"
    "tec.PrtSationReqPrintJob\"\255\001\n\033PrtSationRe"
    "qPrintHistoryJob\022+\n\003job\030\001 \001(\0132\036.isafetec"
    ".PrtSationReqPrintJob\022\021\n\tjob_state\030\002 \001(\005"
    "\022\030\n\020job_file_deleted\030\003 \001(\005\022\033\n\023job_last_p"
    "rint_time\030\004 \001(\001\022\027\n\017job_delete_time\030\005 \001(\001"
    "\"V\n\037PrtSationReqPrintHistoryJobList\0223\n\004l"
    "ist\030\001 \003(\0132%.isafetec.PrtSationReqPrintHi"
    "storyJob\"\236\001\n\010CardInfo\022\014\n\004code\030\001 \001(\t\022\021\n\tu"
    "ser_name\030\002 \001(\t\022\020\n\010dep_name\030\003 \001(\t\022\022\n\nleft"
    "_money\030\004 \001(\001\022\013\n\003pwd\030\005 \001(\t\022\022\n\nid_card_no\030"
    "\006 \001(\t\022\027\n\017citizen_card_no\030\007 \001(\t\022\021\n\tmobile"
    "_no\030\010 \001(\t\"p\n\017PrtStationLogon\022\016\n\006ptr_id\030\001"
    " \001(\005\022\014\n\004name\030\002 \001(\t\022\013\n\003pwd\030\003 \001(\t\022\020\n\010audit"
    "_ok\030\004 \001(\005\022 \n\004card\030\005 \001(\0132\022.isafetec.CardI"
    "nfo\"\370\001\n\025PrtStationUserAccount\022\017\n\007user_id"
    "\030\001 \001(\005\022\022\n\naccount_id\030\002 \001(\005\022\022\n\nleft_money"
    "\030\003 \001(\001\022\032\n\022special_left_money\030\004 \001(\001\022\024\n\014ac"
    "count_name\030\005 \001(\t\022\021\n\treal_name\030\006 \001(\t\022\017\n\007c"
    "ard_no\030\007 \001(\t\022\022\n\nid_card_no\030\010 \001(\t\022\027\n\017citi"
    "zen_card_no\030\t \001(\t\022\021\n\tmobile_no\030\n \001(\t\022\020\n\010"
    "dep_name\030\013 \001(\t\"\262\002\n\017PrtStationPrice\022,\n\npr"
    "ice_type\030\001 \001(\0162\030.isafetec.JOB_PRICE_TYPE"
    "\022\023\n\013a3_hb_price\030\002 \001(\001\022\026\n\016a3_color_price\030"
    "\003 \001(\001\022\023\n\013a4_hb_price\030\004 \001(\001\022\026\n\016a4_color_p"
    "rice\030\005 \001(\001\022\032\n\022a3_hb_price_duplex\030\006 \001(\001\022\035"
    "\n\025a3_color_price_duplex\030\007 \001(\001\022\032\n\022a4_hb_p"
    "rice_duplex\030\010 \001(\001\022\035\n\025a4_color_price_dupl"
    "ex\030\t \001(\001\022!\n\031IsSupportPrintDuplexPrice\030\n "
    "\001(\005\"t\n\023PrtStationPriceStep\022(\n\005price\030\001 \001("
    "\0132\031.isafetec.PrtStationPrice\022\021\n\tPriceDes"
    "c\030\002 \001(\t\022\017\n\007PageMin\030\003 \001(\005\022\017\n\007PageMax\030\004 \001("
    "\005\"F\n\027PrtStationPriceStepList\022+\n\004list\030\001 \003"
    "(\0132\035.isafetec.PrtStationPriceStep\"\226\001\n\014Pr"
    "tCopyPrice\022,\n\nprice_type\030\001 \001(\0162\030.isafete"
    "c.JOB_PRICE_TYPE\022\023\n\013a3_hb_price\030\002 \001(\001\022\026\n"
    "\016a3_color_price\030\003 \001(\001\022\023\n\013a4_hb_price\030\004 \001"
    "(\001\022\026\n\016a4_color_price\030\005 \001(\001\"n\n\020PrtCopyPri"
    "ceStep\022%\n\005price\030\001 \001(\0132\026.isafetec.PrtCopy"
    "Price\022\021\n\tPriceDesc\030\002 \001(\t\022\017\n\007PageMin\030\003 \001("
    "\005\022\017\n\007PageMax\030\004 \001(\005\"@\n\024PrtCopyPriceStepLi"
    "st\022(\n\004list\030\001 \003(\0132\032.isafetec.PrtCopyPrice"
    "Step\"q\n\014PrtScanPrice\022,\n\nprice_type\030\001 \001(\016"
    "2\030.isafetec.JOB_PRICE_TYPE\022\020\n\010hb_price\030\002"
    " \001(\001\022\023\n\013color_price\030\003 \001(\001\022\014\n\004unit\030\004 \001(\005\""
    "n\n\020PrtScanPriceStep\022%\n\005price\030\001 \001(\0132\026.isa"
    "fetec.PrtScanPrice\022\021\n\tPriceDesc\030\002 \001(\t\022\017\n"
    "\007PageMin\030\003 \001(\005\022\017\n\007PageMax\030\004 \001(\005\"@\n\024PrtSc"
    "anPriceStepList\022(\n\004list\030\001 \003(\0132\032.isafetec"
    ".PrtScanPriceStep\"\301\004\n\031PrtStationCheckUse"
    "rResult\0220\n\007account\030\001 \001(\0132\037.isafetec.PrtS"
    "tationUserAccount\022(\n\005price\030\002 \001(\0132\031.isafe"
    "tec.PrtStationPrice\022*\n\ncopy_price\030\003 \001(\0132"
    "\026.isafetec.PrtCopyPrice\022*\n\nscan_price\030\004 "
    "\001(\0132\026.isafetec.PrtScanPrice\022\016\n\006prt_id\030\010 "
    "\001(\005\022@\n\025print_price_step_list\030\t \001(\0132!.isa"
    "fetec.PrtStationPriceStepList\022<\n\024copy_pr"
    "ice_step_list\030\n \001(\0132\036.isafetec.PrtCopyPr"
    "iceStepList\022<\n\024scan_price_step_list\030\013 \001("
    "\0132\036.isafetec.PrtScanPriceStepList\0226\n\022pri"
    "nt_limit_policy\030\014 \001(\0132\032.isafetec.PrintLi"
    "mitPolicy\0224\n\021copy_limit_policy\030\r \001(\0132\031.i"
    "safetec.CopyLimitPolicy\0224\n\021scan_limit_po"
    "licy\030\016 \001(\0132\031.isafetec.ScanLimitPolicy\"\210\001"
    "\n\023PrtStationChargeErr\022\016\n\006job_id\030\001 \001(\005\022\017\n"
    "\007user_id\030\002 \001(\005\022\035\n\025need_update_job_state\030"
    "\003 \001(\010\0221\n\rjob_new_state\030\004 \001(\0162\032.isafetec."
    "SUBMIT_JOB_STATE\"\346\003\n\016PrtStationInfo\022\n\n\002i"
    "d\030\001 \001(\005\022\023\n\013allow_order\030\002 \001(\005\022\034\n\024check_or"
    "der_internal\030\003 \001(\005\022\032\n\022allow_direct_print"
    "\030\004 \001(\005\022!\n\031check_direct_job_internal\030\005 \001("
    "\005\022\021\n\ton_server\030\006 \001(\010\022\024\n\014printer_name\030\007 \001"
    "(\t\022\020\n\010fun_code\030\010 \001(\t\022\025\n\rsupport_color\030\t "
    "\001(\010\022\022\n\nbegin_time\030\n \001(\001\022\020\n\010end_time\030\013 \001("
    "\001\022\020\n\010prt_name\030\014 \001(\t\022\026\n\016support_duplex\030\r "
    "\001(\005\022.\n\013print_price\030\016 \001(\0132\031.isafetec.PrtS"
    "tationPrice\022*\n\ncopy_price\030\017 \001(\0132\026.isafet"
    "ec.PrtCopyPrice\022*\n\nscan_price\030\020 \001(\0132\026.is"
    "afetec.PrtScanPrice\022\022\n\nprinter_ip\030\021 \001(\t\022"
    "\030\n\020print_station_ip\030\022 \001(\t\"\234\002\n\025AutoAddPrt"
    "StationInfo\022\024\n\014printer_name\030\001 \001(\t\022\032\n\022pri"
    "nter_resolution\030\002 \001(\005\022\025\n\rprinter_speed\030\003"
    " \001(\005\022\025\n\rprinter_color\030\004 \001(\005\022\030\n\020prt_stati"
    "on_name\030\005 \001(\t\022\033\n\023prt_station_comment\030\006 \001"
    "(\t\022\023\n\013a3_hb_price\030\007 \001(\001\022\026\n\016a3_color_pric"
    "e\030\010 \001(\001\022\023\n\013a4_hb_price\030\t \001(\001\022\026\n\016a4_color"
    "_price\030\n \001(\001\022\022\n\nprinter_ip\030\013 \001(\t\"2\n\026Prin"
    "tProjectSampleInfo\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002"
    " \001(\t\"Q\n\026PrintStationSampleInfo\022\n\n\002id\030\001 \001"
    "(\005\022\014\n\004name\030\002 \001(\t\022\014\n\004addr\030\003 \001(\t\022\017\n\007commen"
    "t\030\004 \001(\t\"M\n\023PrintJobSecTypeInfo\022(\n\004type\030\001"
    " \001(\0162\032.isafetec.JOB_STORAGE_TYPE\022\014\n\004desc"
    "\030\002 \001(\t\"\302\001\n\017PrintCtlReqInfo\022:\n\020order_prin"
    "t_list\030\001 \003(\0132 .isafetec.PrintStationSamp"
    "leInfo\0226\n\014project_list\030\002 \003(\0132 .isafetec."
    "PrintProjectSampleInfo\022;\n\021direct_print_l"
    "ist\030\003 \003(\0132 .isafetec.PrintStationSampleI"
    "nfo\"\326\001\n\rPrintCltLogon\022\n\n\002id\030\001 \001(\005\022\014\n\004nam"
    "e\030\002 \001(\t\022\013\n\003pwd\030\003 \001(\t\022\022\n\nproject_id\030\004 \001(\005"
    "\022\030\n\020print_station_id\030\005 \001(\005\022\030\n\020order_stat"
    "ion_id\030\006 \001(\005\022\016\n\006job_id\030\007 \001(\005\022\021\n\tpage_typ"
    "e\030\010 \001(\t\022\022\n\npage_count\030\t \001(\005\022\r\n\005color\030\n \001"
    "(\005\022\020\n\010job_size\030\013 \001(\005\"j\n\027PrintCltLoginVer"
    "ifyCode\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\021\n\tlog"
    "inType\030\003 \001(\005\022\022\n\nverifyCode\030\004 \001(\t\022\016\n\006job_"
    "id\030\005 \001(\005\"\336\002\n\027PrintCltCheckUserResult\022\017\n\007"
    "user_id\030\001 \001(\005\022\022\n\naccount_id\030\003 \001(\005\022\022\n\nlef"
    "t_money\030\004 \001(\001\022\032\n\022special_left_money\030\005 \001("
    "\001\022\020\n\010a3_quota\030\006 \001(\005\022\020\n\010a4_quota\030\007 \001(\005\022\023\n"
    "\013period_type\030\010 \001(\005\022\030\n\020a3_printed_count\030\t"
    " \001(\005\022\030\n\020a4_printed_count\030\n \001(\005\022\022\n\nprojec"
    "t_id\030\013 \001(\005\022\030\n\020print_station_id\030\014 \001(\005\022\030\n\020"
    "order_station_id\030\r \001(\005\022\016\n\006job_id\030\016 \001(\005\022)"
    "\n\006filter\030\017 \001(\0132\031.isafetec.JobFilterPolci"
    "y\"\266\001\n\017PrintCtrlPolicy\022.\n\013submit_mode\030\001 \001"
    "(\0162\031.isafetec.JOB_SUBMIT_MODE\022,\n\nprint_m"
    "ode\030\002 \001(\0162\030.isafetec.JOB_PRINT_MODE\022\016\n\006p"
    "rt_id\030\003 \001(\005\022\013\n\003url\030\004 \001(\t\022\026\n\016enable_doc_l"
    "og\030\005 \001(\010\022\020\n\010doc_type\030\006 \001(\t\"3\n\021PrtOrderCm"
    "pltInfo\022\016\n\006prt_id\030\001 \001(\005\022\016\n\006job_id\030\002 \001(\005\""
    "\234\001\n\020RechargeFromCard\022\016\n\006prt_id\030\001 \001(\005\022\017\n\007"
    "user_id\030\002 \001(\005\022\017\n\007card_no\030\003 \001(\t\022\022\n\nleft_m"
    "oney\030\004 \001(\001\022\024\n\014should_spend\030\005 \001(\001\022\026\n\016rech"
    "arge_money\030\006 \001(\001\022\024\n\014recharge_for\030\007 \001(\005\"\235"
    "\001\n\023RechargeFromCardErr\022\016\n\006prt_id\030\001 \001(\005\022\017"
    "\n\007user_id\030\002 \001(\005\022\017\n\007card_no\030\003 \001(\t\022\020\n\010err_"
    "desc\030\004 \001(\t\022\024\n\014should_spend\030\005 \001(\001\022\026\n\016rech"
    "arge_money\030\006 \001(\001\022\024\n\014recharge_for\030\007 \001(\005\"\264"
    "\001\n\017PrtChargeResult\022\014\n\004seed\030\001 \001(\t\022\020\n\010res_"
    "code\030\002 \001(\005\022(\n\ncharge_for\030\003 \001(\0162\024.isafete"
    "c.CHARGE_FOR\0220\n\003res\030\004 \001(\0132#.isafetec.Prt"
    "StationCheckUserResult\022\021\n\tfile_path\030\005 \001("
    "\t\022\022\n\nother_info\030\006 \001(\t\"\312\002\n\rPrtCopyCharge\022"
    "\016\n\006prt_id\030\001 \001(\005\022\017\n\007user_id\030\002 \001(\005\022,\n\npric"
    "e_type\030\003 \001(\0162\030.isafetec.JOB_PRICE_TYPE\022\r"
    "\n\005price\030\004 \001(\001\022\021\n\tpage_type\030\005 \001(\t\022\r\n\005coun"
    "t\030\006 \001(\005\022\r\n\005color\030\007 \001(\005\022\014\n\004time\030\010 \001(\001\022\024\n\014"
    "should_spend\030\t \001(\001\022\022\n\nreal_spend\030\n \001(\001\022("
    "\n\004card\030\017 \001(\0132\032.isafetec.RechargeFromCard"
    "\022*\n\003err\030\020 \001(\0132\035.isafetec.RechargeFromCar"
    "dErr\022\014\n\004seed\030\021 \001(\t\022\016\n\006job_id\030\022 \001(\005\"\264\003\n\rP"
    "rtScanCharge\022\014\n\004guid\030\001 \001(\t\022\016\n\006prt_id\030\002 \001"
    "(\005\022\017\n\007user_id\030\003 \001(\005\022,\n\nprice_type\030\004 \001(\0162"
    "\030.isafetec.JOB_PRICE_TYPE\022\r\n\005price\030\005 \001(\001"
    "\022\014\n\004size\030\007 \001(\005\022\r\n\005color\030\010 \001(\005\022\014\n\004path\030\t "
    "\001(\t\022\013\n\003dir\030\n \001(\t\022\020\n\010http_dir\030\016 \001(\t\022\014\n\004ti"
    "me\030\013 \001(\001\022\024\n\014should_spend\030\014 \001(\001\022\022\n\nreal_s"
    "pend\030\r \001(\001\022(\n\004card\030\017 \001(\0132\032.isafetec.Rech"
    "argeFromCard\022*\n\003err\030\020 \001(\0132\035.isafetec.Rec"
    "hargeFromCardErr\022\014\n\004seed\030\021 \001(\t\022\016\n\006job_id"
    "\030\022 \001(\005\022\022\n\npage_count\030\023 \001(\005\022-\n\013charge_typ"
    "e\030\024 \001(\0162\030.isafetec.ScanChargeType\"\316\003\n\020Pr"
    "tStationCharge\022\014\n\004guid\030\001 \001(\t\022\016\n\006job_id\030\002"
    " \001(\005\022\016\n\006prt_id\030\003 \001(\005\022\017\n\007user_id\030\004 \001(\005\022\r\n"
    "\005color\030\005 \001(\005\022\021\n\tpage_type\030\006 \001(\t\022,\n\nprice"
    "_type\030\007 \001(\0162\030.isafetec.JOB_PRICE_TYPE\022\r\n"
    "\005price\030\010 \001(\001\022\030\n\020total_page_count\030\t \001(\005\022\032"
    "\n\022printed_page_count\030\n \001(\005\022\026\n\016printed_co"
    "pies\030\013 \001(\005\022\024\n\014printed_from\030\014 \001(\005\022\022\n\nprin"
    "ted_to\030\r \001(\005\022\024\n\014should_spend\030\016 \001(\001\022\022\n\nre"
    "al_spend\030\017 \001(\001\022\024\n\014printed_time\030\020 \001(\001\022\022\n\n"
    "project_id\030\021 \001(\005\022\024\n\014project_name\030\022 \001(\t\022,"
    "\n\njob_req_by\030\023 \001(\0162\030.isafetec.PRT_REQ_JO"
    "B_BY\022\014\n\004seed\030\024 \001(\t\"\243\002\n\033PrtStationChargeO"
    "nEveryPage\022\014\n\004guid\030\001 \001(\t\022\032\n\022printed_page"
    "_count\030\002 \001(\005\022\022\n\nreal_spend\030\003 \001(\001\022\023\n\013all_"
    "printed\030\004 \001(\005\022\017\n\007user_id\030\005 \001(\005\022,\n\njob_re"
    "q_by\030\006 \001(\0162\030.isafetec.PRT_REQ_JOB_BY\022\016\n\006"
    "job_id\030\007 \001(\005\022(\n\004card\030\017 \001(\0132\032.isafetec.Re"
    "chargeFromCard\022*\n\003err\030\020 \001(\0132\035.isafetec.R"
    "echargeFromCardErr\022\014\n\004seed\030\021 \001(\t\"Q\n\017PrtS"
    "tationAlarm\022\016\n\006prt_id\030\001 \001(\005\022\014\n\004type\030\002 \001("
    "\t\022\017\n\007subject\030\003 \001(\t\022\017\n\007content\030\004 \001(\t\";\n\022P"
    "rtChargeToolLogon\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002 "
    "\001(\t\022\013\n\003pwd\030\003 \001(\t\"A\n\030PrtChargeToolCheckRe"
    "sult\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\013\n\003pwd\030\003 "
    "\001(\t\"\221\001\n\022PrtChargeToolOPLog\022\020\n\010admin_id\030\001"
    " \001(\005\022\022\n\nadmin_name\030\002 \001(\t\022\017\n\007op_type\030\003 \001("
    "\005\022\016\n\006amount\030\004 \001(\001\022\025\n\rspecail_money\030\005 \001(\001"
    "\022\017\n\007card_no\030\006 \001(\t\022\014\n\004name\030\007 \001(\t\"\302\001\n\026PrtU"
    "serSelfChargeOPLog\022\017\n\007user_id\030\001 \001(\005\022\021\n\tu"
    "ser_name\030\002 \001(\t\022\016\n\006prt_id\030\003 \001(\005\022\016\n\006op_for"
    "\030\004 \001(\005\022\020\n\010reserve1\030\005 \001(\005\022\016\n\006amount\030\006 \001(\001"
    "\022\025\n\rspecail_money\030\007 \001(\001\022\017\n\007card_no\030\010 \001(\t"
    "\022\014\n\004guid\030\t \001(\t\022\014\n\004time\030\n \001(\001\"\254\001\n\031PrtUser"
    "SelfChargeOpLogACK\022\017\n\007user_id\030\001 \001(\005\022\016\n\006p"
    "rt_id\030\002 \001(\005\022\020\n\010res_code\030\003 \001(\005\022\016\n\006op_for\030"
    "\004 \001(\005\0220\n\003res\030\005 \001(\0132#.isafetec.PrtStation"
    "CheckUserResult\022\014\n\004guid\030\006 \001(\t\022\014\n\004time\030\007 "
    "\001(\001\":\n\014PrtAdminInfo\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030"
    "\002 \001(\t\022\020\n\010realname\030\003 \001(\t\"8\n\020PrtAdminInfoL"
    "ist\022$\n\004list\030\001 \003(\0132\026.isafetec.PrtAdminInf"
    "o\"\361\001\n\021PrintDocumentInfo\022\020\n\010equip_id\030\001 \001("
    "\005\022\022\n\nequip_host\030\002 \001(\t\022\020\n\010win_user\030\003 \001(\t\022"
    "\017\n\007user_id\030\004 \001(\005\022\n\n\002id\030\005 \001(\005\022\020\n\010doc_name"
    "\030\006 \001(\t\022\024\n\014printer_name\030\007 \001(\t\022\014\n\004time\030\010 \001"
    "(\001\022\020\n\010doc_size\030\t \001(\005\022\020\n\010zip_size\030\n \001(\005\022\014"
    "\n\004path\030\013 \001(\t\022\014\n\004name\030\014 \001(\t\022\021\n\torig_path\030"
    "\r \001(\t\"d\n\rFtpConfigInfo\022\n\n\002ip\030\001 \001(\t\022\014\n\004po"
    "rt\030\002 \001(\t\022\021\n\tdisk_path\030\003 \001(\t\022\013\n\003dir\030\004 \001(\t"
    "\022\014\n\004user\030\005 \001(\t\022\013\n\003pwd\030\006 \001(\t\"\214\001\n\013CFuncPol"
    "icy\022\016\n\006UserID\030\001 \001(\005\022\r\n\005PrtID\030\002 \001(\005\022\027\n\017Pr"
    "intPolicyMask\030\003 \001(\005\022\026\n\016CopyPolicyMask\030\004 "
    "\001(\005\022\026\n\016ScanPolicyMask\030\005 \001(\005\022\025\n\rFaxPolicy"
    "Mask\030\006 \001(\005\"\203\006\n\031PrtCenterSvr_UserPrintReq"
    "\022\016\n\006prt_id\030\001 \001(\005\022\020\n\010prt_name\030\002 \001(\t\022\021\n\tus"
    "er_name\030\003 \001(\t\022\020\n\010doc_name\030\004 \001(\t\022\016\n\006doc_i"
    "d\030\005 \001(\005\022\021\n\tpage_type\030\006 \001(\t\022\022\n\npage_count"
    "\030\007 \001(\005\022\r\n\005color\030\010 \001(\005\022\020\n\010job_size\030\t \001(\005\022"
    "\026\n\016job_id_SqlLite\030\n \001(\005\022\021\n\tjobid_ji2\030\013 \001"
    "(\005\022\023\n\013printername\030\014 \001(\t\022\023\n\013machinename\030\r"
    " \001(\t\022\020\n\010username\030\016 \001(\t\022\020\n\010doucment\030\017 \001(\t"
    "\022\022\n\nnotifyname\030\020 \001(\t\022\020\n\010datatype\030\021 \001(\t\022\023"
    "\n\013paramenters\030\022 \001(\t\022\023\n\013driver_name\030\023 \001(\t"
    "\022\023\n\013device_mode\030\024 \001(\005\022\017\n\007pstatus\030\025 \001(\t\022\016"
    "\n\006status\030\026 \001(\005\022\020\n\010priority\030\027 \001(\005\022\020\n\010posi"
    "tion\030\030 \001(\005\022\021\n\tstarttime\030\031 \001(\005\022\021\n\tuntilti"
    "me\030\032 \001(\005\022\022\n\ntotalpages\030\033 \001(\005\022\014\n\004size\030\034 \001"
    "(\005\022\021\n\tsubmitted\030\035 \001(\t\022\014\n\004time\030\036 \001(\005\022\024\n\014p"
    "agesprinted\030\037 \001(\005\022\020\n\010spl_path\030  \001(\t\022\023\n\013r"
    "et_user_id\030! \001(\005\022\024\n\014ret_ack_type\030\" \001(\005\022\022"
    "\n\npaper_size\0302 \001(\005\022\021\n\tdm_copies\0303 \001(\005\022\026\n"
    "\016dm_Orientation\0304 \001(\005\022\024\n\014double_print\0305 "
    "\001(\005\022\023\n\013submit_time\0306 \001(\001\"\355\001\n\024AdjustPrint"
    "CountInfo\022\016\n\006userid\030\001 \001(\005\022\021\n\taccountid\030\002"
    " \001(\005\022\032\n\022shouldprintedcount\030\003 \001(\005\022\024\n\014prin"
    "tedcount\030\004 \001(\005\022\021\n\tprinterid\030\005 \001(\005\0223\n\013ori"
    "printjob\030\006 \001(\0132\036.isafetec.PrtSationReqPr"
    "intJob\022\023\n\013shouldspend\030\007 \001(\001\022\024\n\014printedsp"
    "end\030\010 \001(\001\022\r\n\005jobid\030\t \001(\005\"9\n\022ScanToMailAd"
    "drList\022\016\n\006userid\030\001 \001(\005\022\023\n\013mailaddress\030\002 "
    "\003(\t\"@\n\027PrtTranscriptIToolLogon\022\n\n\002id\030\001 \001"
    "(\005\022\014\n\004name\030\002 \001(\t\022\013\n\003pwd\030\003 \001(\t\"F\n\035PrtTran"
    "scriptIToolCheckResult\022\n\n\002id\030\001 \001(\005\022\014\n\004na"
    "me\030\002 \001(\t\022\013\n\003pwd\030\003 \001(\t\"n\n\017PrtDbConfigInfo"
    "\022\016\n\006DbType\030\001 \001(\005\022\014\n\004DbIp\030\002 \001(\t\022\016\n\006DbPort"
    "\030\003 \001(\t\022\016\n\006DbName\030\004 \001(\t\022\016\n\006DbUser\030\005 \001(\t\022\r"
    "\n\005DbPwd\030\006 \001(\t\"P\n\024ReqChargePrintTicket\022\024\n"
    "\014account_name\030\001 \001(\t\022\021\n\treal_name\030\002 \001(\t\022\017"
    "\n\007card_no\030\003 \001(\t\"\200\006\n\021ChargePrintTicket\022\017\n"
    "\007user_id\030\001 \001(\005\022\022\n\naccount_id\030\002 \001(\005\022\022\n\nle"
    "ft_money\030\003 \001(\001\022\032\n\022special_left_money\030\004 \001"
    "(\001\022\024\n\014account_name\030\005 \001(\t\022\021\n\treal_name\030\006 "
    "\001(\t\022\017\n\007card_no\030\007 \001(\t\022\026\n\016print_count_A4\030\010"
    " \001(\005\022\026\n\016print_count_A3\030\t \001(\005\022\026\n\016print_pr"
    "ice_A4\030\n \001(\001\022\026\n\016print_price_A3\030\013 \001(\001\022\023\n\013"
    "print_spend\030\014 \001(\001\022\025\n\rcopy_count_A4\030\r \001(\005"
    "\022\025\n\rcopy_count_A3\030\016 \001(\005\022\025\n\rcopy_price_A4"
    "\030\017 \001(\001\022\025\n\rcopy_price_A3\030\020 \001(\001\022\022\n\ncopy_sp"
    "end\030\021 \001(\001\022\021\n\tscan_unit\030\022 \001(\005\022\022\n\nscan_cou"
    "nt\030\023 \001(\005\022\021\n\tscan_size\030\024 \001(\001\022\022\n\nscan_pric"
    "e\030\025 \001(\001\022\022\n\nscan_spend\030\026 \001(\001\022\021\n\tfax_count"
    "\030\027 \001(\005\022\021\n\tfax_price\030\030 \001(\001\022\021\n\tfax_spend\030\031"
    " \001(\001\022\023\n\013cash_pledge\030\032 \001(\001\022\021\n\tcash_back\030\033"
    " \001(\001\022\022\n\nother_info\030\034 \001(\t\022\024\n\014before_money"
    "\030\035 \001(\001\022\023\n\013after_money\030\036 \001(\001\022\025\n\rpurchase_"
    "date\030\037 \001(\t\022\016\n\006termID\030  \001(\t\022\031\n\021verificati"
    "on_code\030! \001(\t\022\034\n\024ticket_printed_times\030\" "
    "\001(\005\022\025\n\rticket_log_id\030# \001(\005\"\340\001\n\020PrintLimi"
    "tPolicy\022$\n\010job_type\030\001 \001(\0162\022.isafetec.JOB"
    "_TYPE\0220\n\016job_limit_type\030\002 \001(\0162\030.isafetec"
    ".JOB_LIMIT_TYPE\022>\n\025job_limit_period_type"
    "\030\003 \001(\0162\037.isafetec.JOB_LIMIT_PERIOD_TYPE\022"
    "\r\n\005state\030\004 \001(\005\022\021\n\tLimitPage\030\005 \001(\005\022\022\n\nHav"
    "eOpPage\030\006 \001(\005\"\337\001\n\017CopyLimitPolicy\022$\n\010job"
    "_type\030\001 \001(\0162\022.isafetec.JOB_TYPE\0220\n\016job_l"
    "imit_type\030\002 \001(\0162\030.isafetec.JOB_LIMIT_TYP"
    "E\022>\n\025job_limit_period_type\030\003 \001(\0162\037.isafe"
    "tec.JOB_LIMIT_PERIOD_TYPE\022\r\n\005state\030\004 \001(\005"
    "\022\021\n\tLimitPage\030\005 \001(\005\022\022\n\nHaveOpPage\030\006 \001(\005\""
    "\337\001\n\017ScanLimitPolicy\022$\n\010job_type\030\001 \001(\0162\022."
    "isafetec.JOB_TYPE\0220\n\016job_limit_type\030\002 \001("
    "\0162\030.isafetec.JOB_LIMIT_TYPE\022>\n\025job_limit"
    "_period_type\030\003 \001(\0162\037.isafetec.JOB_LIMIT_"
    "PERIOD_TYPE\022\r\n\005state\030\004 \001(\005\022\021\n\tLimitPage\030"
    "\005 \001(\005\022\022\n\nHaveOpPage\030\006 \001(\005\"\276\007\n\017PrinterMet"
    "erLog\022\017\n\007PrintId\030\001 \002(\005\022\034\n\024RecordPrintMet"
    "erTime\030\002 \001(\001\022\021\n\tOpAdminId\030\003 \001(\005\022\030\n\020A4Pri"
    "ntTotalPage\030\004 \001(\005\022\030\n\020A4PrintColorPage\030\005 "
    "\001(\005\022\025\n\rA4PrintHBPage\030\006 \001(\005\022\030\n\020A3PrintTot"
    "alPage\030\007 \001(\005\022\030\n\020A3PrintColorPage\030\010 \001(\005\022\025"
    "\n\rA3PrintHBPage\030\t \001(\005\022\033\n\023OtherPrintTotal"
    "Page\030\n \001(\005\022\033\n\023OtherPrintColorPage\030\013 \001(\005\022"
    "\030\n\020OtherPrintHBPage\030\014 \001(\005\022\027\n\017A4CopyTotal"
    "Page\030\r \001(\005\022\027\n\017A4CopyColorPage\030\016 \001(\005\022\024\n\014A"
    "4CopyHBPage\030\017 \001(\005\022\027\n\017A3CopyTotalPage\030\020 \001"
    "(\005\022\027\n\017A3CopyColorPage\030\021 \001(\005\022\024\n\014A3CopyHBP"
    "age\030\022 \001(\005\022\032\n\022OtherCopyTotalPage\030\023 \001(\005\022\032\n"
    "\022OtherCopyColorPage\030\024 \001(\005\022\027\n\017OtherCopyHB"
    "Page\030\025 \001(\005\022\025\n\rScanTotalPage\030\026 \001(\005\022\030\n\020Sca"
    "nBigColorPage\030\027 \001(\005\022\025\n\rScanBigHBPage\030\030 \001"
    "(\005\022\032\n\022ScanSmallColorPage\030\031 \001(\005\022\027\n\017ScanSm"
    "allHBPage\030\032 \001(\005\022\026\n\016A4FaxTotalPage\030\033 \001(\005\022"
    "\026\n\016A4FaxColorPage\030\034 \001(\005\022\023\n\013A4FaxHBPage\030\035"
    " \001(\005\022\026\n\016A3FaxTotalPage\030\036 \001(\005\022\026\n\016A3FaxCol"
    "orPage\030\037 \001(\005\022\023\n\013A3FaxHBPage\030  \001(\005\022\031\n\021Oth"
    "erFaxTotalPage\030! \001(\005\022\031\n\021OtherFaxColorPag"
    "e\030\" \001(\005\022\026\n\016OtherFaxHBPage\030# \001(\005\022\030\n\020Other"
    "OpTotalPage\030$ \001(\005\022\030\n\020OtherOpColorPage\030% "
    "\001(\005\022\025\n\rOtherOpHBPage\030& \001(\005\"\204\003\n\020PrinterSh"
    "areInfo\022\n\n\002id\030\001 \001(\005\022\022\n\npc_ip_addr\030\002 \002(\t\022"
    "\024\n\014printer_name\030\003 \002(\t\022\030\n\020print_share_nam"
    "e\030\004 \002(\t\022\022\n\nprinter_ip\030\005 \001(\t\022\023\n\013printer_d"
    "pi\030\006 \001(\t\022\025\n\rprinter_speed\030\007 \001(\t\022\022\n\nbegin"
    "_time\030\010 \001(\001\022\020\n\010end_time\030\t \001(\001\022\026\n\016support"
    "_duplex\030\n \001(\005\022\025\n\rsupport_color\030\013 \001(\005\022\017\n\007"
    "pc_addr\030\014 \001(\t\022\017\n\007pc_host\030\r \001(\t\022\023\n\013pc_mac"
    "_addr\030\016 \001(\t\022\022\n\npc_disknum\030\017 \001(\t\022\023\n\013print"
    "_state\030\020 \001(\t\022\013\n\003tel\030\021 \001(\t\022\r\n\005email\030\022 \001(\t"
    "\022\017\n\007comment\030\023 \001(\t*\236\001\n\014Job_Op_State\022\027\n\023Jo"
    "b_Op_State_UnKnow\020\000\022\025\n\021Job_Op_State_Succ"
    "\020\001\022\026\n\022Job_Op_State_Order\020\002\022\026\n\022Job_Op_Sta"
    "te_Going\020\003\022\025\n\021Job_Op_State_Fail\020\004\022\027\n\023Job"
    "_Op_State_Cancel\020\005*\336\002\n\024Printer_Paper_Sou"
    "rce\022\024\n\017Paper_Tray_AUTO\020\350\007\022\021\n\014Paper_Tray_"
    "1\020\351\007\022\021\n\014Paper_Tray_2\020\352\007\022\021\n\014Paper_Tray_3\020"
    "\353\007\022\021\n\014Paper_Tray_4\020\354\007\022\021\n\014Paper_Tray_5\020\355\007"
    "\022\026\n\021Paper_Tray_MANUAL\020\363\007\022\031\n\024Paper_Tray_E"
    "NVMANUAL\020\364\007\022\030\n\023Paper_Tray_ENVELOPE\020\365\007\022\027\n"
    "\022Paper_Tray_TRACTOR\020\366\007\022\030\n\023Paper_Tray_SMA"
    "LLFMT\020\367\007\022\030\n\023Paper_Tray_LARGEFMT\020\370\007\022\035\n\030Pa"
    "per_Tray_LARGECAPACITY\020\371\007\022\030\n\023Paper_Tray_"
    "CASSETTE\020\372\007*\324\001\n\016Print_Job_Type\022\031\n\025Print_"
    "Job_Type_Normal\020\000\022\030\n\024Print_Job_Type_Clou"
    "d\020\001\022\026\n\022Print_Job_Type_USB\020\002\022\035\n\031Print_Job"
    "_Type_TRANSCRIPT\020\003\022\034\n\030Print_Job_Type_ADM"
    "ISSION\020\004\022\036\n\032Print_Job_Type_LEAVESCHOOL\020\005"
    "\022\030\n\024Print_Job_Type_Thrid\020\006*M\n\020JOB_STORAG"
    "E_TYPE\022\022\n\016JOb_SEC_NORMAL\020\000\022\021\n\rJOB_SEC_FI"
    "LED\020\001\022\022\n\016JOB_SEC_ENCYPT\020\002*b\n\016JOB_PRICE_T"
    "YPE\022\022\n\016JOb_PRICE_NULL\020\000\022\022\n\016JOb_PRICE_USE"
    "R\020\001\022\021\n\rJOb_PRICE_DEP\020\002\022\025\n\021JOb_PRICE_PRIN"
    "TER\020\003*e\n\016ScanChargeType\022\031\n\025Scan_Charge_T"
    "ype_NULL\020\000\022\033\n\027Scan_Charge_Type_Normal\020\001\022"
    "\033\n\027Scan_Charge_Type_Mobile\020\002*T\n\014JOb_CHEC"
    "K_BY\022\025\n\021JOB_CHECK_BY_NULL\020\000\022\024\n\020JOB_CHECK"
    "_BY_SYS\020\001\022\027\n\023JOB_CHECK_BY_MANUAL\020\002*b\n\035JO"
    "B_CHECK_FAILURE_ACTION_TYPE\022#\n\037JOB_CONTI"
    "NE_PRT_AND_ALARM_ADMIN\020\000\022\034\n\030JOB_PAUSE_AN"
    "D_ALARM_USER\020\001*Z\n\017JOB_SUBMIT_MODE\022\020\n\014ROA"
    "M_PRINTER\020\000\022\031\n\025FIXED_PRINTER_NOCHECK\020\001\022\032"
    "\n\026USER_SEL_PRINTER_CHECK\020\002*8\n\016JOB_PRINT_"
    "MODE\022\020\n\014DIRECT_PRINT\020\000\022\024\n\020CHECK_USER_PRI"
    "NT\020\001*_\n\017JOB_FILTER_TYPE\022\027\n\023JOB_FLT_BY_DO"
    "C_NAME\020\000\022\027\n\023JOB_FLT_BY_DOC_TYPE\020\001\022\032\n\026JOB"
    "_FLT_BY_DOC_CONTENT\020\002*\233\001\n\016PRT_REQ_JOB_BY"
    "\022\027\n\023PRT_REQ_JOB_BY_USER\020\000\022\030\n\024PRT_REQ_JOB"
    "_BY_ORDER\020\001\022\031\n\025PRT_REQ_JOB_BY_DIRECT\020\002\022\034"
    "\n\030PRT_REQ_JOB_BY_ASSISTANT\020\003\022\035\n\031PRT_REQ_"
    "JOB_BY_BreakPoint\020\004*\356\002\n\020SUBMIT_JOB_STATE"
    "\022\030\n\024JOB_SUBMITED_UNCHECK\020\000\022\030\n\024JOB_SUBMIT"
    "ED_CHECKED\020\002\022\026\n\022JOB_CHECKED_FAILED\020\003\022\017\n\013"
    "JOB_PRINTED\020\004\022\017\n\013JOB_DELETED\020\005\022\027\n\023JOB_PE"
    "NDING_NOMONEY\020\006\022\031\n\025JOB_PENDING_PRINT_ERR"
    "\020\007\022\035\n\031JOB_PENDING_WAIT_RESUBMIT\020\010\022\033\n\027JOB"
    "_PENGING_WAIT_DELETE\020\t\022\027\n\023JOB_CLOUD_DEAL"
    "_WAIT\020\n\022\032\n\026JOB_CLOUD_DEAL_PENDING\020\013\022\025\n\021J"
    "OB_CLOUD_DEALING\020\014\022\027\n\023JOB_CLOUD_DEAL_SUC"
    "C\020\r\022\027\n\023JOB_CLOUD_DEAL_FAIL\020\016*\330\001\n\nCHARGE_"
    "FOR\022\020\n\014CHARGE_PRINT\020\000\022\017\n\013CHARGE_COPY\020\001\022\017"
    "\n\013CHARGE_SCAN\020\002\022\017\n\013CHARGE_DEBT\020\003\022\024\n\020CHAR"
    "GE_PRE_PRINT\020\004\022\025\n\021CHARGE_TRANSCRIPT\020\005\022\024\n"
    "\020CHARGE_ADMISSION\020\006\022\023\n\017CHARGE_USBPRINT\020\007"
    "\022\026\n\022CHARGE_LEAVESCHOOL\020\010\022\025\n\021CHARGE_CLOUD"
    "PRINT\020\t*\236\001\n\021PRINT_POLICY_MASK\022\035\n\031EnPrint"
    "PolicyMask_Disable\020\000\022&\n\"EnPrintPolicyMas"
    "k_EnableBlackWhite\020\001\022!\n\035EnPrintPolicyMas"
    "k_EnableColor\020\002\022\037\n\033EnPrintPolicyMask_Ena"
    "bleAll\020\003*M\n\020COPY_POLICY_MASK\022\034\n\030EnCopyPo"
    "licyMask_Disable\020\000\022\033\n\027EnCopyPolicyMask_E"
    "nable\020\001*M\n\020SCAN_POLICY_MASK\022\034\n\030EnScanPol"
    "icyMask_Disable\020\000\022\033\n\027EnScanPolicyMask_En"
    "able\020\001*J\n\017FAX_POLICY_MASK\022\033\n\027EnFaxPolicy"
    "Mask_Disable\020\000\022\032\n\026EnFaxPolicyMask_Enable"
    "\020\001*\\\n\tPrtDbType\022\017\n\013DbType_MSDE\020\000\022\026\n\022DbTy"
    "pe_MSSQLSERVER\020\001\022\024\n\020DbType_ORACLESQL\020\002\022\020"
    "\n\014DbType_MYSQL\020\003*\201\001\n\010JOB_TYPE\022\021\n\rJOb_TYP"
    "E_NULL\020\000\022\022\n\016JOb_TYPE_PRINT\020\001\022\021\n\rJOb_TYPE"
    "_COPY\020\002\022\021\n\rJOb_TYPE_SCAN\020\003\022\020\n\014JOb_TYPE_F"
    "AX\020\004\022\026\n\022JOb_TYPE_CheckDebt\020\005*b\n\016JOB_LIMI"
    "T_TYPE\022\025\n\021JOb_LIMIT_PRINTER\020\000\022\021\n\rJOb_LIM"
    "IT_DEP\020\001\022\022\n\016JOb_LIMIT_USER\020\002\022\022\n\016JOb_LIMI"
    "T_NULL\020\003*\241\001\n\025JOB_LIMIT_PERIOD_TYPE\022\031\n\025JO"
    "b_LIMIT_PERIOD_NULL\020\000\022\030\n\024JOb_LIMIT_PERIO"
    "D_DAY\020\001\022\031\n\025JOb_LIMIT_PERIOD_WEEK\020\002\022\032\n\026JO"
    "b_LIMIT_PERIOD_MONTH\020\003\022\034\n\030JOB_LIMIT_PERI"
    "OD_QUARTER\020\004", 17532);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "printermessage.proto", &protobuf_RegisterTypes);
  PrintSecPolicy::default_instance_ = new PrintSecPolicy();
  JobSubmitCtrl::default_instance_ = new JobSubmitCtrl();
  JobFilterPolciy::default_instance_ = new JobFilterPolciy();
  JobAuditProcess::default_instance_ = new JobAuditProcess();
  SubmitPrintJob::default_instance_ = new SubmitPrintJob();
  SubmitPrintJobList::default_instance_ = new SubmitPrintJobList();
  PrtSationReqPrintJob::default_instance_ = new PrtSationReqPrintJob();
  PrtSationReqPrintJobList::default_instance_ = new PrtSationReqPrintJobList();
  PrtSationReqPrintHistoryJob::default_instance_ = new PrtSationReqPrintHistoryJob();
  PrtSationReqPrintHistoryJobList::default_instance_ = new PrtSationReqPrintHistoryJobList();
  CardInfo::default_instance_ = new CardInfo();
  PrtStationLogon::default_instance_ = new PrtStationLogon();
  PrtStationUserAccount::default_instance_ = new PrtStationUserAccount();
  PrtStationPrice::default_instance_ = new PrtStationPrice();
  PrtStationPriceStep::default_instance_ = new PrtStationPriceStep();
  PrtStationPriceStepList::default_instance_ = new PrtStationPriceStepList();
  PrtCopyPrice::default_instance_ = new PrtCopyPrice();
  PrtCopyPriceStep::default_instance_ = new PrtCopyPriceStep();
  PrtCopyPriceStepList::default_instance_ = new PrtCopyPriceStepList();
  PrtScanPrice::default_instance_ = new PrtScanPrice();
  PrtScanPriceStep::default_instance_ = new PrtScanPriceStep();
  PrtScanPriceStepList::default_instance_ = new PrtScanPriceStepList();
  PrtStationCheckUserResult::default_instance_ = new PrtStationCheckUserResult();
  PrtStationChargeErr::default_instance_ = new PrtStationChargeErr();
  PrtStationInfo::default_instance_ = new PrtStationInfo();
  AutoAddPrtStationInfo::default_instance_ = new AutoAddPrtStationInfo();
  PrintProjectSampleInfo::default_instance_ = new PrintProjectSampleInfo();
  PrintStationSampleInfo::default_instance_ = new PrintStationSampleInfo();
  PrintJobSecTypeInfo::default_instance_ = new PrintJobSecTypeInfo();
  PrintCtlReqInfo::default_instance_ = new PrintCtlReqInfo();
  PrintCltLogon::default_instance_ = new PrintCltLogon();
  PrintCltLoginVerifyCode::default_instance_ = new PrintCltLoginVerifyCode();
  PrintCltCheckUserResult::default_instance_ = new PrintCltCheckUserResult();
  PrintCtrlPolicy::default_instance_ = new PrintCtrlPolicy();
  PrtOrderCmpltInfo::default_instance_ = new PrtOrderCmpltInfo();
  RechargeFromCard::default_instance_ = new RechargeFromCard();
  RechargeFromCardErr::default_instance_ = new RechargeFromCardErr();
  PrtChargeResult::default_instance_ = new PrtChargeResult();
  PrtCopyCharge::default_instance_ = new PrtCopyCharge();
  PrtScanCharge::default_instance_ = new PrtScanCharge();
  PrtStationCharge::default_instance_ = new PrtStationCharge();
  PrtStationChargeOnEveryPage::default_instance_ = new PrtStationChargeOnEveryPage();
  PrtStationAlarm::default_instance_ = new PrtStationAlarm();
  PrtChargeToolLogon::default_instance_ = new PrtChargeToolLogon();
  PrtChargeToolCheckResult::default_instance_ = new PrtChargeToolCheckResult();
  PrtChargeToolOPLog::default_instance_ = new PrtChargeToolOPLog();
  PrtUserSelfChargeOPLog::default_instance_ = new PrtUserSelfChargeOPLog();
  PrtUserSelfChargeOpLogACK::default_instance_ = new PrtUserSelfChargeOpLogACK();
  PrtAdminInfo::default_instance_ = new PrtAdminInfo();
  PrtAdminInfoList::default_instance_ = new PrtAdminInfoList();
  PrintDocumentInfo::default_instance_ = new PrintDocumentInfo();
  FtpConfigInfo::default_instance_ = new FtpConfigInfo();
  CFuncPolicy::default_instance_ = new CFuncPolicy();
  PrtCenterSvr_UserPrintReq::default_instance_ = new PrtCenterSvr_UserPrintReq();
  AdjustPrintCountInfo::default_instance_ = new AdjustPrintCountInfo();
  ScanToMailAddrList::default_instance_ = new ScanToMailAddrList();
  PrtTranscriptIToolLogon::default_instance_ = new PrtTranscriptIToolLogon();
  PrtTranscriptIToolCheckResult::default_instance_ = new PrtTranscriptIToolCheckResult();
  PrtDbConfigInfo::default_instance_ = new PrtDbConfigInfo();
  ReqChargePrintTicket::default_instance_ = new ReqChargePrintTicket();
  ChargePrintTicket::default_instance_ = new ChargePrintTicket();
  PrintLimitPolicy::default_instance_ = new PrintLimitPolicy();
  CopyLimitPolicy::default_instance_ = new CopyLimitPolicy();
  ScanLimitPolicy::default_instance_ = new ScanLimitPolicy();
  PrinterMeterLog::default_instance_ = new PrinterMeterLog();
  PrinterShareInfo::default_instance_ = new PrinterShareInfo();
  PrintSecPolicy::default_instance_->InitAsDefaultInstance();
  JobSubmitCtrl::default_instance_->InitAsDefaultInstance();
  JobFilterPolciy::default_instance_->InitAsDefaultInstance();
  JobAuditProcess::default_instance_->InitAsDefaultInstance();
  SubmitPrintJob::default_instance_->InitAsDefaultInstance();
  SubmitPrintJobList::default_instance_->InitAsDefaultInstance();
  PrtSationReqPrintJob::default_instance_->InitAsDefaultInstance();
  PrtSationReqPrintJobList::default_instance_->InitAsDefaultInstance();
  PrtSationReqPrintHistoryJob::default_instance_->InitAsDefaultInstance();
  PrtSationReqPrintHistoryJobList::default_instance_->InitAsDefaultInstance();
  CardInfo::default_instance_->InitAsDefaultInstance();
  PrtStationLogon::default_instance_->InitAsDefaultInstance();
  PrtStationUserAccount::default_instance_->InitAsDefaultInstance();
  PrtStationPrice::default_instance_->InitAsDefaultInstance();
  PrtStationPriceStep::default_instance_->InitAsDefaultInstance();
  PrtStationPriceStepList::default_instance_->InitAsDefaultInstance();
  PrtCopyPrice::default_instance_->InitAsDefaultInstance();
  PrtCopyPriceStep::default_instance_->InitAsDefaultInstance();
  PrtCopyPriceStepList::default_instance_->InitAsDefaultInstance();
  PrtScanPrice::default_instance_->InitAsDefaultInstance();
  PrtScanPriceStep::default_instance_->InitAsDefaultInstance();
  PrtScanPriceStepList::default_instance_->InitAsDefaultInstance();
  PrtStationCheckUserResult::default_instance_->InitAsDefaultInstance();
  PrtStationChargeErr::default_instance_->InitAsDefaultInstance();
  PrtStationInfo::default_instance_->InitAsDefaultInstance();
  AutoAddPrtStationInfo::default_instance_->InitAsDefaultInstance();
  PrintProjectSampleInfo::default_instance_->InitAsDefaultInstance();
  PrintStationSampleInfo::default_instance_->InitAsDefaultInstance();
  PrintJobSecTypeInfo::default_instance_->InitAsDefaultInstance();
  PrintCtlReqInfo::default_instance_->InitAsDefaultInstance();
  PrintCltLogon::default_instance_->InitAsDefaultInstance();
  PrintCltLoginVerifyCode::default_instance_->InitAsDefaultInstance();
  PrintCltCheckUserResult::default_instance_->InitAsDefaultInstance();
  PrintCtrlPolicy::default_instance_->InitAsDefaultInstance();
  PrtOrderCmpltInfo::default_instance_->InitAsDefaultInstance();
  RechargeFromCard::default_instance_->InitAsDefaultInstance();
  RechargeFromCardErr::default_instance_->InitAsDefaultInstance();
  PrtChargeResult::default_instance_->InitAsDefaultInstance();
  PrtCopyCharge::default_instance_->InitAsDefaultInstance();
  PrtScanCharge::default_instance_->InitAsDefaultInstance();
  PrtStationCharge::default_instance_->InitAsDefaultInstance();
  PrtStationChargeOnEveryPage::default_instance_->InitAsDefaultInstance();
  PrtStationAlarm::default_instance_->InitAsDefaultInstance();
  PrtChargeToolLogon::default_instance_->InitAsDefaultInstance();
  PrtChargeToolCheckResult::default_instance_->InitAsDefaultInstance();
  PrtChargeToolOPLog::default_instance_->InitAsDefaultInstance();
  PrtUserSelfChargeOPLog::default_instance_->InitAsDefaultInstance();
  PrtUserSelfChargeOpLogACK::default_instance_->InitAsDefaultInstance();
  PrtAdminInfo::default_instance_->InitAsDefaultInstance();
  PrtAdminInfoList::default_instance_->InitAsDefaultInstance();
  PrintDocumentInfo::default_instance_->InitAsDefaultInstance();
  FtpConfigInfo::default_instance_->InitAsDefaultInstance();
  CFuncPolicy::default_instance_->InitAsDefaultInstance();
  PrtCenterSvr_UserPrintReq::default_instance_->InitAsDefaultInstance();
  AdjustPrintCountInfo::default_instance_->InitAsDefaultInstance();
  ScanToMailAddrList::default_instance_->InitAsDefaultInstance();
  PrtTranscriptIToolLogon::default_instance_->InitAsDefaultInstance();
  PrtTranscriptIToolCheckResult::default_instance_->InitAsDefaultInstance();
  PrtDbConfigInfo::default_instance_->InitAsDefaultInstance();
  ReqChargePrintTicket::default_instance_->InitAsDefaultInstance();
  ChargePrintTicket::default_instance_->InitAsDefaultInstance();
  PrintLimitPolicy::default_instance_->InitAsDefaultInstance();
  CopyLimitPolicy::default_instance_->InitAsDefaultInstance();
  ScanLimitPolicy::default_instance_->InitAsDefaultInstance();
  PrinterMeterLog::default_instance_->InitAsDefaultInstance();
  PrinterShareInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_printermessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_printermessage_2eproto {
  StaticDescriptorInitializer_printermessage_2eproto() {
    protobuf_AddDesc_printermessage_2eproto();
  }
} static_descriptor_initializer_printermessage_2eproto_;

const ::google::protobuf::EnumDescriptor* Job_Op_State_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Job_Op_State_descriptor_;
}
bool Job_Op_State_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Printer_Paper_Source_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Printer_Paper_Source_descriptor_;
}
bool Printer_Paper_Source_IsValid(int value) {
  switch(value) {
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 1015:
    case 1016:
    case 1017:
    case 1018:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Print_Job_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Print_Job_Type_descriptor_;
}
bool Print_Job_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* JOB_STORAGE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JOB_STORAGE_TYPE_descriptor_;
}
bool JOB_STORAGE_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* JOB_PRICE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JOB_PRICE_TYPE_descriptor_;
}
bool JOB_PRICE_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ScanChargeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScanChargeType_descriptor_;
}
bool ScanChargeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* JOb_CHECK_BY_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JOb_CHECK_BY_descriptor_;
}
bool JOb_CHECK_BY_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* JOB_CHECK_FAILURE_ACTION_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JOB_CHECK_FAILURE_ACTION_TYPE_descriptor_;
}
bool JOB_CHECK_FAILURE_ACTION_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* JOB_SUBMIT_MODE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JOB_SUBMIT_MODE_descriptor_;
}
bool JOB_SUBMIT_MODE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* JOB_PRINT_MODE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JOB_PRINT_MODE_descriptor_;
}
bool JOB_PRINT_MODE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* JOB_FILTER_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JOB_FILTER_TYPE_descriptor_;
}
bool JOB_FILTER_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PRT_REQ_JOB_BY_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PRT_REQ_JOB_BY_descriptor_;
}
bool PRT_REQ_JOB_BY_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SUBMIT_JOB_STATE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SUBMIT_JOB_STATE_descriptor_;
}
bool SUBMIT_JOB_STATE_IsValid(int value) {
  switch(value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CHARGE_FOR_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CHARGE_FOR_descriptor_;
}
bool CHARGE_FOR_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PRINT_POLICY_MASK_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PRINT_POLICY_MASK_descriptor_;
}
bool PRINT_POLICY_MASK_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* COPY_POLICY_MASK_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return COPY_POLICY_MASK_descriptor_;
}
bool COPY_POLICY_MASK_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SCAN_POLICY_MASK_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCAN_POLICY_MASK_descriptor_;
}
bool SCAN_POLICY_MASK_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FAX_POLICY_MASK_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FAX_POLICY_MASK_descriptor_;
}
bool FAX_POLICY_MASK_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PrtDbType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtDbType_descriptor_;
}
bool PrtDbType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* JOB_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JOB_TYPE_descriptor_;
}
bool JOB_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* JOB_LIMIT_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JOB_LIMIT_TYPE_descriptor_;
}
bool JOB_LIMIT_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* JOB_LIMIT_PERIOD_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JOB_LIMIT_PERIOD_TYPE_descriptor_;
}
bool JOB_LIMIT_PERIOD_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PrintSecPolicy::kActiveFooterFieldNumber;
const int PrintSecPolicy::kActiveHeaderFieldNumber;
const int PrintSecPolicy::kActiveWatermarkFieldNumber;
const int PrintSecPolicy::kFooterFieldNumber;
const int PrintSecPolicy::kHeaderFieldNumber;
const int PrintSecPolicy::kWatermarkFieldNumber;
#endif  // !_MSC_VER

PrintSecPolicy::PrintSecPolicy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrintSecPolicy::InitAsDefaultInstance() {
}

PrintSecPolicy::PrintSecPolicy(const PrintSecPolicy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrintSecPolicy::SharedCtor() {
  _cached_size_ = 0;
  active_footer_ = 0;
  active_header_ = 0;
  active_watermark_ = 0;
  footer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  header_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  watermark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrintSecPolicy::~PrintSecPolicy() {
  SharedDtor();
}

void PrintSecPolicy::SharedDtor() {
  if (footer_ != &::google::protobuf::internal::kEmptyString) {
    delete footer_;
  }
  if (header_ != &::google::protobuf::internal::kEmptyString) {
    delete header_;
  }
  if (watermark_ != &::google::protobuf::internal::kEmptyString) {
    delete watermark_;
  }
  if (this != default_instance_) {
  }
}

void PrintSecPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrintSecPolicy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrintSecPolicy_descriptor_;
}

const PrintSecPolicy& PrintSecPolicy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrintSecPolicy* PrintSecPolicy::default_instance_ = NULL;

PrintSecPolicy* PrintSecPolicy::New() const {
  return new PrintSecPolicy;
}

void PrintSecPolicy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    active_footer_ = 0;
    active_header_ = 0;
    active_watermark_ = 0;
    if (has_footer()) {
      if (footer_ != &::google::protobuf::internal::kEmptyString) {
        footer_->clear();
      }
    }
    if (has_header()) {
      if (header_ != &::google::protobuf::internal::kEmptyString) {
        header_->clear();
      }
    }
    if (has_watermark()) {
      if (watermark_ != &::google::protobuf::internal::kEmptyString) {
        watermark_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrintSecPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 active_footer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_footer_)));
          set_has_active_footer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_active_header;
        break;
      }
      
      // optional int32 active_header = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_header:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_header_)));
          set_has_active_header();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_active_watermark;
        break;
      }
      
      // optional int32 active_watermark = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_watermark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_watermark_)));
          set_has_active_watermark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_footer;
        break;
      }
      
      // optional string footer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_footer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_footer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->footer().data(), this->footer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_header;
        break;
      }
      
      // optional string header = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_header:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_header()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->header().data(), this->header().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_watermark;
        break;
      }
      
      // optional string watermark = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_watermark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_watermark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->watermark().data(), this->watermark().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrintSecPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 active_footer = 1;
  if (has_active_footer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->active_footer(), output);
  }
  
  // optional int32 active_header = 2;
  if (has_active_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->active_header(), output);
  }
  
  // optional int32 active_watermark = 3;
  if (has_active_watermark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->active_watermark(), output);
  }
  
  // optional string footer = 4;
  if (has_footer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->footer().data(), this->footer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->footer(), output);
  }
  
  // optional string header = 5;
  if (has_header()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->header().data(), this->header().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->header(), output);
  }
  
  // optional string watermark = 6;
  if (has_watermark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->watermark().data(), this->watermark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->watermark(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrintSecPolicy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 active_footer = 1;
  if (has_active_footer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->active_footer(), target);
  }
  
  // optional int32 active_header = 2;
  if (has_active_header()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->active_header(), target);
  }
  
  // optional int32 active_watermark = 3;
  if (has_active_watermark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->active_watermark(), target);
  }
  
  // optional string footer = 4;
  if (has_footer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->footer().data(), this->footer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->footer(), target);
  }
  
  // optional string header = 5;
  if (has_header()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->header().data(), this->header().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->header(), target);
  }
  
  // optional string watermark = 6;
  if (has_watermark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->watermark().data(), this->watermark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->watermark(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrintSecPolicy::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 active_footer = 1;
    if (has_active_footer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active_footer());
    }
    
    // optional int32 active_header = 2;
    if (has_active_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active_header());
    }
    
    // optional int32 active_watermark = 3;
    if (has_active_watermark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active_watermark());
    }
    
    // optional string footer = 4;
    if (has_footer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->footer());
    }
    
    // optional string header = 5;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->header());
    }
    
    // optional string watermark = 6;
    if (has_watermark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->watermark());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrintSecPolicy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrintSecPolicy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrintSecPolicy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrintSecPolicy::MergeFrom(const PrintSecPolicy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active_footer()) {
      set_active_footer(from.active_footer());
    }
    if (from.has_active_header()) {
      set_active_header(from.active_header());
    }
    if (from.has_active_watermark()) {
      set_active_watermark(from.active_watermark());
    }
    if (from.has_footer()) {
      set_footer(from.footer());
    }
    if (from.has_header()) {
      set_header(from.header());
    }
    if (from.has_watermark()) {
      set_watermark(from.watermark());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrintSecPolicy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrintSecPolicy::CopyFrom(const PrintSecPolicy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrintSecPolicy::IsInitialized() const {
  
  return true;
}

void PrintSecPolicy::Swap(PrintSecPolicy* other) {
  if (other != this) {
    std::swap(active_footer_, other->active_footer_);
    std::swap(active_header_, other->active_header_);
    std::swap(active_watermark_, other->active_watermark_);
    std::swap(footer_, other->footer_);
    std::swap(header_, other->header_);
    std::swap(watermark_, other->watermark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrintSecPolicy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrintSecPolicy_descriptor_;
  metadata.reflection = PrintSecPolicy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JobSubmitCtrl::kMaxPageEachTimeFieldNumber;
const int JobSubmitCtrl::kMaxSizeEachTimeFieldNumber;
const int JobSubmitCtrl::kMaxSizeAllFieldNumber;
const int JobSubmitCtrl::kCurAllSizeFieldNumber;
#endif  // !_MSC_VER

JobSubmitCtrl::JobSubmitCtrl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JobSubmitCtrl::InitAsDefaultInstance() {
}

JobSubmitCtrl::JobSubmitCtrl(const JobSubmitCtrl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JobSubmitCtrl::SharedCtor() {
  _cached_size_ = 0;
  max_page_each_time_ = 0;
  max_size_each_time_ = 0;
  max_size_all_ = 0;
  cur_all_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JobSubmitCtrl::~JobSubmitCtrl() {
  SharedDtor();
}

void JobSubmitCtrl::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JobSubmitCtrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobSubmitCtrl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JobSubmitCtrl_descriptor_;
}

const JobSubmitCtrl& JobSubmitCtrl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

JobSubmitCtrl* JobSubmitCtrl::default_instance_ = NULL;

JobSubmitCtrl* JobSubmitCtrl::New() const {
  return new JobSubmitCtrl;
}

void JobSubmitCtrl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    max_page_each_time_ = 0;
    max_size_each_time_ = 0;
    max_size_all_ = 0;
    cur_all_size_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JobSubmitCtrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 max_page_each_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_page_each_time_)));
          set_has_max_page_each_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_max_size_each_time;
        break;
      }
      
      // optional int32 max_size_each_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_size_each_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_size_each_time_)));
          set_has_max_size_each_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_size_all;
        break;
      }
      
      // optional int32 max_size_all = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_size_all:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_size_all_)));
          set_has_max_size_all();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cur_all_size;
        break;
      }
      
      // optional int32 cur_all_size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_all_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_all_size_)));
          set_has_cur_all_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JobSubmitCtrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 max_page_each_time = 1;
  if (has_max_page_each_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_page_each_time(), output);
  }
  
  // optional int32 max_size_each_time = 2;
  if (has_max_size_each_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_size_each_time(), output);
  }
  
  // optional int32 max_size_all = 3;
  if (has_max_size_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_size_all(), output);
  }
  
  // optional int32 cur_all_size = 4;
  if (has_cur_all_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cur_all_size(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JobSubmitCtrl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 max_page_each_time = 1;
  if (has_max_page_each_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_page_each_time(), target);
  }
  
  // optional int32 max_size_each_time = 2;
  if (has_max_size_each_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_size_each_time(), target);
  }
  
  // optional int32 max_size_all = 3;
  if (has_max_size_all()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_size_all(), target);
  }
  
  // optional int32 cur_all_size = 4;
  if (has_cur_all_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cur_all_size(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JobSubmitCtrl::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 max_page_each_time = 1;
    if (has_max_page_each_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_page_each_time());
    }
    
    // optional int32 max_size_each_time = 2;
    if (has_max_size_each_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_size_each_time());
    }
    
    // optional int32 max_size_all = 3;
    if (has_max_size_all()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_size_all());
    }
    
    // optional int32 cur_all_size = 4;
    if (has_cur_all_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_all_size());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobSubmitCtrl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JobSubmitCtrl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JobSubmitCtrl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JobSubmitCtrl::MergeFrom(const JobSubmitCtrl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_page_each_time()) {
      set_max_page_each_time(from.max_page_each_time());
    }
    if (from.has_max_size_each_time()) {
      set_max_size_each_time(from.max_size_each_time());
    }
    if (from.has_max_size_all()) {
      set_max_size_all(from.max_size_all());
    }
    if (from.has_cur_all_size()) {
      set_cur_all_size(from.cur_all_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JobSubmitCtrl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobSubmitCtrl::CopyFrom(const JobSubmitCtrl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobSubmitCtrl::IsInitialized() const {
  
  return true;
}

void JobSubmitCtrl::Swap(JobSubmitCtrl* other) {
  if (other != this) {
    std::swap(max_page_each_time_, other->max_page_each_time_);
    std::swap(max_size_each_time_, other->max_size_each_time_);
    std::swap(max_size_all_, other->max_size_all_);
    std::swap(cur_all_size_, other->cur_all_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JobSubmitCtrl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JobSubmitCtrl_descriptor_;
  metadata.reflection = JobSubmitCtrl_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JobFilterPolciy::kTypeFieldNumber;
const int JobFilterPolciy::kKeyWordFieldNumber;
#endif  // !_MSC_VER

JobFilterPolciy::JobFilterPolciy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JobFilterPolciy::InitAsDefaultInstance() {
}

JobFilterPolciy::JobFilterPolciy(const JobFilterPolciy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JobFilterPolciy::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  key_word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JobFilterPolciy::~JobFilterPolciy() {
  SharedDtor();
}

void JobFilterPolciy::SharedDtor() {
  if (key_word_ != &::google::protobuf::internal::kEmptyString) {
    delete key_word_;
  }
  if (this != default_instance_) {
  }
}

void JobFilterPolciy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobFilterPolciy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JobFilterPolciy_descriptor_;
}

const JobFilterPolciy& JobFilterPolciy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

JobFilterPolciy* JobFilterPolciy::default_instance_ = NULL;

JobFilterPolciy* JobFilterPolciy::New() const {
  return new JobFilterPolciy;
}

void JobFilterPolciy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_key_word()) {
      if (key_word_ != &::google::protobuf::internal::kEmptyString) {
        key_word_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JobFilterPolciy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .isafetec.JOB_FILTER_TYPE type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::JOB_FILTER_TYPE_IsValid(value)) {
            set_type(static_cast< isafetec::JOB_FILTER_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key_word;
        break;
      }
      
      // optional string key_word = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key_word:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key_word()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key_word().data(), this->key_word().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JobFilterPolciy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .isafetec.JOB_FILTER_TYPE type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional string key_word = 2;
  if (has_key_word()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key_word().data(), this->key_word().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->key_word(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JobFilterPolciy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .isafetec.JOB_FILTER_TYPE type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional string key_word = 2;
  if (has_key_word()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key_word().data(), this->key_word().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key_word(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JobFilterPolciy::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .isafetec.JOB_FILTER_TYPE type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional string key_word = 2;
    if (has_key_word()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key_word());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobFilterPolciy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JobFilterPolciy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JobFilterPolciy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JobFilterPolciy::MergeFrom(const JobFilterPolciy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_key_word()) {
      set_key_word(from.key_word());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JobFilterPolciy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobFilterPolciy::CopyFrom(const JobFilterPolciy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobFilterPolciy::IsInitialized() const {
  
  return true;
}

void JobFilterPolciy::Swap(JobFilterPolciy* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(key_word_, other->key_word_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JobFilterPolciy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JobFilterPolciy_descriptor_;
  metadata.reflection = JobFilterPolciy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JobAuditProcess::kCheckByFieldNumber;
const int JobAuditProcess::kAdminIdFieldNumber;
const int JobAuditProcess::kFltPolicyFieldNumber;
const int JobAuditProcess::kNextActionFieldNumber;
#endif  // !_MSC_VER

JobAuditProcess::JobAuditProcess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JobAuditProcess::InitAsDefaultInstance() {
  flt_policy_ = const_cast< ::isafetec::JobFilterPolciy*>(&::isafetec::JobFilterPolciy::default_instance());
}

JobAuditProcess::JobAuditProcess(const JobAuditProcess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JobAuditProcess::SharedCtor() {
  _cached_size_ = 0;
  check_by_ = 0;
  admin_id_ = 0;
  flt_policy_ = NULL;
  next_action_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JobAuditProcess::~JobAuditProcess() {
  SharedDtor();
}

void JobAuditProcess::SharedDtor() {
  if (this != default_instance_) {
    delete flt_policy_;
  }
}

void JobAuditProcess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobAuditProcess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JobAuditProcess_descriptor_;
}

const JobAuditProcess& JobAuditProcess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

JobAuditProcess* JobAuditProcess::default_instance_ = NULL;

JobAuditProcess* JobAuditProcess::New() const {
  return new JobAuditProcess;
}

void JobAuditProcess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    check_by_ = 0;
    admin_id_ = 0;
    if (has_flt_policy()) {
      if (flt_policy_ != NULL) flt_policy_->::isafetec::JobFilterPolciy::Clear();
    }
    next_action_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JobAuditProcess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .isafetec.JOb_CHECK_BY check_by = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::JOb_CHECK_BY_IsValid(value)) {
            set_check_by(static_cast< isafetec::JOb_CHECK_BY >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_admin_id;
        break;
      }
      
      // optional int32 admin_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_admin_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &admin_id_)));
          set_has_admin_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_flt_policy;
        break;
      }
      
      // optional .isafetec.JobFilterPolciy flt_policy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flt_policy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flt_policy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_next_action;
        break;
      }
      
      // optional .isafetec.JOB_CHECK_FAILURE_ACTION_TYPE next_action = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::JOB_CHECK_FAILURE_ACTION_TYPE_IsValid(value)) {
            set_next_action(static_cast< isafetec::JOB_CHECK_FAILURE_ACTION_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JobAuditProcess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .isafetec.JOb_CHECK_BY check_by = 1;
  if (has_check_by()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->check_by(), output);
  }
  
  // optional int32 admin_id = 2;
  if (has_admin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->admin_id(), output);
  }
  
  // optional .isafetec.JobFilterPolciy flt_policy = 3;
  if (has_flt_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->flt_policy(), output);
  }
  
  // optional .isafetec.JOB_CHECK_FAILURE_ACTION_TYPE next_action = 4;
  if (has_next_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->next_action(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JobAuditProcess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .isafetec.JOb_CHECK_BY check_by = 1;
  if (has_check_by()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->check_by(), target);
  }
  
  // optional int32 admin_id = 2;
  if (has_admin_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->admin_id(), target);
  }
  
  // optional .isafetec.JobFilterPolciy flt_policy = 3;
  if (has_flt_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->flt_policy(), target);
  }
  
  // optional .isafetec.JOB_CHECK_FAILURE_ACTION_TYPE next_action = 4;
  if (has_next_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->next_action(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JobAuditProcess::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .isafetec.JOb_CHECK_BY check_by = 1;
    if (has_check_by()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->check_by());
    }
    
    // optional int32 admin_id = 2;
    if (has_admin_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->admin_id());
    }
    
    // optional .isafetec.JobFilterPolciy flt_policy = 3;
    if (has_flt_policy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flt_policy());
    }
    
    // optional .isafetec.JOB_CHECK_FAILURE_ACTION_TYPE next_action = 4;
    if (has_next_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->next_action());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobAuditProcess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JobAuditProcess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JobAuditProcess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JobAuditProcess::MergeFrom(const JobAuditProcess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_check_by()) {
      set_check_by(from.check_by());
    }
    if (from.has_admin_id()) {
      set_admin_id(from.admin_id());
    }
    if (from.has_flt_policy()) {
      mutable_flt_policy()->::isafetec::JobFilterPolciy::MergeFrom(from.flt_policy());
    }
    if (from.has_next_action()) {
      set_next_action(from.next_action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JobAuditProcess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobAuditProcess::CopyFrom(const JobAuditProcess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobAuditProcess::IsInitialized() const {
  
  return true;
}

void JobAuditProcess::Swap(JobAuditProcess* other) {
  if (other != this) {
    std::swap(check_by_, other->check_by_);
    std::swap(admin_id_, other->admin_id_);
    std::swap(flt_policy_, other->flt_policy_);
    std::swap(next_action_, other->next_action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JobAuditProcess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JobAuditProcess_descriptor_;
  metadata.reflection = JobAuditProcess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubmitPrintJob::kEquipIdFieldNumber;
const int SubmitPrintJob::kEquipHostFieldNumber;
const int SubmitPrintJob::kWinUserFieldNumber;
const int SubmitPrintJob::kUserIdFieldNumber;
const int SubmitPrintJob::kJobIdFieldNumber;
const int SubmitPrintJob::kPaperSizeFieldNumber;
const int SubmitPrintJob::kPageTypeFieldNumber;
const int SubmitPrintJob::kCopiesFieldNumber;
const int SubmitPrintJob::kColorFieldNumber;
const int SubmitPrintJob::kTotalPageFieldNumber;
const int SubmitPrintJob::kOrientationFieldNumber;
const int SubmitPrintJob::kDoublePrintFieldNumber;
const int SubmitPrintJob::kDocNameFieldNumber;
const int SubmitPrintJob::kPrinterNameFieldNumber;
const int SubmitPrintJob::kSubmitTimeFieldNumber;
const int SubmitPrintJob::kDocSizeFieldNumber;
const int SubmitPrintJob::kZipJobSizeFieldNumber;
const int SubmitPrintJob::kJobPathFieldNumber;
const int SubmitPrintJob::kJobDirFieldNumber;
const int SubmitPrintJob::kProjectIdFieldNumber;
const int SubmitPrintJob::kOrderPrtStationIdFieldNumber;
const int SubmitPrintJob::kDirectPrtStationIdFieldNumber;
const int SubmitPrintJob::kSecTypeFieldNumber;
const int SubmitPrintJob::kPaperSourceFieldNumber;
const int SubmitPrintJob::kImageUsePhysicalAreaFieldNumber;
const int SubmitPrintJob::kCollateFieldNumber;
#endif  // !_MSC_VER

SubmitPrintJob::SubmitPrintJob()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubmitPrintJob::InitAsDefaultInstance() {
}

SubmitPrintJob::SubmitPrintJob(const SubmitPrintJob& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubmitPrintJob::SharedCtor() {
  _cached_size_ = 0;
  equip_id_ = 0;
  equip_host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  win_user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_id_ = 0;
  job_id_ = 0;
  paper_size_ = 0;
  page_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  copies_ = 0;
  color_ = 0;
  total_page_ = 0;
  orientation_ = 0;
  double_print_ = 0;
  doc_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  printer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  submit_time_ = 0;
  doc_size_ = 0;
  zip_job_size_ = 0;
  job_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  job_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  project_id_ = 0;
  order_prtstation_id_ = 0;
  direct_prtstation_id_ = 0;
  sec_type_ = 0;
  paper_source_ = 1000;
  image_use_physical_area_ = false;
  collate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubmitPrintJob::~SubmitPrintJob() {
  SharedDtor();
}

void SubmitPrintJob::SharedDtor() {
  if (equip_host_ != &::google::protobuf::internal::kEmptyString) {
    delete equip_host_;
  }
  if (win_user_ != &::google::protobuf::internal::kEmptyString) {
    delete win_user_;
  }
  if (page_type_ != &::google::protobuf::internal::kEmptyString) {
    delete page_type_;
  }
  if (doc_name_ != &::google::protobuf::internal::kEmptyString) {
    delete doc_name_;
  }
  if (printer_name_ != &::google::protobuf::internal::kEmptyString) {
    delete printer_name_;
  }
  if (job_path_ != &::google::protobuf::internal::kEmptyString) {
    delete job_path_;
  }
  if (job_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete job_dir_;
  }
  if (this != default_instance_) {
  }
}

void SubmitPrintJob::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubmitPrintJob::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubmitPrintJob_descriptor_;
}

const SubmitPrintJob& SubmitPrintJob::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

SubmitPrintJob* SubmitPrintJob::default_instance_ = NULL;

SubmitPrintJob* SubmitPrintJob::New() const {
  return new SubmitPrintJob;
}

void SubmitPrintJob::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equip_id_ = 0;
    if (has_equip_host()) {
      if (equip_host_ != &::google::protobuf::internal::kEmptyString) {
        equip_host_->clear();
      }
    }
    if (has_win_user()) {
      if (win_user_ != &::google::protobuf::internal::kEmptyString) {
        win_user_->clear();
      }
    }
    user_id_ = 0;
    job_id_ = 0;
    paper_size_ = 0;
    if (has_page_type()) {
      if (page_type_ != &::google::protobuf::internal::kEmptyString) {
        page_type_->clear();
      }
    }
    copies_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    color_ = 0;
    total_page_ = 0;
    orientation_ = 0;
    double_print_ = 0;
    if (has_doc_name()) {
      if (doc_name_ != &::google::protobuf::internal::kEmptyString) {
        doc_name_->clear();
      }
    }
    if (has_printer_name()) {
      if (printer_name_ != &::google::protobuf::internal::kEmptyString) {
        printer_name_->clear();
      }
    }
    submit_time_ = 0;
    doc_size_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    zip_job_size_ = 0;
    if (has_job_path()) {
      if (job_path_ != &::google::protobuf::internal::kEmptyString) {
        job_path_->clear();
      }
    }
    if (has_job_dir()) {
      if (job_dir_ != &::google::protobuf::internal::kEmptyString) {
        job_dir_->clear();
      }
    }
    project_id_ = 0;
    order_prtstation_id_ = 0;
    direct_prtstation_id_ = 0;
    sec_type_ = 0;
    paper_source_ = 1000;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    image_use_physical_area_ = false;
    collate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubmitPrintJob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 equip_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_id_)));
          set_has_equip_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equip_host;
        break;
      }
      
      // optional string equip_host = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equip_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->equip_host().data(), this->equip_host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_win_user;
        break;
      }
      
      // optional string win_user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_win_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_win_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->win_user().data(), this->win_user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_user_id;
        break;
      }
      
      // optional int32 user_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_job_id;
        break;
      }
      
      // optional int32 job_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_id_)));
          set_has_job_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_paper_size;
        break;
      }
      
      // optional int32 paper_size = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paper_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paper_size_)));
          set_has_paper_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_page_type;
        break;
      }
      
      // optional string page_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_page_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->page_type().data(), this->page_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_copies;
        break;
      }
      
      // optional int32 copies = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copies:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &copies_)));
          set_has_copies();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_color;
        break;
      }
      
      // optional int32 color = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_total_page;
        break;
      }
      
      // optional int32 total_page = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_page_)));
          set_has_total_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_orientation;
        break;
      }
      
      // optional int32 orientation = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_orientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orientation_)));
          set_has_orientation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_double_print;
        break;
      }
      
      // optional int32 double_print = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_double_print:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &double_print_)));
          set_has_double_print();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_doc_name;
        break;
      }
      
      // optional string doc_name = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_doc_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_doc_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->doc_name().data(), this->doc_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_printer_name;
        break;
      }
      
      // optional string printer_name = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_printer_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_printer_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->printer_name().data(), this->printer_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_submit_time;
        break;
      }
      
      // optional double submit_time = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_submit_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &submit_time_)));
          set_has_submit_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_doc_size;
        break;
      }
      
      // optional int32 doc_size = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_doc_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doc_size_)));
          set_has_doc_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_zip_job_size;
        break;
      }
      
      // optional int32 zip_job_size = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zip_job_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zip_job_size_)));
          set_has_zip_job_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_job_path;
        break;
      }
      
      // optional string job_path = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_job_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_job_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->job_path().data(), this->job_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_job_dir;
        break;
      }
      
      // optional string job_dir = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_job_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_job_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->job_dir().data(), this->job_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_project_id;
        break;
      }
      
      // optional int32 project_id = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_project_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &project_id_)));
          set_has_project_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_order_PrtStation_id;
        break;
      }
      
      // optional int32 order_PrtStation_id = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order_PrtStation_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_prtstation_id_)));
          set_has_order_prtstation_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_direct_PrtStation_id;
        break;
      }
      
      // optional int32 direct_PrtStation_id = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direct_PrtStation_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direct_prtstation_id_)));
          set_has_direct_prtstation_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_sec_type;
        break;
      }
      
      // optional .isafetec.JOB_STORAGE_TYPE sec_type = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sec_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::JOB_STORAGE_TYPE_IsValid(value)) {
            set_sec_type(static_cast< isafetec::JOB_STORAGE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(23, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_paper_source;
        break;
      }
      
      // optional .isafetec.Printer_Paper_Source paper_source = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paper_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::Printer_Paper_Source_IsValid(value)) {
            set_paper_source(static_cast< isafetec::Printer_Paper_Source >(value));
          } else {
            mutable_unknown_fields()->AddVarint(24, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_image_use_physical_area;
        break;
      }
      
      // optional bool image_use_physical_area = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_image_use_physical_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &image_use_physical_area_)));
          set_has_image_use_physical_area();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_collate;
        break;
      }
      
      // optional int32 collate = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_collate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &collate_)));
          set_has_collate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubmitPrintJob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 equip_id = 1;
  if (has_equip_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->equip_id(), output);
  }
  
  // optional string equip_host = 2;
  if (has_equip_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equip_host().data(), this->equip_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->equip_host(), output);
  }
  
  // optional string win_user = 3;
  if (has_win_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->win_user().data(), this->win_user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->win_user(), output);
  }
  
  // optional int32 user_id = 4;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->user_id(), output);
  }
  
  // optional int32 job_id = 5;
  if (has_job_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->job_id(), output);
  }
  
  // optional int32 paper_size = 6;
  if (has_paper_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->paper_size(), output);
  }
  
  // optional string page_type = 7;
  if (has_page_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page_type().data(), this->page_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->page_type(), output);
  }
  
  // optional int32 copies = 8;
  if (has_copies()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->copies(), output);
  }
  
  // optional int32 color = 9;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->color(), output);
  }
  
  // optional int32 total_page = 10;
  if (has_total_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->total_page(), output);
  }
  
  // optional int32 orientation = 11;
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->orientation(), output);
  }
  
  // optional int32 double_print = 12;
  if (has_double_print()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->double_print(), output);
  }
  
  // optional string doc_name = 13;
  if (has_doc_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->doc_name().data(), this->doc_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->doc_name(), output);
  }
  
  // optional string printer_name = 14;
  if (has_printer_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->printer_name().data(), this->printer_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->printer_name(), output);
  }
  
  // optional double submit_time = 15;
  if (has_submit_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->submit_time(), output);
  }
  
  // optional int32 doc_size = 16;
  if (has_doc_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->doc_size(), output);
  }
  
  // optional int32 zip_job_size = 17;
  if (has_zip_job_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->zip_job_size(), output);
  }
  
  // optional string job_path = 18;
  if (has_job_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->job_path().data(), this->job_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->job_path(), output);
  }
  
  // optional string job_dir = 19;
  if (has_job_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->job_dir().data(), this->job_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->job_dir(), output);
  }
  
  // optional int32 project_id = 20;
  if (has_project_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->project_id(), output);
  }
  
  // optional int32 order_PrtStation_id = 21;
  if (has_order_prtstation_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->order_prtstation_id(), output);
  }
  
  // optional int32 direct_PrtStation_id = 22;
  if (has_direct_prtstation_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->direct_prtstation_id(), output);
  }
  
  // optional .isafetec.JOB_STORAGE_TYPE sec_type = 23;
  if (has_sec_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->sec_type(), output);
  }
  
  // optional .isafetec.Printer_Paper_Source paper_source = 24;
  if (has_paper_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      24, this->paper_source(), output);
  }
  
  // optional bool image_use_physical_area = 25;
  if (has_image_use_physical_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->image_use_physical_area(), output);
  }
  
  // optional int32 collate = 26;
  if (has_collate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->collate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubmitPrintJob::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 equip_id = 1;
  if (has_equip_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->equip_id(), target);
  }
  
  // optional string equip_host = 2;
  if (has_equip_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equip_host().data(), this->equip_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->equip_host(), target);
  }
  
  // optional string win_user = 3;
  if (has_win_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->win_user().data(), this->win_user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->win_user(), target);
  }
  
  // optional int32 user_id = 4;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->user_id(), target);
  }
  
  // optional int32 job_id = 5;
  if (has_job_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->job_id(), target);
  }
  
  // optional int32 paper_size = 6;
  if (has_paper_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->paper_size(), target);
  }
  
  // optional string page_type = 7;
  if (has_page_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page_type().data(), this->page_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->page_type(), target);
  }
  
  // optional int32 copies = 8;
  if (has_copies()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->copies(), target);
  }
  
  // optional int32 color = 9;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->color(), target);
  }
  
  // optional int32 total_page = 10;
  if (has_total_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->total_page(), target);
  }
  
  // optional int32 orientation = 11;
  if (has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->orientation(), target);
  }
  
  // optional int32 double_print = 12;
  if (has_double_print()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->double_print(), target);
  }
  
  // optional string doc_name = 13;
  if (has_doc_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->doc_name().data(), this->doc_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->doc_name(), target);
  }
  
  // optional string printer_name = 14;
  if (has_printer_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->printer_name().data(), this->printer_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->printer_name(), target);
  }
  
  // optional double submit_time = 15;
  if (has_submit_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->submit_time(), target);
  }
  
  // optional int32 doc_size = 16;
  if (has_doc_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->doc_size(), target);
  }
  
  // optional int32 zip_job_size = 17;
  if (has_zip_job_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->zip_job_size(), target);
  }
  
  // optional string job_path = 18;
  if (has_job_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->job_path().data(), this->job_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->job_path(), target);
  }
  
  // optional string job_dir = 19;
  if (has_job_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->job_dir().data(), this->job_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->job_dir(), target);
  }
  
  // optional int32 project_id = 20;
  if (has_project_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->project_id(), target);
  }
  
  // optional int32 order_PrtStation_id = 21;
  if (has_order_prtstation_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->order_prtstation_id(), target);
  }
  
  // optional int32 direct_PrtStation_id = 22;
  if (has_direct_prtstation_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->direct_prtstation_id(), target);
  }
  
  // optional .isafetec.JOB_STORAGE_TYPE sec_type = 23;
  if (has_sec_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      23, this->sec_type(), target);
  }
  
  // optional .isafetec.Printer_Paper_Source paper_source = 24;
  if (has_paper_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      24, this->paper_source(), target);
  }
  
  // optional bool image_use_physical_area = 25;
  if (has_image_use_physical_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->image_use_physical_area(), target);
  }
  
  // optional int32 collate = 26;
  if (has_collate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->collate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubmitPrintJob::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 equip_id = 1;
    if (has_equip_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_id());
    }
    
    // optional string equip_host = 2;
    if (has_equip_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equip_host());
    }
    
    // optional string win_user = 3;
    if (has_win_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->win_user());
    }
    
    // optional int32 user_id = 4;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }
    
    // optional int32 job_id = 5;
    if (has_job_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job_id());
    }
    
    // optional int32 paper_size = 6;
    if (has_paper_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->paper_size());
    }
    
    // optional string page_type = 7;
    if (has_page_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->page_type());
    }
    
    // optional int32 copies = 8;
    if (has_copies()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->copies());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 color = 9;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }
    
    // optional int32 total_page = 10;
    if (has_total_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_page());
    }
    
    // optional int32 orientation = 11;
    if (has_orientation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orientation());
    }
    
    // optional int32 double_print = 12;
    if (has_double_print()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->double_print());
    }
    
    // optional string doc_name = 13;
    if (has_doc_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->doc_name());
    }
    
    // optional string printer_name = 14;
    if (has_printer_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->printer_name());
    }
    
    // optional double submit_time = 15;
    if (has_submit_time()) {
      total_size += 1 + 8;
    }
    
    // optional int32 doc_size = 16;
    if (has_doc_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doc_size());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 zip_job_size = 17;
    if (has_zip_job_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zip_job_size());
    }
    
    // optional string job_path = 18;
    if (has_job_path()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->job_path());
    }
    
    // optional string job_dir = 19;
    if (has_job_dir()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->job_dir());
    }
    
    // optional int32 project_id = 20;
    if (has_project_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->project_id());
    }
    
    // optional int32 order_PrtStation_id = 21;
    if (has_order_prtstation_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order_prtstation_id());
    }
    
    // optional int32 direct_PrtStation_id = 22;
    if (has_direct_prtstation_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->direct_prtstation_id());
    }
    
    // optional .isafetec.JOB_STORAGE_TYPE sec_type = 23;
    if (has_sec_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sec_type());
    }
    
    // optional .isafetec.Printer_Paper_Source paper_source = 24;
    if (has_paper_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->paper_source());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool image_use_physical_area = 25;
    if (has_image_use_physical_area()) {
      total_size += 2 + 1;
    }
    
    // optional int32 collate = 26;
    if (has_collate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->collate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubmitPrintJob::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubmitPrintJob* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubmitPrintJob*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubmitPrintJob::MergeFrom(const SubmitPrintJob& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_id()) {
      set_equip_id(from.equip_id());
    }
    if (from.has_equip_host()) {
      set_equip_host(from.equip_host());
    }
    if (from.has_win_user()) {
      set_win_user(from.win_user());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_job_id()) {
      set_job_id(from.job_id());
    }
    if (from.has_paper_size()) {
      set_paper_size(from.paper_size());
    }
    if (from.has_page_type()) {
      set_page_type(from.page_type());
    }
    if (from.has_copies()) {
      set_copies(from.copies());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_total_page()) {
      set_total_page(from.total_page());
    }
    if (from.has_orientation()) {
      set_orientation(from.orientation());
    }
    if (from.has_double_print()) {
      set_double_print(from.double_print());
    }
    if (from.has_doc_name()) {
      set_doc_name(from.doc_name());
    }
    if (from.has_printer_name()) {
      set_printer_name(from.printer_name());
    }
    if (from.has_submit_time()) {
      set_submit_time(from.submit_time());
    }
    if (from.has_doc_size()) {
      set_doc_size(from.doc_size());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_zip_job_size()) {
      set_zip_job_size(from.zip_job_size());
    }
    if (from.has_job_path()) {
      set_job_path(from.job_path());
    }
    if (from.has_job_dir()) {
      set_job_dir(from.job_dir());
    }
    if (from.has_project_id()) {
      set_project_id(from.project_id());
    }
    if (from.has_order_prtstation_id()) {
      set_order_prtstation_id(from.order_prtstation_id());
    }
    if (from.has_direct_prtstation_id()) {
      set_direct_prtstation_id(from.direct_prtstation_id());
    }
    if (from.has_sec_type()) {
      set_sec_type(from.sec_type());
    }
    if (from.has_paper_source()) {
      set_paper_source(from.paper_source());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_image_use_physical_area()) {
      set_image_use_physical_area(from.image_use_physical_area());
    }
    if (from.has_collate()) {
      set_collate(from.collate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubmitPrintJob::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitPrintJob::CopyFrom(const SubmitPrintJob& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitPrintJob::IsInitialized() const {
  
  return true;
}

void SubmitPrintJob::Swap(SubmitPrintJob* other) {
  if (other != this) {
    std::swap(equip_id_, other->equip_id_);
    std::swap(equip_host_, other->equip_host_);
    std::swap(win_user_, other->win_user_);
    std::swap(user_id_, other->user_id_);
    std::swap(job_id_, other->job_id_);
    std::swap(paper_size_, other->paper_size_);
    std::swap(page_type_, other->page_type_);
    std::swap(copies_, other->copies_);
    std::swap(color_, other->color_);
    std::swap(total_page_, other->total_page_);
    std::swap(orientation_, other->orientation_);
    std::swap(double_print_, other->double_print_);
    std::swap(doc_name_, other->doc_name_);
    std::swap(printer_name_, other->printer_name_);
    std::swap(submit_time_, other->submit_time_);
    std::swap(doc_size_, other->doc_size_);
    std::swap(zip_job_size_, other->zip_job_size_);
    std::swap(job_path_, other->job_path_);
    std::swap(job_dir_, other->job_dir_);
    std::swap(project_id_, other->project_id_);
    std::swap(order_prtstation_id_, other->order_prtstation_id_);
    std::swap(direct_prtstation_id_, other->direct_prtstation_id_);
    std::swap(sec_type_, other->sec_type_);
    std::swap(paper_source_, other->paper_source_);
    std::swap(image_use_physical_area_, other->image_use_physical_area_);
    std::swap(collate_, other->collate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubmitPrintJob::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubmitPrintJob_descriptor_;
  metadata.reflection = SubmitPrintJob_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubmitPrintJobList::kListFieldNumber;
#endif  // !_MSC_VER

SubmitPrintJobList::SubmitPrintJobList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubmitPrintJobList::InitAsDefaultInstance() {
}

SubmitPrintJobList::SubmitPrintJobList(const SubmitPrintJobList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubmitPrintJobList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubmitPrintJobList::~SubmitPrintJobList() {
  SharedDtor();
}

void SubmitPrintJobList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubmitPrintJobList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubmitPrintJobList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubmitPrintJobList_descriptor_;
}

const SubmitPrintJobList& SubmitPrintJobList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

SubmitPrintJobList* SubmitPrintJobList::default_instance_ = NULL;

SubmitPrintJobList* SubmitPrintJobList::New() const {
  return new SubmitPrintJobList;
}

void SubmitPrintJobList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubmitPrintJobList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .isafetec.SubmitPrintJob list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubmitPrintJobList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .isafetec.SubmitPrintJob list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubmitPrintJobList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .isafetec.SubmitPrintJob list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubmitPrintJobList::ByteSize() const {
  int total_size = 0;
  
  // repeated .isafetec.SubmitPrintJob list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubmitPrintJobList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubmitPrintJobList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubmitPrintJobList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubmitPrintJobList::MergeFrom(const SubmitPrintJobList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubmitPrintJobList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitPrintJobList::CopyFrom(const SubmitPrintJobList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitPrintJobList::IsInitialized() const {
  
  return true;
}

void SubmitPrintJobList::Swap(SubmitPrintJobList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubmitPrintJobList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubmitPrintJobList_descriptor_;
  metadata.reflection = SubmitPrintJobList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtSationReqPrintJob::kIdFieldNumber;
const int PrtSationReqPrintJob::kJobPathFieldNumber;
const int PrtSationReqPrintJob::kJobDirFieldNumber;
const int PrtSationReqPrintJob::kSubmitTimeFieldNumber;
const int PrtSationReqPrintJob::kJobSizeFieldNumber;
const int PrtSationReqPrintJob::kZipJobSizeFieldNumber;
const int PrtSationReqPrintJob::kDocNameFieldNumber;
const int PrtSationReqPrintJob::kPaperSizeFieldNumber;
const int PrtSationReqPrintJob::kPageTypeFieldNumber;
const int PrtSationReqPrintJob::kCopiesFieldNumber;
const int PrtSationReqPrintJob::kColorFieldNumber;
const int PrtSationReqPrintJob::kTotalPageFieldNumber;
const int PrtSationReqPrintJob::kOrientationFieldNumber;
const int PrtSationReqPrintJob::kDoublePrintFieldNumber;
const int PrtSationReqPrintJob::kEquipHostFieldNumber;
const int PrtSationReqPrintJob::kWinUserFieldNumber;
const int PrtSationReqPrintJob::kEquipIpFieldNumber;
const int PrtSationReqPrintJob::kUserNameFieldNumber;
const int PrtSationReqPrintJob::kJobReqByFieldNumber;
const int PrtSationReqPrintJob::kUserIdFieldNumber;
const int PrtSationReqPrintJob::kLeftMoneyFieldNumber;
const int PrtSationReqPrintJob::kSpecialLeftMoneyFieldNumber;
const int PrtSationReqPrintJob::kPriceTypeFieldNumber;
const int PrtSationReqPrintJob::kPriceFieldNumber;
const int PrtSationReqPrintJob::kProjectIdFieldNumber;
const int PrtSationReqPrintJob::kProjectNameFieldNumber;
const int PrtSationReqPrintJob::kSecPolicyFieldNumber;
const int PrtSationReqPrintJob::kPrintedFieldNumber;
const int PrtSationReqPrintJob::kGuidFieldNumber;
const int PrtSationReqPrintJob::kPrintedIdFieldNumber;
const int PrtSationReqPrintJob::kPaperSourceFieldNumber;
const int PrtSationReqPrintJob::kPrintJobTypeFieldNumber;
const int PrtSationReqPrintJob::kPrintFromFieldNumber;
const int PrtSationReqPrintJob::kPrintToFieldNumber;
const int PrtSationReqPrintJob::kTiffUsePhysicalAreaFieldNumber;
#endif  // !_MSC_VER

PrtSationReqPrintJob::PrtSationReqPrintJob()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrtSationReqPrintJob::InitAsDefaultInstance() {
  sec_policy_ = const_cast< ::isafetec::PrintSecPolicy*>(&::isafetec::PrintSecPolicy::default_instance());
}

PrtSationReqPrintJob::PrtSationReqPrintJob(const PrtSationReqPrintJob& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrtSationReqPrintJob::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  job_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  job_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  submit_time_ = 0;
  job_size_ = 0;
  zip_job_size_ = 0;
  doc_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  paper_size_ = 0;
  page_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  copies_ = 0;
  color_ = 0;
  total_page_ = 0;
  orientation_ = 0;
  double_print_ = 0;
  equip_host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  win_user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  equip_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  job_req_by_ = 0;
  user_id_ = 0;
  left_money_ = 0;
  special_left_money_ = 0;
  price_type_ = 0;
  price_ = 0;
  project_id_ = 0;
  project_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sec_policy_ = NULL;
  printed_ = 0;
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  printed_id_ = 0;
  paper_source_ = 1000;
  print_job_type_ = 0;
  print_from_ = 0;
  print_to_ = 0;
  tiff_use_physical_area_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtSationReqPrintJob::~PrtSationReqPrintJob() {
  SharedDtor();
}

void PrtSationReqPrintJob::SharedDtor() {
  if (job_path_ != &::google::protobuf::internal::kEmptyString) {
    delete job_path_;
  }
  if (job_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete job_dir_;
  }
  if (doc_name_ != &::google::protobuf::internal::kEmptyString) {
    delete doc_name_;
  }
  if (page_type_ != &::google::protobuf::internal::kEmptyString) {
    delete page_type_;
  }
  if (equip_host_ != &::google::protobuf::internal::kEmptyString) {
    delete equip_host_;
  }
  if (win_user_ != &::google::protobuf::internal::kEmptyString) {
    delete win_user_;
  }
  if (equip_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete equip_ip_;
  }
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (project_name_ != &::google::protobuf::internal::kEmptyString) {
    delete project_name_;
  }
  if (guid_ != &::google::protobuf::internal::kEmptyString) {
    delete guid_;
  }
  if (this != default_instance_) {
    delete sec_policy_;
  }
}

void PrtSationReqPrintJob::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtSationReqPrintJob::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtSationReqPrintJob_descriptor_;
}

const PrtSationReqPrintJob& PrtSationReqPrintJob::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrtSationReqPrintJob* PrtSationReqPrintJob::default_instance_ = NULL;

PrtSationReqPrintJob* PrtSationReqPrintJob::New() const {
  return new PrtSationReqPrintJob;
}

void PrtSationReqPrintJob::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_job_path()) {
      if (job_path_ != &::google::protobuf::internal::kEmptyString) {
        job_path_->clear();
      }
    }
    if (has_job_dir()) {
      if (job_dir_ != &::google::protobuf::internal::kEmptyString) {
        job_dir_->clear();
      }
    }
    submit_time_ = 0;
    job_size_ = 0;
    zip_job_size_ = 0;
    if (has_doc_name()) {
      if (doc_name_ != &::google::protobuf::internal::kEmptyString) {
        doc_name_->clear();
      }
    }
    paper_size_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_page_type()) {
      if (page_type_ != &::google::protobuf::internal::kEmptyString) {
        page_type_->clear();
      }
    }
    copies_ = 0;
    color_ = 0;
    total_page_ = 0;
    orientation_ = 0;
    double_print_ = 0;
    if (has_equip_host()) {
      if (equip_host_ != &::google::protobuf::internal::kEmptyString) {
        equip_host_->clear();
      }
    }
    if (has_win_user()) {
      if (win_user_ != &::google::protobuf::internal::kEmptyString) {
        win_user_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_equip_ip()) {
      if (equip_ip_ != &::google::protobuf::internal::kEmptyString) {
        equip_ip_->clear();
      }
    }
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    job_req_by_ = 0;
    user_id_ = 0;
    left_money_ = 0;
    special_left_money_ = 0;
    price_type_ = 0;
    price_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    project_id_ = 0;
    if (has_project_name()) {
      if (project_name_ != &::google::protobuf::internal::kEmptyString) {
        project_name_->clear();
      }
    }
    if (has_sec_policy()) {
      if (sec_policy_ != NULL) sec_policy_->::isafetec::PrintSecPolicy::Clear();
    }
    printed_ = 0;
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::kEmptyString) {
        guid_->clear();
      }
    }
    printed_id_ = 0;
    paper_source_ = 1000;
    print_job_type_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    print_from_ = 0;
    print_to_ = 0;
    tiff_use_physical_area_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtSationReqPrintJob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_job_path;
        break;
      }
      
      // optional string job_path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_job_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_job_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->job_path().data(), this->job_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_job_dir;
        break;
      }
      
      // optional string job_dir = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_job_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_job_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->job_dir().data(), this->job_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_submit_time;
        break;
      }
      
      // optional double submit_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_submit_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &submit_time_)));
          set_has_submit_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_job_size;
        break;
      }
      
      // optional int32 job_size = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_size_)));
          set_has_job_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_zip_job_size;
        break;
      }
      
      // optional int32 zip_job_size = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zip_job_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zip_job_size_)));
          set_has_zip_job_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_doc_name;
        break;
      }
      
      // optional string doc_name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_doc_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_doc_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->doc_name().data(), this->doc_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_paper_size;
        break;
      }
      
      // optional int32 paper_size = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paper_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paper_size_)));
          set_has_paper_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_page_type;
        break;
      }
      
      // optional string page_type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_page_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->page_type().data(), this->page_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_copies;
        break;
      }
      
      // optional int32 copies = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copies:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &copies_)));
          set_has_copies();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_color;
        break;
      }
      
      // optional int32 color = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_total_page;
        break;
      }
      
      // optional int32 total_page = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_page_)));
          set_has_total_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_orientation;
        break;
      }
      
      // optional int32 orientation = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_orientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orientation_)));
          set_has_orientation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_double_print;
        break;
      }
      
      // optional int32 double_print = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_double_print:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &double_print_)));
          set_has_double_print();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_equip_host;
        break;
      }
      
      // optional string equip_host = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equip_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->equip_host().data(), this->equip_host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_win_user;
        break;
      }
      
      // optional string win_user = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_win_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_win_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->win_user().data(), this->win_user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_equip_ip;
        break;
      }
      
      // optional string equip_ip = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equip_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->equip_ip().data(), this->equip_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_user_name;
        break;
      }
      
      // optional string user_name = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_job_req_by;
        break;
      }
      
      // optional .isafetec.PRT_REQ_JOB_BY job_req_by = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job_req_by:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::PRT_REQ_JOB_BY_IsValid(value)) {
            set_job_req_by(static_cast< isafetec::PRT_REQ_JOB_BY >(value));
          } else {
            mutable_unknown_fields()->AddVarint(19, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_user_id;
        break;
      }
      
      // optional int32 user_id = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_left_money;
        break;
      }
      
      // optional double left_money = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_left_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &left_money_)));
          set_has_left_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_special_left_money;
        break;
      }
      
      // optional double special_left_money = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_special_left_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &special_left_money_)));
          set_has_special_left_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_price_type;
        break;
      }
      
      // optional .isafetec.JOB_PRICE_TYPE price_type = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::JOB_PRICE_TYPE_IsValid(value)) {
            set_price_type(static_cast< isafetec::JOB_PRICE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(24, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(201)) goto parse_price;
        break;
      }
      
      // optional double price = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_project_id;
        break;
      }
      
      // optional int32 project_id = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_project_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &project_id_)));
          set_has_project_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_project_name;
        break;
      }
      
      // optional string project_name = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_project_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->project_name().data(), this->project_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_sec_policy;
        break;
      }
      
      // optional .isafetec.PrintSecPolicy sec_policy = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sec_policy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sec_policy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_printed;
        break;
      }
      
      // optional int32 printed = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_printed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &printed_)));
          set_has_printed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_guid;
        break;
      }
      
      // optional string guid = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_printed_id;
        break;
      }
      
      // optional int32 printed_id = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_printed_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &printed_id_)));
          set_has_printed_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_paper_source;
        break;
      }
      
      // optional .isafetec.Printer_Paper_Source paper_source = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paper_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::Printer_Paper_Source_IsValid(value)) {
            set_paper_source(static_cast< isafetec::Printer_Paper_Source >(value));
          } else {
            mutable_unknown_fields()->AddVarint(32, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_print_job_type;
        break;
      }
      
      // optional .isafetec.Print_Job_Type print_job_type = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_print_job_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::Print_Job_Type_IsValid(value)) {
            set_print_job_type(static_cast< isafetec::Print_Job_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(33, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_print_from;
        break;
      }
      
      // optional int32 print_from = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_print_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &print_from_)));
          set_has_print_from();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_print_to;
        break;
      }
      
      // optional int32 print_to = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_print_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &print_to_)));
          set_has_print_to();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_tiff_use_physical_area;
        break;
      }
      
      // optional int32 tiff_use_physical_area = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tiff_use_physical_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tiff_use_physical_area_)));
          set_has_tiff_use_physical_area();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrtSationReqPrintJob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string job_path = 2;
  if (has_job_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->job_path().data(), this->job_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->job_path(), output);
  }
  
  // optional string job_dir = 3;
  if (has_job_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->job_dir().data(), this->job_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->job_dir(), output);
  }
  
  // optional double submit_time = 4;
  if (has_submit_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->submit_time(), output);
  }
  
  // optional int32 job_size = 5;
  if (has_job_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->job_size(), output);
  }
  
  // optional int32 zip_job_size = 6;
  if (has_zip_job_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->zip_job_size(), output);
  }
  
  // optional string doc_name = 7;
  if (has_doc_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->doc_name().data(), this->doc_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->doc_name(), output);
  }
  
  // optional int32 paper_size = 8;
  if (has_paper_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->paper_size(), output);
  }
  
  // optional string page_type = 9;
  if (has_page_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page_type().data(), this->page_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->page_type(), output);
  }
  
  // optional int32 copies = 10;
  if (has_copies()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->copies(), output);
  }
  
  // optional int32 color = 11;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->color(), output);
  }
  
  // optional int32 total_page = 12;
  if (has_total_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->total_page(), output);
  }
  
  // optional int32 orientation = 13;
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->orientation(), output);
  }
  
  // optional int32 double_print = 14;
  if (has_double_print()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->double_print(), output);
  }
  
  // optional string equip_host = 15;
  if (has_equip_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equip_host().data(), this->equip_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->equip_host(), output);
  }
  
  // optional string win_user = 16;
  if (has_win_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->win_user().data(), this->win_user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->win_user(), output);
  }
  
  // optional string equip_ip = 17;
  if (has_equip_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equip_ip().data(), this->equip_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->equip_ip(), output);
  }
  
  // optional string user_name = 18;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->user_name(), output);
  }
  
  // optional .isafetec.PRT_REQ_JOB_BY job_req_by = 19;
  if (has_job_req_by()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->job_req_by(), output);
  }
  
  // optional int32 user_id = 20;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->user_id(), output);
  }
  
  // optional double left_money = 22;
  if (has_left_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->left_money(), output);
  }
  
  // optional double special_left_money = 23;
  if (has_special_left_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->special_left_money(), output);
  }
  
  // optional .isafetec.JOB_PRICE_TYPE price_type = 24;
  if (has_price_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      24, this->price_type(), output);
  }
  
  // optional double price = 25;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->price(), output);
  }
  
  // optional int32 project_id = 26;
  if (has_project_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->project_id(), output);
  }
  
  // optional string project_name = 27;
  if (has_project_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->project_name().data(), this->project_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->project_name(), output);
  }
  
  // optional .isafetec.PrintSecPolicy sec_policy = 28;
  if (has_sec_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->sec_policy(), output);
  }
  
  // optional int32 printed = 29;
  if (has_printed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->printed(), output);
  }
  
  // optional string guid = 30;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->guid(), output);
  }
  
  // optional int32 printed_id = 31;
  if (has_printed_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->printed_id(), output);
  }
  
  // optional .isafetec.Printer_Paper_Source paper_source = 32;
  if (has_paper_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      32, this->paper_source(), output);
  }
  
  // optional .isafetec.Print_Job_Type print_job_type = 33;
  if (has_print_job_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      33, this->print_job_type(), output);
  }
  
  // optional int32 print_from = 34;
  if (has_print_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->print_from(), output);
  }
  
  // optional int32 print_to = 35;
  if (has_print_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->print_to(), output);
  }
  
  // optional int32 tiff_use_physical_area = 36;
  if (has_tiff_use_physical_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->tiff_use_physical_area(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrtSationReqPrintJob::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string job_path = 2;
  if (has_job_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->job_path().data(), this->job_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->job_path(), target);
  }
  
  // optional string job_dir = 3;
  if (has_job_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->job_dir().data(), this->job_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->job_dir(), target);
  }
  
  // optional double submit_time = 4;
  if (has_submit_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->submit_time(), target);
  }
  
  // optional int32 job_size = 5;
  if (has_job_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->job_size(), target);
  }
  
  // optional int32 zip_job_size = 6;
  if (has_zip_job_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->zip_job_size(), target);
  }
  
  // optional string doc_name = 7;
  if (has_doc_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->doc_name().data(), this->doc_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->doc_name(), target);
  }
  
  // optional int32 paper_size = 8;
  if (has_paper_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->paper_size(), target);
  }
  
  // optional string page_type = 9;
  if (has_page_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page_type().data(), this->page_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->page_type(), target);
  }
  
  // optional int32 copies = 10;
  if (has_copies()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->copies(), target);
  }
  
  // optional int32 color = 11;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->color(), target);
  }
  
  // optional int32 total_page = 12;
  if (has_total_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->total_page(), target);
  }
  
  // optional int32 orientation = 13;
  if (has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->orientation(), target);
  }
  
  // optional int32 double_print = 14;
  if (has_double_print()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->double_print(), target);
  }
  
  // optional string equip_host = 15;
  if (has_equip_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equip_host().data(), this->equip_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->equip_host(), target);
  }
  
  // optional string win_user = 16;
  if (has_win_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->win_user().data(), this->win_user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->win_user(), target);
  }
  
  // optional string equip_ip = 17;
  if (has_equip_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equip_ip().data(), this->equip_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->equip_ip(), target);
  }
  
  // optional string user_name = 18;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->user_name(), target);
  }
  
  // optional .isafetec.PRT_REQ_JOB_BY job_req_by = 19;
  if (has_job_req_by()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->job_req_by(), target);
  }
  
  // optional int32 user_id = 20;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->user_id(), target);
  }
  
  // optional double left_money = 22;
  if (has_left_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->left_money(), target);
  }
  
  // optional double special_left_money = 23;
  if (has_special_left_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->special_left_money(), target);
  }
  
  // optional .isafetec.JOB_PRICE_TYPE price_type = 24;
  if (has_price_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      24, this->price_type(), target);
  }
  
  // optional double price = 25;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->price(), target);
  }
  
  // optional int32 project_id = 26;
  if (has_project_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->project_id(), target);
  }
  
  // optional string project_name = 27;
  if (has_project_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->project_name().data(), this->project_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->project_name(), target);
  }
  
  // optional .isafetec.PrintSecPolicy sec_policy = 28;
  if (has_sec_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->sec_policy(), target);
  }
  
  // optional int32 printed = 29;
  if (has_printed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->printed(), target);
  }
  
  // optional string guid = 30;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->guid(), target);
  }
  
  // optional int32 printed_id = 31;
  if (has_printed_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->printed_id(), target);
  }
  
  // optional .isafetec.Printer_Paper_Source paper_source = 32;
  if (has_paper_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      32, this->paper_source(), target);
  }
  
  // optional .isafetec.Print_Job_Type print_job_type = 33;
  if (has_print_job_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      33, this->print_job_type(), target);
  }
  
  // optional int32 print_from = 34;
  if (has_print_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->print_from(), target);
  }
  
  // optional int32 print_to = 35;
  if (has_print_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->print_to(), target);
  }
  
  // optional int32 tiff_use_physical_area = 36;
  if (has_tiff_use_physical_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->tiff_use_physical_area(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrtSationReqPrintJob::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string job_path = 2;
    if (has_job_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->job_path());
    }
    
    // optional string job_dir = 3;
    if (has_job_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->job_dir());
    }
    
    // optional double submit_time = 4;
    if (has_submit_time()) {
      total_size += 1 + 8;
    }
    
    // optional int32 job_size = 5;
    if (has_job_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job_size());
    }
    
    // optional int32 zip_job_size = 6;
    if (has_zip_job_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zip_job_size());
    }
    
    // optional string doc_name = 7;
    if (has_doc_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->doc_name());
    }
    
    // optional int32 paper_size = 8;
    if (has_paper_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->paper_size());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string page_type = 9;
    if (has_page_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->page_type());
    }
    
    // optional int32 copies = 10;
    if (has_copies()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->copies());
    }
    
    // optional int32 color = 11;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }
    
    // optional int32 total_page = 12;
    if (has_total_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_page());
    }
    
    // optional int32 orientation = 13;
    if (has_orientation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orientation());
    }
    
    // optional int32 double_print = 14;
    if (has_double_print()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->double_print());
    }
    
    // optional string equip_host = 15;
    if (has_equip_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equip_host());
    }
    
    // optional string win_user = 16;
    if (has_win_user()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->win_user());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string equip_ip = 17;
    if (has_equip_ip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equip_ip());
    }
    
    // optional string user_name = 18;
    if (has_user_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }
    
    // optional .isafetec.PRT_REQ_JOB_BY job_req_by = 19;
    if (has_job_req_by()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->job_req_by());
    }
    
    // optional int32 user_id = 20;
    if (has_user_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }
    
    // optional double left_money = 22;
    if (has_left_money()) {
      total_size += 2 + 8;
    }
    
    // optional double special_left_money = 23;
    if (has_special_left_money()) {
      total_size += 2 + 8;
    }
    
    // optional .isafetec.JOB_PRICE_TYPE price_type = 24;
    if (has_price_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->price_type());
    }
    
    // optional double price = 25;
    if (has_price()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 project_id = 26;
    if (has_project_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->project_id());
    }
    
    // optional string project_name = 27;
    if (has_project_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->project_name());
    }
    
    // optional .isafetec.PrintSecPolicy sec_policy = 28;
    if (has_sec_policy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sec_policy());
    }
    
    // optional int32 printed = 29;
    if (has_printed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->printed());
    }
    
    // optional string guid = 30;
    if (has_guid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }
    
    // optional int32 printed_id = 31;
    if (has_printed_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->printed_id());
    }
    
    // optional .isafetec.Printer_Paper_Source paper_source = 32;
    if (has_paper_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->paper_source());
    }
    
    // optional .isafetec.Print_Job_Type print_job_type = 33;
    if (has_print_job_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->print_job_type());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 print_from = 34;
    if (has_print_from()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->print_from());
    }
    
    // optional int32 print_to = 35;
    if (has_print_to()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->print_to());
    }
    
    // optional int32 tiff_use_physical_area = 36;
    if (has_tiff_use_physical_area()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tiff_use_physical_area());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtSationReqPrintJob::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtSationReqPrintJob* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtSationReqPrintJob*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtSationReqPrintJob::MergeFrom(const PrtSationReqPrintJob& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_job_path()) {
      set_job_path(from.job_path());
    }
    if (from.has_job_dir()) {
      set_job_dir(from.job_dir());
    }
    if (from.has_submit_time()) {
      set_submit_time(from.submit_time());
    }
    if (from.has_job_size()) {
      set_job_size(from.job_size());
    }
    if (from.has_zip_job_size()) {
      set_zip_job_size(from.zip_job_size());
    }
    if (from.has_doc_name()) {
      set_doc_name(from.doc_name());
    }
    if (from.has_paper_size()) {
      set_paper_size(from.paper_size());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_page_type()) {
      set_page_type(from.page_type());
    }
    if (from.has_copies()) {
      set_copies(from.copies());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_total_page()) {
      set_total_page(from.total_page());
    }
    if (from.has_orientation()) {
      set_orientation(from.orientation());
    }
    if (from.has_double_print()) {
      set_double_print(from.double_print());
    }
    if (from.has_equip_host()) {
      set_equip_host(from.equip_host());
    }
    if (from.has_win_user()) {
      set_win_user(from.win_user());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_equip_ip()) {
      set_equip_ip(from.equip_ip());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_job_req_by()) {
      set_job_req_by(from.job_req_by());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_left_money()) {
      set_left_money(from.left_money());
    }
    if (from.has_special_left_money()) {
      set_special_left_money(from.special_left_money());
    }
    if (from.has_price_type()) {
      set_price_type(from.price_type());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_project_id()) {
      set_project_id(from.project_id());
    }
    if (from.has_project_name()) {
      set_project_name(from.project_name());
    }
    if (from.has_sec_policy()) {
      mutable_sec_policy()->::isafetec::PrintSecPolicy::MergeFrom(from.sec_policy());
    }
    if (from.has_printed()) {
      set_printed(from.printed());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_printed_id()) {
      set_printed_id(from.printed_id());
    }
    if (from.has_paper_source()) {
      set_paper_source(from.paper_source());
    }
    if (from.has_print_job_type()) {
      set_print_job_type(from.print_job_type());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_print_from()) {
      set_print_from(from.print_from());
    }
    if (from.has_print_to()) {
      set_print_to(from.print_to());
    }
    if (from.has_tiff_use_physical_area()) {
      set_tiff_use_physical_area(from.tiff_use_physical_area());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtSationReqPrintJob::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtSationReqPrintJob::CopyFrom(const PrtSationReqPrintJob& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtSationReqPrintJob::IsInitialized() const {
  
  return true;
}

void PrtSationReqPrintJob::Swap(PrtSationReqPrintJob* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(job_path_, other->job_path_);
    std::swap(job_dir_, other->job_dir_);
    std::swap(submit_time_, other->submit_time_);
    std::swap(job_size_, other->job_size_);
    std::swap(zip_job_size_, other->zip_job_size_);
    std::swap(doc_name_, other->doc_name_);
    std::swap(paper_size_, other->paper_size_);
    std::swap(page_type_, other->page_type_);
    std::swap(copies_, other->copies_);
    std::swap(color_, other->color_);
    std::swap(total_page_, other->total_page_);
    std::swap(orientation_, other->orientation_);
    std::swap(double_print_, other->double_print_);
    std::swap(equip_host_, other->equip_host_);
    std::swap(win_user_, other->win_user_);
    std::swap(equip_ip_, other->equip_ip_);
    std::swap(user_name_, other->user_name_);
    std::swap(job_req_by_, other->job_req_by_);
    std::swap(user_id_, other->user_id_);
    std::swap(left_money_, other->left_money_);
    std::swap(special_left_money_, other->special_left_money_);
    std::swap(price_type_, other->price_type_);
    std::swap(price_, other->price_);
    std::swap(project_id_, other->project_id_);
    std::swap(project_name_, other->project_name_);
    std::swap(sec_policy_, other->sec_policy_);
    std::swap(printed_, other->printed_);
    std::swap(guid_, other->guid_);
    std::swap(printed_id_, other->printed_id_);
    std::swap(paper_source_, other->paper_source_);
    std::swap(print_job_type_, other->print_job_type_);
    std::swap(print_from_, other->print_from_);
    std::swap(print_to_, other->print_to_);
    std::swap(tiff_use_physical_area_, other->tiff_use_physical_area_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtSationReqPrintJob::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtSationReqPrintJob_descriptor_;
  metadata.reflection = PrtSationReqPrintJob_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtSationReqPrintJobList::kListFieldNumber;
#endif  // !_MSC_VER

PrtSationReqPrintJobList::PrtSationReqPrintJobList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrtSationReqPrintJobList::InitAsDefaultInstance() {
}

PrtSationReqPrintJobList::PrtSationReqPrintJobList(const PrtSationReqPrintJobList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrtSationReqPrintJobList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtSationReqPrintJobList::~PrtSationReqPrintJobList() {
  SharedDtor();
}

void PrtSationReqPrintJobList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrtSationReqPrintJobList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtSationReqPrintJobList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtSationReqPrintJobList_descriptor_;
}

const PrtSationReqPrintJobList& PrtSationReqPrintJobList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrtSationReqPrintJobList* PrtSationReqPrintJobList::default_instance_ = NULL;

PrtSationReqPrintJobList* PrtSationReqPrintJobList::New() const {
  return new PrtSationReqPrintJobList;
}

void PrtSationReqPrintJobList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtSationReqPrintJobList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .isafetec.PrtSationReqPrintJob list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrtSationReqPrintJobList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .isafetec.PrtSationReqPrintJob list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrtSationReqPrintJobList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .isafetec.PrtSationReqPrintJob list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrtSationReqPrintJobList::ByteSize() const {
  int total_size = 0;
  
  // repeated .isafetec.PrtSationReqPrintJob list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtSationReqPrintJobList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtSationReqPrintJobList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtSationReqPrintJobList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtSationReqPrintJobList::MergeFrom(const PrtSationReqPrintJobList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtSationReqPrintJobList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtSationReqPrintJobList::CopyFrom(const PrtSationReqPrintJobList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtSationReqPrintJobList::IsInitialized() const {
  
  return true;
}

void PrtSationReqPrintJobList::Swap(PrtSationReqPrintJobList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtSationReqPrintJobList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtSationReqPrintJobList_descriptor_;
  metadata.reflection = PrtSationReqPrintJobList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtSationReqPrintHistoryJob::kJobFieldNumber;
const int PrtSationReqPrintHistoryJob::kJobStateFieldNumber;
const int PrtSationReqPrintHistoryJob::kJobFileDeletedFieldNumber;
const int PrtSationReqPrintHistoryJob::kJobLastPrintTimeFieldNumber;
const int PrtSationReqPrintHistoryJob::kJobDeleteTimeFieldNumber;
#endif  // !_MSC_VER

PrtSationReqPrintHistoryJob::PrtSationReqPrintHistoryJob()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrtSationReqPrintHistoryJob::InitAsDefaultInstance() {
  job_ = const_cast< ::isafetec::PrtSationReqPrintJob*>(&::isafetec::PrtSationReqPrintJob::default_instance());
}

PrtSationReqPrintHistoryJob::PrtSationReqPrintHistoryJob(const PrtSationReqPrintHistoryJob& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrtSationReqPrintHistoryJob::SharedCtor() {
  _cached_size_ = 0;
  job_ = NULL;
  job_state_ = 0;
  job_file_deleted_ = 0;
  job_last_print_time_ = 0;
  job_delete_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtSationReqPrintHistoryJob::~PrtSationReqPrintHistoryJob() {
  SharedDtor();
}

void PrtSationReqPrintHistoryJob::SharedDtor() {
  if (this != default_instance_) {
    delete job_;
  }
}

void PrtSationReqPrintHistoryJob::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtSationReqPrintHistoryJob::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtSationReqPrintHistoryJob_descriptor_;
}

const PrtSationReqPrintHistoryJob& PrtSationReqPrintHistoryJob::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrtSationReqPrintHistoryJob* PrtSationReqPrintHistoryJob::default_instance_ = NULL;

PrtSationReqPrintHistoryJob* PrtSationReqPrintHistoryJob::New() const {
  return new PrtSationReqPrintHistoryJob;
}

void PrtSationReqPrintHistoryJob::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_job()) {
      if (job_ != NULL) job_->::isafetec::PrtSationReqPrintJob::Clear();
    }
    job_state_ = 0;
    job_file_deleted_ = 0;
    job_last_print_time_ = 0;
    job_delete_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtSationReqPrintHistoryJob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .isafetec.PrtSationReqPrintJob job = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_job()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_job_state;
        break;
      }
      
      // optional int32 job_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_state_)));
          set_has_job_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_job_file_deleted;
        break;
      }
      
      // optional int32 job_file_deleted = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job_file_deleted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_file_deleted_)));
          set_has_job_file_deleted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_job_last_print_time;
        break;
      }
      
      // optional double job_last_print_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_job_last_print_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &job_last_print_time_)));
          set_has_job_last_print_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_job_delete_time;
        break;
      }
      
      // optional double job_delete_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_job_delete_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &job_delete_time_)));
          set_has_job_delete_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrtSationReqPrintHistoryJob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .isafetec.PrtSationReqPrintJob job = 1;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->job(), output);
  }
  
  // optional int32 job_state = 2;
  if (has_job_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->job_state(), output);
  }
  
  // optional int32 job_file_deleted = 3;
  if (has_job_file_deleted()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->job_file_deleted(), output);
  }
  
  // optional double job_last_print_time = 4;
  if (has_job_last_print_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->job_last_print_time(), output);
  }
  
  // optional double job_delete_time = 5;
  if (has_job_delete_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->job_delete_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrtSationReqPrintHistoryJob::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .isafetec.PrtSationReqPrintJob job = 1;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->job(), target);
  }
  
  // optional int32 job_state = 2;
  if (has_job_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->job_state(), target);
  }
  
  // optional int32 job_file_deleted = 3;
  if (has_job_file_deleted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->job_file_deleted(), target);
  }
  
  // optional double job_last_print_time = 4;
  if (has_job_last_print_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->job_last_print_time(), target);
  }
  
  // optional double job_delete_time = 5;
  if (has_job_delete_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->job_delete_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrtSationReqPrintHistoryJob::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .isafetec.PrtSationReqPrintJob job = 1;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->job());
    }
    
    // optional int32 job_state = 2;
    if (has_job_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job_state());
    }
    
    // optional int32 job_file_deleted = 3;
    if (has_job_file_deleted()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job_file_deleted());
    }
    
    // optional double job_last_print_time = 4;
    if (has_job_last_print_time()) {
      total_size += 1 + 8;
    }
    
    // optional double job_delete_time = 5;
    if (has_job_delete_time()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtSationReqPrintHistoryJob::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtSationReqPrintHistoryJob* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtSationReqPrintHistoryJob*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtSationReqPrintHistoryJob::MergeFrom(const PrtSationReqPrintHistoryJob& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_job()) {
      mutable_job()->::isafetec::PrtSationReqPrintJob::MergeFrom(from.job());
    }
    if (from.has_job_state()) {
      set_job_state(from.job_state());
    }
    if (from.has_job_file_deleted()) {
      set_job_file_deleted(from.job_file_deleted());
    }
    if (from.has_job_last_print_time()) {
      set_job_last_print_time(from.job_last_print_time());
    }
    if (from.has_job_delete_time()) {
      set_job_delete_time(from.job_delete_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtSationReqPrintHistoryJob::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtSationReqPrintHistoryJob::CopyFrom(const PrtSationReqPrintHistoryJob& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtSationReqPrintHistoryJob::IsInitialized() const {
  
  return true;
}

void PrtSationReqPrintHistoryJob::Swap(PrtSationReqPrintHistoryJob* other) {
  if (other != this) {
    std::swap(job_, other->job_);
    std::swap(job_state_, other->job_state_);
    std::swap(job_file_deleted_, other->job_file_deleted_);
    std::swap(job_last_print_time_, other->job_last_print_time_);
    std::swap(job_delete_time_, other->job_delete_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtSationReqPrintHistoryJob::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtSationReqPrintHistoryJob_descriptor_;
  metadata.reflection = PrtSationReqPrintHistoryJob_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtSationReqPrintHistoryJobList::kListFieldNumber;
#endif  // !_MSC_VER

PrtSationReqPrintHistoryJobList::PrtSationReqPrintHistoryJobList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrtSationReqPrintHistoryJobList::InitAsDefaultInstance() {
}

PrtSationReqPrintHistoryJobList::PrtSationReqPrintHistoryJobList(const PrtSationReqPrintHistoryJobList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrtSationReqPrintHistoryJobList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtSationReqPrintHistoryJobList::~PrtSationReqPrintHistoryJobList() {
  SharedDtor();
}

void PrtSationReqPrintHistoryJobList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrtSationReqPrintHistoryJobList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtSationReqPrintHistoryJobList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtSationReqPrintHistoryJobList_descriptor_;
}

const PrtSationReqPrintHistoryJobList& PrtSationReqPrintHistoryJobList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrtSationReqPrintHistoryJobList* PrtSationReqPrintHistoryJobList::default_instance_ = NULL;

PrtSationReqPrintHistoryJobList* PrtSationReqPrintHistoryJobList::New() const {
  return new PrtSationReqPrintHistoryJobList;
}

void PrtSationReqPrintHistoryJobList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtSationReqPrintHistoryJobList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .isafetec.PrtSationReqPrintHistoryJob list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrtSationReqPrintHistoryJobList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .isafetec.PrtSationReqPrintHistoryJob list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrtSationReqPrintHistoryJobList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .isafetec.PrtSationReqPrintHistoryJob list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrtSationReqPrintHistoryJobList::ByteSize() const {
  int total_size = 0;
  
  // repeated .isafetec.PrtSationReqPrintHistoryJob list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtSationReqPrintHistoryJobList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtSationReqPrintHistoryJobList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtSationReqPrintHistoryJobList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtSationReqPrintHistoryJobList::MergeFrom(const PrtSationReqPrintHistoryJobList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtSationReqPrintHistoryJobList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtSationReqPrintHistoryJobList::CopyFrom(const PrtSationReqPrintHistoryJobList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtSationReqPrintHistoryJobList::IsInitialized() const {
  
  return true;
}

void PrtSationReqPrintHistoryJobList::Swap(PrtSationReqPrintHistoryJobList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtSationReqPrintHistoryJobList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtSationReqPrintHistoryJobList_descriptor_;
  metadata.reflection = PrtSationReqPrintHistoryJobList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CardInfo::kCodeFieldNumber;
const int CardInfo::kUserNameFieldNumber;
const int CardInfo::kDepNameFieldNumber;
const int CardInfo::kLeftMoneyFieldNumber;
const int CardInfo::kPwdFieldNumber;
const int CardInfo::kIdCardNoFieldNumber;
const int CardInfo::kCitizenCardNoFieldNumber;
const int CardInfo::kMobileNoFieldNumber;
#endif  // !_MSC_VER

CardInfo::CardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CardInfo::InitAsDefaultInstance() {
}

CardInfo::CardInfo(const CardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CardInfo::SharedCtor() {
  _cached_size_ = 0;
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dep_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  left_money_ = 0;
  pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_card_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  citizen_card_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mobile_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CardInfo::~CardInfo() {
  SharedDtor();
}

void CardInfo::SharedDtor() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (dep_name_ != &::google::protobuf::internal::kEmptyString) {
    delete dep_name_;
  }
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete pwd_;
  }
  if (id_card_no_ != &::google::protobuf::internal::kEmptyString) {
    delete id_card_no_;
  }
  if (citizen_card_no_ != &::google::protobuf::internal::kEmptyString) {
    delete citizen_card_no_;
  }
  if (mobile_no_ != &::google::protobuf::internal::kEmptyString) {
    delete mobile_no_;
  }
  if (this != default_instance_) {
  }
}

void CardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CardInfo_descriptor_;
}

const CardInfo& CardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

CardInfo* CardInfo::default_instance_ = NULL;

CardInfo* CardInfo::New() const {
  return new CardInfo;
}

void CardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::kEmptyString) {
        code_->clear();
      }
    }
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    if (has_dep_name()) {
      if (dep_name_ != &::google::protobuf::internal::kEmptyString) {
        dep_name_->clear();
      }
    }
    left_money_ = 0;
    if (has_pwd()) {
      if (pwd_ != &::google::protobuf::internal::kEmptyString) {
        pwd_->clear();
      }
    }
    if (has_id_card_no()) {
      if (id_card_no_ != &::google::protobuf::internal::kEmptyString) {
        id_card_no_->clear();
      }
    }
    if (has_citizen_card_no()) {
      if (citizen_card_no_ != &::google::protobuf::internal::kEmptyString) {
        citizen_card_no_->clear();
      }
    }
    if (has_mobile_no()) {
      if (mobile_no_ != &::google::protobuf::internal::kEmptyString) {
        mobile_no_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_name;
        break;
      }
      
      // optional string user_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dep_name;
        break;
      }
      
      // optional string dep_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dep_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dep_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dep_name().data(), this->dep_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_left_money;
        break;
      }
      
      // optional double left_money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_left_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &left_money_)));
          set_has_left_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pwd;
        break;
      }
      
      // optional string pwd = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pwd().data(), this->pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_id_card_no;
        break;
      }
      
      // optional string id_card_no = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id_card_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id_card_no()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id_card_no().data(), this->id_card_no().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_citizen_card_no;
        break;
      }
      
      // optional string citizen_card_no = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_citizen_card_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_citizen_card_no()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->citizen_card_no().data(), this->citizen_card_no().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_mobile_no;
        break;
      }
      
      // optional string mobile_no = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mobile_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile_no()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mobile_no().data(), this->mobile_no().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->code(), output);
  }
  
  // optional string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user_name(), output);
  }
  
  // optional string dep_name = 3;
  if (has_dep_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dep_name().data(), this->dep_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->dep_name(), output);
  }
  
  // optional double left_money = 4;
  if (has_left_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->left_money(), output);
  }
  
  // optional string pwd = 5;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->pwd(), output);
  }
  
  // optional string id_card_no = 6;
  if (has_id_card_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id_card_no().data(), this->id_card_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->id_card_no(), output);
  }
  
  // optional string citizen_card_no = 7;
  if (has_citizen_card_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->citizen_card_no().data(), this->citizen_card_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->citizen_card_no(), output);
  }
  
  // optional string mobile_no = 8;
  if (has_mobile_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mobile_no().data(), this->mobile_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->mobile_no(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }
  
  // optional string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_name(), target);
  }
  
  // optional string dep_name = 3;
  if (has_dep_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dep_name().data(), this->dep_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dep_name(), target);
  }
  
  // optional double left_money = 4;
  if (has_left_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->left_money(), target);
  }
  
  // optional string pwd = 5;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->pwd(), target);
  }
  
  // optional string id_card_no = 6;
  if (has_id_card_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id_card_no().data(), this->id_card_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->id_card_no(), target);
  }
  
  // optional string citizen_card_no = 7;
  if (has_citizen_card_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->citizen_card_no().data(), this->citizen_card_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->citizen_card_no(), target);
  }
  
  // optional string mobile_no = 8;
  if (has_mobile_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mobile_no().data(), this->mobile_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->mobile_no(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CardInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }
    
    // optional string user_name = 2;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }
    
    // optional string dep_name = 3;
    if (has_dep_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dep_name());
    }
    
    // optional double left_money = 4;
    if (has_left_money()) {
      total_size += 1 + 8;
    }
    
    // optional string pwd = 5;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }
    
    // optional string id_card_no = 6;
    if (has_id_card_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id_card_no());
    }
    
    // optional string citizen_card_no = 7;
    if (has_citizen_card_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->citizen_card_no());
    }
    
    // optional string mobile_no = 8;
    if (has_mobile_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobile_no());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CardInfo::MergeFrom(const CardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_dep_name()) {
      set_dep_name(from.dep_name());
    }
    if (from.has_left_money()) {
      set_left_money(from.left_money());
    }
    if (from.has_pwd()) {
      set_pwd(from.pwd());
    }
    if (from.has_id_card_no()) {
      set_id_card_no(from.id_card_no());
    }
    if (from.has_citizen_card_no()) {
      set_citizen_card_no(from.citizen_card_no());
    }
    if (from.has_mobile_no()) {
      set_mobile_no(from.mobile_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardInfo::CopyFrom(const CardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardInfo::IsInitialized() const {
  
  return true;
}

void CardInfo::Swap(CardInfo* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(user_name_, other->user_name_);
    std::swap(dep_name_, other->dep_name_);
    std::swap(left_money_, other->left_money_);
    std::swap(pwd_, other->pwd_);
    std::swap(id_card_no_, other->id_card_no_);
    std::swap(citizen_card_no_, other->citizen_card_no_);
    std::swap(mobile_no_, other->mobile_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CardInfo_descriptor_;
  metadata.reflection = CardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtStationLogon::kPtrIdFieldNumber;
const int PrtStationLogon::kNameFieldNumber;
const int PrtStationLogon::kPwdFieldNumber;
const int PrtStationLogon::kAuditOkFieldNumber;
const int PrtStationLogon::kCardFieldNumber;
#endif  // !_MSC_VER

PrtStationLogon::PrtStationLogon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrtStationLogon::InitAsDefaultInstance() {
  card_ = const_cast< ::isafetec::CardInfo*>(&::isafetec::CardInfo::default_instance());
}

PrtStationLogon::PrtStationLogon(const PrtStationLogon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrtStationLogon::SharedCtor() {
  _cached_size_ = 0;
  ptr_id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  audit_ok_ = 0;
  card_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtStationLogon::~PrtStationLogon() {
  SharedDtor();
}

void PrtStationLogon::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete pwd_;
  }
  if (this != default_instance_) {
    delete card_;
  }
}

void PrtStationLogon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtStationLogon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtStationLogon_descriptor_;
}

const PrtStationLogon& PrtStationLogon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrtStationLogon* PrtStationLogon::default_instance_ = NULL;

PrtStationLogon* PrtStationLogon::New() const {
  return new PrtStationLogon;
}

void PrtStationLogon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ptr_id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_pwd()) {
      if (pwd_ != &::google::protobuf::internal::kEmptyString) {
        pwd_->clear();
      }
    }
    audit_ok_ = 0;
    if (has_card()) {
      if (card_ != NULL) card_->::isafetec::CardInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtStationLogon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ptr_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ptr_id_)));
          set_has_ptr_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pwd;
        break;
      }
      
      // optional string pwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pwd().data(), this->pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_audit_ok;
        break;
      }
      
      // optional int32 audit_ok = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_audit_ok:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &audit_ok_)));
          set_has_audit_ok();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_card;
        break;
      }
      
      // optional .isafetec.CardInfo card = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_card()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrtStationLogon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ptr_id = 1;
  if (has_ptr_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ptr_id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string pwd = 3;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pwd(), output);
  }
  
  // optional int32 audit_ok = 4;
  if (has_audit_ok()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->audit_ok(), output);
  }
  
  // optional .isafetec.CardInfo card = 5;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->card(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrtStationLogon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ptr_id = 1;
  if (has_ptr_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ptr_id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional string pwd = 3;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pwd(), target);
  }
  
  // optional int32 audit_ok = 4;
  if (has_audit_ok()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->audit_ok(), target);
  }
  
  // optional .isafetec.CardInfo card = 5;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->card(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrtStationLogon::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ptr_id = 1;
    if (has_ptr_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ptr_id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string pwd = 3;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }
    
    // optional int32 audit_ok = 4;
    if (has_audit_ok()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->audit_ok());
    }
    
    // optional .isafetec.CardInfo card = 5;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->card());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtStationLogon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtStationLogon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtStationLogon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtStationLogon::MergeFrom(const PrtStationLogon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ptr_id()) {
      set_ptr_id(from.ptr_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_pwd()) {
      set_pwd(from.pwd());
    }
    if (from.has_audit_ok()) {
      set_audit_ok(from.audit_ok());
    }
    if (from.has_card()) {
      mutable_card()->::isafetec::CardInfo::MergeFrom(from.card());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtStationLogon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtStationLogon::CopyFrom(const PrtStationLogon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtStationLogon::IsInitialized() const {
  
  return true;
}

void PrtStationLogon::Swap(PrtStationLogon* other) {
  if (other != this) {
    std::swap(ptr_id_, other->ptr_id_);
    std::swap(name_, other->name_);
    std::swap(pwd_, other->pwd_);
    std::swap(audit_ok_, other->audit_ok_);
    std::swap(card_, other->card_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtStationLogon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtStationLogon_descriptor_;
  metadata.reflection = PrtStationLogon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtStationUserAccount::kUserIdFieldNumber;
const int PrtStationUserAccount::kAccountIdFieldNumber;
const int PrtStationUserAccount::kLeftMoneyFieldNumber;
const int PrtStationUserAccount::kSpecialLeftMoneyFieldNumber;
const int PrtStationUserAccount::kAccountNameFieldNumber;
const int PrtStationUserAccount::kRealNameFieldNumber;
const int PrtStationUserAccount::kCardNoFieldNumber;
const int PrtStationUserAccount::kIdCardNoFieldNumber;
const int PrtStationUserAccount::kCitizenCardNoFieldNumber;
const int PrtStationUserAccount::kMobileNoFieldNumber;
const int PrtStationUserAccount::kDepNameFieldNumber;
#endif  // !_MSC_VER

PrtStationUserAccount::PrtStationUserAccount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrtStationUserAccount::InitAsDefaultInstance() {
}

PrtStationUserAccount::PrtStationUserAccount(const PrtStationUserAccount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrtStationUserAccount::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0;
  account_id_ = 0;
  left_money_ = 0;
  special_left_money_ = 0;
  account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  card_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_card_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  citizen_card_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mobile_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dep_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtStationUserAccount::~PrtStationUserAccount() {
  SharedDtor();
}

void PrtStationUserAccount::SharedDtor() {
  if (account_name_ != &::google::protobuf::internal::kEmptyString) {
    delete account_name_;
  }
  if (real_name_ != &::google::protobuf::internal::kEmptyString) {
    delete real_name_;
  }
  if (card_no_ != &::google::protobuf::internal::kEmptyString) {
    delete card_no_;
  }
  if (id_card_no_ != &::google::protobuf::internal::kEmptyString) {
    delete id_card_no_;
  }
  if (citizen_card_no_ != &::google::protobuf::internal::kEmptyString) {
    delete citizen_card_no_;
  }
  if (mobile_no_ != &::google::protobuf::internal::kEmptyString) {
    delete mobile_no_;
  }
  if (dep_name_ != &::google::protobuf::internal::kEmptyString) {
    delete dep_name_;
  }
  if (this != default_instance_) {
  }
}

void PrtStationUserAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtStationUserAccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtStationUserAccount_descriptor_;
}

const PrtStationUserAccount& PrtStationUserAccount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrtStationUserAccount* PrtStationUserAccount::default_instance_ = NULL;

PrtStationUserAccount* PrtStationUserAccount::New() const {
  return new PrtStationUserAccount;
}

void PrtStationUserAccount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0;
    account_id_ = 0;
    left_money_ = 0;
    special_left_money_ = 0;
    if (has_account_name()) {
      if (account_name_ != &::google::protobuf::internal::kEmptyString) {
        account_name_->clear();
      }
    }
    if (has_real_name()) {
      if (real_name_ != &::google::protobuf::internal::kEmptyString) {
        real_name_->clear();
      }
    }
    if (has_card_no()) {
      if (card_no_ != &::google::protobuf::internal::kEmptyString) {
        card_no_->clear();
      }
    }
    if (has_id_card_no()) {
      if (id_card_no_ != &::google::protobuf::internal::kEmptyString) {
        id_card_no_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_citizen_card_no()) {
      if (citizen_card_no_ != &::google::protobuf::internal::kEmptyString) {
        citizen_card_no_->clear();
      }
    }
    if (has_mobile_no()) {
      if (mobile_no_ != &::google::protobuf::internal::kEmptyString) {
        mobile_no_->clear();
      }
    }
    if (has_dep_name()) {
      if (dep_name_ != &::google::protobuf::internal::kEmptyString) {
        dep_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtStationUserAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_account_id;
        break;
      }
      
      // optional int32 account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_left_money;
        break;
      }
      
      // optional double left_money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_left_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &left_money_)));
          set_has_left_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_special_left_money;
        break;
      }
      
      // optional double special_left_money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_special_left_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &special_left_money_)));
          set_has_special_left_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_account_name;
        break;
      }
      
      // optional string account_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account_name().data(), this->account_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_real_name;
        break;
      }
      
      // optional string real_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_real_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_real_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->real_name().data(), this->real_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_card_no;
        break;
      }
      
      // optional string card_no = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_no()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->card_no().data(), this->card_no().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_id_card_no;
        break;
      }
      
      // optional string id_card_no = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id_card_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id_card_no()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id_card_no().data(), this->id_card_no().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_citizen_card_no;
        break;
      }
      
      // optional string citizen_card_no = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_citizen_card_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_citizen_card_no()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->citizen_card_no().data(), this->citizen_card_no().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_mobile_no;
        break;
      }
      
      // optional string mobile_no = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mobile_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mobile_no()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mobile_no().data(), this->mobile_no().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_dep_name;
        break;
      }
      
      // optional string dep_name = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dep_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dep_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dep_name().data(), this->dep_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrtStationUserAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }
  
  // optional int32 account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->account_id(), output);
  }
  
  // optional double left_money = 3;
  if (has_left_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->left_money(), output);
  }
  
  // optional double special_left_money = 4;
  if (has_special_left_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->special_left_money(), output);
  }
  
  // optional string account_name = 5;
  if (has_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_name().data(), this->account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->account_name(), output);
  }
  
  // optional string real_name = 6;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->real_name().data(), this->real_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->real_name(), output);
  }
  
  // optional string card_no = 7;
  if (has_card_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->card_no().data(), this->card_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->card_no(), output);
  }
  
  // optional string id_card_no = 8;
  if (has_id_card_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id_card_no().data(), this->id_card_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->id_card_no(), output);
  }
  
  // optional string citizen_card_no = 9;
  if (has_citizen_card_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->citizen_card_no().data(), this->citizen_card_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->citizen_card_no(), output);
  }
  
  // optional string mobile_no = 10;
  if (has_mobile_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mobile_no().data(), this->mobile_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->mobile_no(), output);
  }
  
  // optional string dep_name = 11;
  if (has_dep_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dep_name().data(), this->dep_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->dep_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrtStationUserAccount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->user_id(), target);
  }
  
  // optional int32 account_id = 2;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->account_id(), target);
  }
  
  // optional double left_money = 3;
  if (has_left_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->left_money(), target);
  }
  
  // optional double special_left_money = 4;
  if (has_special_left_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->special_left_money(), target);
  }
  
  // optional string account_name = 5;
  if (has_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_name().data(), this->account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->account_name(), target);
  }
  
  // optional string real_name = 6;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->real_name().data(), this->real_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->real_name(), target);
  }
  
  // optional string card_no = 7;
  if (has_card_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->card_no().data(), this->card_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->card_no(), target);
  }
  
  // optional string id_card_no = 8;
  if (has_id_card_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id_card_no().data(), this->id_card_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->id_card_no(), target);
  }
  
  // optional string citizen_card_no = 9;
  if (has_citizen_card_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->citizen_card_no().data(), this->citizen_card_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->citizen_card_no(), target);
  }
  
  // optional string mobile_no = 10;
  if (has_mobile_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mobile_no().data(), this->mobile_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->mobile_no(), target);
  }
  
  // optional string dep_name = 11;
  if (has_dep_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dep_name().data(), this->dep_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->dep_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrtStationUserAccount::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }
    
    // optional int32 account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->account_id());
    }
    
    // optional double left_money = 3;
    if (has_left_money()) {
      total_size += 1 + 8;
    }
    
    // optional double special_left_money = 4;
    if (has_special_left_money()) {
      total_size += 1 + 8;
    }
    
    // optional string account_name = 5;
    if (has_account_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_name());
    }
    
    // optional string real_name = 6;
    if (has_real_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->real_name());
    }
    
    // optional string card_no = 7;
    if (has_card_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->card_no());
    }
    
    // optional string id_card_no = 8;
    if (has_id_card_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id_card_no());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string citizen_card_no = 9;
    if (has_citizen_card_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->citizen_card_no());
    }
    
    // optional string mobile_no = 10;
    if (has_mobile_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mobile_no());
    }
    
    // optional string dep_name = 11;
    if (has_dep_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dep_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtStationUserAccount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtStationUserAccount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtStationUserAccount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtStationUserAccount::MergeFrom(const PrtStationUserAccount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_left_money()) {
      set_left_money(from.left_money());
    }
    if (from.has_special_left_money()) {
      set_special_left_money(from.special_left_money());
    }
    if (from.has_account_name()) {
      set_account_name(from.account_name());
    }
    if (from.has_real_name()) {
      set_real_name(from.real_name());
    }
    if (from.has_card_no()) {
      set_card_no(from.card_no());
    }
    if (from.has_id_card_no()) {
      set_id_card_no(from.id_card_no());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_citizen_card_no()) {
      set_citizen_card_no(from.citizen_card_no());
    }
    if (from.has_mobile_no()) {
      set_mobile_no(from.mobile_no());
    }
    if (from.has_dep_name()) {
      set_dep_name(from.dep_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtStationUserAccount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtStationUserAccount::CopyFrom(const PrtStationUserAccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtStationUserAccount::IsInitialized() const {
  
  return true;
}

void PrtStationUserAccount::Swap(PrtStationUserAccount* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(account_id_, other->account_id_);
    std::swap(left_money_, other->left_money_);
    std::swap(special_left_money_, other->special_left_money_);
    std::swap(account_name_, other->account_name_);
    std::swap(real_name_, other->real_name_);
    std::swap(card_no_, other->card_no_);
    std::swap(id_card_no_, other->id_card_no_);
    std::swap(citizen_card_no_, other->citizen_card_no_);
    std::swap(mobile_no_, other->mobile_no_);
    std::swap(dep_name_, other->dep_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtStationUserAccount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtStationUserAccount_descriptor_;
  metadata.reflection = PrtStationUserAccount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtStationPrice::kPriceTypeFieldNumber;
const int PrtStationPrice::kA3HbPriceFieldNumber;
const int PrtStationPrice::kA3ColorPriceFieldNumber;
const int PrtStationPrice::kA4HbPriceFieldNumber;
const int PrtStationPrice::kA4ColorPriceFieldNumber;
const int PrtStationPrice::kA3HbPriceDuplexFieldNumber;
const int PrtStationPrice::kA3ColorPriceDuplexFieldNumber;
const int PrtStationPrice::kA4HbPriceDuplexFieldNumber;
const int PrtStationPrice::kA4ColorPriceDuplexFieldNumber;
const int PrtStationPrice::kIsSupportPrintDuplexPriceFieldNumber;
#endif  // !_MSC_VER

PrtStationPrice::PrtStationPrice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrtStationPrice::InitAsDefaultInstance() {
}

PrtStationPrice::PrtStationPrice(const PrtStationPrice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrtStationPrice::SharedCtor() {
  _cached_size_ = 0;
  price_type_ = 0;
  a3_hb_price_ = 0;
  a3_color_price_ = 0;
  a4_hb_price_ = 0;
  a4_color_price_ = 0;
  a3_hb_price_duplex_ = 0;
  a3_color_price_duplex_ = 0;
  a4_hb_price_duplex_ = 0;
  a4_color_price_duplex_ = 0;
  issupportprintduplexprice_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtStationPrice::~PrtStationPrice() {
  SharedDtor();
}

void PrtStationPrice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrtStationPrice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtStationPrice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtStationPrice_descriptor_;
}

const PrtStationPrice& PrtStationPrice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrtStationPrice* PrtStationPrice::default_instance_ = NULL;

PrtStationPrice* PrtStationPrice::New() const {
  return new PrtStationPrice;
}

void PrtStationPrice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    price_type_ = 0;
    a3_hb_price_ = 0;
    a3_color_price_ = 0;
    a4_hb_price_ = 0;
    a4_color_price_ = 0;
    a3_hb_price_duplex_ = 0;
    a3_color_price_duplex_ = 0;
    a4_hb_price_duplex_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    a4_color_price_duplex_ = 0;
    issupportprintduplexprice_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtStationPrice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .isafetec.JOB_PRICE_TYPE price_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::JOB_PRICE_TYPE_IsValid(value)) {
            set_price_type(static_cast< isafetec::JOB_PRICE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_a3_hb_price;
        break;
      }
      
      // optional double a3_hb_price = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_a3_hb_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a3_hb_price_)));
          set_has_a3_hb_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_a3_color_price;
        break;
      }
      
      // optional double a3_color_price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_a3_color_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a3_color_price_)));
          set_has_a3_color_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_a4_hb_price;
        break;
      }
      
      // optional double a4_hb_price = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_a4_hb_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a4_hb_price_)));
          set_has_a4_hb_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_a4_color_price;
        break;
      }
      
      // optional double a4_color_price = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_a4_color_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a4_color_price_)));
          set_has_a4_color_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_a3_hb_price_duplex;
        break;
      }
      
      // optional double a3_hb_price_duplex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_a3_hb_price_duplex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a3_hb_price_duplex_)));
          set_has_a3_hb_price_duplex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_a3_color_price_duplex;
        break;
      }
      
      // optional double a3_color_price_duplex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_a3_color_price_duplex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a3_color_price_duplex_)));
          set_has_a3_color_price_duplex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_a4_hb_price_duplex;
        break;
      }
      
      // optional double a4_hb_price_duplex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_a4_hb_price_duplex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a4_hb_price_duplex_)));
          set_has_a4_hb_price_duplex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_a4_color_price_duplex;
        break;
      }
      
      // optional double a4_color_price_duplex = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_a4_color_price_duplex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a4_color_price_duplex_)));
          set_has_a4_color_price_duplex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_IsSupportPrintDuplexPrice;
        break;
      }
      
      // optional int32 IsSupportPrintDuplexPrice = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsSupportPrintDuplexPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &issupportprintduplexprice_)));
          set_has_issupportprintduplexprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrtStationPrice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .isafetec.JOB_PRICE_TYPE price_type = 1;
  if (has_price_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->price_type(), output);
  }
  
  // optional double a3_hb_price = 2;
  if (has_a3_hb_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->a3_hb_price(), output);
  }
  
  // optional double a3_color_price = 3;
  if (has_a3_color_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->a3_color_price(), output);
  }
  
  // optional double a4_hb_price = 4;
  if (has_a4_hb_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->a4_hb_price(), output);
  }
  
  // optional double a4_color_price = 5;
  if (has_a4_color_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->a4_color_price(), output);
  }
  
  // optional double a3_hb_price_duplex = 6;
  if (has_a3_hb_price_duplex()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->a3_hb_price_duplex(), output);
  }
  
  // optional double a3_color_price_duplex = 7;
  if (has_a3_color_price_duplex()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->a3_color_price_duplex(), output);
  }
  
  // optional double a4_hb_price_duplex = 8;
  if (has_a4_hb_price_duplex()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->a4_hb_price_duplex(), output);
  }
  
  // optional double a4_color_price_duplex = 9;
  if (has_a4_color_price_duplex()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->a4_color_price_duplex(), output);
  }
  
  // optional int32 IsSupportPrintDuplexPrice = 10;
  if (has_issupportprintduplexprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->issupportprintduplexprice(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrtStationPrice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .isafetec.JOB_PRICE_TYPE price_type = 1;
  if (has_price_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->price_type(), target);
  }
  
  // optional double a3_hb_price = 2;
  if (has_a3_hb_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->a3_hb_price(), target);
  }
  
  // optional double a3_color_price = 3;
  if (has_a3_color_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->a3_color_price(), target);
  }
  
  // optional double a4_hb_price = 4;
  if (has_a4_hb_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->a4_hb_price(), target);
  }
  
  // optional double a4_color_price = 5;
  if (has_a4_color_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->a4_color_price(), target);
  }
  
  // optional double a3_hb_price_duplex = 6;
  if (has_a3_hb_price_duplex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->a3_hb_price_duplex(), target);
  }
  
  // optional double a3_color_price_duplex = 7;
  if (has_a3_color_price_duplex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->a3_color_price_duplex(), target);
  }
  
  // optional double a4_hb_price_duplex = 8;
  if (has_a4_hb_price_duplex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->a4_hb_price_duplex(), target);
  }
  
  // optional double a4_color_price_duplex = 9;
  if (has_a4_color_price_duplex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->a4_color_price_duplex(), target);
  }
  
  // optional int32 IsSupportPrintDuplexPrice = 10;
  if (has_issupportprintduplexprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->issupportprintduplexprice(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrtStationPrice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .isafetec.JOB_PRICE_TYPE price_type = 1;
    if (has_price_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->price_type());
    }
    
    // optional double a3_hb_price = 2;
    if (has_a3_hb_price()) {
      total_size += 1 + 8;
    }
    
    // optional double a3_color_price = 3;
    if (has_a3_color_price()) {
      total_size += 1 + 8;
    }
    
    // optional double a4_hb_price = 4;
    if (has_a4_hb_price()) {
      total_size += 1 + 8;
    }
    
    // optional double a4_color_price = 5;
    if (has_a4_color_price()) {
      total_size += 1 + 8;
    }
    
    // optional double a3_hb_price_duplex = 6;
    if (has_a3_hb_price_duplex()) {
      total_size += 1 + 8;
    }
    
    // optional double a3_color_price_duplex = 7;
    if (has_a3_color_price_duplex()) {
      total_size += 1 + 8;
    }
    
    // optional double a4_hb_price_duplex = 8;
    if (has_a4_hb_price_duplex()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double a4_color_price_duplex = 9;
    if (has_a4_color_price_duplex()) {
      total_size += 1 + 8;
    }
    
    // optional int32 IsSupportPrintDuplexPrice = 10;
    if (has_issupportprintduplexprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->issupportprintduplexprice());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtStationPrice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtStationPrice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtStationPrice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtStationPrice::MergeFrom(const PrtStationPrice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_price_type()) {
      set_price_type(from.price_type());
    }
    if (from.has_a3_hb_price()) {
      set_a3_hb_price(from.a3_hb_price());
    }
    if (from.has_a3_color_price()) {
      set_a3_color_price(from.a3_color_price());
    }
    if (from.has_a4_hb_price()) {
      set_a4_hb_price(from.a4_hb_price());
    }
    if (from.has_a4_color_price()) {
      set_a4_color_price(from.a4_color_price());
    }
    if (from.has_a3_hb_price_duplex()) {
      set_a3_hb_price_duplex(from.a3_hb_price_duplex());
    }
    if (from.has_a3_color_price_duplex()) {
      set_a3_color_price_duplex(from.a3_color_price_duplex());
    }
    if (from.has_a4_hb_price_duplex()) {
      set_a4_hb_price_duplex(from.a4_hb_price_duplex());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_a4_color_price_duplex()) {
      set_a4_color_price_duplex(from.a4_color_price_duplex());
    }
    if (from.has_issupportprintduplexprice()) {
      set_issupportprintduplexprice(from.issupportprintduplexprice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtStationPrice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtStationPrice::CopyFrom(const PrtStationPrice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtStationPrice::IsInitialized() const {
  
  return true;
}

void PrtStationPrice::Swap(PrtStationPrice* other) {
  if (other != this) {
    std::swap(price_type_, other->price_type_);
    std::swap(a3_hb_price_, other->a3_hb_price_);
    std::swap(a3_color_price_, other->a3_color_price_);
    std::swap(a4_hb_price_, other->a4_hb_price_);
    std::swap(a4_color_price_, other->a4_color_price_);
    std::swap(a3_hb_price_duplex_, other->a3_hb_price_duplex_);
    std::swap(a3_color_price_duplex_, other->a3_color_price_duplex_);
    std::swap(a4_hb_price_duplex_, other->a4_hb_price_duplex_);
    std::swap(a4_color_price_duplex_, other->a4_color_price_duplex_);
    std::swap(issupportprintduplexprice_, other->issupportprintduplexprice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtStationPrice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtStationPrice_descriptor_;
  metadata.reflection = PrtStationPrice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtStationPriceStep::kPriceFieldNumber;
const int PrtStationPriceStep::kPriceDescFieldNumber;
const int PrtStationPriceStep::kPageMinFieldNumber;
const int PrtStationPriceStep::kPageMaxFieldNumber;
#endif  // !_MSC_VER

PrtStationPriceStep::PrtStationPriceStep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrtStationPriceStep::InitAsDefaultInstance() {
  price_ = const_cast< ::isafetec::PrtStationPrice*>(&::isafetec::PrtStationPrice::default_instance());
}

PrtStationPriceStep::PrtStationPriceStep(const PrtStationPriceStep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrtStationPriceStep::SharedCtor() {
  _cached_size_ = 0;
  price_ = NULL;
  pricedesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pagemin_ = 0;
  pagemax_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtStationPriceStep::~PrtStationPriceStep() {
  SharedDtor();
}

void PrtStationPriceStep::SharedDtor() {
  if (pricedesc_ != &::google::protobuf::internal::kEmptyString) {
    delete pricedesc_;
  }
  if (this != default_instance_) {
    delete price_;
  }
}

void PrtStationPriceStep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtStationPriceStep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtStationPriceStep_descriptor_;
}

const PrtStationPriceStep& PrtStationPriceStep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrtStationPriceStep* PrtStationPriceStep::default_instance_ = NULL;

PrtStationPriceStep* PrtStationPriceStep::New() const {
  return new PrtStationPriceStep;
}

void PrtStationPriceStep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_price()) {
      if (price_ != NULL) price_->::isafetec::PrtStationPrice::Clear();
    }
    if (has_pricedesc()) {
      if (pricedesc_ != &::google::protobuf::internal::kEmptyString) {
        pricedesc_->clear();
      }
    }
    pagemin_ = 0;
    pagemax_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtStationPriceStep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .isafetec.PrtStationPrice price = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_price()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_PriceDesc;
        break;
      }
      
      // optional string PriceDesc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PriceDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pricedesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pricedesc().data(), this->pricedesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_PageMin;
        break;
      }
      
      // optional int32 PageMin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PageMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pagemin_)));
          set_has_pagemin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_PageMax;
        break;
      }
      
      // optional int32 PageMax = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PageMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pagemax_)));
          set_has_pagemax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrtStationPriceStep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .isafetec.PrtStationPrice price = 1;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->price(), output);
  }
  
  // optional string PriceDesc = 2;
  if (has_pricedesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pricedesc().data(), this->pricedesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pricedesc(), output);
  }
  
  // optional int32 PageMin = 3;
  if (has_pagemin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pagemin(), output);
  }
  
  // optional int32 PageMax = 4;
  if (has_pagemax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pagemax(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrtStationPriceStep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .isafetec.PrtStationPrice price = 1;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->price(), target);
  }
  
  // optional string PriceDesc = 2;
  if (has_pricedesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pricedesc().data(), this->pricedesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pricedesc(), target);
  }
  
  // optional int32 PageMin = 3;
  if (has_pagemin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pagemin(), target);
  }
  
  // optional int32 PageMax = 4;
  if (has_pagemax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pagemax(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrtStationPriceStep::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .isafetec.PrtStationPrice price = 1;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->price());
    }
    
    // optional string PriceDesc = 2;
    if (has_pricedesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pricedesc());
    }
    
    // optional int32 PageMin = 3;
    if (has_pagemin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pagemin());
    }
    
    // optional int32 PageMax = 4;
    if (has_pagemax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pagemax());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtStationPriceStep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtStationPriceStep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtStationPriceStep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtStationPriceStep::MergeFrom(const PrtStationPriceStep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_price()) {
      mutable_price()->::isafetec::PrtStationPrice::MergeFrom(from.price());
    }
    if (from.has_pricedesc()) {
      set_pricedesc(from.pricedesc());
    }
    if (from.has_pagemin()) {
      set_pagemin(from.pagemin());
    }
    if (from.has_pagemax()) {
      set_pagemax(from.pagemax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtStationPriceStep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtStationPriceStep::CopyFrom(const PrtStationPriceStep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtStationPriceStep::IsInitialized() const {
  
  return true;
}

void PrtStationPriceStep::Swap(PrtStationPriceStep* other) {
  if (other != this) {
    std::swap(price_, other->price_);
    std::swap(pricedesc_, other->pricedesc_);
    std::swap(pagemin_, other->pagemin_);
    std::swap(pagemax_, other->pagemax_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtStationPriceStep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtStationPriceStep_descriptor_;
  metadata.reflection = PrtStationPriceStep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtStationPriceStepList::kListFieldNumber;
#endif  // !_MSC_VER

PrtStationPriceStepList::PrtStationPriceStepList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrtStationPriceStepList::InitAsDefaultInstance() {
}

PrtStationPriceStepList::PrtStationPriceStepList(const PrtStationPriceStepList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrtStationPriceStepList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtStationPriceStepList::~PrtStationPriceStepList() {
  SharedDtor();
}

void PrtStationPriceStepList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrtStationPriceStepList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtStationPriceStepList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtStationPriceStepList_descriptor_;
}

const PrtStationPriceStepList& PrtStationPriceStepList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrtStationPriceStepList* PrtStationPriceStepList::default_instance_ = NULL;

PrtStationPriceStepList* PrtStationPriceStepList::New() const {
  return new PrtStationPriceStepList;
}

void PrtStationPriceStepList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtStationPriceStepList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .isafetec.PrtStationPriceStep list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrtStationPriceStepList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .isafetec.PrtStationPriceStep list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrtStationPriceStepList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .isafetec.PrtStationPriceStep list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrtStationPriceStepList::ByteSize() const {
  int total_size = 0;
  
  // repeated .isafetec.PrtStationPriceStep list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtStationPriceStepList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtStationPriceStepList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtStationPriceStepList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtStationPriceStepList::MergeFrom(const PrtStationPriceStepList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtStationPriceStepList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtStationPriceStepList::CopyFrom(const PrtStationPriceStepList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtStationPriceStepList::IsInitialized() const {
  
  return true;
}

void PrtStationPriceStepList::Swap(PrtStationPriceStepList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtStationPriceStepList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtStationPriceStepList_descriptor_;
  metadata.reflection = PrtStationPriceStepList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtCopyPrice::kPriceTypeFieldNumber;
const int PrtCopyPrice::kA3HbPriceFieldNumber;
const int PrtCopyPrice::kA3ColorPriceFieldNumber;
const int PrtCopyPrice::kA4HbPriceFieldNumber;
const int PrtCopyPrice::kA4ColorPriceFieldNumber;
#endif  // !_MSC_VER

PrtCopyPrice::PrtCopyPrice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrtCopyPrice::InitAsDefaultInstance() {
}

PrtCopyPrice::PrtCopyPrice(const PrtCopyPrice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrtCopyPrice::SharedCtor() {
  _cached_size_ = 0;
  price_type_ = 0;
  a3_hb_price_ = 0;
  a3_color_price_ = 0;
  a4_hb_price_ = 0;
  a4_color_price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtCopyPrice::~PrtCopyPrice() {
  SharedDtor();
}

void PrtCopyPrice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrtCopyPrice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtCopyPrice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtCopyPrice_descriptor_;
}

const PrtCopyPrice& PrtCopyPrice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrtCopyPrice* PrtCopyPrice::default_instance_ = NULL;

PrtCopyPrice* PrtCopyPrice::New() const {
  return new PrtCopyPrice;
}

void PrtCopyPrice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    price_type_ = 0;
    a3_hb_price_ = 0;
    a3_color_price_ = 0;
    a4_hb_price_ = 0;
    a4_color_price_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtCopyPrice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .isafetec.JOB_PRICE_TYPE price_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::JOB_PRICE_TYPE_IsValid(value)) {
            set_price_type(static_cast< isafetec::JOB_PRICE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_a3_hb_price;
        break;
      }
      
      // optional double a3_hb_price = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_a3_hb_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a3_hb_price_)));
          set_has_a3_hb_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_a3_color_price;
        break;
      }
      
      // optional double a3_color_price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_a3_color_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a3_color_price_)));
          set_has_a3_color_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_a4_hb_price;
        break;
      }
      
      // optional double a4_hb_price = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_a4_hb_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a4_hb_price_)));
          set_has_a4_hb_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_a4_color_price;
        break;
      }
      
      // optional double a4_color_price = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_a4_color_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a4_color_price_)));
          set_has_a4_color_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrtCopyPrice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .isafetec.JOB_PRICE_TYPE price_type = 1;
  if (has_price_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->price_type(), output);
  }
  
  // optional double a3_hb_price = 2;
  if (has_a3_hb_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->a3_hb_price(), output);
  }
  
  // optional double a3_color_price = 3;
  if (has_a3_color_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->a3_color_price(), output);
  }
  
  // optional double a4_hb_price = 4;
  if (has_a4_hb_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->a4_hb_price(), output);
  }
  
  // optional double a4_color_price = 5;
  if (has_a4_color_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->a4_color_price(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrtCopyPrice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .isafetec.JOB_PRICE_TYPE price_type = 1;
  if (has_price_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->price_type(), target);
  }
  
  // optional double a3_hb_price = 2;
  if (has_a3_hb_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->a3_hb_price(), target);
  }
  
  // optional double a3_color_price = 3;
  if (has_a3_color_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->a3_color_price(), target);
  }
  
  // optional double a4_hb_price = 4;
  if (has_a4_hb_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->a4_hb_price(), target);
  }
  
  // optional double a4_color_price = 5;
  if (has_a4_color_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->a4_color_price(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrtCopyPrice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .isafetec.JOB_PRICE_TYPE price_type = 1;
    if (has_price_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->price_type());
    }
    
    // optional double a3_hb_price = 2;
    if (has_a3_hb_price()) {
      total_size += 1 + 8;
    }
    
    // optional double a3_color_price = 3;
    if (has_a3_color_price()) {
      total_size += 1 + 8;
    }
    
    // optional double a4_hb_price = 4;
    if (has_a4_hb_price()) {
      total_size += 1 + 8;
    }
    
    // optional double a4_color_price = 5;
    if (has_a4_color_price()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtCopyPrice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtCopyPrice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtCopyPrice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtCopyPrice::MergeFrom(const PrtCopyPrice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_price_type()) {
      set_price_type(from.price_type());
    }
    if (from.has_a3_hb_price()) {
      set_a3_hb_price(from.a3_hb_price());
    }
    if (from.has_a3_color_price()) {
      set_a3_color_price(from.a3_color_price());
    }
    if (from.has_a4_hb_price()) {
      set_a4_hb_price(from.a4_hb_price());
    }
    if (from.has_a4_color_price()) {
      set_a4_color_price(from.a4_color_price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtCopyPrice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtCopyPrice::CopyFrom(const PrtCopyPrice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtCopyPrice::IsInitialized() const {
  
  return true;
}

void PrtCopyPrice::Swap(PrtCopyPrice* other) {
  if (other != this) {
    std::swap(price_type_, other->price_type_);
    std::swap(a3_hb_price_, other->a3_hb_price_);
    std::swap(a3_color_price_, other->a3_color_price_);
    std::swap(a4_hb_price_, other->a4_hb_price_);
    std::swap(a4_color_price_, other->a4_color_price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtCopyPrice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtCopyPrice_descriptor_;
  metadata.reflection = PrtCopyPrice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtCopyPriceStep::kPriceFieldNumber;
const int PrtCopyPriceStep::kPriceDescFieldNumber;
const int PrtCopyPriceStep::kPageMinFieldNumber;
const int PrtCopyPriceStep::kPageMaxFieldNumber;
#endif  // !_MSC_VER

PrtCopyPriceStep::PrtCopyPriceStep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrtCopyPriceStep::InitAsDefaultInstance() {
  price_ = const_cast< ::isafetec::PrtCopyPrice*>(&::isafetec::PrtCopyPrice::default_instance());
}

PrtCopyPriceStep::PrtCopyPriceStep(const PrtCopyPriceStep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrtCopyPriceStep::SharedCtor() {
  _cached_size_ = 0;
  price_ = NULL;
  pricedesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pagemin_ = 0;
  pagemax_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtCopyPriceStep::~PrtCopyPriceStep() {
  SharedDtor();
}

void PrtCopyPriceStep::SharedDtor() {
  if (pricedesc_ != &::google::protobuf::internal::kEmptyString) {
    delete pricedesc_;
  }
  if (this != default_instance_) {
    delete price_;
  }
}

void PrtCopyPriceStep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtCopyPriceStep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtCopyPriceStep_descriptor_;
}

const PrtCopyPriceStep& PrtCopyPriceStep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrtCopyPriceStep* PrtCopyPriceStep::default_instance_ = NULL;

PrtCopyPriceStep* PrtCopyPriceStep::New() const {
  return new PrtCopyPriceStep;
}

void PrtCopyPriceStep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_price()) {
      if (price_ != NULL) price_->::isafetec::PrtCopyPrice::Clear();
    }
    if (has_pricedesc()) {
      if (pricedesc_ != &::google::protobuf::internal::kEmptyString) {
        pricedesc_->clear();
      }
    }
    pagemin_ = 0;
    pagemax_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtCopyPriceStep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .isafetec.PrtCopyPrice price = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_price()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_PriceDesc;
        break;
      }
      
      // optional string PriceDesc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PriceDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pricedesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pricedesc().data(), this->pricedesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_PageMin;
        break;
      }
      
      // optional int32 PageMin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PageMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pagemin_)));
          set_has_pagemin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_PageMax;
        break;
      }
      
      // optional int32 PageMax = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PageMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pagemax_)));
          set_has_pagemax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrtCopyPriceStep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .isafetec.PrtCopyPrice price = 1;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->price(), output);
  }
  
  // optional string PriceDesc = 2;
  if (has_pricedesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pricedesc().data(), this->pricedesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pricedesc(), output);
  }
  
  // optional int32 PageMin = 3;
  if (has_pagemin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pagemin(), output);
  }
  
  // optional int32 PageMax = 4;
  if (has_pagemax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pagemax(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrtCopyPriceStep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .isafetec.PrtCopyPrice price = 1;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->price(), target);
  }
  
  // optional string PriceDesc = 2;
  if (has_pricedesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pricedesc().data(), this->pricedesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pricedesc(), target);
  }
  
  // optional int32 PageMin = 3;
  if (has_pagemin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pagemin(), target);
  }
  
  // optional int32 PageMax = 4;
  if (has_pagemax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pagemax(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrtCopyPriceStep::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .isafetec.PrtCopyPrice price = 1;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->price());
    }
    
    // optional string PriceDesc = 2;
    if (has_pricedesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pricedesc());
    }
    
    // optional int32 PageMin = 3;
    if (has_pagemin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pagemin());
    }
    
    // optional int32 PageMax = 4;
    if (has_pagemax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pagemax());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtCopyPriceStep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtCopyPriceStep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtCopyPriceStep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtCopyPriceStep::MergeFrom(const PrtCopyPriceStep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_price()) {
      mutable_price()->::isafetec::PrtCopyPrice::MergeFrom(from.price());
    }
    if (from.has_pricedesc()) {
      set_pricedesc(from.pricedesc());
    }
    if (from.has_pagemin()) {
      set_pagemin(from.pagemin());
    }
    if (from.has_pagemax()) {
      set_pagemax(from.pagemax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtCopyPriceStep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtCopyPriceStep::CopyFrom(const PrtCopyPriceStep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtCopyPriceStep::IsInitialized() const {
  
  return true;
}

void PrtCopyPriceStep::Swap(PrtCopyPriceStep* other) {
  if (other != this) {
    std::swap(price_, other->price_);
    std::swap(pricedesc_, other->pricedesc_);
    std::swap(pagemin_, other->pagemin_);
    std::swap(pagemax_, other->pagemax_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtCopyPriceStep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtCopyPriceStep_descriptor_;
  metadata.reflection = PrtCopyPriceStep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtCopyPriceStepList::kListFieldNumber;
#endif  // !_MSC_VER

PrtCopyPriceStepList::PrtCopyPriceStepList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrtCopyPriceStepList::InitAsDefaultInstance() {
}

PrtCopyPriceStepList::PrtCopyPriceStepList(const PrtCopyPriceStepList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrtCopyPriceStepList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtCopyPriceStepList::~PrtCopyPriceStepList() {
  SharedDtor();
}

void PrtCopyPriceStepList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrtCopyPriceStepList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtCopyPriceStepList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtCopyPriceStepList_descriptor_;
}

const PrtCopyPriceStepList& PrtCopyPriceStepList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrtCopyPriceStepList* PrtCopyPriceStepList::default_instance_ = NULL;

PrtCopyPriceStepList* PrtCopyPriceStepList::New() const {
  return new PrtCopyPriceStepList;
}

void PrtCopyPriceStepList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtCopyPriceStepList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .isafetec.PrtCopyPriceStep list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrtCopyPriceStepList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .isafetec.PrtCopyPriceStep list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrtCopyPriceStepList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .isafetec.PrtCopyPriceStep list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrtCopyPriceStepList::ByteSize() const {
  int total_size = 0;
  
  // repeated .isafetec.PrtCopyPriceStep list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtCopyPriceStepList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtCopyPriceStepList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtCopyPriceStepList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtCopyPriceStepList::MergeFrom(const PrtCopyPriceStepList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtCopyPriceStepList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtCopyPriceStepList::CopyFrom(const PrtCopyPriceStepList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtCopyPriceStepList::IsInitialized() const {
  
  return true;
}

void PrtCopyPriceStepList::Swap(PrtCopyPriceStepList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtCopyPriceStepList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtCopyPriceStepList_descriptor_;
  metadata.reflection = PrtCopyPriceStepList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtScanPrice::kPriceTypeFieldNumber;
const int PrtScanPrice::kHbPriceFieldNumber;
const int PrtScanPrice::kColorPriceFieldNumber;
const int PrtScanPrice::kUnitFieldNumber;
#endif  // !_MSC_VER

PrtScanPrice::PrtScanPrice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrtScanPrice::InitAsDefaultInstance() {
}

PrtScanPrice::PrtScanPrice(const PrtScanPrice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrtScanPrice::SharedCtor() {
  _cached_size_ = 0;
  price_type_ = 0;
  hb_price_ = 0;
  color_price_ = 0;
  unit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtScanPrice::~PrtScanPrice() {
  SharedDtor();
}

void PrtScanPrice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrtScanPrice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtScanPrice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtScanPrice_descriptor_;
}

const PrtScanPrice& PrtScanPrice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrtScanPrice* PrtScanPrice::default_instance_ = NULL;

PrtScanPrice* PrtScanPrice::New() const {
  return new PrtScanPrice;
}

void PrtScanPrice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    price_type_ = 0;
    hb_price_ = 0;
    color_price_ = 0;
    unit_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtScanPrice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .isafetec.JOB_PRICE_TYPE price_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::JOB_PRICE_TYPE_IsValid(value)) {
            set_price_type(static_cast< isafetec::JOB_PRICE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_hb_price;
        break;
      }
      
      // optional double hb_price = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_hb_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hb_price_)));
          set_has_hb_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_color_price;
        break;
      }
      
      // optional double color_price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_color_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &color_price_)));
          set_has_color_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_unit;
        break;
      }
      
      // optional int32 unit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unit_)));
          set_has_unit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrtScanPrice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .isafetec.JOB_PRICE_TYPE price_type = 1;
  if (has_price_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->price_type(), output);
  }
  
  // optional double hb_price = 2;
  if (has_hb_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->hb_price(), output);
  }
  
  // optional double color_price = 3;
  if (has_color_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->color_price(), output);
  }
  
  // optional int32 unit = 4;
  if (has_unit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->unit(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrtScanPrice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .isafetec.JOB_PRICE_TYPE price_type = 1;
  if (has_price_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->price_type(), target);
  }
  
  // optional double hb_price = 2;
  if (has_hb_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->hb_price(), target);
  }
  
  // optional double color_price = 3;
  if (has_color_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->color_price(), target);
  }
  
  // optional int32 unit = 4;
  if (has_unit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->unit(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrtScanPrice::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .isafetec.JOB_PRICE_TYPE price_type = 1;
    if (has_price_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->price_type());
    }
    
    // optional double hb_price = 2;
    if (has_hb_price()) {
      total_size += 1 + 8;
    }
    
    // optional double color_price = 3;
    if (has_color_price()) {
      total_size += 1 + 8;
    }
    
    // optional int32 unit = 4;
    if (has_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unit());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtScanPrice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtScanPrice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtScanPrice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtScanPrice::MergeFrom(const PrtScanPrice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_price_type()) {
      set_price_type(from.price_type());
    }
    if (from.has_hb_price()) {
      set_hb_price(from.hb_price());
    }
    if (from.has_color_price()) {
      set_color_price(from.color_price());
    }
    if (from.has_unit()) {
      set_unit(from.unit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtScanPrice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtScanPrice::CopyFrom(const PrtScanPrice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtScanPrice::IsInitialized() const {
  
  return true;
}

void PrtScanPrice::Swap(PrtScanPrice* other) {
  if (other != this) {
    std::swap(price_type_, other->price_type_);
    std::swap(hb_price_, other->hb_price_);
    std::swap(color_price_, other->color_price_);
    std::swap(unit_, other->unit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtScanPrice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtScanPrice_descriptor_;
  metadata.reflection = PrtScanPrice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtScanPriceStep::kPriceFieldNumber;
const int PrtScanPriceStep::kPriceDescFieldNumber;
const int PrtScanPriceStep::kPageMinFieldNumber;
const int PrtScanPriceStep::kPageMaxFieldNumber;
#endif  // !_MSC_VER

PrtScanPriceStep::PrtScanPriceStep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrtScanPriceStep::InitAsDefaultInstance() {
  price_ = const_cast< ::isafetec::PrtScanPrice*>(&::isafetec::PrtScanPrice::default_instance());
}

PrtScanPriceStep::PrtScanPriceStep(const PrtScanPriceStep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrtScanPriceStep::SharedCtor() {
  _cached_size_ = 0;
  price_ = NULL;
  pricedesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pagemin_ = 0;
  pagemax_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtScanPriceStep::~PrtScanPriceStep() {
  SharedDtor();
}

void PrtScanPriceStep::SharedDtor() {
  if (pricedesc_ != &::google::protobuf::internal::kEmptyString) {
    delete pricedesc_;
  }
  if (this != default_instance_) {
    delete price_;
  }
}

void PrtScanPriceStep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtScanPriceStep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtScanPriceStep_descriptor_;
}

const PrtScanPriceStep& PrtScanPriceStep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrtScanPriceStep* PrtScanPriceStep::default_instance_ = NULL;

PrtScanPriceStep* PrtScanPriceStep::New() const {
  return new PrtScanPriceStep;
}

void PrtScanPriceStep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_price()) {
      if (price_ != NULL) price_->::isafetec::PrtScanPrice::Clear();
    }
    if (has_pricedesc()) {
      if (pricedesc_ != &::google::protobuf::internal::kEmptyString) {
        pricedesc_->clear();
      }
    }
    pagemin_ = 0;
    pagemax_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtScanPriceStep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .isafetec.PrtScanPrice price = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_price()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_PriceDesc;
        break;
      }
      
      // optional string PriceDesc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PriceDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pricedesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pricedesc().data(), this->pricedesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_PageMin;
        break;
      }
      
      // optional int32 PageMin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PageMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pagemin_)));
          set_has_pagemin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_PageMax;
        break;
      }
      
      // optional int32 PageMax = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PageMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pagemax_)));
          set_has_pagemax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrtScanPriceStep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .isafetec.PrtScanPrice price = 1;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->price(), output);
  }
  
  // optional string PriceDesc = 2;
  if (has_pricedesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pricedesc().data(), this->pricedesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pricedesc(), output);
  }
  
  // optional int32 PageMin = 3;
  if (has_pagemin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pagemin(), output);
  }
  
  // optional int32 PageMax = 4;
  if (has_pagemax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pagemax(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrtScanPriceStep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .isafetec.PrtScanPrice price = 1;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->price(), target);
  }
  
  // optional string PriceDesc = 2;
  if (has_pricedesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pricedesc().data(), this->pricedesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pricedesc(), target);
  }
  
  // optional int32 PageMin = 3;
  if (has_pagemin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pagemin(), target);
  }
  
  // optional int32 PageMax = 4;
  if (has_pagemax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pagemax(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrtScanPriceStep::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .isafetec.PrtScanPrice price = 1;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->price());
    }
    
    // optional string PriceDesc = 2;
    if (has_pricedesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pricedesc());
    }
    
    // optional int32 PageMin = 3;
    if (has_pagemin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pagemin());
    }
    
    // optional int32 PageMax = 4;
    if (has_pagemax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pagemax());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtScanPriceStep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtScanPriceStep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtScanPriceStep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtScanPriceStep::MergeFrom(const PrtScanPriceStep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_price()) {
      mutable_price()->::isafetec::PrtScanPrice::MergeFrom(from.price());
    }
    if (from.has_pricedesc()) {
      set_pricedesc(from.pricedesc());
    }
    if (from.has_pagemin()) {
      set_pagemin(from.pagemin());
    }
    if (from.has_pagemax()) {
      set_pagemax(from.pagemax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtScanPriceStep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtScanPriceStep::CopyFrom(const PrtScanPriceStep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtScanPriceStep::IsInitialized() const {
  
  return true;
}

void PrtScanPriceStep::Swap(PrtScanPriceStep* other) {
  if (other != this) {
    std::swap(price_, other->price_);
    std::swap(pricedesc_, other->pricedesc_);
    std::swap(pagemin_, other->pagemin_);
    std::swap(pagemax_, other->pagemax_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtScanPriceStep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtScanPriceStep_descriptor_;
  metadata.reflection = PrtScanPriceStep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtScanPriceStepList::kListFieldNumber;
#endif  // !_MSC_VER

PrtScanPriceStepList::PrtScanPriceStepList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrtScanPriceStepList::InitAsDefaultInstance() {
}

PrtScanPriceStepList::PrtScanPriceStepList(const PrtScanPriceStepList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrtScanPriceStepList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtScanPriceStepList::~PrtScanPriceStepList() {
  SharedDtor();
}

void PrtScanPriceStepList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrtScanPriceStepList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtScanPriceStepList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtScanPriceStepList_descriptor_;
}

const PrtScanPriceStepList& PrtScanPriceStepList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrtScanPriceStepList* PrtScanPriceStepList::default_instance_ = NULL;

PrtScanPriceStepList* PrtScanPriceStepList::New() const {
  return new PrtScanPriceStepList;
}

void PrtScanPriceStepList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtScanPriceStepList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .isafetec.PrtScanPriceStep list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrtScanPriceStepList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .isafetec.PrtScanPriceStep list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrtScanPriceStepList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .isafetec.PrtScanPriceStep list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrtScanPriceStepList::ByteSize() const {
  int total_size = 0;
  
  // repeated .isafetec.PrtScanPriceStep list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtScanPriceStepList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtScanPriceStepList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtScanPriceStepList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtScanPriceStepList::MergeFrom(const PrtScanPriceStepList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtScanPriceStepList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtScanPriceStepList::CopyFrom(const PrtScanPriceStepList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtScanPriceStepList::IsInitialized() const {
  
  return true;
}

void PrtScanPriceStepList::Swap(PrtScanPriceStepList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtScanPriceStepList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtScanPriceStepList_descriptor_;
  metadata.reflection = PrtScanPriceStepList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtStationCheckUserResult::kAccountFieldNumber;
const int PrtStationCheckUserResult::kPriceFieldNumber;
const int PrtStationCheckUserResult::kCopyPriceFieldNumber;
const int PrtStationCheckUserResult::kScanPriceFieldNumber;
const int PrtStationCheckUserResult::kPrtIdFieldNumber;
const int PrtStationCheckUserResult::kPrintPriceStepListFieldNumber;
const int PrtStationCheckUserResult::kCopyPriceStepListFieldNumber;
const int PrtStationCheckUserResult::kScanPriceStepListFieldNumber;
const int PrtStationCheckUserResult::kPrintLimitPolicyFieldNumber;
const int PrtStationCheckUserResult::kCopyLimitPolicyFieldNumber;
const int PrtStationCheckUserResult::kScanLimitPolicyFieldNumber;
#endif  // !_MSC_VER

PrtStationCheckUserResult::PrtStationCheckUserResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrtStationCheckUserResult::InitAsDefaultInstance() {
  account_ = const_cast< ::isafetec::PrtStationUserAccount*>(&::isafetec::PrtStationUserAccount::default_instance());
  price_ = const_cast< ::isafetec::PrtStationPrice*>(&::isafetec::PrtStationPrice::default_instance());
  copy_price_ = const_cast< ::isafetec::PrtCopyPrice*>(&::isafetec::PrtCopyPrice::default_instance());
  scan_price_ = const_cast< ::isafetec::PrtScanPrice*>(&::isafetec::PrtScanPrice::default_instance());
  print_price_step_list_ = const_cast< ::isafetec::PrtStationPriceStepList*>(&::isafetec::PrtStationPriceStepList::default_instance());
  copy_price_step_list_ = const_cast< ::isafetec::PrtCopyPriceStepList*>(&::isafetec::PrtCopyPriceStepList::default_instance());
  scan_price_step_list_ = const_cast< ::isafetec::PrtScanPriceStepList*>(&::isafetec::PrtScanPriceStepList::default_instance());
  print_limit_policy_ = const_cast< ::isafetec::PrintLimitPolicy*>(&::isafetec::PrintLimitPolicy::default_instance());
  copy_limit_policy_ = const_cast< ::isafetec::CopyLimitPolicy*>(&::isafetec::CopyLimitPolicy::default_instance());
  scan_limit_policy_ = const_cast< ::isafetec::ScanLimitPolicy*>(&::isafetec::ScanLimitPolicy::default_instance());
}

PrtStationCheckUserResult::PrtStationCheckUserResult(const PrtStationCheckUserResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrtStationCheckUserResult::SharedCtor() {
  _cached_size_ = 0;
  account_ = NULL;
  price_ = NULL;
  copy_price_ = NULL;
  scan_price_ = NULL;
  prt_id_ = 0;
  print_price_step_list_ = NULL;
  copy_price_step_list_ = NULL;
  scan_price_step_list_ = NULL;
  print_limit_policy_ = NULL;
  copy_limit_policy_ = NULL;
  scan_limit_policy_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtStationCheckUserResult::~PrtStationCheckUserResult() {
  SharedDtor();
}

void PrtStationCheckUserResult::SharedDtor() {
  if (this != default_instance_) {
    delete account_;
    delete price_;
    delete copy_price_;
    delete scan_price_;
    delete print_price_step_list_;
    delete copy_price_step_list_;
    delete scan_price_step_list_;
    delete print_limit_policy_;
    delete copy_limit_policy_;
    delete scan_limit_policy_;
  }
}

void PrtStationCheckUserResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtStationCheckUserResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtStationCheckUserResult_descriptor_;
}

const PrtStationCheckUserResult& PrtStationCheckUserResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrtStationCheckUserResult* PrtStationCheckUserResult::default_instance_ = NULL;

PrtStationCheckUserResult* PrtStationCheckUserResult::New() const {
  return new PrtStationCheckUserResult;
}

void PrtStationCheckUserResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != NULL) account_->::isafetec::PrtStationUserAccount::Clear();
    }
    if (has_price()) {
      if (price_ != NULL) price_->::isafetec::PrtStationPrice::Clear();
    }
    if (has_copy_price()) {
      if (copy_price_ != NULL) copy_price_->::isafetec::PrtCopyPrice::Clear();
    }
    if (has_scan_price()) {
      if (scan_price_ != NULL) scan_price_->::isafetec::PrtScanPrice::Clear();
    }
    prt_id_ = 0;
    if (has_print_price_step_list()) {
      if (print_price_step_list_ != NULL) print_price_step_list_->::isafetec::PrtStationPriceStepList::Clear();
    }
    if (has_copy_price_step_list()) {
      if (copy_price_step_list_ != NULL) copy_price_step_list_->::isafetec::PrtCopyPriceStepList::Clear();
    }
    if (has_scan_price_step_list()) {
      if (scan_price_step_list_ != NULL) scan_price_step_list_->::isafetec::PrtScanPriceStepList::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_print_limit_policy()) {
      if (print_limit_policy_ != NULL) print_limit_policy_->::isafetec::PrintLimitPolicy::Clear();
    }
    if (has_copy_limit_policy()) {
      if (copy_limit_policy_ != NULL) copy_limit_policy_->::isafetec::CopyLimitPolicy::Clear();
    }
    if (has_scan_limit_policy()) {
      if (scan_limit_policy_ != NULL) scan_limit_policy_->::isafetec::ScanLimitPolicy::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtStationCheckUserResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .isafetec.PrtStationUserAccount account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_price;
        break;
      }
      
      // optional .isafetec.PrtStationPrice price = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_price()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_copy_price;
        break;
      }
      
      // optional .isafetec.PrtCopyPrice copy_price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_copy_price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_copy_price()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_scan_price;
        break;
      }
      
      // optional .isafetec.PrtScanPrice scan_price = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scan_price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scan_price()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_prt_id;
        break;
      }
      
      // optional int32 prt_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prt_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prt_id_)));
          set_has_prt_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_print_price_step_list;
        break;
      }
      
      // optional .isafetec.PrtStationPriceStepList print_price_step_list = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_print_price_step_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_print_price_step_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_copy_price_step_list;
        break;
      }
      
      // optional .isafetec.PrtCopyPriceStepList copy_price_step_list = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_copy_price_step_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_copy_price_step_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_scan_price_step_list;
        break;
      }
      
      // optional .isafetec.PrtScanPriceStepList scan_price_step_list = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scan_price_step_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scan_price_step_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_print_limit_policy;
        break;
      }
      
      // optional .isafetec.PrintLimitPolicy print_limit_policy = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_print_limit_policy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_print_limit_policy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_copy_limit_policy;
        break;
      }
      
      // optional .isafetec.CopyLimitPolicy copy_limit_policy = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_copy_limit_policy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_copy_limit_policy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_scan_limit_policy;
        break;
      }
      
      // optional .isafetec.ScanLimitPolicy scan_limit_policy = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scan_limit_policy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scan_limit_policy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrtStationCheckUserResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .isafetec.PrtStationUserAccount account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->account(), output);
  }
  
  // optional .isafetec.PrtStationPrice price = 2;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->price(), output);
  }
  
  // optional .isafetec.PrtCopyPrice copy_price = 3;
  if (has_copy_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->copy_price(), output);
  }
  
  // optional .isafetec.PrtScanPrice scan_price = 4;
  if (has_scan_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->scan_price(), output);
  }
  
  // optional int32 prt_id = 8;
  if (has_prt_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->prt_id(), output);
  }
  
  // optional .isafetec.PrtStationPriceStepList print_price_step_list = 9;
  if (has_print_price_step_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->print_price_step_list(), output);
  }
  
  // optional .isafetec.PrtCopyPriceStepList copy_price_step_list = 10;
  if (has_copy_price_step_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->copy_price_step_list(), output);
  }
  
  // optional .isafetec.PrtScanPriceStepList scan_price_step_list = 11;
  if (has_scan_price_step_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->scan_price_step_list(), output);
  }
  
  // optional .isafetec.PrintLimitPolicy print_limit_policy = 12;
  if (has_print_limit_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->print_limit_policy(), output);
  }
  
  // optional .isafetec.CopyLimitPolicy copy_limit_policy = 13;
  if (has_copy_limit_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->copy_limit_policy(), output);
  }
  
  // optional .isafetec.ScanLimitPolicy scan_limit_policy = 14;
  if (has_scan_limit_policy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->scan_limit_policy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrtStationCheckUserResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .isafetec.PrtStationUserAccount account = 1;
  if (has_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->account(), target);
  }
  
  // optional .isafetec.PrtStationPrice price = 2;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->price(), target);
  }
  
  // optional .isafetec.PrtCopyPrice copy_price = 3;
  if (has_copy_price()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->copy_price(), target);
  }
  
  // optional .isafetec.PrtScanPrice scan_price = 4;
  if (has_scan_price()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->scan_price(), target);
  }
  
  // optional int32 prt_id = 8;
  if (has_prt_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->prt_id(), target);
  }
  
  // optional .isafetec.PrtStationPriceStepList print_price_step_list = 9;
  if (has_print_price_step_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->print_price_step_list(), target);
  }
  
  // optional .isafetec.PrtCopyPriceStepList copy_price_step_list = 10;
  if (has_copy_price_step_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->copy_price_step_list(), target);
  }
  
  // optional .isafetec.PrtScanPriceStepList scan_price_step_list = 11;
  if (has_scan_price_step_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->scan_price_step_list(), target);
  }
  
  // optional .isafetec.PrintLimitPolicy print_limit_policy = 12;
  if (has_print_limit_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->print_limit_policy(), target);
  }
  
  // optional .isafetec.CopyLimitPolicy copy_limit_policy = 13;
  if (has_copy_limit_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->copy_limit_policy(), target);
  }
  
  // optional .isafetec.ScanLimitPolicy scan_limit_policy = 14;
  if (has_scan_limit_policy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->scan_limit_policy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrtStationCheckUserResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .isafetec.PrtStationUserAccount account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account());
    }
    
    // optional .isafetec.PrtStationPrice price = 2;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->price());
    }
    
    // optional .isafetec.PrtCopyPrice copy_price = 3;
    if (has_copy_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->copy_price());
    }
    
    // optional .isafetec.PrtScanPrice scan_price = 4;
    if (has_scan_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scan_price());
    }
    
    // optional int32 prt_id = 8;
    if (has_prt_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prt_id());
    }
    
    // optional .isafetec.PrtStationPriceStepList print_price_step_list = 9;
    if (has_print_price_step_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->print_price_step_list());
    }
    
    // optional .isafetec.PrtCopyPriceStepList copy_price_step_list = 10;
    if (has_copy_price_step_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->copy_price_step_list());
    }
    
    // optional .isafetec.PrtScanPriceStepList scan_price_step_list = 11;
    if (has_scan_price_step_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scan_price_step_list());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .isafetec.PrintLimitPolicy print_limit_policy = 12;
    if (has_print_limit_policy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->print_limit_policy());
    }
    
    // optional .isafetec.CopyLimitPolicy copy_limit_policy = 13;
    if (has_copy_limit_policy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->copy_limit_policy());
    }
    
    // optional .isafetec.ScanLimitPolicy scan_limit_policy = 14;
    if (has_scan_limit_policy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scan_limit_policy());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtStationCheckUserResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtStationCheckUserResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtStationCheckUserResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtStationCheckUserResult::MergeFrom(const PrtStationCheckUserResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      mutable_account()->::isafetec::PrtStationUserAccount::MergeFrom(from.account());
    }
    if (from.has_price()) {
      mutable_price()->::isafetec::PrtStationPrice::MergeFrom(from.price());
    }
    if (from.has_copy_price()) {
      mutable_copy_price()->::isafetec::PrtCopyPrice::MergeFrom(from.copy_price());
    }
    if (from.has_scan_price()) {
      mutable_scan_price()->::isafetec::PrtScanPrice::MergeFrom(from.scan_price());
    }
    if (from.has_prt_id()) {
      set_prt_id(from.prt_id());
    }
    if (from.has_print_price_step_list()) {
      mutable_print_price_step_list()->::isafetec::PrtStationPriceStepList::MergeFrom(from.print_price_step_list());
    }
    if (from.has_copy_price_step_list()) {
      mutable_copy_price_step_list()->::isafetec::PrtCopyPriceStepList::MergeFrom(from.copy_price_step_list());
    }
    if (from.has_scan_price_step_list()) {
      mutable_scan_price_step_list()->::isafetec::PrtScanPriceStepList::MergeFrom(from.scan_price_step_list());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_print_limit_policy()) {
      mutable_print_limit_policy()->::isafetec::PrintLimitPolicy::MergeFrom(from.print_limit_policy());
    }
    if (from.has_copy_limit_policy()) {
      mutable_copy_limit_policy()->::isafetec::CopyLimitPolicy::MergeFrom(from.copy_limit_policy());
    }
    if (from.has_scan_limit_policy()) {
      mutable_scan_limit_policy()->::isafetec::ScanLimitPolicy::MergeFrom(from.scan_limit_policy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtStationCheckUserResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtStationCheckUserResult::CopyFrom(const PrtStationCheckUserResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtStationCheckUserResult::IsInitialized() const {
  
  return true;
}

void PrtStationCheckUserResult::Swap(PrtStationCheckUserResult* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(price_, other->price_);
    std::swap(copy_price_, other->copy_price_);
    std::swap(scan_price_, other->scan_price_);
    std::swap(prt_id_, other->prt_id_);
    std::swap(print_price_step_list_, other->print_price_step_list_);
    std::swap(copy_price_step_list_, other->copy_price_step_list_);
    std::swap(scan_price_step_list_, other->scan_price_step_list_);
    std::swap(print_limit_policy_, other->print_limit_policy_);
    std::swap(copy_limit_policy_, other->copy_limit_policy_);
    std::swap(scan_limit_policy_, other->scan_limit_policy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtStationCheckUserResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtStationCheckUserResult_descriptor_;
  metadata.reflection = PrtStationCheckUserResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtStationChargeErr::kJobIdFieldNumber;
const int PrtStationChargeErr::kUserIdFieldNumber;
const int PrtStationChargeErr::kNeedUpdateJobStateFieldNumber;
const int PrtStationChargeErr::kJobNewStateFieldNumber;
#endif  // !_MSC_VER

PrtStationChargeErr::PrtStationChargeErr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrtStationChargeErr::InitAsDefaultInstance() {
}

PrtStationChargeErr::PrtStationChargeErr(const PrtStationChargeErr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrtStationChargeErr::SharedCtor() {
  _cached_size_ = 0;
  job_id_ = 0;
  user_id_ = 0;
  need_update_job_state_ = false;
  job_new_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtStationChargeErr::~PrtStationChargeErr() {
  SharedDtor();
}

void PrtStationChargeErr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrtStationChargeErr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtStationChargeErr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtStationChargeErr_descriptor_;
}

const PrtStationChargeErr& PrtStationChargeErr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrtStationChargeErr* PrtStationChargeErr::default_instance_ = NULL;

PrtStationChargeErr* PrtStationChargeErr::New() const {
  return new PrtStationChargeErr;
}

void PrtStationChargeErr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    job_id_ = 0;
    user_id_ = 0;
    need_update_job_state_ = false;
    job_new_state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtStationChargeErr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 job_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_id_)));
          set_has_job_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }
      
      // optional int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_need_update_job_state;
        break;
      }
      
      // optional bool need_update_job_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_update_job_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_update_job_state_)));
          set_has_need_update_job_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_job_new_state;
        break;
      }
      
      // optional .isafetec.SUBMIT_JOB_STATE job_new_state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job_new_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::SUBMIT_JOB_STATE_IsValid(value)) {
            set_job_new_state(static_cast< isafetec::SUBMIT_JOB_STATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrtStationChargeErr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 job_id = 1;
  if (has_job_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->job_id(), output);
  }
  
  // optional int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }
  
  // optional bool need_update_job_state = 3;
  if (has_need_update_job_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->need_update_job_state(), output);
  }
  
  // optional .isafetec.SUBMIT_JOB_STATE job_new_state = 4;
  if (has_job_new_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->job_new_state(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrtStationChargeErr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 job_id = 1;
  if (has_job_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->job_id(), target);
  }
  
  // optional int32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }
  
  // optional bool need_update_job_state = 3;
  if (has_need_update_job_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->need_update_job_state(), target);
  }
  
  // optional .isafetec.SUBMIT_JOB_STATE job_new_state = 4;
  if (has_job_new_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->job_new_state(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrtStationChargeErr::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 job_id = 1;
    if (has_job_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job_id());
    }
    
    // optional int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }
    
    // optional bool need_update_job_state = 3;
    if (has_need_update_job_state()) {
      total_size += 1 + 1;
    }
    
    // optional .isafetec.SUBMIT_JOB_STATE job_new_state = 4;
    if (has_job_new_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->job_new_state());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtStationChargeErr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtStationChargeErr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtStationChargeErr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtStationChargeErr::MergeFrom(const PrtStationChargeErr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_job_id()) {
      set_job_id(from.job_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_need_update_job_state()) {
      set_need_update_job_state(from.need_update_job_state());
    }
    if (from.has_job_new_state()) {
      set_job_new_state(from.job_new_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtStationChargeErr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtStationChargeErr::CopyFrom(const PrtStationChargeErr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtStationChargeErr::IsInitialized() const {
  
  return true;
}

void PrtStationChargeErr::Swap(PrtStationChargeErr* other) {
  if (other != this) {
    std::swap(job_id_, other->job_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(need_update_job_state_, other->need_update_job_state_);
    std::swap(job_new_state_, other->job_new_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtStationChargeErr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtStationChargeErr_descriptor_;
  metadata.reflection = PrtStationChargeErr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtStationInfo::kIdFieldNumber;
const int PrtStationInfo::kAllowOrderFieldNumber;
const int PrtStationInfo::kCheckOrderInternalFieldNumber;
const int PrtStationInfo::kAllowDirectPrintFieldNumber;
const int PrtStationInfo::kCheckDirectJobInternalFieldNumber;
const int PrtStationInfo::kOnServerFieldNumber;
const int PrtStationInfo::kPrinterNameFieldNumber;
const int PrtStationInfo::kFunCodeFieldNumber;
const int PrtStationInfo::kSupportColorFieldNumber;
const int PrtStationInfo::kBeginTimeFieldNumber;
const int PrtStationInfo::kEndTimeFieldNumber;
const int PrtStationInfo::kPrtNameFieldNumber;
const int PrtStationInfo::kSupportDuplexFieldNumber;
const int PrtStationInfo::kPrintPriceFieldNumber;
const int PrtStationInfo::kCopyPriceFieldNumber;
const int PrtStationInfo::kScanPriceFieldNumber;
const int PrtStationInfo::kPrinterIpFieldNumber;
const int PrtStationInfo::kPrintStationIpFieldNumber;
#endif  // !_MSC_VER

PrtStationInfo::PrtStationInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrtStationInfo::InitAsDefaultInstance() {
  print_price_ = const_cast< ::isafetec::PrtStationPrice*>(&::isafetec::PrtStationPrice::default_instance());
  copy_price_ = const_cast< ::isafetec::PrtCopyPrice*>(&::isafetec::PrtCopyPrice::default_instance());
  scan_price_ = const_cast< ::isafetec::PrtScanPrice*>(&::isafetec::PrtScanPrice::default_instance());
}

PrtStationInfo::PrtStationInfo(const PrtStationInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrtStationInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  allow_order_ = 0;
  check_order_internal_ = 0;
  allow_direct_print_ = 0;
  check_direct_job_internal_ = 0;
  on_server_ = false;
  printer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fun_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  support_color_ = false;
  begin_time_ = 0;
  end_time_ = 0;
  prt_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  support_duplex_ = 0;
  print_price_ = NULL;
  copy_price_ = NULL;
  scan_price_ = NULL;
  printer_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  print_station_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtStationInfo::~PrtStationInfo() {
  SharedDtor();
}

void PrtStationInfo::SharedDtor() {
  if (printer_name_ != &::google::protobuf::internal::kEmptyString) {
    delete printer_name_;
  }
  if (fun_code_ != &::google::protobuf::internal::kEmptyString) {
    delete fun_code_;
  }
  if (prt_name_ != &::google::protobuf::internal::kEmptyString) {
    delete prt_name_;
  }
  if (printer_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete printer_ip_;
  }
  if (print_station_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete print_station_ip_;
  }
  if (this != default_instance_) {
    delete print_price_;
    delete copy_price_;
    delete scan_price_;
  }
}

void PrtStationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtStationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtStationInfo_descriptor_;
}

const PrtStationInfo& PrtStationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrtStationInfo* PrtStationInfo::default_instance_ = NULL;

PrtStationInfo* PrtStationInfo::New() const {
  return new PrtStationInfo;
}

void PrtStationInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    allow_order_ = 0;
    check_order_internal_ = 0;
    allow_direct_print_ = 0;
    check_direct_job_internal_ = 0;
    on_server_ = false;
    if (has_printer_name()) {
      if (printer_name_ != &::google::protobuf::internal::kEmptyString) {
        printer_name_->clear();
      }
    }
    if (has_fun_code()) {
      if (fun_code_ != &::google::protobuf::internal::kEmptyString) {
        fun_code_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    support_color_ = false;
    begin_time_ = 0;
    end_time_ = 0;
    if (has_prt_name()) {
      if (prt_name_ != &::google::protobuf::internal::kEmptyString) {
        prt_name_->clear();
      }
    }
    support_duplex_ = 0;
    if (has_print_price()) {
      if (print_price_ != NULL) print_price_->::isafetec::PrtStationPrice::Clear();
    }
    if (has_copy_price()) {
      if (copy_price_ != NULL) copy_price_->::isafetec::PrtCopyPrice::Clear();
    }
    if (has_scan_price()) {
      if (scan_price_ != NULL) scan_price_->::isafetec::PrtScanPrice::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_printer_ip()) {
      if (printer_ip_ != &::google::protobuf::internal::kEmptyString) {
        printer_ip_->clear();
      }
    }
    if (has_print_station_ip()) {
      if (print_station_ip_ != &::google::protobuf::internal::kEmptyString) {
        print_station_ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtStationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_allow_order;
        break;
      }
      
      // optional int32 allow_order = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allow_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allow_order_)));
          set_has_allow_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_check_order_internal;
        break;
      }
      
      // optional int32 check_order_internal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_check_order_internal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &check_order_internal_)));
          set_has_check_order_internal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_allow_direct_print;
        break;
      }
      
      // optional int32 allow_direct_print = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allow_direct_print:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allow_direct_print_)));
          set_has_allow_direct_print();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_check_direct_job_internal;
        break;
      }
      
      // optional int32 check_direct_job_internal = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_check_direct_job_internal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &check_direct_job_internal_)));
          set_has_check_direct_job_internal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_on_server;
        break;
      }
      
      // optional bool on_server = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_on_server:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &on_server_)));
          set_has_on_server();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_printer_name;
        break;
      }
      
      // optional string printer_name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_printer_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_printer_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->printer_name().data(), this->printer_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_fun_code;
        break;
      }
      
      // optional string fun_code = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fun_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fun_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fun_code().data(), this->fun_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_support_color;
        break;
      }
      
      // optional bool support_color = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_support_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &support_color_)));
          set_has_support_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_begin_time;
        break;
      }
      
      // optional double begin_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &begin_time_)));
          set_has_begin_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_end_time;
        break;
      }
      
      // optional double end_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_prt_name;
        break;
      }
      
      // optional string prt_name = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prt_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prt_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->prt_name().data(), this->prt_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_support_duplex;
        break;
      }
      
      // optional int32 support_duplex = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_support_duplex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &support_duplex_)));
          set_has_support_duplex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_print_price;
        break;
      }
      
      // optional .isafetec.PrtStationPrice print_price = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_print_price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_print_price()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_copy_price;
        break;
      }
      
      // optional .isafetec.PrtCopyPrice copy_price = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_copy_price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_copy_price()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_scan_price;
        break;
      }
      
      // optional .isafetec.PrtScanPrice scan_price = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scan_price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scan_price()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_printer_ip;
        break;
      }
      
      // optional string printer_ip = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_printer_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_printer_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->printer_ip().data(), this->printer_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_print_station_ip;
        break;
      }
      
      // optional string print_station_ip = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_print_station_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_print_station_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->print_station_ip().data(), this->print_station_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrtStationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional int32 allow_order = 2;
  if (has_allow_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->allow_order(), output);
  }
  
  // optional int32 check_order_internal = 3;
  if (has_check_order_internal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->check_order_internal(), output);
  }
  
  // optional int32 allow_direct_print = 4;
  if (has_allow_direct_print()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->allow_direct_print(), output);
  }
  
  // optional int32 check_direct_job_internal = 5;
  if (has_check_direct_job_internal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->check_direct_job_internal(), output);
  }
  
  // optional bool on_server = 6;
  if (has_on_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->on_server(), output);
  }
  
  // optional string printer_name = 7;
  if (has_printer_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->printer_name().data(), this->printer_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->printer_name(), output);
  }
  
  // optional string fun_code = 8;
  if (has_fun_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fun_code().data(), this->fun_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->fun_code(), output);
  }
  
  // optional bool support_color = 9;
  if (has_support_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->support_color(), output);
  }
  
  // optional double begin_time = 10;
  if (has_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->begin_time(), output);
  }
  
  // optional double end_time = 11;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->end_time(), output);
  }
  
  // optional string prt_name = 12;
  if (has_prt_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prt_name().data(), this->prt_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->prt_name(), output);
  }
  
  // optional int32 support_duplex = 13;
  if (has_support_duplex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->support_duplex(), output);
  }
  
  // optional .isafetec.PrtStationPrice print_price = 14;
  if (has_print_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->print_price(), output);
  }
  
  // optional .isafetec.PrtCopyPrice copy_price = 15;
  if (has_copy_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->copy_price(), output);
  }
  
  // optional .isafetec.PrtScanPrice scan_price = 16;
  if (has_scan_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->scan_price(), output);
  }
  
  // optional string printer_ip = 17;
  if (has_printer_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->printer_ip().data(), this->printer_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->printer_ip(), output);
  }
  
  // optional string print_station_ip = 18;
  if (has_print_station_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->print_station_ip().data(), this->print_station_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->print_station_ip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrtStationInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional int32 allow_order = 2;
  if (has_allow_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->allow_order(), target);
  }
  
  // optional int32 check_order_internal = 3;
  if (has_check_order_internal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->check_order_internal(), target);
  }
  
  // optional int32 allow_direct_print = 4;
  if (has_allow_direct_print()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->allow_direct_print(), target);
  }
  
  // optional int32 check_direct_job_internal = 5;
  if (has_check_direct_job_internal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->check_direct_job_internal(), target);
  }
  
  // optional bool on_server = 6;
  if (has_on_server()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->on_server(), target);
  }
  
  // optional string printer_name = 7;
  if (has_printer_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->printer_name().data(), this->printer_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->printer_name(), target);
  }
  
  // optional string fun_code = 8;
  if (has_fun_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fun_code().data(), this->fun_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->fun_code(), target);
  }
  
  // optional bool support_color = 9;
  if (has_support_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->support_color(), target);
  }
  
  // optional double begin_time = 10;
  if (has_begin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->begin_time(), target);
  }
  
  // optional double end_time = 11;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->end_time(), target);
  }
  
  // optional string prt_name = 12;
  if (has_prt_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prt_name().data(), this->prt_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->prt_name(), target);
  }
  
  // optional int32 support_duplex = 13;
  if (has_support_duplex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->support_duplex(), target);
  }
  
  // optional .isafetec.PrtStationPrice print_price = 14;
  if (has_print_price()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->print_price(), target);
  }
  
  // optional .isafetec.PrtCopyPrice copy_price = 15;
  if (has_copy_price()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->copy_price(), target);
  }
  
  // optional .isafetec.PrtScanPrice scan_price = 16;
  if (has_scan_price()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->scan_price(), target);
  }
  
  // optional string printer_ip = 17;
  if (has_printer_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->printer_ip().data(), this->printer_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->printer_ip(), target);
  }
  
  // optional string print_station_ip = 18;
  if (has_print_station_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->print_station_ip().data(), this->print_station_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->print_station_ip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrtStationInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional int32 allow_order = 2;
    if (has_allow_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allow_order());
    }
    
    // optional int32 check_order_internal = 3;
    if (has_check_order_internal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->check_order_internal());
    }
    
    // optional int32 allow_direct_print = 4;
    if (has_allow_direct_print()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allow_direct_print());
    }
    
    // optional int32 check_direct_job_internal = 5;
    if (has_check_direct_job_internal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->check_direct_job_internal());
    }
    
    // optional bool on_server = 6;
    if (has_on_server()) {
      total_size += 1 + 1;
    }
    
    // optional string printer_name = 7;
    if (has_printer_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->printer_name());
    }
    
    // optional string fun_code = 8;
    if (has_fun_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fun_code());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool support_color = 9;
    if (has_support_color()) {
      total_size += 1 + 1;
    }
    
    // optional double begin_time = 10;
    if (has_begin_time()) {
      total_size += 1 + 8;
    }
    
    // optional double end_time = 11;
    if (has_end_time()) {
      total_size += 1 + 8;
    }
    
    // optional string prt_name = 12;
    if (has_prt_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prt_name());
    }
    
    // optional int32 support_duplex = 13;
    if (has_support_duplex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->support_duplex());
    }
    
    // optional .isafetec.PrtStationPrice print_price = 14;
    if (has_print_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->print_price());
    }
    
    // optional .isafetec.PrtCopyPrice copy_price = 15;
    if (has_copy_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->copy_price());
    }
    
    // optional .isafetec.PrtScanPrice scan_price = 16;
    if (has_scan_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scan_price());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string printer_ip = 17;
    if (has_printer_ip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->printer_ip());
    }
    
    // optional string print_station_ip = 18;
    if (has_print_station_ip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->print_station_ip());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtStationInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtStationInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtStationInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtStationInfo::MergeFrom(const PrtStationInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_allow_order()) {
      set_allow_order(from.allow_order());
    }
    if (from.has_check_order_internal()) {
      set_check_order_internal(from.check_order_internal());
    }
    if (from.has_allow_direct_print()) {
      set_allow_direct_print(from.allow_direct_print());
    }
    if (from.has_check_direct_job_internal()) {
      set_check_direct_job_internal(from.check_direct_job_internal());
    }
    if (from.has_on_server()) {
      set_on_server(from.on_server());
    }
    if (from.has_printer_name()) {
      set_printer_name(from.printer_name());
    }
    if (from.has_fun_code()) {
      set_fun_code(from.fun_code());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_support_color()) {
      set_support_color(from.support_color());
    }
    if (from.has_begin_time()) {
      set_begin_time(from.begin_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_prt_name()) {
      set_prt_name(from.prt_name());
    }
    if (from.has_support_duplex()) {
      set_support_duplex(from.support_duplex());
    }
    if (from.has_print_price()) {
      mutable_print_price()->::isafetec::PrtStationPrice::MergeFrom(from.print_price());
    }
    if (from.has_copy_price()) {
      mutable_copy_price()->::isafetec::PrtCopyPrice::MergeFrom(from.copy_price());
    }
    if (from.has_scan_price()) {
      mutable_scan_price()->::isafetec::PrtScanPrice::MergeFrom(from.scan_price());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_printer_ip()) {
      set_printer_ip(from.printer_ip());
    }
    if (from.has_print_station_ip()) {
      set_print_station_ip(from.print_station_ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtStationInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtStationInfo::CopyFrom(const PrtStationInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtStationInfo::IsInitialized() const {
  
  return true;
}

void PrtStationInfo::Swap(PrtStationInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(allow_order_, other->allow_order_);
    std::swap(check_order_internal_, other->check_order_internal_);
    std::swap(allow_direct_print_, other->allow_direct_print_);
    std::swap(check_direct_job_internal_, other->check_direct_job_internal_);
    std::swap(on_server_, other->on_server_);
    std::swap(printer_name_, other->printer_name_);
    std::swap(fun_code_, other->fun_code_);
    std::swap(support_color_, other->support_color_);
    std::swap(begin_time_, other->begin_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(prt_name_, other->prt_name_);
    std::swap(support_duplex_, other->support_duplex_);
    std::swap(print_price_, other->print_price_);
    std::swap(copy_price_, other->copy_price_);
    std::swap(scan_price_, other->scan_price_);
    std::swap(printer_ip_, other->printer_ip_);
    std::swap(print_station_ip_, other->print_station_ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtStationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtStationInfo_descriptor_;
  metadata.reflection = PrtStationInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AutoAddPrtStationInfo::kPrinterNameFieldNumber;
const int AutoAddPrtStationInfo::kPrinterResolutionFieldNumber;
const int AutoAddPrtStationInfo::kPrinterSpeedFieldNumber;
const int AutoAddPrtStationInfo::kPrinterColorFieldNumber;
const int AutoAddPrtStationInfo::kPrtStationNameFieldNumber;
const int AutoAddPrtStationInfo::kPrtStationCommentFieldNumber;
const int AutoAddPrtStationInfo::kA3HbPriceFieldNumber;
const int AutoAddPrtStationInfo::kA3ColorPriceFieldNumber;
const int AutoAddPrtStationInfo::kA4HbPriceFieldNumber;
const int AutoAddPrtStationInfo::kA4ColorPriceFieldNumber;
const int AutoAddPrtStationInfo::kPrinterIpFieldNumber;
#endif  // !_MSC_VER

AutoAddPrtStationInfo::AutoAddPrtStationInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AutoAddPrtStationInfo::InitAsDefaultInstance() {
}

AutoAddPrtStationInfo::AutoAddPrtStationInfo(const AutoAddPrtStationInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AutoAddPrtStationInfo::SharedCtor() {
  _cached_size_ = 0;
  printer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  printer_resolution_ = 0;
  printer_speed_ = 0;
  printer_color_ = 0;
  prt_station_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prt_station_comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  a3_hb_price_ = 0;
  a3_color_price_ = 0;
  a4_hb_price_ = 0;
  a4_color_price_ = 0;
  printer_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutoAddPrtStationInfo::~AutoAddPrtStationInfo() {
  SharedDtor();
}

void AutoAddPrtStationInfo::SharedDtor() {
  if (printer_name_ != &::google::protobuf::internal::kEmptyString) {
    delete printer_name_;
  }
  if (prt_station_name_ != &::google::protobuf::internal::kEmptyString) {
    delete prt_station_name_;
  }
  if (prt_station_comment_ != &::google::protobuf::internal::kEmptyString) {
    delete prt_station_comment_;
  }
  if (printer_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete printer_ip_;
  }
  if (this != default_instance_) {
  }
}

void AutoAddPrtStationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AutoAddPrtStationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AutoAddPrtStationInfo_descriptor_;
}

const AutoAddPrtStationInfo& AutoAddPrtStationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

AutoAddPrtStationInfo* AutoAddPrtStationInfo::default_instance_ = NULL;

AutoAddPrtStationInfo* AutoAddPrtStationInfo::New() const {
  return new AutoAddPrtStationInfo;
}

void AutoAddPrtStationInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_printer_name()) {
      if (printer_name_ != &::google::protobuf::internal::kEmptyString) {
        printer_name_->clear();
      }
    }
    printer_resolution_ = 0;
    printer_speed_ = 0;
    printer_color_ = 0;
    if (has_prt_station_name()) {
      if (prt_station_name_ != &::google::protobuf::internal::kEmptyString) {
        prt_station_name_->clear();
      }
    }
    if (has_prt_station_comment()) {
      if (prt_station_comment_ != &::google::protobuf::internal::kEmptyString) {
        prt_station_comment_->clear();
      }
    }
    a3_hb_price_ = 0;
    a3_color_price_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    a4_hb_price_ = 0;
    a4_color_price_ = 0;
    if (has_printer_ip()) {
      if (printer_ip_ != &::google::protobuf::internal::kEmptyString) {
        printer_ip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AutoAddPrtStationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string printer_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_printer_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->printer_name().data(), this->printer_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_printer_resolution;
        break;
      }
      
      // optional int32 printer_resolution = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_printer_resolution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &printer_resolution_)));
          set_has_printer_resolution();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_printer_speed;
        break;
      }
      
      // optional int32 printer_speed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_printer_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &printer_speed_)));
          set_has_printer_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_printer_color;
        break;
      }
      
      // optional int32 printer_color = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_printer_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &printer_color_)));
          set_has_printer_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_prt_station_name;
        break;
      }
      
      // optional string prt_station_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prt_station_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prt_station_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->prt_station_name().data(), this->prt_station_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_prt_station_comment;
        break;
      }
      
      // optional string prt_station_comment = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prt_station_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prt_station_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->prt_station_comment().data(), this->prt_station_comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_a3_hb_price;
        break;
      }
      
      // optional double a3_hb_price = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_a3_hb_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a3_hb_price_)));
          set_has_a3_hb_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_a3_color_price;
        break;
      }
      
      // optional double a3_color_price = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_a3_color_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a3_color_price_)));
          set_has_a3_color_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_a4_hb_price;
        break;
      }
      
      // optional double a4_hb_price = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_a4_hb_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a4_hb_price_)));
          set_has_a4_hb_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_a4_color_price;
        break;
      }
      
      // optional double a4_color_price = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_a4_color_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a4_color_price_)));
          set_has_a4_color_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_printer_ip;
        break;
      }
      
      // optional string printer_ip = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_printer_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_printer_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->printer_ip().data(), this->printer_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AutoAddPrtStationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string printer_name = 1;
  if (has_printer_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->printer_name().data(), this->printer_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->printer_name(), output);
  }
  
  // optional int32 printer_resolution = 2;
  if (has_printer_resolution()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->printer_resolution(), output);
  }
  
  // optional int32 printer_speed = 3;
  if (has_printer_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->printer_speed(), output);
  }
  
  // optional int32 printer_color = 4;
  if (has_printer_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->printer_color(), output);
  }
  
  // optional string prt_station_name = 5;
  if (has_prt_station_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prt_station_name().data(), this->prt_station_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->prt_station_name(), output);
  }
  
  // optional string prt_station_comment = 6;
  if (has_prt_station_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prt_station_comment().data(), this->prt_station_comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->prt_station_comment(), output);
  }
  
  // optional double a3_hb_price = 7;
  if (has_a3_hb_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->a3_hb_price(), output);
  }
  
  // optional double a3_color_price = 8;
  if (has_a3_color_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->a3_color_price(), output);
  }
  
  // optional double a4_hb_price = 9;
  if (has_a4_hb_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->a4_hb_price(), output);
  }
  
  // optional double a4_color_price = 10;
  if (has_a4_color_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->a4_color_price(), output);
  }
  
  // optional string printer_ip = 11;
  if (has_printer_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->printer_ip().data(), this->printer_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->printer_ip(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AutoAddPrtStationInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string printer_name = 1;
  if (has_printer_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->printer_name().data(), this->printer_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->printer_name(), target);
  }
  
  // optional int32 printer_resolution = 2;
  if (has_printer_resolution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->printer_resolution(), target);
  }
  
  // optional int32 printer_speed = 3;
  if (has_printer_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->printer_speed(), target);
  }
  
  // optional int32 printer_color = 4;
  if (has_printer_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->printer_color(), target);
  }
  
  // optional string prt_station_name = 5;
  if (has_prt_station_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prt_station_name().data(), this->prt_station_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->prt_station_name(), target);
  }
  
  // optional string prt_station_comment = 6;
  if (has_prt_station_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prt_station_comment().data(), this->prt_station_comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->prt_station_comment(), target);
  }
  
  // optional double a3_hb_price = 7;
  if (has_a3_hb_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->a3_hb_price(), target);
  }
  
  // optional double a3_color_price = 8;
  if (has_a3_color_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->a3_color_price(), target);
  }
  
  // optional double a4_hb_price = 9;
  if (has_a4_hb_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->a4_hb_price(), target);
  }
  
  // optional double a4_color_price = 10;
  if (has_a4_color_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->a4_color_price(), target);
  }
  
  // optional string printer_ip = 11;
  if (has_printer_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->printer_ip().data(), this->printer_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->printer_ip(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AutoAddPrtStationInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string printer_name = 1;
    if (has_printer_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->printer_name());
    }
    
    // optional int32 printer_resolution = 2;
    if (has_printer_resolution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->printer_resolution());
    }
    
    // optional int32 printer_speed = 3;
    if (has_printer_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->printer_speed());
    }
    
    // optional int32 printer_color = 4;
    if (has_printer_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->printer_color());
    }
    
    // optional string prt_station_name = 5;
    if (has_prt_station_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prt_station_name());
    }
    
    // optional string prt_station_comment = 6;
    if (has_prt_station_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prt_station_comment());
    }
    
    // optional double a3_hb_price = 7;
    if (has_a3_hb_price()) {
      total_size += 1 + 8;
    }
    
    // optional double a3_color_price = 8;
    if (has_a3_color_price()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double a4_hb_price = 9;
    if (has_a4_hb_price()) {
      total_size += 1 + 8;
    }
    
    // optional double a4_color_price = 10;
    if (has_a4_color_price()) {
      total_size += 1 + 8;
    }
    
    // optional string printer_ip = 11;
    if (has_printer_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->printer_ip());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AutoAddPrtStationInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AutoAddPrtStationInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AutoAddPrtStationInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AutoAddPrtStationInfo::MergeFrom(const AutoAddPrtStationInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_printer_name()) {
      set_printer_name(from.printer_name());
    }
    if (from.has_printer_resolution()) {
      set_printer_resolution(from.printer_resolution());
    }
    if (from.has_printer_speed()) {
      set_printer_speed(from.printer_speed());
    }
    if (from.has_printer_color()) {
      set_printer_color(from.printer_color());
    }
    if (from.has_prt_station_name()) {
      set_prt_station_name(from.prt_station_name());
    }
    if (from.has_prt_station_comment()) {
      set_prt_station_comment(from.prt_station_comment());
    }
    if (from.has_a3_hb_price()) {
      set_a3_hb_price(from.a3_hb_price());
    }
    if (from.has_a3_color_price()) {
      set_a3_color_price(from.a3_color_price());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_a4_hb_price()) {
      set_a4_hb_price(from.a4_hb_price());
    }
    if (from.has_a4_color_price()) {
      set_a4_color_price(from.a4_color_price());
    }
    if (from.has_printer_ip()) {
      set_printer_ip(from.printer_ip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AutoAddPrtStationInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutoAddPrtStationInfo::CopyFrom(const AutoAddPrtStationInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutoAddPrtStationInfo::IsInitialized() const {
  
  return true;
}

void AutoAddPrtStationInfo::Swap(AutoAddPrtStationInfo* other) {
  if (other != this) {
    std::swap(printer_name_, other->printer_name_);
    std::swap(printer_resolution_, other->printer_resolution_);
    std::swap(printer_speed_, other->printer_speed_);
    std::swap(printer_color_, other->printer_color_);
    std::swap(prt_station_name_, other->prt_station_name_);
    std::swap(prt_station_comment_, other->prt_station_comment_);
    std::swap(a3_hb_price_, other->a3_hb_price_);
    std::swap(a3_color_price_, other->a3_color_price_);
    std::swap(a4_hb_price_, other->a4_hb_price_);
    std::swap(a4_color_price_, other->a4_color_price_);
    std::swap(printer_ip_, other->printer_ip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AutoAddPrtStationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AutoAddPrtStationInfo_descriptor_;
  metadata.reflection = AutoAddPrtStationInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrintProjectSampleInfo::kIdFieldNumber;
const int PrintProjectSampleInfo::kNameFieldNumber;
#endif  // !_MSC_VER

PrintProjectSampleInfo::PrintProjectSampleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrintProjectSampleInfo::InitAsDefaultInstance() {
}

PrintProjectSampleInfo::PrintProjectSampleInfo(const PrintProjectSampleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrintProjectSampleInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrintProjectSampleInfo::~PrintProjectSampleInfo() {
  SharedDtor();
}

void PrintProjectSampleInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PrintProjectSampleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrintProjectSampleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrintProjectSampleInfo_descriptor_;
}

const PrintProjectSampleInfo& PrintProjectSampleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrintProjectSampleInfo* PrintProjectSampleInfo::default_instance_ = NULL;

PrintProjectSampleInfo* PrintProjectSampleInfo::New() const {
  return new PrintProjectSampleInfo;
}

void PrintProjectSampleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrintProjectSampleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrintProjectSampleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrintProjectSampleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrintProjectSampleInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrintProjectSampleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrintProjectSampleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrintProjectSampleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrintProjectSampleInfo::MergeFrom(const PrintProjectSampleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrintProjectSampleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrintProjectSampleInfo::CopyFrom(const PrintProjectSampleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrintProjectSampleInfo::IsInitialized() const {
  
  return true;
}

void PrintProjectSampleInfo::Swap(PrintProjectSampleInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrintProjectSampleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrintProjectSampleInfo_descriptor_;
  metadata.reflection = PrintProjectSampleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrintStationSampleInfo::kIdFieldNumber;
const int PrintStationSampleInfo::kNameFieldNumber;
const int PrintStationSampleInfo::kAddrFieldNumber;
const int PrintStationSampleInfo::kCommentFieldNumber;
#endif  // !_MSC_VER

PrintStationSampleInfo::PrintStationSampleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrintStationSampleInfo::InitAsDefaultInstance() {
}

PrintStationSampleInfo::PrintStationSampleInfo(const PrintStationSampleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrintStationSampleInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrintStationSampleInfo::~PrintStationSampleInfo() {
  SharedDtor();
}

void PrintStationSampleInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (addr_ != &::google::protobuf::internal::kEmptyString) {
    delete addr_;
  }
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (this != default_instance_) {
  }
}

void PrintStationSampleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrintStationSampleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrintStationSampleInfo_descriptor_;
}

const PrintStationSampleInfo& PrintStationSampleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrintStationSampleInfo* PrintStationSampleInfo::default_instance_ = NULL;

PrintStationSampleInfo* PrintStationSampleInfo::New() const {
  return new PrintStationSampleInfo;
}

void PrintStationSampleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_addr()) {
      if (addr_ != &::google::protobuf::internal::kEmptyString) {
        addr_->clear();
      }
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrintStationSampleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_addr;
        break;
      }
      
      // optional string addr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->addr().data(), this->addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_comment;
        break;
      }
      
      // optional string comment = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrintStationSampleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string addr = 3;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->addr(), output);
  }
  
  // optional string comment = 4;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->comment(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrintStationSampleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional string addr = 3;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->addr(), target);
  }
  
  // optional string comment = 4;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->comment(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrintStationSampleInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string addr = 3;
    if (has_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->addr());
    }
    
    // optional string comment = 4;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrintStationSampleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrintStationSampleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrintStationSampleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrintStationSampleInfo::MergeFrom(const PrintStationSampleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_addr()) {
      set_addr(from.addr());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrintStationSampleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrintStationSampleInfo::CopyFrom(const PrintStationSampleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrintStationSampleInfo::IsInitialized() const {
  
  return true;
}

void PrintStationSampleInfo::Swap(PrintStationSampleInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(addr_, other->addr_);
    std::swap(comment_, other->comment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrintStationSampleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrintStationSampleInfo_descriptor_;
  metadata.reflection = PrintStationSampleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrintJobSecTypeInfo::kTypeFieldNumber;
const int PrintJobSecTypeInfo::kDescFieldNumber;
#endif  // !_MSC_VER

PrintJobSecTypeInfo::PrintJobSecTypeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrintJobSecTypeInfo::InitAsDefaultInstance() {
}

PrintJobSecTypeInfo::PrintJobSecTypeInfo(const PrintJobSecTypeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrintJobSecTypeInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrintJobSecTypeInfo::~PrintJobSecTypeInfo() {
  SharedDtor();
}

void PrintJobSecTypeInfo::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void PrintJobSecTypeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrintJobSecTypeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrintJobSecTypeInfo_descriptor_;
}

const PrintJobSecTypeInfo& PrintJobSecTypeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrintJobSecTypeInfo* PrintJobSecTypeInfo::default_instance_ = NULL;

PrintJobSecTypeInfo* PrintJobSecTypeInfo::New() const {
  return new PrintJobSecTypeInfo;
}

void PrintJobSecTypeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrintJobSecTypeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .isafetec.JOB_STORAGE_TYPE type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::JOB_STORAGE_TYPE_IsValid(value)) {
            set_type(static_cast< isafetec::JOB_STORAGE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_desc;
        break;
      }
      
      // optional string desc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrintJobSecTypeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .isafetec.JOB_STORAGE_TYPE type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->desc(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrintJobSecTypeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .isafetec.JOB_STORAGE_TYPE type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->desc(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrintJobSecTypeInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .isafetec.JOB_STORAGE_TYPE type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional string desc = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrintJobSecTypeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrintJobSecTypeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrintJobSecTypeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrintJobSecTypeInfo::MergeFrom(const PrintJobSecTypeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrintJobSecTypeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrintJobSecTypeInfo::CopyFrom(const PrintJobSecTypeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrintJobSecTypeInfo::IsInitialized() const {
  
  return true;
}

void PrintJobSecTypeInfo::Swap(PrintJobSecTypeInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(desc_, other->desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrintJobSecTypeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrintJobSecTypeInfo_descriptor_;
  metadata.reflection = PrintJobSecTypeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrintCtlReqInfo::kOrderPrintListFieldNumber;
const int PrintCtlReqInfo::kProjectListFieldNumber;
const int PrintCtlReqInfo::kDirectPrintListFieldNumber;
#endif  // !_MSC_VER

PrintCtlReqInfo::PrintCtlReqInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrintCtlReqInfo::InitAsDefaultInstance() {
}

PrintCtlReqInfo::PrintCtlReqInfo(const PrintCtlReqInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrintCtlReqInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrintCtlReqInfo::~PrintCtlReqInfo() {
  SharedDtor();
}

void PrintCtlReqInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrintCtlReqInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrintCtlReqInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrintCtlReqInfo_descriptor_;
}

const PrintCtlReqInfo& PrintCtlReqInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrintCtlReqInfo* PrintCtlReqInfo::default_instance_ = NULL;

PrintCtlReqInfo* PrintCtlReqInfo::New() const {
  return new PrintCtlReqInfo;
}

void PrintCtlReqInfo::Clear() {
  order_print_list_.Clear();
  project_list_.Clear();
  direct_print_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrintCtlReqInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .isafetec.PrintStationSampleInfo order_print_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_order_print_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_order_print_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_order_print_list;
        if (input->ExpectTag(18)) goto parse_project_list;
        break;
      }
      
      // repeated .isafetec.PrintProjectSampleInfo project_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_project_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_project_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_project_list;
        if (input->ExpectTag(26)) goto parse_direct_print_list;
        break;
      }
      
      // repeated .isafetec.PrintStationSampleInfo direct_print_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_direct_print_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_direct_print_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_direct_print_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrintCtlReqInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .isafetec.PrintStationSampleInfo order_print_list = 1;
  for (int i = 0; i < this->order_print_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->order_print_list(i), output);
  }
  
  // repeated .isafetec.PrintProjectSampleInfo project_list = 2;
  for (int i = 0; i < this->project_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->project_list(i), output);
  }
  
  // repeated .isafetec.PrintStationSampleInfo direct_print_list = 3;
  for (int i = 0; i < this->direct_print_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->direct_print_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrintCtlReqInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .isafetec.PrintStationSampleInfo order_print_list = 1;
  for (int i = 0; i < this->order_print_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->order_print_list(i), target);
  }
  
  // repeated .isafetec.PrintProjectSampleInfo project_list = 2;
  for (int i = 0; i < this->project_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->project_list(i), target);
  }
  
  // repeated .isafetec.PrintStationSampleInfo direct_print_list = 3;
  for (int i = 0; i < this->direct_print_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->direct_print_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrintCtlReqInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .isafetec.PrintStationSampleInfo order_print_list = 1;
  total_size += 1 * this->order_print_list_size();
  for (int i = 0; i < this->order_print_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->order_print_list(i));
  }
  
  // repeated .isafetec.PrintProjectSampleInfo project_list = 2;
  total_size += 1 * this->project_list_size();
  for (int i = 0; i < this->project_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->project_list(i));
  }
  
  // repeated .isafetec.PrintStationSampleInfo direct_print_list = 3;
  total_size += 1 * this->direct_print_list_size();
  for (int i = 0; i < this->direct_print_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->direct_print_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrintCtlReqInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrintCtlReqInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrintCtlReqInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrintCtlReqInfo::MergeFrom(const PrintCtlReqInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  order_print_list_.MergeFrom(from.order_print_list_);
  project_list_.MergeFrom(from.project_list_);
  direct_print_list_.MergeFrom(from.direct_print_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrintCtlReqInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrintCtlReqInfo::CopyFrom(const PrintCtlReqInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrintCtlReqInfo::IsInitialized() const {
  
  return true;
}

void PrintCtlReqInfo::Swap(PrintCtlReqInfo* other) {
  if (other != this) {
    order_print_list_.Swap(&other->order_print_list_);
    project_list_.Swap(&other->project_list_);
    direct_print_list_.Swap(&other->direct_print_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrintCtlReqInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrintCtlReqInfo_descriptor_;
  metadata.reflection = PrintCtlReqInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrintCltLogon::kIdFieldNumber;
const int PrintCltLogon::kNameFieldNumber;
const int PrintCltLogon::kPwdFieldNumber;
const int PrintCltLogon::kProjectIdFieldNumber;
const int PrintCltLogon::kPrintStationIdFieldNumber;
const int PrintCltLogon::kOrderStationIdFieldNumber;
const int PrintCltLogon::kJobIdFieldNumber;
const int PrintCltLogon::kPageTypeFieldNumber;
const int PrintCltLogon::kPageCountFieldNumber;
const int PrintCltLogon::kColorFieldNumber;
const int PrintCltLogon::kJobSizeFieldNumber;
#endif  // !_MSC_VER

PrintCltLogon::PrintCltLogon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrintCltLogon::InitAsDefaultInstance() {
}

PrintCltLogon::PrintCltLogon(const PrintCltLogon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrintCltLogon::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  project_id_ = 0;
  print_station_id_ = 0;
  order_station_id_ = 0;
  job_id_ = 0;
  page_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  page_count_ = 0;
  color_ = 0;
  job_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrintCltLogon::~PrintCltLogon() {
  SharedDtor();
}

void PrintCltLogon::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete pwd_;
  }
  if (page_type_ != &::google::protobuf::internal::kEmptyString) {
    delete page_type_;
  }
  if (this != default_instance_) {
  }
}

void PrintCltLogon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrintCltLogon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrintCltLogon_descriptor_;
}

const PrintCltLogon& PrintCltLogon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrintCltLogon* PrintCltLogon::default_instance_ = NULL;

PrintCltLogon* PrintCltLogon::New() const {
  return new PrintCltLogon;
}

void PrintCltLogon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_pwd()) {
      if (pwd_ != &::google::protobuf::internal::kEmptyString) {
        pwd_->clear();
      }
    }
    project_id_ = 0;
    print_station_id_ = 0;
    order_station_id_ = 0;
    job_id_ = 0;
    if (has_page_type()) {
      if (page_type_ != &::google::protobuf::internal::kEmptyString) {
        page_type_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    page_count_ = 0;
    color_ = 0;
    job_size_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrintCltLogon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pwd;
        break;
      }
      
      // optional string pwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pwd().data(), this->pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_project_id;
        break;
      }
      
      // optional int32 project_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_project_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &project_id_)));
          set_has_project_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_print_station_id;
        break;
      }
      
      // optional int32 print_station_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_print_station_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &print_station_id_)));
          set_has_print_station_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_order_station_id;
        break;
      }
      
      // optional int32 order_station_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order_station_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_station_id_)));
          set_has_order_station_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_job_id;
        break;
      }
      
      // optional int32 job_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_id_)));
          set_has_job_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_page_type;
        break;
      }
      
      // optional string page_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_page_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->page_type().data(), this->page_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_page_count;
        break;
      }
      
      // optional int32 page_count = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_count_)));
          set_has_page_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_color;
        break;
      }
      
      // optional int32 color = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_job_size;
        break;
      }
      
      // optional int32 job_size = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_size_)));
          set_has_job_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrintCltLogon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string pwd = 3;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pwd(), output);
  }
  
  // optional int32 project_id = 4;
  if (has_project_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->project_id(), output);
  }
  
  // optional int32 print_station_id = 5;
  if (has_print_station_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->print_station_id(), output);
  }
  
  // optional int32 order_station_id = 6;
  if (has_order_station_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->order_station_id(), output);
  }
  
  // optional int32 job_id = 7;
  if (has_job_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->job_id(), output);
  }
  
  // optional string page_type = 8;
  if (has_page_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page_type().data(), this->page_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->page_type(), output);
  }
  
  // optional int32 page_count = 9;
  if (has_page_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->page_count(), output);
  }
  
  // optional int32 color = 10;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->color(), output);
  }
  
  // optional int32 job_size = 11;
  if (has_job_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->job_size(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrintCltLogon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional string pwd = 3;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pwd(), target);
  }
  
  // optional int32 project_id = 4;
  if (has_project_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->project_id(), target);
  }
  
  // optional int32 print_station_id = 5;
  if (has_print_station_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->print_station_id(), target);
  }
  
  // optional int32 order_station_id = 6;
  if (has_order_station_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->order_station_id(), target);
  }
  
  // optional int32 job_id = 7;
  if (has_job_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->job_id(), target);
  }
  
  // optional string page_type = 8;
  if (has_page_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page_type().data(), this->page_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->page_type(), target);
  }
  
  // optional int32 page_count = 9;
  if (has_page_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->page_count(), target);
  }
  
  // optional int32 color = 10;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->color(), target);
  }
  
  // optional int32 job_size = 11;
  if (has_job_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->job_size(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrintCltLogon::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string pwd = 3;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }
    
    // optional int32 project_id = 4;
    if (has_project_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->project_id());
    }
    
    // optional int32 print_station_id = 5;
    if (has_print_station_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->print_station_id());
    }
    
    // optional int32 order_station_id = 6;
    if (has_order_station_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order_station_id());
    }
    
    // optional int32 job_id = 7;
    if (has_job_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job_id());
    }
    
    // optional string page_type = 8;
    if (has_page_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->page_type());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 page_count = 9;
    if (has_page_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page_count());
    }
    
    // optional int32 color = 10;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }
    
    // optional int32 job_size = 11;
    if (has_job_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job_size());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrintCltLogon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrintCltLogon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrintCltLogon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrintCltLogon::MergeFrom(const PrintCltLogon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_pwd()) {
      set_pwd(from.pwd());
    }
    if (from.has_project_id()) {
      set_project_id(from.project_id());
    }
    if (from.has_print_station_id()) {
      set_print_station_id(from.print_station_id());
    }
    if (from.has_order_station_id()) {
      set_order_station_id(from.order_station_id());
    }
    if (from.has_job_id()) {
      set_job_id(from.job_id());
    }
    if (from.has_page_type()) {
      set_page_type(from.page_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_page_count()) {
      set_page_count(from.page_count());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_job_size()) {
      set_job_size(from.job_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrintCltLogon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrintCltLogon::CopyFrom(const PrintCltLogon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrintCltLogon::IsInitialized() const {
  
  return true;
}

void PrintCltLogon::Swap(PrintCltLogon* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(pwd_, other->pwd_);
    std::swap(project_id_, other->project_id_);
    std::swap(print_station_id_, other->print_station_id_);
    std::swap(order_station_id_, other->order_station_id_);
    std::swap(job_id_, other->job_id_);
    std::swap(page_type_, other->page_type_);
    std::swap(page_count_, other->page_count_);
    std::swap(color_, other->color_);
    std::swap(job_size_, other->job_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrintCltLogon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrintCltLogon_descriptor_;
  metadata.reflection = PrintCltLogon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrintCltLoginVerifyCode::kIdFieldNumber;
const int PrintCltLoginVerifyCode::kNameFieldNumber;
const int PrintCltLoginVerifyCode::kLoginTypeFieldNumber;
const int PrintCltLoginVerifyCode::kVerifyCodeFieldNumber;
const int PrintCltLoginVerifyCode::kJobIdFieldNumber;
#endif  // !_MSC_VER

PrintCltLoginVerifyCode::PrintCltLoginVerifyCode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrintCltLoginVerifyCode::InitAsDefaultInstance() {
}

PrintCltLoginVerifyCode::PrintCltLoginVerifyCode(const PrintCltLoginVerifyCode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrintCltLoginVerifyCode::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  logintype_ = 0;
  verifycode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  job_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrintCltLoginVerifyCode::~PrintCltLoginVerifyCode() {
  SharedDtor();
}

void PrintCltLoginVerifyCode::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (verifycode_ != &::google::protobuf::internal::kEmptyString) {
    delete verifycode_;
  }
  if (this != default_instance_) {
  }
}

void PrintCltLoginVerifyCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrintCltLoginVerifyCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrintCltLoginVerifyCode_descriptor_;
}

const PrintCltLoginVerifyCode& PrintCltLoginVerifyCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrintCltLoginVerifyCode* PrintCltLoginVerifyCode::default_instance_ = NULL;

PrintCltLoginVerifyCode* PrintCltLoginVerifyCode::New() const {
  return new PrintCltLoginVerifyCode;
}

void PrintCltLoginVerifyCode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    logintype_ = 0;
    if (has_verifycode()) {
      if (verifycode_ != &::google::protobuf::internal::kEmptyString) {
        verifycode_->clear();
      }
    }
    job_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrintCltLoginVerifyCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_loginType;
        break;
      }
      
      // optional int32 loginType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logintype_)));
          set_has_logintype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_verifyCode;
        break;
      }
      
      // optional string verifyCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_verifyCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verifycode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->verifycode().data(), this->verifycode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_job_id;
        break;
      }
      
      // optional int32 job_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_id_)));
          set_has_job_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrintCltLoginVerifyCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional int32 loginType = 3;
  if (has_logintype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->logintype(), output);
  }
  
  // optional string verifyCode = 4;
  if (has_verifycode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->verifycode().data(), this->verifycode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->verifycode(), output);
  }
  
  // optional int32 job_id = 5;
  if (has_job_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->job_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrintCltLoginVerifyCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional int32 loginType = 3;
  if (has_logintype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->logintype(), target);
  }
  
  // optional string verifyCode = 4;
  if (has_verifycode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->verifycode().data(), this->verifycode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->verifycode(), target);
  }
  
  // optional int32 job_id = 5;
  if (has_job_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->job_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrintCltLoginVerifyCode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 loginType = 3;
    if (has_logintype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logintype());
    }
    
    // optional string verifyCode = 4;
    if (has_verifycode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verifycode());
    }
    
    // optional int32 job_id = 5;
    if (has_job_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrintCltLoginVerifyCode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrintCltLoginVerifyCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrintCltLoginVerifyCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrintCltLoginVerifyCode::MergeFrom(const PrintCltLoginVerifyCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_logintype()) {
      set_logintype(from.logintype());
    }
    if (from.has_verifycode()) {
      set_verifycode(from.verifycode());
    }
    if (from.has_job_id()) {
      set_job_id(from.job_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrintCltLoginVerifyCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrintCltLoginVerifyCode::CopyFrom(const PrintCltLoginVerifyCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrintCltLoginVerifyCode::IsInitialized() const {
  
  return true;
}

void PrintCltLoginVerifyCode::Swap(PrintCltLoginVerifyCode* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(logintype_, other->logintype_);
    std::swap(verifycode_, other->verifycode_);
    std::swap(job_id_, other->job_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrintCltLoginVerifyCode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrintCltLoginVerifyCode_descriptor_;
  metadata.reflection = PrintCltLoginVerifyCode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrintCltCheckUserResult::kUserIdFieldNumber;
const int PrintCltCheckUserResult::kAccountIdFieldNumber;
const int PrintCltCheckUserResult::kLeftMoneyFieldNumber;
const int PrintCltCheckUserResult::kSpecialLeftMoneyFieldNumber;
const int PrintCltCheckUserResult::kA3QuotaFieldNumber;
const int PrintCltCheckUserResult::kA4QuotaFieldNumber;
const int PrintCltCheckUserResult::kPeriodTypeFieldNumber;
const int PrintCltCheckUserResult::kA3PrintedCountFieldNumber;
const int PrintCltCheckUserResult::kA4PrintedCountFieldNumber;
const int PrintCltCheckUserResult::kProjectIdFieldNumber;
const int PrintCltCheckUserResult::kPrintStationIdFieldNumber;
const int PrintCltCheckUserResult::kOrderStationIdFieldNumber;
const int PrintCltCheckUserResult::kJobIdFieldNumber;
const int PrintCltCheckUserResult::kFilterFieldNumber;
#endif  // !_MSC_VER

PrintCltCheckUserResult::PrintCltCheckUserResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrintCltCheckUserResult::InitAsDefaultInstance() {
  filter_ = const_cast< ::isafetec::JobFilterPolciy*>(&::isafetec::JobFilterPolciy::default_instance());
}

PrintCltCheckUserResult::PrintCltCheckUserResult(const PrintCltCheckUserResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrintCltCheckUserResult::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0;
  account_id_ = 0;
  left_money_ = 0;
  special_left_money_ = 0;
  a3_quota_ = 0;
  a4_quota_ = 0;
  period_type_ = 0;
  a3_printed_count_ = 0;
  a4_printed_count_ = 0;
  project_id_ = 0;
  print_station_id_ = 0;
  order_station_id_ = 0;
  job_id_ = 0;
  filter_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrintCltCheckUserResult::~PrintCltCheckUserResult() {
  SharedDtor();
}

void PrintCltCheckUserResult::SharedDtor() {
  if (this != default_instance_) {
    delete filter_;
  }
}

void PrintCltCheckUserResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrintCltCheckUserResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrintCltCheckUserResult_descriptor_;
}

const PrintCltCheckUserResult& PrintCltCheckUserResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrintCltCheckUserResult* PrintCltCheckUserResult::default_instance_ = NULL;

PrintCltCheckUserResult* PrintCltCheckUserResult::New() const {
  return new PrintCltCheckUserResult;
}

void PrintCltCheckUserResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0;
    account_id_ = 0;
    left_money_ = 0;
    special_left_money_ = 0;
    a3_quota_ = 0;
    a4_quota_ = 0;
    period_type_ = 0;
    a3_printed_count_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    a4_printed_count_ = 0;
    project_id_ = 0;
    print_station_id_ = 0;
    order_station_id_ = 0;
    job_id_ = 0;
    if (has_filter()) {
      if (filter_ != NULL) filter_->::isafetec::JobFilterPolciy::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrintCltCheckUserResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_account_id;
        break;
      }
      
      // optional int32 account_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_left_money;
        break;
      }
      
      // optional double left_money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_left_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &left_money_)));
          set_has_left_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_special_left_money;
        break;
      }
      
      // optional double special_left_money = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_special_left_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &special_left_money_)));
          set_has_special_left_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_a3_quota;
        break;
      }
      
      // optional int32 a3_quota = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_a3_quota:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a3_quota_)));
          set_has_a3_quota();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_a4_quota;
        break;
      }
      
      // optional int32 a4_quota = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_a4_quota:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a4_quota_)));
          set_has_a4_quota();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_period_type;
        break;
      }
      
      // optional int32 period_type = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_period_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &period_type_)));
          set_has_period_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_a3_printed_count;
        break;
      }
      
      // optional int32 a3_printed_count = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_a3_printed_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a3_printed_count_)));
          set_has_a3_printed_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_a4_printed_count;
        break;
      }
      
      // optional int32 a4_printed_count = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_a4_printed_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a4_printed_count_)));
          set_has_a4_printed_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_project_id;
        break;
      }
      
      // optional int32 project_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_project_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &project_id_)));
          set_has_project_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_print_station_id;
        break;
      }
      
      // optional int32 print_station_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_print_station_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &print_station_id_)));
          set_has_print_station_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_order_station_id;
        break;
      }
      
      // optional int32 order_station_id = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order_station_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_station_id_)));
          set_has_order_station_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_job_id;
        break;
      }
      
      // optional int32 job_id = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_id_)));
          set_has_job_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_filter;
        break;
      }
      
      // optional .isafetec.JobFilterPolciy filter = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrintCltCheckUserResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }
  
  // optional int32 account_id = 3;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->account_id(), output);
  }
  
  // optional double left_money = 4;
  if (has_left_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->left_money(), output);
  }
  
  // optional double special_left_money = 5;
  if (has_special_left_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->special_left_money(), output);
  }
  
  // optional int32 a3_quota = 6;
  if (has_a3_quota()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->a3_quota(), output);
  }
  
  // optional int32 a4_quota = 7;
  if (has_a4_quota()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->a4_quota(), output);
  }
  
  // optional int32 period_type = 8;
  if (has_period_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->period_type(), output);
  }
  
  // optional int32 a3_printed_count = 9;
  if (has_a3_printed_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->a3_printed_count(), output);
  }
  
  // optional int32 a4_printed_count = 10;
  if (has_a4_printed_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->a4_printed_count(), output);
  }
  
  // optional int32 project_id = 11;
  if (has_project_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->project_id(), output);
  }
  
  // optional int32 print_station_id = 12;
  if (has_print_station_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->print_station_id(), output);
  }
  
  // optional int32 order_station_id = 13;
  if (has_order_station_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->order_station_id(), output);
  }
  
  // optional int32 job_id = 14;
  if (has_job_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->job_id(), output);
  }
  
  // optional .isafetec.JobFilterPolciy filter = 15;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->filter(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrintCltCheckUserResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->user_id(), target);
  }
  
  // optional int32 account_id = 3;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->account_id(), target);
  }
  
  // optional double left_money = 4;
  if (has_left_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->left_money(), target);
  }
  
  // optional double special_left_money = 5;
  if (has_special_left_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->special_left_money(), target);
  }
  
  // optional int32 a3_quota = 6;
  if (has_a3_quota()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->a3_quota(), target);
  }
  
  // optional int32 a4_quota = 7;
  if (has_a4_quota()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->a4_quota(), target);
  }
  
  // optional int32 period_type = 8;
  if (has_period_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->period_type(), target);
  }
  
  // optional int32 a3_printed_count = 9;
  if (has_a3_printed_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->a3_printed_count(), target);
  }
  
  // optional int32 a4_printed_count = 10;
  if (has_a4_printed_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->a4_printed_count(), target);
  }
  
  // optional int32 project_id = 11;
  if (has_project_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->project_id(), target);
  }
  
  // optional int32 print_station_id = 12;
  if (has_print_station_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->print_station_id(), target);
  }
  
  // optional int32 order_station_id = 13;
  if (has_order_station_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->order_station_id(), target);
  }
  
  // optional int32 job_id = 14;
  if (has_job_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->job_id(), target);
  }
  
  // optional .isafetec.JobFilterPolciy filter = 15;
  if (has_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->filter(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrintCltCheckUserResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }
    
    // optional int32 account_id = 3;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->account_id());
    }
    
    // optional double left_money = 4;
    if (has_left_money()) {
      total_size += 1 + 8;
    }
    
    // optional double special_left_money = 5;
    if (has_special_left_money()) {
      total_size += 1 + 8;
    }
    
    // optional int32 a3_quota = 6;
    if (has_a3_quota()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->a3_quota());
    }
    
    // optional int32 a4_quota = 7;
    if (has_a4_quota()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->a4_quota());
    }
    
    // optional int32 period_type = 8;
    if (has_period_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->period_type());
    }
    
    // optional int32 a3_printed_count = 9;
    if (has_a3_printed_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->a3_printed_count());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 a4_printed_count = 10;
    if (has_a4_printed_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->a4_printed_count());
    }
    
    // optional int32 project_id = 11;
    if (has_project_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->project_id());
    }
    
    // optional int32 print_station_id = 12;
    if (has_print_station_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->print_station_id());
    }
    
    // optional int32 order_station_id = 13;
    if (has_order_station_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order_station_id());
    }
    
    // optional int32 job_id = 14;
    if (has_job_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job_id());
    }
    
    // optional .isafetec.JobFilterPolciy filter = 15;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filter());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrintCltCheckUserResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrintCltCheckUserResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrintCltCheckUserResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrintCltCheckUserResult::MergeFrom(const PrintCltCheckUserResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_left_money()) {
      set_left_money(from.left_money());
    }
    if (from.has_special_left_money()) {
      set_special_left_money(from.special_left_money());
    }
    if (from.has_a3_quota()) {
      set_a3_quota(from.a3_quota());
    }
    if (from.has_a4_quota()) {
      set_a4_quota(from.a4_quota());
    }
    if (from.has_period_type()) {
      set_period_type(from.period_type());
    }
    if (from.has_a3_printed_count()) {
      set_a3_printed_count(from.a3_printed_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_a4_printed_count()) {
      set_a4_printed_count(from.a4_printed_count());
    }
    if (from.has_project_id()) {
      set_project_id(from.project_id());
    }
    if (from.has_print_station_id()) {
      set_print_station_id(from.print_station_id());
    }
    if (from.has_order_station_id()) {
      set_order_station_id(from.order_station_id());
    }
    if (from.has_job_id()) {
      set_job_id(from.job_id());
    }
    if (from.has_filter()) {
      mutable_filter()->::isafetec::JobFilterPolciy::MergeFrom(from.filter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrintCltCheckUserResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrintCltCheckUserResult::CopyFrom(const PrintCltCheckUserResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrintCltCheckUserResult::IsInitialized() const {
  
  return true;
}

void PrintCltCheckUserResult::Swap(PrintCltCheckUserResult* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(account_id_, other->account_id_);
    std::swap(left_money_, other->left_money_);
    std::swap(special_left_money_, other->special_left_money_);
    std::swap(a3_quota_, other->a3_quota_);
    std::swap(a4_quota_, other->a4_quota_);
    std::swap(period_type_, other->period_type_);
    std::swap(a3_printed_count_, other->a3_printed_count_);
    std::swap(a4_printed_count_, other->a4_printed_count_);
    std::swap(project_id_, other->project_id_);
    std::swap(print_station_id_, other->print_station_id_);
    std::swap(order_station_id_, other->order_station_id_);
    std::swap(job_id_, other->job_id_);
    std::swap(filter_, other->filter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrintCltCheckUserResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrintCltCheckUserResult_descriptor_;
  metadata.reflection = PrintCltCheckUserResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrintCtrlPolicy::kSubmitModeFieldNumber;
const int PrintCtrlPolicy::kPrintModeFieldNumber;
const int PrintCtrlPolicy::kPrtIdFieldNumber;
const int PrintCtrlPolicy::kUrlFieldNumber;
const int PrintCtrlPolicy::kEnableDocLogFieldNumber;
const int PrintCtrlPolicy::kDocTypeFieldNumber;
#endif  // !_MSC_VER

PrintCtrlPolicy::PrintCtrlPolicy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrintCtrlPolicy::InitAsDefaultInstance() {
}

PrintCtrlPolicy::PrintCtrlPolicy(const PrintCtrlPolicy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrintCtrlPolicy::SharedCtor() {
  _cached_size_ = 0;
  submit_mode_ = 0;
  print_mode_ = 0;
  prt_id_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  enable_doc_log_ = false;
  doc_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrintCtrlPolicy::~PrintCtrlPolicy() {
  SharedDtor();
}

void PrintCtrlPolicy::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (doc_type_ != &::google::protobuf::internal::kEmptyString) {
    delete doc_type_;
  }
  if (this != default_instance_) {
  }
}

void PrintCtrlPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrintCtrlPolicy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrintCtrlPolicy_descriptor_;
}

const PrintCtrlPolicy& PrintCtrlPolicy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrintCtrlPolicy* PrintCtrlPolicy::default_instance_ = NULL;

PrintCtrlPolicy* PrintCtrlPolicy::New() const {
  return new PrintCtrlPolicy;
}

void PrintCtrlPolicy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    submit_mode_ = 0;
    print_mode_ = 0;
    prt_id_ = 0;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
    enable_doc_log_ = false;
    if (has_doc_type()) {
      if (doc_type_ != &::google::protobuf::internal::kEmptyString) {
        doc_type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrintCtrlPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .isafetec.JOB_SUBMIT_MODE submit_mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::JOB_SUBMIT_MODE_IsValid(value)) {
            set_submit_mode(static_cast< isafetec::JOB_SUBMIT_MODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_print_mode;
        break;
      }
      
      // optional .isafetec.JOB_PRINT_MODE print_mode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_print_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::JOB_PRINT_MODE_IsValid(value)) {
            set_print_mode(static_cast< isafetec::JOB_PRINT_MODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_prt_id;
        break;
      }
      
      // optional int32 prt_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prt_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prt_id_)));
          set_has_prt_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_url;
        break;
      }
      
      // optional string url = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_enable_doc_log;
        break;
      }
      
      // optional bool enable_doc_log = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable_doc_log:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_doc_log_)));
          set_has_enable_doc_log();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_doc_type;
        break;
      }
      
      // optional string doc_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_doc_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_doc_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->doc_type().data(), this->doc_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrintCtrlPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .isafetec.JOB_SUBMIT_MODE submit_mode = 1;
  if (has_submit_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->submit_mode(), output);
  }
  
  // optional .isafetec.JOB_PRINT_MODE print_mode = 2;
  if (has_print_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->print_mode(), output);
  }
  
  // optional int32 prt_id = 3;
  if (has_prt_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->prt_id(), output);
  }
  
  // optional string url = 4;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->url(), output);
  }
  
  // optional bool enable_doc_log = 5;
  if (has_enable_doc_log()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->enable_doc_log(), output);
  }
  
  // optional string doc_type = 6;
  if (has_doc_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->doc_type().data(), this->doc_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->doc_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrintCtrlPolicy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .isafetec.JOB_SUBMIT_MODE submit_mode = 1;
  if (has_submit_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->submit_mode(), target);
  }
  
  // optional .isafetec.JOB_PRINT_MODE print_mode = 2;
  if (has_print_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->print_mode(), target);
  }
  
  // optional int32 prt_id = 3;
  if (has_prt_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->prt_id(), target);
  }
  
  // optional string url = 4;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->url(), target);
  }
  
  // optional bool enable_doc_log = 5;
  if (has_enable_doc_log()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->enable_doc_log(), target);
  }
  
  // optional string doc_type = 6;
  if (has_doc_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->doc_type().data(), this->doc_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->doc_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrintCtrlPolicy::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .isafetec.JOB_SUBMIT_MODE submit_mode = 1;
    if (has_submit_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->submit_mode());
    }
    
    // optional .isafetec.JOB_PRINT_MODE print_mode = 2;
    if (has_print_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->print_mode());
    }
    
    // optional int32 prt_id = 3;
    if (has_prt_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prt_id());
    }
    
    // optional string url = 4;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }
    
    // optional bool enable_doc_log = 5;
    if (has_enable_doc_log()) {
      total_size += 1 + 1;
    }
    
    // optional string doc_type = 6;
    if (has_doc_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->doc_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrintCtrlPolicy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrintCtrlPolicy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrintCtrlPolicy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrintCtrlPolicy::MergeFrom(const PrintCtrlPolicy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_submit_mode()) {
      set_submit_mode(from.submit_mode());
    }
    if (from.has_print_mode()) {
      set_print_mode(from.print_mode());
    }
    if (from.has_prt_id()) {
      set_prt_id(from.prt_id());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_enable_doc_log()) {
      set_enable_doc_log(from.enable_doc_log());
    }
    if (from.has_doc_type()) {
      set_doc_type(from.doc_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrintCtrlPolicy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrintCtrlPolicy::CopyFrom(const PrintCtrlPolicy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrintCtrlPolicy::IsInitialized() const {
  
  return true;
}

void PrintCtrlPolicy::Swap(PrintCtrlPolicy* other) {
  if (other != this) {
    std::swap(submit_mode_, other->submit_mode_);
    std::swap(print_mode_, other->print_mode_);
    std::swap(prt_id_, other->prt_id_);
    std::swap(url_, other->url_);
    std::swap(enable_doc_log_, other->enable_doc_log_);
    std::swap(doc_type_, other->doc_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrintCtrlPolicy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrintCtrlPolicy_descriptor_;
  metadata.reflection = PrintCtrlPolicy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtOrderCmpltInfo::kPrtIdFieldNumber;
const int PrtOrderCmpltInfo::kJobIdFieldNumber;
#endif  // !_MSC_VER

PrtOrderCmpltInfo::PrtOrderCmpltInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrtOrderCmpltInfo::InitAsDefaultInstance() {
}

PrtOrderCmpltInfo::PrtOrderCmpltInfo(const PrtOrderCmpltInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrtOrderCmpltInfo::SharedCtor() {
  _cached_size_ = 0;
  prt_id_ = 0;
  job_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtOrderCmpltInfo::~PrtOrderCmpltInfo() {
  SharedDtor();
}

void PrtOrderCmpltInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrtOrderCmpltInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtOrderCmpltInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtOrderCmpltInfo_descriptor_;
}

const PrtOrderCmpltInfo& PrtOrderCmpltInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrtOrderCmpltInfo* PrtOrderCmpltInfo::default_instance_ = NULL;

PrtOrderCmpltInfo* PrtOrderCmpltInfo::New() const {
  return new PrtOrderCmpltInfo;
}

void PrtOrderCmpltInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prt_id_ = 0;
    job_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtOrderCmpltInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 prt_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prt_id_)));
          set_has_prt_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_job_id;
        break;
      }
      
      // optional int32 job_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_id_)));
          set_has_job_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrtOrderCmpltInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 prt_id = 1;
  if (has_prt_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->prt_id(), output);
  }
  
  // optional int32 job_id = 2;
  if (has_job_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->job_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrtOrderCmpltInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 prt_id = 1;
  if (has_prt_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->prt_id(), target);
  }
  
  // optional int32 job_id = 2;
  if (has_job_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->job_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrtOrderCmpltInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 prt_id = 1;
    if (has_prt_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prt_id());
    }
    
    // optional int32 job_id = 2;
    if (has_job_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtOrderCmpltInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtOrderCmpltInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtOrderCmpltInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtOrderCmpltInfo::MergeFrom(const PrtOrderCmpltInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prt_id()) {
      set_prt_id(from.prt_id());
    }
    if (from.has_job_id()) {
      set_job_id(from.job_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtOrderCmpltInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtOrderCmpltInfo::CopyFrom(const PrtOrderCmpltInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtOrderCmpltInfo::IsInitialized() const {
  
  return true;
}

void PrtOrderCmpltInfo::Swap(PrtOrderCmpltInfo* other) {
  if (other != this) {
    std::swap(prt_id_, other->prt_id_);
    std::swap(job_id_, other->job_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtOrderCmpltInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtOrderCmpltInfo_descriptor_;
  metadata.reflection = PrtOrderCmpltInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RechargeFromCard::kPrtIdFieldNumber;
const int RechargeFromCard::kUserIdFieldNumber;
const int RechargeFromCard::kCardNoFieldNumber;
const int RechargeFromCard::kLeftMoneyFieldNumber;
const int RechargeFromCard::kShouldSpendFieldNumber;
const int RechargeFromCard::kRechargeMoneyFieldNumber;
const int RechargeFromCard::kRechargeForFieldNumber;
#endif  // !_MSC_VER

RechargeFromCard::RechargeFromCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RechargeFromCard::InitAsDefaultInstance() {
}

RechargeFromCard::RechargeFromCard(const RechargeFromCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RechargeFromCard::SharedCtor() {
  _cached_size_ = 0;
  prt_id_ = 0;
  user_id_ = 0;
  card_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  left_money_ = 0;
  should_spend_ = 0;
  recharge_money_ = 0;
  recharge_for_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RechargeFromCard::~RechargeFromCard() {
  SharedDtor();
}

void RechargeFromCard::SharedDtor() {
  if (card_no_ != &::google::protobuf::internal::kEmptyString) {
    delete card_no_;
  }
  if (this != default_instance_) {
  }
}

void RechargeFromCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RechargeFromCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RechargeFromCard_descriptor_;
}

const RechargeFromCard& RechargeFromCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

RechargeFromCard* RechargeFromCard::default_instance_ = NULL;

RechargeFromCard* RechargeFromCard::New() const {
  return new RechargeFromCard;
}

void RechargeFromCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prt_id_ = 0;
    user_id_ = 0;
    if (has_card_no()) {
      if (card_no_ != &::google::protobuf::internal::kEmptyString) {
        card_no_->clear();
      }
    }
    left_money_ = 0;
    should_spend_ = 0;
    recharge_money_ = 0;
    recharge_for_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RechargeFromCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 prt_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prt_id_)));
          set_has_prt_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }
      
      // optional int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_card_no;
        break;
      }
      
      // optional string card_no = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_no()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->card_no().data(), this->card_no().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_left_money;
        break;
      }
      
      // optional double left_money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_left_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &left_money_)));
          set_has_left_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_should_spend;
        break;
      }
      
      // optional double should_spend = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_should_spend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &should_spend_)));
          set_has_should_spend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_recharge_money;
        break;
      }
      
      // optional double recharge_money = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_recharge_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &recharge_money_)));
          set_has_recharge_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_recharge_for;
        break;
      }
      
      // optional int32 recharge_for = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recharge_for:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recharge_for_)));
          set_has_recharge_for();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RechargeFromCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 prt_id = 1;
  if (has_prt_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->prt_id(), output);
  }
  
  // optional int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }
  
  // optional string card_no = 3;
  if (has_card_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->card_no().data(), this->card_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->card_no(), output);
  }
  
  // optional double left_money = 4;
  if (has_left_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->left_money(), output);
  }
  
  // optional double should_spend = 5;
  if (has_should_spend()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->should_spend(), output);
  }
  
  // optional double recharge_money = 6;
  if (has_recharge_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->recharge_money(), output);
  }
  
  // optional int32 recharge_for = 7;
  if (has_recharge_for()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->recharge_for(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RechargeFromCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 prt_id = 1;
  if (has_prt_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->prt_id(), target);
  }
  
  // optional int32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }
  
  // optional string card_no = 3;
  if (has_card_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->card_no().data(), this->card_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->card_no(), target);
  }
  
  // optional double left_money = 4;
  if (has_left_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->left_money(), target);
  }
  
  // optional double should_spend = 5;
  if (has_should_spend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->should_spend(), target);
  }
  
  // optional double recharge_money = 6;
  if (has_recharge_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->recharge_money(), target);
  }
  
  // optional int32 recharge_for = 7;
  if (has_recharge_for()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->recharge_for(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RechargeFromCard::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 prt_id = 1;
    if (has_prt_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prt_id());
    }
    
    // optional int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }
    
    // optional string card_no = 3;
    if (has_card_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->card_no());
    }
    
    // optional double left_money = 4;
    if (has_left_money()) {
      total_size += 1 + 8;
    }
    
    // optional double should_spend = 5;
    if (has_should_spend()) {
      total_size += 1 + 8;
    }
    
    // optional double recharge_money = 6;
    if (has_recharge_money()) {
      total_size += 1 + 8;
    }
    
    // optional int32 recharge_for = 7;
    if (has_recharge_for()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recharge_for());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RechargeFromCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RechargeFromCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RechargeFromCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RechargeFromCard::MergeFrom(const RechargeFromCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prt_id()) {
      set_prt_id(from.prt_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_card_no()) {
      set_card_no(from.card_no());
    }
    if (from.has_left_money()) {
      set_left_money(from.left_money());
    }
    if (from.has_should_spend()) {
      set_should_spend(from.should_spend());
    }
    if (from.has_recharge_money()) {
      set_recharge_money(from.recharge_money());
    }
    if (from.has_recharge_for()) {
      set_recharge_for(from.recharge_for());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RechargeFromCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RechargeFromCard::CopyFrom(const RechargeFromCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RechargeFromCard::IsInitialized() const {
  
  return true;
}

void RechargeFromCard::Swap(RechargeFromCard* other) {
  if (other != this) {
    std::swap(prt_id_, other->prt_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(card_no_, other->card_no_);
    std::swap(left_money_, other->left_money_);
    std::swap(should_spend_, other->should_spend_);
    std::swap(recharge_money_, other->recharge_money_);
    std::swap(recharge_for_, other->recharge_for_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RechargeFromCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RechargeFromCard_descriptor_;
  metadata.reflection = RechargeFromCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RechargeFromCardErr::kPrtIdFieldNumber;
const int RechargeFromCardErr::kUserIdFieldNumber;
const int RechargeFromCardErr::kCardNoFieldNumber;
const int RechargeFromCardErr::kErrDescFieldNumber;
const int RechargeFromCardErr::kShouldSpendFieldNumber;
const int RechargeFromCardErr::kRechargeMoneyFieldNumber;
const int RechargeFromCardErr::kRechargeForFieldNumber;
#endif  // !_MSC_VER

RechargeFromCardErr::RechargeFromCardErr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RechargeFromCardErr::InitAsDefaultInstance() {
}

RechargeFromCardErr::RechargeFromCardErr(const RechargeFromCardErr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RechargeFromCardErr::SharedCtor() {
  _cached_size_ = 0;
  prt_id_ = 0;
  user_id_ = 0;
  card_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  err_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  should_spend_ = 0;
  recharge_money_ = 0;
  recharge_for_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RechargeFromCardErr::~RechargeFromCardErr() {
  SharedDtor();
}

void RechargeFromCardErr::SharedDtor() {
  if (card_no_ != &::google::protobuf::internal::kEmptyString) {
    delete card_no_;
  }
  if (err_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete err_desc_;
  }
  if (this != default_instance_) {
  }
}

void RechargeFromCardErr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RechargeFromCardErr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RechargeFromCardErr_descriptor_;
}

const RechargeFromCardErr& RechargeFromCardErr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

RechargeFromCardErr* RechargeFromCardErr::default_instance_ = NULL;

RechargeFromCardErr* RechargeFromCardErr::New() const {
  return new RechargeFromCardErr;
}

void RechargeFromCardErr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prt_id_ = 0;
    user_id_ = 0;
    if (has_card_no()) {
      if (card_no_ != &::google::protobuf::internal::kEmptyString) {
        card_no_->clear();
      }
    }
    if (has_err_desc()) {
      if (err_desc_ != &::google::protobuf::internal::kEmptyString) {
        err_desc_->clear();
      }
    }
    should_spend_ = 0;
    recharge_money_ = 0;
    recharge_for_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RechargeFromCardErr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 prt_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prt_id_)));
          set_has_prt_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }
      
      // optional int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_card_no;
        break;
      }
      
      // optional string card_no = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_no()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->card_no().data(), this->card_no().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_err_desc;
        break;
      }
      
      // optional string err_desc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->err_desc().data(), this->err_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_should_spend;
        break;
      }
      
      // optional double should_spend = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_should_spend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &should_spend_)));
          set_has_should_spend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_recharge_money;
        break;
      }
      
      // optional double recharge_money = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_recharge_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &recharge_money_)));
          set_has_recharge_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_recharge_for;
        break;
      }
      
      // optional int32 recharge_for = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recharge_for:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recharge_for_)));
          set_has_recharge_for();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RechargeFromCardErr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 prt_id = 1;
  if (has_prt_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->prt_id(), output);
  }
  
  // optional int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }
  
  // optional string card_no = 3;
  if (has_card_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->card_no().data(), this->card_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->card_no(), output);
  }
  
  // optional string err_desc = 4;
  if (has_err_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err_desc().data(), this->err_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->err_desc(), output);
  }
  
  // optional double should_spend = 5;
  if (has_should_spend()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->should_spend(), output);
  }
  
  // optional double recharge_money = 6;
  if (has_recharge_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->recharge_money(), output);
  }
  
  // optional int32 recharge_for = 7;
  if (has_recharge_for()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->recharge_for(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RechargeFromCardErr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 prt_id = 1;
  if (has_prt_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->prt_id(), target);
  }
  
  // optional int32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }
  
  // optional string card_no = 3;
  if (has_card_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->card_no().data(), this->card_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->card_no(), target);
  }
  
  // optional string err_desc = 4;
  if (has_err_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err_desc().data(), this->err_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->err_desc(), target);
  }
  
  // optional double should_spend = 5;
  if (has_should_spend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->should_spend(), target);
  }
  
  // optional double recharge_money = 6;
  if (has_recharge_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->recharge_money(), target);
  }
  
  // optional int32 recharge_for = 7;
  if (has_recharge_for()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->recharge_for(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RechargeFromCardErr::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 prt_id = 1;
    if (has_prt_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prt_id());
    }
    
    // optional int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }
    
    // optional string card_no = 3;
    if (has_card_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->card_no());
    }
    
    // optional string err_desc = 4;
    if (has_err_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err_desc());
    }
    
    // optional double should_spend = 5;
    if (has_should_spend()) {
      total_size += 1 + 8;
    }
    
    // optional double recharge_money = 6;
    if (has_recharge_money()) {
      total_size += 1 + 8;
    }
    
    // optional int32 recharge_for = 7;
    if (has_recharge_for()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recharge_for());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RechargeFromCardErr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RechargeFromCardErr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RechargeFromCardErr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RechargeFromCardErr::MergeFrom(const RechargeFromCardErr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prt_id()) {
      set_prt_id(from.prt_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_card_no()) {
      set_card_no(from.card_no());
    }
    if (from.has_err_desc()) {
      set_err_desc(from.err_desc());
    }
    if (from.has_should_spend()) {
      set_should_spend(from.should_spend());
    }
    if (from.has_recharge_money()) {
      set_recharge_money(from.recharge_money());
    }
    if (from.has_recharge_for()) {
      set_recharge_for(from.recharge_for());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RechargeFromCardErr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RechargeFromCardErr::CopyFrom(const RechargeFromCardErr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RechargeFromCardErr::IsInitialized() const {
  
  return true;
}

void RechargeFromCardErr::Swap(RechargeFromCardErr* other) {
  if (other != this) {
    std::swap(prt_id_, other->prt_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(card_no_, other->card_no_);
    std::swap(err_desc_, other->err_desc_);
    std::swap(should_spend_, other->should_spend_);
    std::swap(recharge_money_, other->recharge_money_);
    std::swap(recharge_for_, other->recharge_for_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RechargeFromCardErr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RechargeFromCardErr_descriptor_;
  metadata.reflection = RechargeFromCardErr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtChargeResult::kSeedFieldNumber;
const int PrtChargeResult::kResCodeFieldNumber;
const int PrtChargeResult::kChargeForFieldNumber;
const int PrtChargeResult::kResFieldNumber;
const int PrtChargeResult::kFilePathFieldNumber;
const int PrtChargeResult::kOtherInfoFieldNumber;
#endif  // !_MSC_VER

PrtChargeResult::PrtChargeResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrtChargeResult::InitAsDefaultInstance() {
  res_ = const_cast< ::isafetec::PrtStationCheckUserResult*>(&::isafetec::PrtStationCheckUserResult::default_instance());
}

PrtChargeResult::PrtChargeResult(const PrtChargeResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrtChargeResult::SharedCtor() {
  _cached_size_ = 0;
  seed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  res_code_ = 0;
  charge_for_ = 0;
  res_ = NULL;
  file_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  other_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtChargeResult::~PrtChargeResult() {
  SharedDtor();
}

void PrtChargeResult::SharedDtor() {
  if (seed_ != &::google::protobuf::internal::kEmptyString) {
    delete seed_;
  }
  if (file_path_ != &::google::protobuf::internal::kEmptyString) {
    delete file_path_;
  }
  if (other_info_ != &::google::protobuf::internal::kEmptyString) {
    delete other_info_;
  }
  if (this != default_instance_) {
    delete res_;
  }
}

void PrtChargeResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtChargeResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtChargeResult_descriptor_;
}

const PrtChargeResult& PrtChargeResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrtChargeResult* PrtChargeResult::default_instance_ = NULL;

PrtChargeResult* PrtChargeResult::New() const {
  return new PrtChargeResult;
}

void PrtChargeResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_seed()) {
      if (seed_ != &::google::protobuf::internal::kEmptyString) {
        seed_->clear();
      }
    }
    res_code_ = 0;
    charge_for_ = 0;
    if (has_res()) {
      if (res_ != NULL) res_->::isafetec::PrtStationCheckUserResult::Clear();
    }
    if (has_file_path()) {
      if (file_path_ != &::google::protobuf::internal::kEmptyString) {
        file_path_->clear();
      }
    }
    if (has_other_info()) {
      if (other_info_ != &::google::protobuf::internal::kEmptyString) {
        other_info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtChargeResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string seed = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seed()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->seed().data(), this->seed().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_res_code;
        break;
      }
      
      // optional int32 res_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_res_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &res_code_)));
          set_has_res_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_charge_for;
        break;
      }
      
      // optional .isafetec.CHARGE_FOR charge_for = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charge_for:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::CHARGE_FOR_IsValid(value)) {
            set_charge_for(static_cast< isafetec::CHARGE_FOR >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_res;
        break;
      }
      
      // optional .isafetec.PrtStationCheckUserResult res = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_file_path;
        break;
      }
      
      // optional string file_path = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->file_path().data(), this->file_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_other_info;
        break;
      }
      
      // optional string other_info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_other_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_other_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->other_info().data(), this->other_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrtChargeResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string seed = 1;
  if (has_seed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seed().data(), this->seed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->seed(), output);
  }
  
  // optional int32 res_code = 2;
  if (has_res_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->res_code(), output);
  }
  
  // optional .isafetec.CHARGE_FOR charge_for = 3;
  if (has_charge_for()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->charge_for(), output);
  }
  
  // optional .isafetec.PrtStationCheckUserResult res = 4;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->res(), output);
  }
  
  // optional string file_path = 5;
  if (has_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->file_path(), output);
  }
  
  // optional string other_info = 6;
  if (has_other_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->other_info().data(), this->other_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->other_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrtChargeResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string seed = 1;
  if (has_seed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seed().data(), this->seed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->seed(), target);
  }
  
  // optional int32 res_code = 2;
  if (has_res_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->res_code(), target);
  }
  
  // optional .isafetec.CHARGE_FOR charge_for = 3;
  if (has_charge_for()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->charge_for(), target);
  }
  
  // optional .isafetec.PrtStationCheckUserResult res = 4;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->res(), target);
  }
  
  // optional string file_path = 5;
  if (has_file_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->file_path().data(), this->file_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->file_path(), target);
  }
  
  // optional string other_info = 6;
  if (has_other_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->other_info().data(), this->other_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->other_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrtChargeResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string seed = 1;
    if (has_seed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seed());
    }
    
    // optional int32 res_code = 2;
    if (has_res_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->res_code());
    }
    
    // optional .isafetec.CHARGE_FOR charge_for = 3;
    if (has_charge_for()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->charge_for());
    }
    
    // optional .isafetec.PrtStationCheckUserResult res = 4;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->res());
    }
    
    // optional string file_path = 5;
    if (has_file_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_path());
    }
    
    // optional string other_info = 6;
    if (has_other_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->other_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtChargeResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtChargeResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtChargeResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtChargeResult::MergeFrom(const PrtChargeResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seed()) {
      set_seed(from.seed());
    }
    if (from.has_res_code()) {
      set_res_code(from.res_code());
    }
    if (from.has_charge_for()) {
      set_charge_for(from.charge_for());
    }
    if (from.has_res()) {
      mutable_res()->::isafetec::PrtStationCheckUserResult::MergeFrom(from.res());
    }
    if (from.has_file_path()) {
      set_file_path(from.file_path());
    }
    if (from.has_other_info()) {
      set_other_info(from.other_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtChargeResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtChargeResult::CopyFrom(const PrtChargeResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtChargeResult::IsInitialized() const {
  
  return true;
}

void PrtChargeResult::Swap(PrtChargeResult* other) {
  if (other != this) {
    std::swap(seed_, other->seed_);
    std::swap(res_code_, other->res_code_);
    std::swap(charge_for_, other->charge_for_);
    std::swap(res_, other->res_);
    std::swap(file_path_, other->file_path_);
    std::swap(other_info_, other->other_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtChargeResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtChargeResult_descriptor_;
  metadata.reflection = PrtChargeResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtCopyCharge::kPrtIdFieldNumber;
const int PrtCopyCharge::kUserIdFieldNumber;
const int PrtCopyCharge::kPriceTypeFieldNumber;
const int PrtCopyCharge::kPriceFieldNumber;
const int PrtCopyCharge::kPageTypeFieldNumber;
const int PrtCopyCharge::kCountFieldNumber;
const int PrtCopyCharge::kColorFieldNumber;
const int PrtCopyCharge::kTimeFieldNumber;
const int PrtCopyCharge::kShouldSpendFieldNumber;
const int PrtCopyCharge::kRealSpendFieldNumber;
const int PrtCopyCharge::kCardFieldNumber;
const int PrtCopyCharge::kErrFieldNumber;
const int PrtCopyCharge::kSeedFieldNumber;
const int PrtCopyCharge::kJobIdFieldNumber;
#endif  // !_MSC_VER

PrtCopyCharge::PrtCopyCharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrtCopyCharge::InitAsDefaultInstance() {
  card_ = const_cast< ::isafetec::RechargeFromCard*>(&::isafetec::RechargeFromCard::default_instance());
  err_ = const_cast< ::isafetec::RechargeFromCardErr*>(&::isafetec::RechargeFromCardErr::default_instance());
}

PrtCopyCharge::PrtCopyCharge(const PrtCopyCharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrtCopyCharge::SharedCtor() {
  _cached_size_ = 0;
  prt_id_ = 0;
  user_id_ = 0;
  price_type_ = 0;
  price_ = 0;
  page_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  count_ = 0;
  color_ = 0;
  time_ = 0;
  should_spend_ = 0;
  real_spend_ = 0;
  card_ = NULL;
  err_ = NULL;
  seed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  job_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtCopyCharge::~PrtCopyCharge() {
  SharedDtor();
}

void PrtCopyCharge::SharedDtor() {
  if (page_type_ != &::google::protobuf::internal::kEmptyString) {
    delete page_type_;
  }
  if (seed_ != &::google::protobuf::internal::kEmptyString) {
    delete seed_;
  }
  if (this != default_instance_) {
    delete card_;
    delete err_;
  }
}

void PrtCopyCharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtCopyCharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtCopyCharge_descriptor_;
}

const PrtCopyCharge& PrtCopyCharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrtCopyCharge* PrtCopyCharge::default_instance_ = NULL;

PrtCopyCharge* PrtCopyCharge::New() const {
  return new PrtCopyCharge;
}

void PrtCopyCharge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prt_id_ = 0;
    user_id_ = 0;
    price_type_ = 0;
    price_ = 0;
    if (has_page_type()) {
      if (page_type_ != &::google::protobuf::internal::kEmptyString) {
        page_type_->clear();
      }
    }
    count_ = 0;
    color_ = 0;
    time_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    should_spend_ = 0;
    real_spend_ = 0;
    if (has_card()) {
      if (card_ != NULL) card_->::isafetec::RechargeFromCard::Clear();
    }
    if (has_err()) {
      if (err_ != NULL) err_->::isafetec::RechargeFromCardErr::Clear();
    }
    if (has_seed()) {
      if (seed_ != &::google::protobuf::internal::kEmptyString) {
        seed_->clear();
      }
    }
    job_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtCopyCharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 prt_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prt_id_)));
          set_has_prt_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }
      
      // optional int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_price_type;
        break;
      }
      
      // optional .isafetec.JOB_PRICE_TYPE price_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::JOB_PRICE_TYPE_IsValid(value)) {
            set_price_type(static_cast< isafetec::JOB_PRICE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_price;
        break;
      }
      
      // optional double price = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_page_type;
        break;
      }
      
      // optional string page_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_page_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->page_type().data(), this->page_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_count;
        break;
      }
      
      // optional int32 count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_color;
        break;
      }
      
      // optional int32 color = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_time;
        break;
      }
      
      // optional double time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_should_spend;
        break;
      }
      
      // optional double should_spend = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_should_spend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &should_spend_)));
          set_has_should_spend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_real_spend;
        break;
      }
      
      // optional double real_spend = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_real_spend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &real_spend_)));
          set_has_real_spend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_card;
        break;
      }
      
      // optional .isafetec.RechargeFromCard card = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_card()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_err;
        break;
      }
      
      // optional .isafetec.RechargeFromCardErr err = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_err()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_seed;
        break;
      }
      
      // optional string seed = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seed()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->seed().data(), this->seed().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_job_id;
        break;
      }
      
      // optional int32 job_id = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_id_)));
          set_has_job_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrtCopyCharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 prt_id = 1;
  if (has_prt_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->prt_id(), output);
  }
  
  // optional int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }
  
  // optional .isafetec.JOB_PRICE_TYPE price_type = 3;
  if (has_price_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->price_type(), output);
  }
  
  // optional double price = 4;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->price(), output);
  }
  
  // optional string page_type = 5;
  if (has_page_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page_type().data(), this->page_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->page_type(), output);
  }
  
  // optional int32 count = 6;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->count(), output);
  }
  
  // optional int32 color = 7;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->color(), output);
  }
  
  // optional double time = 8;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->time(), output);
  }
  
  // optional double should_spend = 9;
  if (has_should_spend()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->should_spend(), output);
  }
  
  // optional double real_spend = 10;
  if (has_real_spend()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->real_spend(), output);
  }
  
  // optional .isafetec.RechargeFromCard card = 15;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->card(), output);
  }
  
  // optional .isafetec.RechargeFromCardErr err = 16;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->err(), output);
  }
  
  // optional string seed = 17;
  if (has_seed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seed().data(), this->seed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->seed(), output);
  }
  
  // optional int32 job_id = 18;
  if (has_job_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->job_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrtCopyCharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 prt_id = 1;
  if (has_prt_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->prt_id(), target);
  }
  
  // optional int32 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->user_id(), target);
  }
  
  // optional .isafetec.JOB_PRICE_TYPE price_type = 3;
  if (has_price_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->price_type(), target);
  }
  
  // optional double price = 4;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->price(), target);
  }
  
  // optional string page_type = 5;
  if (has_page_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page_type().data(), this->page_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->page_type(), target);
  }
  
  // optional int32 count = 6;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->count(), target);
  }
  
  // optional int32 color = 7;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->color(), target);
  }
  
  // optional double time = 8;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->time(), target);
  }
  
  // optional double should_spend = 9;
  if (has_should_spend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->should_spend(), target);
  }
  
  // optional double real_spend = 10;
  if (has_real_spend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->real_spend(), target);
  }
  
  // optional .isafetec.RechargeFromCard card = 15;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->card(), target);
  }
  
  // optional .isafetec.RechargeFromCardErr err = 16;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->err(), target);
  }
  
  // optional string seed = 17;
  if (has_seed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seed().data(), this->seed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->seed(), target);
  }
  
  // optional int32 job_id = 18;
  if (has_job_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->job_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrtCopyCharge::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 prt_id = 1;
    if (has_prt_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prt_id());
    }
    
    // optional int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }
    
    // optional .isafetec.JOB_PRICE_TYPE price_type = 3;
    if (has_price_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->price_type());
    }
    
    // optional double price = 4;
    if (has_price()) {
      total_size += 1 + 8;
    }
    
    // optional string page_type = 5;
    if (has_page_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->page_type());
    }
    
    // optional int32 count = 6;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
    // optional int32 color = 7;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }
    
    // optional double time = 8;
    if (has_time()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double should_spend = 9;
    if (has_should_spend()) {
      total_size += 1 + 8;
    }
    
    // optional double real_spend = 10;
    if (has_real_spend()) {
      total_size += 1 + 8;
    }
    
    // optional .isafetec.RechargeFromCard card = 15;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->card());
    }
    
    // optional .isafetec.RechargeFromCardErr err = 16;
    if (has_err()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->err());
    }
    
    // optional string seed = 17;
    if (has_seed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seed());
    }
    
    // optional int32 job_id = 18;
    if (has_job_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtCopyCharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtCopyCharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtCopyCharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtCopyCharge::MergeFrom(const PrtCopyCharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prt_id()) {
      set_prt_id(from.prt_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_price_type()) {
      set_price_type(from.price_type());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_page_type()) {
      set_page_type(from.page_type());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_should_spend()) {
      set_should_spend(from.should_spend());
    }
    if (from.has_real_spend()) {
      set_real_spend(from.real_spend());
    }
    if (from.has_card()) {
      mutable_card()->::isafetec::RechargeFromCard::MergeFrom(from.card());
    }
    if (from.has_err()) {
      mutable_err()->::isafetec::RechargeFromCardErr::MergeFrom(from.err());
    }
    if (from.has_seed()) {
      set_seed(from.seed());
    }
    if (from.has_job_id()) {
      set_job_id(from.job_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtCopyCharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtCopyCharge::CopyFrom(const PrtCopyCharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtCopyCharge::IsInitialized() const {
  
  return true;
}

void PrtCopyCharge::Swap(PrtCopyCharge* other) {
  if (other != this) {
    std::swap(prt_id_, other->prt_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(price_type_, other->price_type_);
    std::swap(price_, other->price_);
    std::swap(page_type_, other->page_type_);
    std::swap(count_, other->count_);
    std::swap(color_, other->color_);
    std::swap(time_, other->time_);
    std::swap(should_spend_, other->should_spend_);
    std::swap(real_spend_, other->real_spend_);
    std::swap(card_, other->card_);
    std::swap(err_, other->err_);
    std::swap(seed_, other->seed_);
    std::swap(job_id_, other->job_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtCopyCharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtCopyCharge_descriptor_;
  metadata.reflection = PrtCopyCharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtScanCharge::kGuidFieldNumber;
const int PrtScanCharge::kPrtIdFieldNumber;
const int PrtScanCharge::kUserIdFieldNumber;
const int PrtScanCharge::kPriceTypeFieldNumber;
const int PrtScanCharge::kPriceFieldNumber;
const int PrtScanCharge::kSizeFieldNumber;
const int PrtScanCharge::kColorFieldNumber;
const int PrtScanCharge::kPathFieldNumber;
const int PrtScanCharge::kDirFieldNumber;
const int PrtScanCharge::kHttpDirFieldNumber;
const int PrtScanCharge::kTimeFieldNumber;
const int PrtScanCharge::kShouldSpendFieldNumber;
const int PrtScanCharge::kRealSpendFieldNumber;
const int PrtScanCharge::kCardFieldNumber;
const int PrtScanCharge::kErrFieldNumber;
const int PrtScanCharge::kSeedFieldNumber;
const int PrtScanCharge::kJobIdFieldNumber;
const int PrtScanCharge::kPageCountFieldNumber;
const int PrtScanCharge::kChargeTypeFieldNumber;
#endif  // !_MSC_VER

PrtScanCharge::PrtScanCharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrtScanCharge::InitAsDefaultInstance() {
  card_ = const_cast< ::isafetec::RechargeFromCard*>(&::isafetec::RechargeFromCard::default_instance());
  err_ = const_cast< ::isafetec::RechargeFromCardErr*>(&::isafetec::RechargeFromCardErr::default_instance());
}

PrtScanCharge::PrtScanCharge(const PrtScanCharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrtScanCharge::SharedCtor() {
  _cached_size_ = 0;
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prt_id_ = 0;
  user_id_ = 0;
  price_type_ = 0;
  price_ = 0;
  size_ = 0;
  color_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  http_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = 0;
  should_spend_ = 0;
  real_spend_ = 0;
  card_ = NULL;
  err_ = NULL;
  seed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  job_id_ = 0;
  page_count_ = 0;
  charge_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtScanCharge::~PrtScanCharge() {
  SharedDtor();
}

void PrtScanCharge::SharedDtor() {
  if (guid_ != &::google::protobuf::internal::kEmptyString) {
    delete guid_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (dir_ != &::google::protobuf::internal::kEmptyString) {
    delete dir_;
  }
  if (http_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete http_dir_;
  }
  if (seed_ != &::google::protobuf::internal::kEmptyString) {
    delete seed_;
  }
  if (this != default_instance_) {
    delete card_;
    delete err_;
  }
}

void PrtScanCharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtScanCharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtScanCharge_descriptor_;
}

const PrtScanCharge& PrtScanCharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrtScanCharge* PrtScanCharge::default_instance_ = NULL;

PrtScanCharge* PrtScanCharge::New() const {
  return new PrtScanCharge;
}

void PrtScanCharge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::kEmptyString) {
        guid_->clear();
      }
    }
    prt_id_ = 0;
    user_id_ = 0;
    price_type_ = 0;
    price_ = 0;
    size_ = 0;
    color_ = 0;
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_dir()) {
      if (dir_ != &::google::protobuf::internal::kEmptyString) {
        dir_->clear();
      }
    }
    if (has_http_dir()) {
      if (http_dir_ != &::google::protobuf::internal::kEmptyString) {
        http_dir_->clear();
      }
    }
    time_ = 0;
    should_spend_ = 0;
    real_spend_ = 0;
    if (has_card()) {
      if (card_ != NULL) card_->::isafetec::RechargeFromCard::Clear();
    }
    if (has_err()) {
      if (err_ != NULL) err_->::isafetec::RechargeFromCardErr::Clear();
    }
    if (has_seed()) {
      if (seed_ != &::google::protobuf::internal::kEmptyString) {
        seed_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    job_id_ = 0;
    page_count_ = 0;
    charge_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtScanCharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_prt_id;
        break;
      }
      
      // optional int32 prt_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prt_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prt_id_)));
          set_has_prt_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_user_id;
        break;
      }
      
      // optional int32 user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_price_type;
        break;
      }
      
      // optional .isafetec.JOB_PRICE_TYPE price_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::JOB_PRICE_TYPE_IsValid(value)) {
            set_price_type(static_cast< isafetec::JOB_PRICE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_price;
        break;
      }
      
      // optional double price = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_size;
        break;
      }
      
      // optional int32 size = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_color;
        break;
      }
      
      // optional int32 color = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_path;
        break;
      }
      
      // optional string path = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_dir;
        break;
      }
      
      // optional string dir = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dir().data(), this->dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_time;
        break;
      }
      
      // optional double time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_should_spend;
        break;
      }
      
      // optional double should_spend = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_should_spend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &should_spend_)));
          set_has_should_spend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_real_spend;
        break;
      }
      
      // optional double real_spend = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_real_spend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &real_spend_)));
          set_has_real_spend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_http_dir;
        break;
      }
      
      // optional string http_dir = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_http_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_http_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->http_dir().data(), this->http_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_card;
        break;
      }
      
      // optional .isafetec.RechargeFromCard card = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_card()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_err;
        break;
      }
      
      // optional .isafetec.RechargeFromCardErr err = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_err()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_seed;
        break;
      }
      
      // optional string seed = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seed()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->seed().data(), this->seed().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_job_id;
        break;
      }
      
      // optional int32 job_id = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_id_)));
          set_has_job_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_page_count;
        break;
      }
      
      // optional int32 page_count = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_count_)));
          set_has_page_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_charge_type;
        break;
      }
      
      // optional .isafetec.ScanChargeType charge_type = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charge_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::ScanChargeType_IsValid(value)) {
            set_charge_type(static_cast< isafetec::ScanChargeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(20, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrtScanCharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->guid(), output);
  }
  
  // optional int32 prt_id = 2;
  if (has_prt_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->prt_id(), output);
  }
  
  // optional int32 user_id = 3;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->user_id(), output);
  }
  
  // optional .isafetec.JOB_PRICE_TYPE price_type = 4;
  if (has_price_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->price_type(), output);
  }
  
  // optional double price = 5;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->price(), output);
  }
  
  // optional int32 size = 7;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->size(), output);
  }
  
  // optional int32 color = 8;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->color(), output);
  }
  
  // optional string path = 9;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->path(), output);
  }
  
  // optional string dir = 10;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dir().data(), this->dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->dir(), output);
  }
  
  // optional double time = 11;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->time(), output);
  }
  
  // optional double should_spend = 12;
  if (has_should_spend()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->should_spend(), output);
  }
  
  // optional double real_spend = 13;
  if (has_real_spend()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->real_spend(), output);
  }
  
  // optional string http_dir = 14;
  if (has_http_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->http_dir().data(), this->http_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->http_dir(), output);
  }
  
  // optional .isafetec.RechargeFromCard card = 15;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->card(), output);
  }
  
  // optional .isafetec.RechargeFromCardErr err = 16;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->err(), output);
  }
  
  // optional string seed = 17;
  if (has_seed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seed().data(), this->seed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->seed(), output);
  }
  
  // optional int32 job_id = 18;
  if (has_job_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->job_id(), output);
  }
  
  // optional int32 page_count = 19;
  if (has_page_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->page_count(), output);
  }
  
  // optional .isafetec.ScanChargeType charge_type = 20;
  if (has_charge_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->charge_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrtScanCharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->guid(), target);
  }
  
  // optional int32 prt_id = 2;
  if (has_prt_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->prt_id(), target);
  }
  
  // optional int32 user_id = 3;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->user_id(), target);
  }
  
  // optional .isafetec.JOB_PRICE_TYPE price_type = 4;
  if (has_price_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->price_type(), target);
  }
  
  // optional double price = 5;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->price(), target);
  }
  
  // optional int32 size = 7;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->size(), target);
  }
  
  // optional int32 color = 8;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->color(), target);
  }
  
  // optional string path = 9;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->path(), target);
  }
  
  // optional string dir = 10;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dir().data(), this->dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->dir(), target);
  }
  
  // optional double time = 11;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->time(), target);
  }
  
  // optional double should_spend = 12;
  if (has_should_spend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->should_spend(), target);
  }
  
  // optional double real_spend = 13;
  if (has_real_spend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->real_spend(), target);
  }
  
  // optional string http_dir = 14;
  if (has_http_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->http_dir().data(), this->http_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->http_dir(), target);
  }
  
  // optional .isafetec.RechargeFromCard card = 15;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->card(), target);
  }
  
  // optional .isafetec.RechargeFromCardErr err = 16;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->err(), target);
  }
  
  // optional string seed = 17;
  if (has_seed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seed().data(), this->seed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->seed(), target);
  }
  
  // optional int32 job_id = 18;
  if (has_job_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->job_id(), target);
  }
  
  // optional int32 page_count = 19;
  if (has_page_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->page_count(), target);
  }
  
  // optional .isafetec.ScanChargeType charge_type = 20;
  if (has_charge_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->charge_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrtScanCharge::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }
    
    // optional int32 prt_id = 2;
    if (has_prt_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prt_id());
    }
    
    // optional int32 user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }
    
    // optional .isafetec.JOB_PRICE_TYPE price_type = 4;
    if (has_price_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->price_type());
    }
    
    // optional double price = 5;
    if (has_price()) {
      total_size += 1 + 8;
    }
    
    // optional int32 size = 7;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }
    
    // optional int32 color = 8;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }
    
    // optional string path = 9;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string dir = 10;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dir());
    }
    
    // optional string http_dir = 14;
    if (has_http_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->http_dir());
    }
    
    // optional double time = 11;
    if (has_time()) {
      total_size += 1 + 8;
    }
    
    // optional double should_spend = 12;
    if (has_should_spend()) {
      total_size += 1 + 8;
    }
    
    // optional double real_spend = 13;
    if (has_real_spend()) {
      total_size += 1 + 8;
    }
    
    // optional .isafetec.RechargeFromCard card = 15;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->card());
    }
    
    // optional .isafetec.RechargeFromCardErr err = 16;
    if (has_err()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->err());
    }
    
    // optional string seed = 17;
    if (has_seed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seed());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 job_id = 18;
    if (has_job_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job_id());
    }
    
    // optional int32 page_count = 19;
    if (has_page_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page_count());
    }
    
    // optional .isafetec.ScanChargeType charge_type = 20;
    if (has_charge_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->charge_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtScanCharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtScanCharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtScanCharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtScanCharge::MergeFrom(const PrtScanCharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_prt_id()) {
      set_prt_id(from.prt_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_price_type()) {
      set_price_type(from.price_type());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_http_dir()) {
      set_http_dir(from.http_dir());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_should_spend()) {
      set_should_spend(from.should_spend());
    }
    if (from.has_real_spend()) {
      set_real_spend(from.real_spend());
    }
    if (from.has_card()) {
      mutable_card()->::isafetec::RechargeFromCard::MergeFrom(from.card());
    }
    if (from.has_err()) {
      mutable_err()->::isafetec::RechargeFromCardErr::MergeFrom(from.err());
    }
    if (from.has_seed()) {
      set_seed(from.seed());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_job_id()) {
      set_job_id(from.job_id());
    }
    if (from.has_page_count()) {
      set_page_count(from.page_count());
    }
    if (from.has_charge_type()) {
      set_charge_type(from.charge_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtScanCharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtScanCharge::CopyFrom(const PrtScanCharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtScanCharge::IsInitialized() const {
  
  return true;
}

void PrtScanCharge::Swap(PrtScanCharge* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(prt_id_, other->prt_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(price_type_, other->price_type_);
    std::swap(price_, other->price_);
    std::swap(size_, other->size_);
    std::swap(color_, other->color_);
    std::swap(path_, other->path_);
    std::swap(dir_, other->dir_);
    std::swap(http_dir_, other->http_dir_);
    std::swap(time_, other->time_);
    std::swap(should_spend_, other->should_spend_);
    std::swap(real_spend_, other->real_spend_);
    std::swap(card_, other->card_);
    std::swap(err_, other->err_);
    std::swap(seed_, other->seed_);
    std::swap(job_id_, other->job_id_);
    std::swap(page_count_, other->page_count_);
    std::swap(charge_type_, other->charge_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtScanCharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtScanCharge_descriptor_;
  metadata.reflection = PrtScanCharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtStationCharge::kGuidFieldNumber;
const int PrtStationCharge::kJobIdFieldNumber;
const int PrtStationCharge::kPrtIdFieldNumber;
const int PrtStationCharge::kUserIdFieldNumber;
const int PrtStationCharge::kColorFieldNumber;
const int PrtStationCharge::kPageTypeFieldNumber;
const int PrtStationCharge::kPriceTypeFieldNumber;
const int PrtStationCharge::kPriceFieldNumber;
const int PrtStationCharge::kTotalPageCountFieldNumber;
const int PrtStationCharge::kPrintedPageCountFieldNumber;
const int PrtStationCharge::kPrintedCopiesFieldNumber;
const int PrtStationCharge::kPrintedFromFieldNumber;
const int PrtStationCharge::kPrintedToFieldNumber;
const int PrtStationCharge::kShouldSpendFieldNumber;
const int PrtStationCharge::kRealSpendFieldNumber;
const int PrtStationCharge::kPrintedTimeFieldNumber;
const int PrtStationCharge::kProjectIdFieldNumber;
const int PrtStationCharge::kProjectNameFieldNumber;
const int PrtStationCharge::kJobReqByFieldNumber;
const int PrtStationCharge::kSeedFieldNumber;
#endif  // !_MSC_VER

PrtStationCharge::PrtStationCharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrtStationCharge::InitAsDefaultInstance() {
}

PrtStationCharge::PrtStationCharge(const PrtStationCharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrtStationCharge::SharedCtor() {
  _cached_size_ = 0;
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  job_id_ = 0;
  prt_id_ = 0;
  user_id_ = 0;
  color_ = 0;
  page_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  price_type_ = 0;
  price_ = 0;
  total_page_count_ = 0;
  printed_page_count_ = 0;
  printed_copies_ = 0;
  printed_from_ = 0;
  printed_to_ = 0;
  should_spend_ = 0;
  real_spend_ = 0;
  printed_time_ = 0;
  project_id_ = 0;
  project_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  job_req_by_ = 0;
  seed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtStationCharge::~PrtStationCharge() {
  SharedDtor();
}

void PrtStationCharge::SharedDtor() {
  if (guid_ != &::google::protobuf::internal::kEmptyString) {
    delete guid_;
  }
  if (page_type_ != &::google::protobuf::internal::kEmptyString) {
    delete page_type_;
  }
  if (project_name_ != &::google::protobuf::internal::kEmptyString) {
    delete project_name_;
  }
  if (seed_ != &::google::protobuf::internal::kEmptyString) {
    delete seed_;
  }
  if (this != default_instance_) {
  }
}

void PrtStationCharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtStationCharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtStationCharge_descriptor_;
}

const PrtStationCharge& PrtStationCharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrtStationCharge* PrtStationCharge::default_instance_ = NULL;

PrtStationCharge* PrtStationCharge::New() const {
  return new PrtStationCharge;
}

void PrtStationCharge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::kEmptyString) {
        guid_->clear();
      }
    }
    job_id_ = 0;
    prt_id_ = 0;
    user_id_ = 0;
    color_ = 0;
    if (has_page_type()) {
      if (page_type_ != &::google::protobuf::internal::kEmptyString) {
        page_type_->clear();
      }
    }
    price_type_ = 0;
    price_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    total_page_count_ = 0;
    printed_page_count_ = 0;
    printed_copies_ = 0;
    printed_from_ = 0;
    printed_to_ = 0;
    should_spend_ = 0;
    real_spend_ = 0;
    printed_time_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    project_id_ = 0;
    if (has_project_name()) {
      if (project_name_ != &::google::protobuf::internal::kEmptyString) {
        project_name_->clear();
      }
    }
    job_req_by_ = 0;
    if (has_seed()) {
      if (seed_ != &::google::protobuf::internal::kEmptyString) {
        seed_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtStationCharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_job_id;
        break;
      }
      
      // optional int32 job_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_id_)));
          set_has_job_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_prt_id;
        break;
      }
      
      // optional int32 prt_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prt_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prt_id_)));
          set_has_prt_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_user_id;
        break;
      }
      
      // optional int32 user_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_color;
        break;
      }
      
      // optional int32 color = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_page_type;
        break;
      }
      
      // optional string page_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_page_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->page_type().data(), this->page_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_price_type;
        break;
      }
      
      // optional .isafetec.JOB_PRICE_TYPE price_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::JOB_PRICE_TYPE_IsValid(value)) {
            set_price_type(static_cast< isafetec::JOB_PRICE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_price;
        break;
      }
      
      // optional double price = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_total_page_count;
        break;
      }
      
      // optional int32 total_page_count = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_page_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_page_count_)));
          set_has_total_page_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_printed_page_count;
        break;
      }
      
      // optional int32 printed_page_count = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_printed_page_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &printed_page_count_)));
          set_has_printed_page_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_printed_copies;
        break;
      }
      
      // optional int32 printed_copies = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_printed_copies:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &printed_copies_)));
          set_has_printed_copies();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_printed_from;
        break;
      }
      
      // optional int32 printed_from = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_printed_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &printed_from_)));
          set_has_printed_from();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_printed_to;
        break;
      }
      
      // optional int32 printed_to = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_printed_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &printed_to_)));
          set_has_printed_to();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_should_spend;
        break;
      }
      
      // optional double should_spend = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_should_spend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &should_spend_)));
          set_has_should_spend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_real_spend;
        break;
      }
      
      // optional double real_spend = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_real_spend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &real_spend_)));
          set_has_real_spend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_printed_time;
        break;
      }
      
      // optional double printed_time = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_printed_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &printed_time_)));
          set_has_printed_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_project_id;
        break;
      }
      
      // optional int32 project_id = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_project_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &project_id_)));
          set_has_project_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_project_name;
        break;
      }
      
      // optional string project_name = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_project_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->project_name().data(), this->project_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_job_req_by;
        break;
      }
      
      // optional .isafetec.PRT_REQ_JOB_BY job_req_by = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job_req_by:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::PRT_REQ_JOB_BY_IsValid(value)) {
            set_job_req_by(static_cast< isafetec::PRT_REQ_JOB_BY >(value));
          } else {
            mutable_unknown_fields()->AddVarint(19, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_seed;
        break;
      }
      
      // optional string seed = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seed()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->seed().data(), this->seed().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrtStationCharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->guid(), output);
  }
  
  // optional int32 job_id = 2;
  if (has_job_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->job_id(), output);
  }
  
  // optional int32 prt_id = 3;
  if (has_prt_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->prt_id(), output);
  }
  
  // optional int32 user_id = 4;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->user_id(), output);
  }
  
  // optional int32 color = 5;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->color(), output);
  }
  
  // optional string page_type = 6;
  if (has_page_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page_type().data(), this->page_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->page_type(), output);
  }
  
  // optional .isafetec.JOB_PRICE_TYPE price_type = 7;
  if (has_price_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->price_type(), output);
  }
  
  // optional double price = 8;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->price(), output);
  }
  
  // optional int32 total_page_count = 9;
  if (has_total_page_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->total_page_count(), output);
  }
  
  // optional int32 printed_page_count = 10;
  if (has_printed_page_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->printed_page_count(), output);
  }
  
  // optional int32 printed_copies = 11;
  if (has_printed_copies()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->printed_copies(), output);
  }
  
  // optional int32 printed_from = 12;
  if (has_printed_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->printed_from(), output);
  }
  
  // optional int32 printed_to = 13;
  if (has_printed_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->printed_to(), output);
  }
  
  // optional double should_spend = 14;
  if (has_should_spend()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->should_spend(), output);
  }
  
  // optional double real_spend = 15;
  if (has_real_spend()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->real_spend(), output);
  }
  
  // optional double printed_time = 16;
  if (has_printed_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->printed_time(), output);
  }
  
  // optional int32 project_id = 17;
  if (has_project_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->project_id(), output);
  }
  
  // optional string project_name = 18;
  if (has_project_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->project_name().data(), this->project_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->project_name(), output);
  }
  
  // optional .isafetec.PRT_REQ_JOB_BY job_req_by = 19;
  if (has_job_req_by()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->job_req_by(), output);
  }
  
  // optional string seed = 20;
  if (has_seed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seed().data(), this->seed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->seed(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrtStationCharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->guid(), target);
  }
  
  // optional int32 job_id = 2;
  if (has_job_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->job_id(), target);
  }
  
  // optional int32 prt_id = 3;
  if (has_prt_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->prt_id(), target);
  }
  
  // optional int32 user_id = 4;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->user_id(), target);
  }
  
  // optional int32 color = 5;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->color(), target);
  }
  
  // optional string page_type = 6;
  if (has_page_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page_type().data(), this->page_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->page_type(), target);
  }
  
  // optional .isafetec.JOB_PRICE_TYPE price_type = 7;
  if (has_price_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->price_type(), target);
  }
  
  // optional double price = 8;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->price(), target);
  }
  
  // optional int32 total_page_count = 9;
  if (has_total_page_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->total_page_count(), target);
  }
  
  // optional int32 printed_page_count = 10;
  if (has_printed_page_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->printed_page_count(), target);
  }
  
  // optional int32 printed_copies = 11;
  if (has_printed_copies()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->printed_copies(), target);
  }
  
  // optional int32 printed_from = 12;
  if (has_printed_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->printed_from(), target);
  }
  
  // optional int32 printed_to = 13;
  if (has_printed_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->printed_to(), target);
  }
  
  // optional double should_spend = 14;
  if (has_should_spend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->should_spend(), target);
  }
  
  // optional double real_spend = 15;
  if (has_real_spend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->real_spend(), target);
  }
  
  // optional double printed_time = 16;
  if (has_printed_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->printed_time(), target);
  }
  
  // optional int32 project_id = 17;
  if (has_project_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->project_id(), target);
  }
  
  // optional string project_name = 18;
  if (has_project_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->project_name().data(), this->project_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->project_name(), target);
  }
  
  // optional .isafetec.PRT_REQ_JOB_BY job_req_by = 19;
  if (has_job_req_by()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->job_req_by(), target);
  }
  
  // optional string seed = 20;
  if (has_seed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seed().data(), this->seed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->seed(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrtStationCharge::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }
    
    // optional int32 job_id = 2;
    if (has_job_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job_id());
    }
    
    // optional int32 prt_id = 3;
    if (has_prt_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prt_id());
    }
    
    // optional int32 user_id = 4;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }
    
    // optional int32 color = 5;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }
    
    // optional string page_type = 6;
    if (has_page_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->page_type());
    }
    
    // optional .isafetec.JOB_PRICE_TYPE price_type = 7;
    if (has_price_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->price_type());
    }
    
    // optional double price = 8;
    if (has_price()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 total_page_count = 9;
    if (has_total_page_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_page_count());
    }
    
    // optional int32 printed_page_count = 10;
    if (has_printed_page_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->printed_page_count());
    }
    
    // optional int32 printed_copies = 11;
    if (has_printed_copies()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->printed_copies());
    }
    
    // optional int32 printed_from = 12;
    if (has_printed_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->printed_from());
    }
    
    // optional int32 printed_to = 13;
    if (has_printed_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->printed_to());
    }
    
    // optional double should_spend = 14;
    if (has_should_spend()) {
      total_size += 1 + 8;
    }
    
    // optional double real_spend = 15;
    if (has_real_spend()) {
      total_size += 1 + 8;
    }
    
    // optional double printed_time = 16;
    if (has_printed_time()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 project_id = 17;
    if (has_project_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->project_id());
    }
    
    // optional string project_name = 18;
    if (has_project_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->project_name());
    }
    
    // optional .isafetec.PRT_REQ_JOB_BY job_req_by = 19;
    if (has_job_req_by()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->job_req_by());
    }
    
    // optional string seed = 20;
    if (has_seed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seed());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtStationCharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtStationCharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtStationCharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtStationCharge::MergeFrom(const PrtStationCharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_job_id()) {
      set_job_id(from.job_id());
    }
    if (from.has_prt_id()) {
      set_prt_id(from.prt_id());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_page_type()) {
      set_page_type(from.page_type());
    }
    if (from.has_price_type()) {
      set_price_type(from.price_type());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_total_page_count()) {
      set_total_page_count(from.total_page_count());
    }
    if (from.has_printed_page_count()) {
      set_printed_page_count(from.printed_page_count());
    }
    if (from.has_printed_copies()) {
      set_printed_copies(from.printed_copies());
    }
    if (from.has_printed_from()) {
      set_printed_from(from.printed_from());
    }
    if (from.has_printed_to()) {
      set_printed_to(from.printed_to());
    }
    if (from.has_should_spend()) {
      set_should_spend(from.should_spend());
    }
    if (from.has_real_spend()) {
      set_real_spend(from.real_spend());
    }
    if (from.has_printed_time()) {
      set_printed_time(from.printed_time());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_project_id()) {
      set_project_id(from.project_id());
    }
    if (from.has_project_name()) {
      set_project_name(from.project_name());
    }
    if (from.has_job_req_by()) {
      set_job_req_by(from.job_req_by());
    }
    if (from.has_seed()) {
      set_seed(from.seed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtStationCharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtStationCharge::CopyFrom(const PrtStationCharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtStationCharge::IsInitialized() const {
  
  return true;
}

void PrtStationCharge::Swap(PrtStationCharge* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(job_id_, other->job_id_);
    std::swap(prt_id_, other->prt_id_);
    std::swap(user_id_, other->user_id_);
    std::swap(color_, other->color_);
    std::swap(page_type_, other->page_type_);
    std::swap(price_type_, other->price_type_);
    std::swap(price_, other->price_);
    std::swap(total_page_count_, other->total_page_count_);
    std::swap(printed_page_count_, other->printed_page_count_);
    std::swap(printed_copies_, other->printed_copies_);
    std::swap(printed_from_, other->printed_from_);
    std::swap(printed_to_, other->printed_to_);
    std::swap(should_spend_, other->should_spend_);
    std::swap(real_spend_, other->real_spend_);
    std::swap(printed_time_, other->printed_time_);
    std::swap(project_id_, other->project_id_);
    std::swap(project_name_, other->project_name_);
    std::swap(job_req_by_, other->job_req_by_);
    std::swap(seed_, other->seed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtStationCharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtStationCharge_descriptor_;
  metadata.reflection = PrtStationCharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtStationChargeOnEveryPage::kGuidFieldNumber;
const int PrtStationChargeOnEveryPage::kPrintedPageCountFieldNumber;
const int PrtStationChargeOnEveryPage::kRealSpendFieldNumber;
const int PrtStationChargeOnEveryPage::kAllPrintedFieldNumber;
const int PrtStationChargeOnEveryPage::kUserIdFieldNumber;
const int PrtStationChargeOnEveryPage::kJobReqByFieldNumber;
const int PrtStationChargeOnEveryPage::kJobIdFieldNumber;
const int PrtStationChargeOnEveryPage::kCardFieldNumber;
const int PrtStationChargeOnEveryPage::kErrFieldNumber;
const int PrtStationChargeOnEveryPage::kSeedFieldNumber;
#endif  // !_MSC_VER

PrtStationChargeOnEveryPage::PrtStationChargeOnEveryPage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrtStationChargeOnEveryPage::InitAsDefaultInstance() {
  card_ = const_cast< ::isafetec::RechargeFromCard*>(&::isafetec::RechargeFromCard::default_instance());
  err_ = const_cast< ::isafetec::RechargeFromCardErr*>(&::isafetec::RechargeFromCardErr::default_instance());
}

PrtStationChargeOnEveryPage::PrtStationChargeOnEveryPage(const PrtStationChargeOnEveryPage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrtStationChargeOnEveryPage::SharedCtor() {
  _cached_size_ = 0;
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  printed_page_count_ = 0;
  real_spend_ = 0;
  all_printed_ = 0;
  user_id_ = 0;
  job_req_by_ = 0;
  job_id_ = 0;
  card_ = NULL;
  err_ = NULL;
  seed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtStationChargeOnEveryPage::~PrtStationChargeOnEveryPage() {
  SharedDtor();
}

void PrtStationChargeOnEveryPage::SharedDtor() {
  if (guid_ != &::google::protobuf::internal::kEmptyString) {
    delete guid_;
  }
  if (seed_ != &::google::protobuf::internal::kEmptyString) {
    delete seed_;
  }
  if (this != default_instance_) {
    delete card_;
    delete err_;
  }
}

void PrtStationChargeOnEveryPage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtStationChargeOnEveryPage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtStationChargeOnEveryPage_descriptor_;
}

const PrtStationChargeOnEveryPage& PrtStationChargeOnEveryPage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrtStationChargeOnEveryPage* PrtStationChargeOnEveryPage::default_instance_ = NULL;

PrtStationChargeOnEveryPage* PrtStationChargeOnEveryPage::New() const {
  return new PrtStationChargeOnEveryPage;
}

void PrtStationChargeOnEveryPage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::kEmptyString) {
        guid_->clear();
      }
    }
    printed_page_count_ = 0;
    real_spend_ = 0;
    all_printed_ = 0;
    user_id_ = 0;
    job_req_by_ = 0;
    job_id_ = 0;
    if (has_card()) {
      if (card_ != NULL) card_->::isafetec::RechargeFromCard::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_err()) {
      if (err_ != NULL) err_->::isafetec::RechargeFromCardErr::Clear();
    }
    if (has_seed()) {
      if (seed_ != &::google::protobuf::internal::kEmptyString) {
        seed_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtStationChargeOnEveryPage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string guid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_printed_page_count;
        break;
      }
      
      // optional int32 printed_page_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_printed_page_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &printed_page_count_)));
          set_has_printed_page_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_real_spend;
        break;
      }
      
      // optional double real_spend = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_real_spend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &real_spend_)));
          set_has_real_spend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_all_printed;
        break;
      }
      
      // optional int32 all_printed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_printed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &all_printed_)));
          set_has_all_printed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_user_id;
        break;
      }
      
      // optional int32 user_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_job_req_by;
        break;
      }
      
      // optional .isafetec.PRT_REQ_JOB_BY job_req_by = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job_req_by:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::PRT_REQ_JOB_BY_IsValid(value)) {
            set_job_req_by(static_cast< isafetec::PRT_REQ_JOB_BY >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_job_id;
        break;
      }
      
      // optional int32 job_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_id_)));
          set_has_job_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_card;
        break;
      }
      
      // optional .isafetec.RechargeFromCard card = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_card()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_err;
        break;
      }
      
      // optional .isafetec.RechargeFromCardErr err = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_err()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_seed;
        break;
      }
      
      // optional string seed = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seed()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->seed().data(), this->seed().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrtStationChargeOnEveryPage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->guid(), output);
  }
  
  // optional int32 printed_page_count = 2;
  if (has_printed_page_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->printed_page_count(), output);
  }
  
  // optional double real_spend = 3;
  if (has_real_spend()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->real_spend(), output);
  }
  
  // optional int32 all_printed = 4;
  if (has_all_printed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->all_printed(), output);
  }
  
  // optional int32 user_id = 5;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->user_id(), output);
  }
  
  // optional .isafetec.PRT_REQ_JOB_BY job_req_by = 6;
  if (has_job_req_by()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->job_req_by(), output);
  }
  
  // optional int32 job_id = 7;
  if (has_job_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->job_id(), output);
  }
  
  // optional .isafetec.RechargeFromCard card = 15;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->card(), output);
  }
  
  // optional .isafetec.RechargeFromCardErr err = 16;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->err(), output);
  }
  
  // optional string seed = 17;
  if (has_seed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seed().data(), this->seed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->seed(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrtStationChargeOnEveryPage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->guid(), target);
  }
  
  // optional int32 printed_page_count = 2;
  if (has_printed_page_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->printed_page_count(), target);
  }
  
  // optional double real_spend = 3;
  if (has_real_spend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->real_spend(), target);
  }
  
  // optional int32 all_printed = 4;
  if (has_all_printed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->all_printed(), target);
  }
  
  // optional int32 user_id = 5;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->user_id(), target);
  }
  
  // optional .isafetec.PRT_REQ_JOB_BY job_req_by = 6;
  if (has_job_req_by()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->job_req_by(), target);
  }
  
  // optional int32 job_id = 7;
  if (has_job_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->job_id(), target);
  }
  
  // optional .isafetec.RechargeFromCard card = 15;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->card(), target);
  }
  
  // optional .isafetec.RechargeFromCardErr err = 16;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->err(), target);
  }
  
  // optional string seed = 17;
  if (has_seed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seed().data(), this->seed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->seed(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrtStationChargeOnEveryPage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }
    
    // optional int32 printed_page_count = 2;
    if (has_printed_page_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->printed_page_count());
    }
    
    // optional double real_spend = 3;
    if (has_real_spend()) {
      total_size += 1 + 8;
    }
    
    // optional int32 all_printed = 4;
    if (has_all_printed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->all_printed());
    }
    
    // optional int32 user_id = 5;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }
    
    // optional .isafetec.PRT_REQ_JOB_BY job_req_by = 6;
    if (has_job_req_by()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->job_req_by());
    }
    
    // optional int32 job_id = 7;
    if (has_job_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job_id());
    }
    
    // optional .isafetec.RechargeFromCard card = 15;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->card());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .isafetec.RechargeFromCardErr err = 16;
    if (has_err()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->err());
    }
    
    // optional string seed = 17;
    if (has_seed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seed());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtStationChargeOnEveryPage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtStationChargeOnEveryPage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtStationChargeOnEveryPage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtStationChargeOnEveryPage::MergeFrom(const PrtStationChargeOnEveryPage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_printed_page_count()) {
      set_printed_page_count(from.printed_page_count());
    }
    if (from.has_real_spend()) {
      set_real_spend(from.real_spend());
    }
    if (from.has_all_printed()) {
      set_all_printed(from.all_printed());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_job_req_by()) {
      set_job_req_by(from.job_req_by());
    }
    if (from.has_job_id()) {
      set_job_id(from.job_id());
    }
    if (from.has_card()) {
      mutable_card()->::isafetec::RechargeFromCard::MergeFrom(from.card());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_err()) {
      mutable_err()->::isafetec::RechargeFromCardErr::MergeFrom(from.err());
    }
    if (from.has_seed()) {
      set_seed(from.seed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtStationChargeOnEveryPage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtStationChargeOnEveryPage::CopyFrom(const PrtStationChargeOnEveryPage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtStationChargeOnEveryPage::IsInitialized() const {
  
  return true;
}

void PrtStationChargeOnEveryPage::Swap(PrtStationChargeOnEveryPage* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(printed_page_count_, other->printed_page_count_);
    std::swap(real_spend_, other->real_spend_);
    std::swap(all_printed_, other->all_printed_);
    std::swap(user_id_, other->user_id_);
    std::swap(job_req_by_, other->job_req_by_);
    std::swap(job_id_, other->job_id_);
    std::swap(card_, other->card_);
    std::swap(err_, other->err_);
    std::swap(seed_, other->seed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtStationChargeOnEveryPage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtStationChargeOnEveryPage_descriptor_;
  metadata.reflection = PrtStationChargeOnEveryPage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtStationAlarm::kPrtIdFieldNumber;
const int PrtStationAlarm::kTypeFieldNumber;
const int PrtStationAlarm::kSubjectFieldNumber;
const int PrtStationAlarm::kContentFieldNumber;
#endif  // !_MSC_VER

PrtStationAlarm::PrtStationAlarm()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrtStationAlarm::InitAsDefaultInstance() {
}

PrtStationAlarm::PrtStationAlarm(const PrtStationAlarm& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrtStationAlarm::SharedCtor() {
  _cached_size_ = 0;
  prt_id_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtStationAlarm::~PrtStationAlarm() {
  SharedDtor();
}

void PrtStationAlarm::SharedDtor() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (subject_ != &::google::protobuf::internal::kEmptyString) {
    delete subject_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void PrtStationAlarm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtStationAlarm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtStationAlarm_descriptor_;
}

const PrtStationAlarm& PrtStationAlarm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrtStationAlarm* PrtStationAlarm::default_instance_ = NULL;

PrtStationAlarm* PrtStationAlarm::New() const {
  return new PrtStationAlarm;
}

void PrtStationAlarm::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prt_id_ = 0;
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_subject()) {
      if (subject_ != &::google::protobuf::internal::kEmptyString) {
        subject_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtStationAlarm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 prt_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prt_id_)));
          set_has_prt_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }
      
      // optional string type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_subject;
        break;
      }
      
      // optional string subject = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subject:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subject()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->subject().data(), this->subject().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }
      
      // optional string content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrtStationAlarm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 prt_id = 1;
  if (has_prt_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->prt_id(), output);
  }
  
  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }
  
  // optional string subject = 3;
  if (has_subject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subject().data(), this->subject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->subject(), output);
  }
  
  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->content(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrtStationAlarm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 prt_id = 1;
  if (has_prt_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->prt_id(), target);
  }
  
  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }
  
  // optional string subject = 3;
  if (has_subject()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subject().data(), this->subject().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->subject(), target);
  }
  
  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrtStationAlarm::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 prt_id = 1;
    if (has_prt_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prt_id());
    }
    
    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }
    
    // optional string subject = 3;
    if (has_subject()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subject());
    }
    
    // optional string content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtStationAlarm::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtStationAlarm* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtStationAlarm*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtStationAlarm::MergeFrom(const PrtStationAlarm& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prt_id()) {
      set_prt_id(from.prt_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_subject()) {
      set_subject(from.subject());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtStationAlarm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtStationAlarm::CopyFrom(const PrtStationAlarm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtStationAlarm::IsInitialized() const {
  
  return true;
}

void PrtStationAlarm::Swap(PrtStationAlarm* other) {
  if (other != this) {
    std::swap(prt_id_, other->prt_id_);
    std::swap(type_, other->type_);
    std::swap(subject_, other->subject_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtStationAlarm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtStationAlarm_descriptor_;
  metadata.reflection = PrtStationAlarm_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtChargeToolLogon::kIdFieldNumber;
const int PrtChargeToolLogon::kNameFieldNumber;
const int PrtChargeToolLogon::kPwdFieldNumber;
#endif  // !_MSC_VER

PrtChargeToolLogon::PrtChargeToolLogon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrtChargeToolLogon::InitAsDefaultInstance() {
}

PrtChargeToolLogon::PrtChargeToolLogon(const PrtChargeToolLogon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrtChargeToolLogon::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtChargeToolLogon::~PrtChargeToolLogon() {
  SharedDtor();
}

void PrtChargeToolLogon::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete pwd_;
  }
  if (this != default_instance_) {
  }
}

void PrtChargeToolLogon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtChargeToolLogon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtChargeToolLogon_descriptor_;
}

const PrtChargeToolLogon& PrtChargeToolLogon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrtChargeToolLogon* PrtChargeToolLogon::default_instance_ = NULL;

PrtChargeToolLogon* PrtChargeToolLogon::New() const {
  return new PrtChargeToolLogon;
}

void PrtChargeToolLogon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_pwd()) {
      if (pwd_ != &::google::protobuf::internal::kEmptyString) {
        pwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtChargeToolLogon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pwd;
        break;
      }
      
      // optional string pwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pwd().data(), this->pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrtChargeToolLogon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string pwd = 3;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pwd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrtChargeToolLogon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional string pwd = 3;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pwd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrtChargeToolLogon::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string pwd = 3;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtChargeToolLogon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtChargeToolLogon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtChargeToolLogon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtChargeToolLogon::MergeFrom(const PrtChargeToolLogon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_pwd()) {
      set_pwd(from.pwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtChargeToolLogon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtChargeToolLogon::CopyFrom(const PrtChargeToolLogon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtChargeToolLogon::IsInitialized() const {
  
  return true;
}

void PrtChargeToolLogon::Swap(PrtChargeToolLogon* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(pwd_, other->pwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtChargeToolLogon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtChargeToolLogon_descriptor_;
  metadata.reflection = PrtChargeToolLogon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtChargeToolCheckResult::kIdFieldNumber;
const int PrtChargeToolCheckResult::kNameFieldNumber;
const int PrtChargeToolCheckResult::kPwdFieldNumber;
#endif  // !_MSC_VER

PrtChargeToolCheckResult::PrtChargeToolCheckResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrtChargeToolCheckResult::InitAsDefaultInstance() {
}

PrtChargeToolCheckResult::PrtChargeToolCheckResult(const PrtChargeToolCheckResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrtChargeToolCheckResult::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtChargeToolCheckResult::~PrtChargeToolCheckResult() {
  SharedDtor();
}

void PrtChargeToolCheckResult::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete pwd_;
  }
  if (this != default_instance_) {
  }
}

void PrtChargeToolCheckResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtChargeToolCheckResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtChargeToolCheckResult_descriptor_;
}

const PrtChargeToolCheckResult& PrtChargeToolCheckResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrtChargeToolCheckResult* PrtChargeToolCheckResult::default_instance_ = NULL;

PrtChargeToolCheckResult* PrtChargeToolCheckResult::New() const {
  return new PrtChargeToolCheckResult;
}

void PrtChargeToolCheckResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_pwd()) {
      if (pwd_ != &::google::protobuf::internal::kEmptyString) {
        pwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtChargeToolCheckResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pwd;
        break;
      }
      
      // optional string pwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pwd().data(), this->pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrtChargeToolCheckResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string pwd = 3;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pwd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrtChargeToolCheckResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional string pwd = 3;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pwd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrtChargeToolCheckResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string pwd = 3;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtChargeToolCheckResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtChargeToolCheckResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtChargeToolCheckResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtChargeToolCheckResult::MergeFrom(const PrtChargeToolCheckResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_pwd()) {
      set_pwd(from.pwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtChargeToolCheckResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtChargeToolCheckResult::CopyFrom(const PrtChargeToolCheckResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtChargeToolCheckResult::IsInitialized() const {
  
  return true;
}

void PrtChargeToolCheckResult::Swap(PrtChargeToolCheckResult* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(pwd_, other->pwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtChargeToolCheckResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtChargeToolCheckResult_descriptor_;
  metadata.reflection = PrtChargeToolCheckResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtChargeToolOPLog::kAdminIdFieldNumber;
const int PrtChargeToolOPLog::kAdminNameFieldNumber;
const int PrtChargeToolOPLog::kOpTypeFieldNumber;
const int PrtChargeToolOPLog::kAmountFieldNumber;
const int PrtChargeToolOPLog::kSpecailMoneyFieldNumber;
const int PrtChargeToolOPLog::kCardNoFieldNumber;
const int PrtChargeToolOPLog::kNameFieldNumber;
#endif  // !_MSC_VER

PrtChargeToolOPLog::PrtChargeToolOPLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrtChargeToolOPLog::InitAsDefaultInstance() {
}

PrtChargeToolOPLog::PrtChargeToolOPLog(const PrtChargeToolOPLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrtChargeToolOPLog::SharedCtor() {
  _cached_size_ = 0;
  admin_id_ = 0;
  admin_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  op_type_ = 0;
  amount_ = 0;
  specail_money_ = 0;
  card_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtChargeToolOPLog::~PrtChargeToolOPLog() {
  SharedDtor();
}

void PrtChargeToolOPLog::SharedDtor() {
  if (admin_name_ != &::google::protobuf::internal::kEmptyString) {
    delete admin_name_;
  }
  if (card_no_ != &::google::protobuf::internal::kEmptyString) {
    delete card_no_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PrtChargeToolOPLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtChargeToolOPLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtChargeToolOPLog_descriptor_;
}

const PrtChargeToolOPLog& PrtChargeToolOPLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrtChargeToolOPLog* PrtChargeToolOPLog::default_instance_ = NULL;

PrtChargeToolOPLog* PrtChargeToolOPLog::New() const {
  return new PrtChargeToolOPLog;
}

void PrtChargeToolOPLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    admin_id_ = 0;
    if (has_admin_name()) {
      if (admin_name_ != &::google::protobuf::internal::kEmptyString) {
        admin_name_->clear();
      }
    }
    op_type_ = 0;
    amount_ = 0;
    specail_money_ = 0;
    if (has_card_no()) {
      if (card_no_ != &::google::protobuf::internal::kEmptyString) {
        card_no_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtChargeToolOPLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 admin_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &admin_id_)));
          set_has_admin_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_admin_name;
        break;
      }
      
      // optional string admin_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_admin_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_admin_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->admin_name().data(), this->admin_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_op_type;
        break;
      }
      
      // optional int32 op_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_type_)));
          set_has_op_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_amount;
        break;
      }
      
      // optional double amount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_specail_money;
        break;
      }
      
      // optional double specail_money = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_specail_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &specail_money_)));
          set_has_specail_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_card_no;
        break;
      }
      
      // optional string card_no = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_no()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->card_no().data(), this->card_no().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }
      
      // optional string name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrtChargeToolOPLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 admin_id = 1;
  if (has_admin_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->admin_id(), output);
  }
  
  // optional string admin_name = 2;
  if (has_admin_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->admin_name().data(), this->admin_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->admin_name(), output);
  }
  
  // optional int32 op_type = 3;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->op_type(), output);
  }
  
  // optional double amount = 4;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->amount(), output);
  }
  
  // optional double specail_money = 5;
  if (has_specail_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->specail_money(), output);
  }
  
  // optional string card_no = 6;
  if (has_card_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->card_no().data(), this->card_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->card_no(), output);
  }
  
  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrtChargeToolOPLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 admin_id = 1;
  if (has_admin_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->admin_id(), target);
  }
  
  // optional string admin_name = 2;
  if (has_admin_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->admin_name().data(), this->admin_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->admin_name(), target);
  }
  
  // optional int32 op_type = 3;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->op_type(), target);
  }
  
  // optional double amount = 4;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->amount(), target);
  }
  
  // optional double specail_money = 5;
  if (has_specail_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->specail_money(), target);
  }
  
  // optional string card_no = 6;
  if (has_card_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->card_no().data(), this->card_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->card_no(), target);
  }
  
  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrtChargeToolOPLog::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 admin_id = 1;
    if (has_admin_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->admin_id());
    }
    
    // optional string admin_name = 2;
    if (has_admin_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->admin_name());
    }
    
    // optional int32 op_type = 3;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->op_type());
    }
    
    // optional double amount = 4;
    if (has_amount()) {
      total_size += 1 + 8;
    }
    
    // optional double specail_money = 5;
    if (has_specail_money()) {
      total_size += 1 + 8;
    }
    
    // optional string card_no = 6;
    if (has_card_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->card_no());
    }
    
    // optional string name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtChargeToolOPLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtChargeToolOPLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtChargeToolOPLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtChargeToolOPLog::MergeFrom(const PrtChargeToolOPLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_admin_id()) {
      set_admin_id(from.admin_id());
    }
    if (from.has_admin_name()) {
      set_admin_name(from.admin_name());
    }
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_specail_money()) {
      set_specail_money(from.specail_money());
    }
    if (from.has_card_no()) {
      set_card_no(from.card_no());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtChargeToolOPLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtChargeToolOPLog::CopyFrom(const PrtChargeToolOPLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtChargeToolOPLog::IsInitialized() const {
  
  return true;
}

void PrtChargeToolOPLog::Swap(PrtChargeToolOPLog* other) {
  if (other != this) {
    std::swap(admin_id_, other->admin_id_);
    std::swap(admin_name_, other->admin_name_);
    std::swap(op_type_, other->op_type_);
    std::swap(amount_, other->amount_);
    std::swap(specail_money_, other->specail_money_);
    std::swap(card_no_, other->card_no_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtChargeToolOPLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtChargeToolOPLog_descriptor_;
  metadata.reflection = PrtChargeToolOPLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtUserSelfChargeOPLog::kUserIdFieldNumber;
const int PrtUserSelfChargeOPLog::kUserNameFieldNumber;
const int PrtUserSelfChargeOPLog::kPrtIdFieldNumber;
const int PrtUserSelfChargeOPLog::kOpForFieldNumber;
const int PrtUserSelfChargeOPLog::kReserve1FieldNumber;
const int PrtUserSelfChargeOPLog::kAmountFieldNumber;
const int PrtUserSelfChargeOPLog::kSpecailMoneyFieldNumber;
const int PrtUserSelfChargeOPLog::kCardNoFieldNumber;
const int PrtUserSelfChargeOPLog::kGuidFieldNumber;
const int PrtUserSelfChargeOPLog::kTimeFieldNumber;
#endif  // !_MSC_VER

PrtUserSelfChargeOPLog::PrtUserSelfChargeOPLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrtUserSelfChargeOPLog::InitAsDefaultInstance() {
}

PrtUserSelfChargeOPLog::PrtUserSelfChargeOPLog(const PrtUserSelfChargeOPLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrtUserSelfChargeOPLog::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prt_id_ = 0;
  op_for_ = 0;
  reserve1_ = 0;
  amount_ = 0;
  specail_money_ = 0;
  card_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtUserSelfChargeOPLog::~PrtUserSelfChargeOPLog() {
  SharedDtor();
}

void PrtUserSelfChargeOPLog::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (card_no_ != &::google::protobuf::internal::kEmptyString) {
    delete card_no_;
  }
  if (guid_ != &::google::protobuf::internal::kEmptyString) {
    delete guid_;
  }
  if (this != default_instance_) {
  }
}

void PrtUserSelfChargeOPLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtUserSelfChargeOPLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtUserSelfChargeOPLog_descriptor_;
}

const PrtUserSelfChargeOPLog& PrtUserSelfChargeOPLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrtUserSelfChargeOPLog* PrtUserSelfChargeOPLog::default_instance_ = NULL;

PrtUserSelfChargeOPLog* PrtUserSelfChargeOPLog::New() const {
  return new PrtUserSelfChargeOPLog;
}

void PrtUserSelfChargeOPLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0;
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    prt_id_ = 0;
    op_for_ = 0;
    reserve1_ = 0;
    amount_ = 0;
    specail_money_ = 0;
    if (has_card_no()) {
      if (card_no_ != &::google::protobuf::internal::kEmptyString) {
        card_no_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::kEmptyString) {
        guid_->clear();
      }
    }
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtUserSelfChargeOPLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_name;
        break;
      }
      
      // optional string user_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_prt_id;
        break;
      }
      
      // optional int32 prt_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prt_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prt_id_)));
          set_has_prt_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_op_for;
        break;
      }
      
      // optional int32 op_for = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op_for:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_for_)));
          set_has_op_for();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_reserve1;
        break;
      }
      
      // optional int32 reserve1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reserve1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserve1_)));
          set_has_reserve1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_amount;
        break;
      }
      
      // optional double amount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_specail_money;
        break;
      }
      
      // optional double specail_money = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_specail_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &specail_money_)));
          set_has_specail_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_card_no;
        break;
      }
      
      // optional string card_no = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_no()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->card_no().data(), this->card_no().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_guid;
        break;
      }
      
      // optional string guid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_time;
        break;
      }
      
      // optional double time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrtUserSelfChargeOPLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }
  
  // optional string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user_name(), output);
  }
  
  // optional int32 prt_id = 3;
  if (has_prt_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->prt_id(), output);
  }
  
  // optional int32 op_for = 4;
  if (has_op_for()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->op_for(), output);
  }
  
  // optional int32 reserve1 = 5;
  if (has_reserve1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->reserve1(), output);
  }
  
  // optional double amount = 6;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->amount(), output);
  }
  
  // optional double specail_money = 7;
  if (has_specail_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->specail_money(), output);
  }
  
  // optional string card_no = 8;
  if (has_card_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->card_no().data(), this->card_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->card_no(), output);
  }
  
  // optional string guid = 9;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->guid(), output);
  }
  
  // optional double time = 10;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrtUserSelfChargeOPLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->user_id(), target);
  }
  
  // optional string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_name(), target);
  }
  
  // optional int32 prt_id = 3;
  if (has_prt_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->prt_id(), target);
  }
  
  // optional int32 op_for = 4;
  if (has_op_for()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->op_for(), target);
  }
  
  // optional int32 reserve1 = 5;
  if (has_reserve1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->reserve1(), target);
  }
  
  // optional double amount = 6;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->amount(), target);
  }
  
  // optional double specail_money = 7;
  if (has_specail_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->specail_money(), target);
  }
  
  // optional string card_no = 8;
  if (has_card_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->card_no().data(), this->card_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->card_no(), target);
  }
  
  // optional string guid = 9;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->guid(), target);
  }
  
  // optional double time = 10;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrtUserSelfChargeOPLog::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }
    
    // optional string user_name = 2;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }
    
    // optional int32 prt_id = 3;
    if (has_prt_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prt_id());
    }
    
    // optional int32 op_for = 4;
    if (has_op_for()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->op_for());
    }
    
    // optional int32 reserve1 = 5;
    if (has_reserve1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserve1());
    }
    
    // optional double amount = 6;
    if (has_amount()) {
      total_size += 1 + 8;
    }
    
    // optional double specail_money = 7;
    if (has_specail_money()) {
      total_size += 1 + 8;
    }
    
    // optional string card_no = 8;
    if (has_card_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->card_no());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string guid = 9;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }
    
    // optional double time = 10;
    if (has_time()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtUserSelfChargeOPLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtUserSelfChargeOPLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtUserSelfChargeOPLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtUserSelfChargeOPLog::MergeFrom(const PrtUserSelfChargeOPLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_prt_id()) {
      set_prt_id(from.prt_id());
    }
    if (from.has_op_for()) {
      set_op_for(from.op_for());
    }
    if (from.has_reserve1()) {
      set_reserve1(from.reserve1());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_specail_money()) {
      set_specail_money(from.specail_money());
    }
    if (from.has_card_no()) {
      set_card_no(from.card_no());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtUserSelfChargeOPLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtUserSelfChargeOPLog::CopyFrom(const PrtUserSelfChargeOPLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtUserSelfChargeOPLog::IsInitialized() const {
  
  return true;
}

void PrtUserSelfChargeOPLog::Swap(PrtUserSelfChargeOPLog* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(user_name_, other->user_name_);
    std::swap(prt_id_, other->prt_id_);
    std::swap(op_for_, other->op_for_);
    std::swap(reserve1_, other->reserve1_);
    std::swap(amount_, other->amount_);
    std::swap(specail_money_, other->specail_money_);
    std::swap(card_no_, other->card_no_);
    std::swap(guid_, other->guid_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtUserSelfChargeOPLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtUserSelfChargeOPLog_descriptor_;
  metadata.reflection = PrtUserSelfChargeOPLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtUserSelfChargeOpLogACK::kUserIdFieldNumber;
const int PrtUserSelfChargeOpLogACK::kPrtIdFieldNumber;
const int PrtUserSelfChargeOpLogACK::kResCodeFieldNumber;
const int PrtUserSelfChargeOpLogACK::kOpForFieldNumber;
const int PrtUserSelfChargeOpLogACK::kResFieldNumber;
const int PrtUserSelfChargeOpLogACK::kGuidFieldNumber;
const int PrtUserSelfChargeOpLogACK::kTimeFieldNumber;
#endif  // !_MSC_VER

PrtUserSelfChargeOpLogACK::PrtUserSelfChargeOpLogACK()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrtUserSelfChargeOpLogACK::InitAsDefaultInstance() {
  res_ = const_cast< ::isafetec::PrtStationCheckUserResult*>(&::isafetec::PrtStationCheckUserResult::default_instance());
}

PrtUserSelfChargeOpLogACK::PrtUserSelfChargeOpLogACK(const PrtUserSelfChargeOpLogACK& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrtUserSelfChargeOpLogACK::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0;
  prt_id_ = 0;
  res_code_ = 0;
  op_for_ = 0;
  res_ = NULL;
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtUserSelfChargeOpLogACK::~PrtUserSelfChargeOpLogACK() {
  SharedDtor();
}

void PrtUserSelfChargeOpLogACK::SharedDtor() {
  if (guid_ != &::google::protobuf::internal::kEmptyString) {
    delete guid_;
  }
  if (this != default_instance_) {
    delete res_;
  }
}

void PrtUserSelfChargeOpLogACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtUserSelfChargeOpLogACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtUserSelfChargeOpLogACK_descriptor_;
}

const PrtUserSelfChargeOpLogACK& PrtUserSelfChargeOpLogACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrtUserSelfChargeOpLogACK* PrtUserSelfChargeOpLogACK::default_instance_ = NULL;

PrtUserSelfChargeOpLogACK* PrtUserSelfChargeOpLogACK::New() const {
  return new PrtUserSelfChargeOpLogACK;
}

void PrtUserSelfChargeOpLogACK::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0;
    prt_id_ = 0;
    res_code_ = 0;
    op_for_ = 0;
    if (has_res()) {
      if (res_ != NULL) res_->::isafetec::PrtStationCheckUserResult::Clear();
    }
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::kEmptyString) {
        guid_->clear();
      }
    }
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtUserSelfChargeOpLogACK::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_prt_id;
        break;
      }
      
      // optional int32 prt_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prt_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prt_id_)));
          set_has_prt_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_res_code;
        break;
      }
      
      // optional int32 res_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_res_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &res_code_)));
          set_has_res_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_op_for;
        break;
      }
      
      // optional int32 op_for = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op_for:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_for_)));
          set_has_op_for();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_res;
        break;
      }
      
      // optional .isafetec.PrtStationCheckUserResult res = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_guid;
        break;
      }
      
      // optional string guid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_time;
        break;
      }
      
      // optional double time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrtUserSelfChargeOpLogACK::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }
  
  // optional int32 prt_id = 2;
  if (has_prt_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->prt_id(), output);
  }
  
  // optional int32 res_code = 3;
  if (has_res_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->res_code(), output);
  }
  
  // optional int32 op_for = 4;
  if (has_op_for()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->op_for(), output);
  }
  
  // optional .isafetec.PrtStationCheckUserResult res = 5;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->res(), output);
  }
  
  // optional string guid = 6;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->guid(), output);
  }
  
  // optional double time = 7;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrtUserSelfChargeOpLogACK::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->user_id(), target);
  }
  
  // optional int32 prt_id = 2;
  if (has_prt_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->prt_id(), target);
  }
  
  // optional int32 res_code = 3;
  if (has_res_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->res_code(), target);
  }
  
  // optional int32 op_for = 4;
  if (has_op_for()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->op_for(), target);
  }
  
  // optional .isafetec.PrtStationCheckUserResult res = 5;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->res(), target);
  }
  
  // optional string guid = 6;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->guid(), target);
  }
  
  // optional double time = 7;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrtUserSelfChargeOpLogACK::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }
    
    // optional int32 prt_id = 2;
    if (has_prt_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prt_id());
    }
    
    // optional int32 res_code = 3;
    if (has_res_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->res_code());
    }
    
    // optional int32 op_for = 4;
    if (has_op_for()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->op_for());
    }
    
    // optional .isafetec.PrtStationCheckUserResult res = 5;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->res());
    }
    
    // optional string guid = 6;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }
    
    // optional double time = 7;
    if (has_time()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtUserSelfChargeOpLogACK::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtUserSelfChargeOpLogACK* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtUserSelfChargeOpLogACK*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtUserSelfChargeOpLogACK::MergeFrom(const PrtUserSelfChargeOpLogACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_prt_id()) {
      set_prt_id(from.prt_id());
    }
    if (from.has_res_code()) {
      set_res_code(from.res_code());
    }
    if (from.has_op_for()) {
      set_op_for(from.op_for());
    }
    if (from.has_res()) {
      mutable_res()->::isafetec::PrtStationCheckUserResult::MergeFrom(from.res());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtUserSelfChargeOpLogACK::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtUserSelfChargeOpLogACK::CopyFrom(const PrtUserSelfChargeOpLogACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtUserSelfChargeOpLogACK::IsInitialized() const {
  
  return true;
}

void PrtUserSelfChargeOpLogACK::Swap(PrtUserSelfChargeOpLogACK* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(prt_id_, other->prt_id_);
    std::swap(res_code_, other->res_code_);
    std::swap(op_for_, other->op_for_);
    std::swap(res_, other->res_);
    std::swap(guid_, other->guid_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtUserSelfChargeOpLogACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtUserSelfChargeOpLogACK_descriptor_;
  metadata.reflection = PrtUserSelfChargeOpLogACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtAdminInfo::kIdFieldNumber;
const int PrtAdminInfo::kNameFieldNumber;
const int PrtAdminInfo::kRealnameFieldNumber;
#endif  // !_MSC_VER

PrtAdminInfo::PrtAdminInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrtAdminInfo::InitAsDefaultInstance() {
}

PrtAdminInfo::PrtAdminInfo(const PrtAdminInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrtAdminInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  realname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtAdminInfo::~PrtAdminInfo() {
  SharedDtor();
}

void PrtAdminInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (realname_ != &::google::protobuf::internal::kEmptyString) {
    delete realname_;
  }
  if (this != default_instance_) {
  }
}

void PrtAdminInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtAdminInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtAdminInfo_descriptor_;
}

const PrtAdminInfo& PrtAdminInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrtAdminInfo* PrtAdminInfo::default_instance_ = NULL;

PrtAdminInfo* PrtAdminInfo::New() const {
  return new PrtAdminInfo;
}

void PrtAdminInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_realname()) {
      if (realname_ != &::google::protobuf::internal::kEmptyString) {
        realname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtAdminInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_realname;
        break;
      }
      
      // optional string realname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_realname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_realname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->realname().data(), this->realname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrtAdminInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string realname = 3;
  if (has_realname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->realname().data(), this->realname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->realname(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrtAdminInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional string realname = 3;
  if (has_realname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->realname().data(), this->realname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->realname(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrtAdminInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string realname = 3;
    if (has_realname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->realname());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtAdminInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtAdminInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtAdminInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtAdminInfo::MergeFrom(const PrtAdminInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_realname()) {
      set_realname(from.realname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtAdminInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtAdminInfo::CopyFrom(const PrtAdminInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtAdminInfo::IsInitialized() const {
  
  return true;
}

void PrtAdminInfo::Swap(PrtAdminInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(realname_, other->realname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtAdminInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtAdminInfo_descriptor_;
  metadata.reflection = PrtAdminInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtAdminInfoList::kListFieldNumber;
#endif  // !_MSC_VER

PrtAdminInfoList::PrtAdminInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrtAdminInfoList::InitAsDefaultInstance() {
}

PrtAdminInfoList::PrtAdminInfoList(const PrtAdminInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrtAdminInfoList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtAdminInfoList::~PrtAdminInfoList() {
  SharedDtor();
}

void PrtAdminInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrtAdminInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtAdminInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtAdminInfoList_descriptor_;
}

const PrtAdminInfoList& PrtAdminInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrtAdminInfoList* PrtAdminInfoList::default_instance_ = NULL;

PrtAdminInfoList* PrtAdminInfoList::New() const {
  return new PrtAdminInfoList;
}

void PrtAdminInfoList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtAdminInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .isafetec.PrtAdminInfo list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrtAdminInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .isafetec.PrtAdminInfo list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrtAdminInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .isafetec.PrtAdminInfo list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrtAdminInfoList::ByteSize() const {
  int total_size = 0;
  
  // repeated .isafetec.PrtAdminInfo list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtAdminInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtAdminInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtAdminInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtAdminInfoList::MergeFrom(const PrtAdminInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtAdminInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtAdminInfoList::CopyFrom(const PrtAdminInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtAdminInfoList::IsInitialized() const {
  
  return true;
}

void PrtAdminInfoList::Swap(PrtAdminInfoList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtAdminInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtAdminInfoList_descriptor_;
  metadata.reflection = PrtAdminInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrintDocumentInfo::kEquipIdFieldNumber;
const int PrintDocumentInfo::kEquipHostFieldNumber;
const int PrintDocumentInfo::kWinUserFieldNumber;
const int PrintDocumentInfo::kUserIdFieldNumber;
const int PrintDocumentInfo::kIdFieldNumber;
const int PrintDocumentInfo::kDocNameFieldNumber;
const int PrintDocumentInfo::kPrinterNameFieldNumber;
const int PrintDocumentInfo::kTimeFieldNumber;
const int PrintDocumentInfo::kDocSizeFieldNumber;
const int PrintDocumentInfo::kZipSizeFieldNumber;
const int PrintDocumentInfo::kPathFieldNumber;
const int PrintDocumentInfo::kNameFieldNumber;
const int PrintDocumentInfo::kOrigPathFieldNumber;
#endif  // !_MSC_VER

PrintDocumentInfo::PrintDocumentInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrintDocumentInfo::InitAsDefaultInstance() {
}

PrintDocumentInfo::PrintDocumentInfo(const PrintDocumentInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrintDocumentInfo::SharedCtor() {
  _cached_size_ = 0;
  equip_id_ = 0;
  equip_host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  win_user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_id_ = 0;
  id_ = 0;
  doc_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  printer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = 0;
  doc_size_ = 0;
  zip_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orig_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrintDocumentInfo::~PrintDocumentInfo() {
  SharedDtor();
}

void PrintDocumentInfo::SharedDtor() {
  if (equip_host_ != &::google::protobuf::internal::kEmptyString) {
    delete equip_host_;
  }
  if (win_user_ != &::google::protobuf::internal::kEmptyString) {
    delete win_user_;
  }
  if (doc_name_ != &::google::protobuf::internal::kEmptyString) {
    delete doc_name_;
  }
  if (printer_name_ != &::google::protobuf::internal::kEmptyString) {
    delete printer_name_;
  }
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (orig_path_ != &::google::protobuf::internal::kEmptyString) {
    delete orig_path_;
  }
  if (this != default_instance_) {
  }
}

void PrintDocumentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrintDocumentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrintDocumentInfo_descriptor_;
}

const PrintDocumentInfo& PrintDocumentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrintDocumentInfo* PrintDocumentInfo::default_instance_ = NULL;

PrintDocumentInfo* PrintDocumentInfo::New() const {
  return new PrintDocumentInfo;
}

void PrintDocumentInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equip_id_ = 0;
    if (has_equip_host()) {
      if (equip_host_ != &::google::protobuf::internal::kEmptyString) {
        equip_host_->clear();
      }
    }
    if (has_win_user()) {
      if (win_user_ != &::google::protobuf::internal::kEmptyString) {
        win_user_->clear();
      }
    }
    user_id_ = 0;
    id_ = 0;
    if (has_doc_name()) {
      if (doc_name_ != &::google::protobuf::internal::kEmptyString) {
        doc_name_->clear();
      }
    }
    if (has_printer_name()) {
      if (printer_name_ != &::google::protobuf::internal::kEmptyString) {
        printer_name_->clear();
      }
    }
    time_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    doc_size_ = 0;
    zip_size_ = 0;
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_orig_path()) {
      if (orig_path_ != &::google::protobuf::internal::kEmptyString) {
        orig_path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrintDocumentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 equip_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_id_)));
          set_has_equip_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equip_host;
        break;
      }
      
      // optional string equip_host = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equip_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->equip_host().data(), this->equip_host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_win_user;
        break;
      }
      
      // optional string win_user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_win_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_win_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->win_user().data(), this->win_user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_user_id;
        break;
      }
      
      // optional int32 user_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_id;
        break;
      }
      
      // optional int32 id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_doc_name;
        break;
      }
      
      // optional string doc_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_doc_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_doc_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->doc_name().data(), this->doc_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_printer_name;
        break;
      }
      
      // optional string printer_name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_printer_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_printer_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->printer_name().data(), this->printer_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_time;
        break;
      }
      
      // optional double time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_doc_size;
        break;
      }
      
      // optional int32 doc_size = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_doc_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doc_size_)));
          set_has_doc_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_zip_size;
        break;
      }
      
      // optional int32 zip_size = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zip_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zip_size_)));
          set_has_zip_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_path;
        break;
      }
      
      // optional string path = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_name;
        break;
      }
      
      // optional string name = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_orig_path;
        break;
      }
      
      // optional string orig_path = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orig_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orig_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orig_path().data(), this->orig_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrintDocumentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 equip_id = 1;
  if (has_equip_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->equip_id(), output);
  }
  
  // optional string equip_host = 2;
  if (has_equip_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equip_host().data(), this->equip_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->equip_host(), output);
  }
  
  // optional string win_user = 3;
  if (has_win_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->win_user().data(), this->win_user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->win_user(), output);
  }
  
  // optional int32 user_id = 4;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->user_id(), output);
  }
  
  // optional int32 id = 5;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->id(), output);
  }
  
  // optional string doc_name = 6;
  if (has_doc_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->doc_name().data(), this->doc_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->doc_name(), output);
  }
  
  // optional string printer_name = 7;
  if (has_printer_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->printer_name().data(), this->printer_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->printer_name(), output);
  }
  
  // optional double time = 8;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->time(), output);
  }
  
  // optional int32 doc_size = 9;
  if (has_doc_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->doc_size(), output);
  }
  
  // optional int32 zip_size = 10;
  if (has_zip_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->zip_size(), output);
  }
  
  // optional string path = 11;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->path(), output);
  }
  
  // optional string name = 12;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->name(), output);
  }
  
  // optional string orig_path = 13;
  if (has_orig_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orig_path().data(), this->orig_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->orig_path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrintDocumentInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 equip_id = 1;
  if (has_equip_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->equip_id(), target);
  }
  
  // optional string equip_host = 2;
  if (has_equip_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->equip_host().data(), this->equip_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->equip_host(), target);
  }
  
  // optional string win_user = 3;
  if (has_win_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->win_user().data(), this->win_user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->win_user(), target);
  }
  
  // optional int32 user_id = 4;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->user_id(), target);
  }
  
  // optional int32 id = 5;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->id(), target);
  }
  
  // optional string doc_name = 6;
  if (has_doc_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->doc_name().data(), this->doc_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->doc_name(), target);
  }
  
  // optional string printer_name = 7;
  if (has_printer_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->printer_name().data(), this->printer_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->printer_name(), target);
  }
  
  // optional double time = 8;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->time(), target);
  }
  
  // optional int32 doc_size = 9;
  if (has_doc_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->doc_size(), target);
  }
  
  // optional int32 zip_size = 10;
  if (has_zip_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->zip_size(), target);
  }
  
  // optional string path = 11;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->path(), target);
  }
  
  // optional string name = 12;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->name(), target);
  }
  
  // optional string orig_path = 13;
  if (has_orig_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orig_path().data(), this->orig_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->orig_path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrintDocumentInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 equip_id = 1;
    if (has_equip_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_id());
    }
    
    // optional string equip_host = 2;
    if (has_equip_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equip_host());
    }
    
    // optional string win_user = 3;
    if (has_win_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->win_user());
    }
    
    // optional int32 user_id = 4;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }
    
    // optional int32 id = 5;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string doc_name = 6;
    if (has_doc_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->doc_name());
    }
    
    // optional string printer_name = 7;
    if (has_printer_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->printer_name());
    }
    
    // optional double time = 8;
    if (has_time()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 doc_size = 9;
    if (has_doc_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doc_size());
    }
    
    // optional int32 zip_size = 10;
    if (has_zip_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zip_size());
    }
    
    // optional string path = 11;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
    // optional string name = 12;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string orig_path = 13;
    if (has_orig_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orig_path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrintDocumentInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrintDocumentInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrintDocumentInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrintDocumentInfo::MergeFrom(const PrintDocumentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_id()) {
      set_equip_id(from.equip_id());
    }
    if (from.has_equip_host()) {
      set_equip_host(from.equip_host());
    }
    if (from.has_win_user()) {
      set_win_user(from.win_user());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_doc_name()) {
      set_doc_name(from.doc_name());
    }
    if (from.has_printer_name()) {
      set_printer_name(from.printer_name());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_doc_size()) {
      set_doc_size(from.doc_size());
    }
    if (from.has_zip_size()) {
      set_zip_size(from.zip_size());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_orig_path()) {
      set_orig_path(from.orig_path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrintDocumentInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrintDocumentInfo::CopyFrom(const PrintDocumentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrintDocumentInfo::IsInitialized() const {
  
  return true;
}

void PrintDocumentInfo::Swap(PrintDocumentInfo* other) {
  if (other != this) {
    std::swap(equip_id_, other->equip_id_);
    std::swap(equip_host_, other->equip_host_);
    std::swap(win_user_, other->win_user_);
    std::swap(user_id_, other->user_id_);
    std::swap(id_, other->id_);
    std::swap(doc_name_, other->doc_name_);
    std::swap(printer_name_, other->printer_name_);
    std::swap(time_, other->time_);
    std::swap(doc_size_, other->doc_size_);
    std::swap(zip_size_, other->zip_size_);
    std::swap(path_, other->path_);
    std::swap(name_, other->name_);
    std::swap(orig_path_, other->orig_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrintDocumentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrintDocumentInfo_descriptor_;
  metadata.reflection = PrintDocumentInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FtpConfigInfo::kIpFieldNumber;
const int FtpConfigInfo::kPortFieldNumber;
const int FtpConfigInfo::kDiskPathFieldNumber;
const int FtpConfigInfo::kDirFieldNumber;
const int FtpConfigInfo::kUserFieldNumber;
const int FtpConfigInfo::kPwdFieldNumber;
#endif  // !_MSC_VER

FtpConfigInfo::FtpConfigInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FtpConfigInfo::InitAsDefaultInstance() {
}

FtpConfigInfo::FtpConfigInfo(const FtpConfigInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FtpConfigInfo::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  disk_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FtpConfigInfo::~FtpConfigInfo() {
  SharedDtor();
}

void FtpConfigInfo::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    delete port_;
  }
  if (disk_path_ != &::google::protobuf::internal::kEmptyString) {
    delete disk_path_;
  }
  if (dir_ != &::google::protobuf::internal::kEmptyString) {
    delete dir_;
  }
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete pwd_;
  }
  if (this != default_instance_) {
  }
}

void FtpConfigInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FtpConfigInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FtpConfigInfo_descriptor_;
}

const FtpConfigInfo& FtpConfigInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

FtpConfigInfo* FtpConfigInfo::default_instance_ = NULL;

FtpConfigInfo* FtpConfigInfo::New() const {
  return new FtpConfigInfo;
}

void FtpConfigInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_port()) {
      if (port_ != &::google::protobuf::internal::kEmptyString) {
        port_->clear();
      }
    }
    if (has_disk_path()) {
      if (disk_path_ != &::google::protobuf::internal::kEmptyString) {
        disk_path_->clear();
      }
    }
    if (has_dir()) {
      if (dir_ != &::google::protobuf::internal::kEmptyString) {
        dir_->clear();
      }
    }
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_pwd()) {
      if (pwd_ != &::google::protobuf::internal::kEmptyString) {
        pwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FtpConfigInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_port;
        break;
      }
      
      // optional string port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_port:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->port().data(), this->port().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_disk_path;
        break;
      }
      
      // optional string disk_path = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_disk_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_disk_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->disk_path().data(), this->disk_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_dir;
        break;
      }
      
      // optional string dir = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dir().data(), this->dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_user;
        break;
      }
      
      // optional string user = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pwd;
        break;
      }
      
      // optional string pwd = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pwd().data(), this->pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FtpConfigInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip(), output);
  }
  
  // optional string port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->port(), output);
  }
  
  // optional string disk_path = 3;
  if (has_disk_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disk_path().data(), this->disk_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->disk_path(), output);
  }
  
  // optional string dir = 4;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dir().data(), this->dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->dir(), output);
  }
  
  // optional string user = 5;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->user(), output);
  }
  
  // optional string pwd = 6;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->pwd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FtpConfigInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }
  
  // optional string port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->port(), target);
  }
  
  // optional string disk_path = 3;
  if (has_disk_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->disk_path().data(), this->disk_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->disk_path(), target);
  }
  
  // optional string dir = 4;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dir().data(), this->dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->dir(), target);
  }
  
  // optional string user = 5;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->user(), target);
  }
  
  // optional string pwd = 6;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->pwd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FtpConfigInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // optional string port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->port());
    }
    
    // optional string disk_path = 3;
    if (has_disk_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->disk_path());
    }
    
    // optional string dir = 4;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dir());
    }
    
    // optional string user = 5;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }
    
    // optional string pwd = 6;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FtpConfigInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FtpConfigInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FtpConfigInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FtpConfigInfo::MergeFrom(const FtpConfigInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_disk_path()) {
      set_disk_path(from.disk_path());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_pwd()) {
      set_pwd(from.pwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FtpConfigInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FtpConfigInfo::CopyFrom(const FtpConfigInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FtpConfigInfo::IsInitialized() const {
  
  return true;
}

void FtpConfigInfo::Swap(FtpConfigInfo* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(disk_path_, other->disk_path_);
    std::swap(dir_, other->dir_);
    std::swap(user_, other->user_);
    std::swap(pwd_, other->pwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FtpConfigInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FtpConfigInfo_descriptor_;
  metadata.reflection = FtpConfigInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CFuncPolicy::kUserIDFieldNumber;
const int CFuncPolicy::kPrtIDFieldNumber;
const int CFuncPolicy::kPrintPolicyMaskFieldNumber;
const int CFuncPolicy::kCopyPolicyMaskFieldNumber;
const int CFuncPolicy::kScanPolicyMaskFieldNumber;
const int CFuncPolicy::kFaxPolicyMaskFieldNumber;
#endif  // !_MSC_VER

CFuncPolicy::CFuncPolicy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CFuncPolicy::InitAsDefaultInstance() {
}

CFuncPolicy::CFuncPolicy(const CFuncPolicy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CFuncPolicy::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  prtid_ = 0;
  printpolicymask_ = 0;
  copypolicymask_ = 0;
  scanpolicymask_ = 0;
  faxpolicymask_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CFuncPolicy::~CFuncPolicy() {
  SharedDtor();
}

void CFuncPolicy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CFuncPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CFuncPolicy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CFuncPolicy_descriptor_;
}

const CFuncPolicy& CFuncPolicy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

CFuncPolicy* CFuncPolicy::default_instance_ = NULL;

CFuncPolicy* CFuncPolicy::New() const {
  return new CFuncPolicy;
}

void CFuncPolicy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    prtid_ = 0;
    printpolicymask_ = 0;
    copypolicymask_ = 0;
    scanpolicymask_ = 0;
    faxpolicymask_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CFuncPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 UserID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_PrtID;
        break;
      }
      
      // optional int32 PrtID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PrtID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prtid_)));
          set_has_prtid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_PrintPolicyMask;
        break;
      }
      
      // optional int32 PrintPolicyMask = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PrintPolicyMask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &printpolicymask_)));
          set_has_printpolicymask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_CopyPolicyMask;
        break;
      }
      
      // optional int32 CopyPolicyMask = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CopyPolicyMask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &copypolicymask_)));
          set_has_copypolicymask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ScanPolicyMask;
        break;
      }
      
      // optional int32 ScanPolicyMask = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ScanPolicyMask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scanpolicymask_)));
          set_has_scanpolicymask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_FaxPolicyMask;
        break;
      }
      
      // optional int32 FaxPolicyMask = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FaxPolicyMask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &faxpolicymask_)));
          set_has_faxpolicymask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CFuncPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 UserID = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }
  
  // optional int32 PrtID = 2;
  if (has_prtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->prtid(), output);
  }
  
  // optional int32 PrintPolicyMask = 3;
  if (has_printpolicymask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->printpolicymask(), output);
  }
  
  // optional int32 CopyPolicyMask = 4;
  if (has_copypolicymask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->copypolicymask(), output);
  }
  
  // optional int32 ScanPolicyMask = 5;
  if (has_scanpolicymask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->scanpolicymask(), output);
  }
  
  // optional int32 FaxPolicyMask = 6;
  if (has_faxpolicymask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->faxpolicymask(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CFuncPolicy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 UserID = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }
  
  // optional int32 PrtID = 2;
  if (has_prtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->prtid(), target);
  }
  
  // optional int32 PrintPolicyMask = 3;
  if (has_printpolicymask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->printpolicymask(), target);
  }
  
  // optional int32 CopyPolicyMask = 4;
  if (has_copypolicymask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->copypolicymask(), target);
  }
  
  // optional int32 ScanPolicyMask = 5;
  if (has_scanpolicymask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->scanpolicymask(), target);
  }
  
  // optional int32 FaxPolicyMask = 6;
  if (has_faxpolicymask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->faxpolicymask(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CFuncPolicy::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 UserID = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }
    
    // optional int32 PrtID = 2;
    if (has_prtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prtid());
    }
    
    // optional int32 PrintPolicyMask = 3;
    if (has_printpolicymask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->printpolicymask());
    }
    
    // optional int32 CopyPolicyMask = 4;
    if (has_copypolicymask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->copypolicymask());
    }
    
    // optional int32 ScanPolicyMask = 5;
    if (has_scanpolicymask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scanpolicymask());
    }
    
    // optional int32 FaxPolicyMask = 6;
    if (has_faxpolicymask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->faxpolicymask());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CFuncPolicy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CFuncPolicy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CFuncPolicy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CFuncPolicy::MergeFrom(const CFuncPolicy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_prtid()) {
      set_prtid(from.prtid());
    }
    if (from.has_printpolicymask()) {
      set_printpolicymask(from.printpolicymask());
    }
    if (from.has_copypolicymask()) {
      set_copypolicymask(from.copypolicymask());
    }
    if (from.has_scanpolicymask()) {
      set_scanpolicymask(from.scanpolicymask());
    }
    if (from.has_faxpolicymask()) {
      set_faxpolicymask(from.faxpolicymask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CFuncPolicy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CFuncPolicy::CopyFrom(const CFuncPolicy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFuncPolicy::IsInitialized() const {
  
  return true;
}

void CFuncPolicy::Swap(CFuncPolicy* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(prtid_, other->prtid_);
    std::swap(printpolicymask_, other->printpolicymask_);
    std::swap(copypolicymask_, other->copypolicymask_);
    std::swap(scanpolicymask_, other->scanpolicymask_);
    std::swap(faxpolicymask_, other->faxpolicymask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CFuncPolicy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CFuncPolicy_descriptor_;
  metadata.reflection = CFuncPolicy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtCenterSvr_UserPrintReq::kPrtIdFieldNumber;
const int PrtCenterSvr_UserPrintReq::kPrtNameFieldNumber;
const int PrtCenterSvr_UserPrintReq::kUserNameFieldNumber;
const int PrtCenterSvr_UserPrintReq::kDocNameFieldNumber;
const int PrtCenterSvr_UserPrintReq::kDocIdFieldNumber;
const int PrtCenterSvr_UserPrintReq::kPageTypeFieldNumber;
const int PrtCenterSvr_UserPrintReq::kPageCountFieldNumber;
const int PrtCenterSvr_UserPrintReq::kColorFieldNumber;
const int PrtCenterSvr_UserPrintReq::kJobSizeFieldNumber;
const int PrtCenterSvr_UserPrintReq::kJobIdSqlLiteFieldNumber;
const int PrtCenterSvr_UserPrintReq::kJobidJi2FieldNumber;
const int PrtCenterSvr_UserPrintReq::kPrinternameFieldNumber;
const int PrtCenterSvr_UserPrintReq::kMachinenameFieldNumber;
const int PrtCenterSvr_UserPrintReq::kUsernameFieldNumber;
const int PrtCenterSvr_UserPrintReq::kDoucmentFieldNumber;
const int PrtCenterSvr_UserPrintReq::kNotifynameFieldNumber;
const int PrtCenterSvr_UserPrintReq::kDatatypeFieldNumber;
const int PrtCenterSvr_UserPrintReq::kParamentersFieldNumber;
const int PrtCenterSvr_UserPrintReq::kDriverNameFieldNumber;
const int PrtCenterSvr_UserPrintReq::kDeviceModeFieldNumber;
const int PrtCenterSvr_UserPrintReq::kPstatusFieldNumber;
const int PrtCenterSvr_UserPrintReq::kStatusFieldNumber;
const int PrtCenterSvr_UserPrintReq::kPriorityFieldNumber;
const int PrtCenterSvr_UserPrintReq::kPositionFieldNumber;
const int PrtCenterSvr_UserPrintReq::kStarttimeFieldNumber;
const int PrtCenterSvr_UserPrintReq::kUntiltimeFieldNumber;
const int PrtCenterSvr_UserPrintReq::kTotalpagesFieldNumber;
const int PrtCenterSvr_UserPrintReq::kSizeFieldNumber;
const int PrtCenterSvr_UserPrintReq::kSubmittedFieldNumber;
const int PrtCenterSvr_UserPrintReq::kTimeFieldNumber;
const int PrtCenterSvr_UserPrintReq::kPagesprintedFieldNumber;
const int PrtCenterSvr_UserPrintReq::kSplPathFieldNumber;
const int PrtCenterSvr_UserPrintReq::kRetUserIdFieldNumber;
const int PrtCenterSvr_UserPrintReq::kRetAckTypeFieldNumber;
const int PrtCenterSvr_UserPrintReq::kPaperSizeFieldNumber;
const int PrtCenterSvr_UserPrintReq::kDmCopiesFieldNumber;
const int PrtCenterSvr_UserPrintReq::kDmOrientationFieldNumber;
const int PrtCenterSvr_UserPrintReq::kDoublePrintFieldNumber;
const int PrtCenterSvr_UserPrintReq::kSubmitTimeFieldNumber;
#endif  // !_MSC_VER

PrtCenterSvr_UserPrintReq::PrtCenterSvr_UserPrintReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrtCenterSvr_UserPrintReq::InitAsDefaultInstance() {
}

PrtCenterSvr_UserPrintReq::PrtCenterSvr_UserPrintReq(const PrtCenterSvr_UserPrintReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrtCenterSvr_UserPrintReq::SharedCtor() {
  _cached_size_ = 0;
  prt_id_ = 0;
  prt_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  doc_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  doc_id_ = 0;
  page_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  page_count_ = 0;
  color_ = 0;
  job_size_ = 0;
  job_id_sqllite_ = 0;
  jobid_ji2_ = 0;
  printername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  machinename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  doucment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  notifyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  datatype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  paramenters_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  driver_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_mode_ = 0;
  pstatus_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0;
  priority_ = 0;
  position_ = 0;
  starttime_ = 0;
  untiltime_ = 0;
  totalpages_ = 0;
  size_ = 0;
  submitted_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = 0;
  pagesprinted_ = 0;
  spl_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ret_user_id_ = 0;
  ret_ack_type_ = 0;
  paper_size_ = 0;
  dm_copies_ = 0;
  dm_orientation_ = 0;
  double_print_ = 0;
  submit_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtCenterSvr_UserPrintReq::~PrtCenterSvr_UserPrintReq() {
  SharedDtor();
}

void PrtCenterSvr_UserPrintReq::SharedDtor() {
  if (prt_name_ != &::google::protobuf::internal::kEmptyString) {
    delete prt_name_;
  }
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (doc_name_ != &::google::protobuf::internal::kEmptyString) {
    delete doc_name_;
  }
  if (page_type_ != &::google::protobuf::internal::kEmptyString) {
    delete page_type_;
  }
  if (printername_ != &::google::protobuf::internal::kEmptyString) {
    delete printername_;
  }
  if (machinename_ != &::google::protobuf::internal::kEmptyString) {
    delete machinename_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (doucment_ != &::google::protobuf::internal::kEmptyString) {
    delete doucment_;
  }
  if (notifyname_ != &::google::protobuf::internal::kEmptyString) {
    delete notifyname_;
  }
  if (datatype_ != &::google::protobuf::internal::kEmptyString) {
    delete datatype_;
  }
  if (paramenters_ != &::google::protobuf::internal::kEmptyString) {
    delete paramenters_;
  }
  if (driver_name_ != &::google::protobuf::internal::kEmptyString) {
    delete driver_name_;
  }
  if (pstatus_ != &::google::protobuf::internal::kEmptyString) {
    delete pstatus_;
  }
  if (submitted_ != &::google::protobuf::internal::kEmptyString) {
    delete submitted_;
  }
  if (spl_path_ != &::google::protobuf::internal::kEmptyString) {
    delete spl_path_;
  }
  if (this != default_instance_) {
  }
}

void PrtCenterSvr_UserPrintReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtCenterSvr_UserPrintReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtCenterSvr_UserPrintReq_descriptor_;
}

const PrtCenterSvr_UserPrintReq& PrtCenterSvr_UserPrintReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrtCenterSvr_UserPrintReq* PrtCenterSvr_UserPrintReq::default_instance_ = NULL;

PrtCenterSvr_UserPrintReq* PrtCenterSvr_UserPrintReq::New() const {
  return new PrtCenterSvr_UserPrintReq;
}

void PrtCenterSvr_UserPrintReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prt_id_ = 0;
    if (has_prt_name()) {
      if (prt_name_ != &::google::protobuf::internal::kEmptyString) {
        prt_name_->clear();
      }
    }
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    if (has_doc_name()) {
      if (doc_name_ != &::google::protobuf::internal::kEmptyString) {
        doc_name_->clear();
      }
    }
    doc_id_ = 0;
    if (has_page_type()) {
      if (page_type_ != &::google::protobuf::internal::kEmptyString) {
        page_type_->clear();
      }
    }
    page_count_ = 0;
    color_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    job_size_ = 0;
    job_id_sqllite_ = 0;
    jobid_ji2_ = 0;
    if (has_printername()) {
      if (printername_ != &::google::protobuf::internal::kEmptyString) {
        printername_->clear();
      }
    }
    if (has_machinename()) {
      if (machinename_ != &::google::protobuf::internal::kEmptyString) {
        machinename_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_doucment()) {
      if (doucment_ != &::google::protobuf::internal::kEmptyString) {
        doucment_->clear();
      }
    }
    if (has_notifyname()) {
      if (notifyname_ != &::google::protobuf::internal::kEmptyString) {
        notifyname_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_datatype()) {
      if (datatype_ != &::google::protobuf::internal::kEmptyString) {
        datatype_->clear();
      }
    }
    if (has_paramenters()) {
      if (paramenters_ != &::google::protobuf::internal::kEmptyString) {
        paramenters_->clear();
      }
    }
    if (has_driver_name()) {
      if (driver_name_ != &::google::protobuf::internal::kEmptyString) {
        driver_name_->clear();
      }
    }
    device_mode_ = 0;
    if (has_pstatus()) {
      if (pstatus_ != &::google::protobuf::internal::kEmptyString) {
        pstatus_->clear();
      }
    }
    status_ = 0;
    priority_ = 0;
    position_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    starttime_ = 0;
    untiltime_ = 0;
    totalpages_ = 0;
    size_ = 0;
    if (has_submitted()) {
      if (submitted_ != &::google::protobuf::internal::kEmptyString) {
        submitted_->clear();
      }
    }
    time_ = 0;
    pagesprinted_ = 0;
    if (has_spl_path()) {
      if (spl_path_ != &::google::protobuf::internal::kEmptyString) {
        spl_path_->clear();
      }
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    ret_user_id_ = 0;
    ret_ack_type_ = 0;
    paper_size_ = 0;
    dm_copies_ = 0;
    dm_orientation_ = 0;
    double_print_ = 0;
    submit_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtCenterSvr_UserPrintReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 prt_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prt_id_)));
          set_has_prt_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_prt_name;
        break;
      }
      
      // optional string prt_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prt_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prt_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->prt_name().data(), this->prt_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user_name;
        break;
      }
      
      // optional string user_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_doc_name;
        break;
      }
      
      // optional string doc_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_doc_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_doc_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->doc_name().data(), this->doc_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_doc_id;
        break;
      }
      
      // optional int32 doc_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_doc_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doc_id_)));
          set_has_doc_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_page_type;
        break;
      }
      
      // optional string page_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_page_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->page_type().data(), this->page_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_page_count;
        break;
      }
      
      // optional int32 page_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_count_)));
          set_has_page_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_color;
        break;
      }
      
      // optional int32 color = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_job_size;
        break;
      }
      
      // optional int32 job_size = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_size_)));
          set_has_job_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_job_id_SqlLite;
        break;
      }
      
      // optional int32 job_id_SqlLite = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job_id_SqlLite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_id_sqllite_)));
          set_has_job_id_sqllite();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_jobid_ji2;
        break;
      }
      
      // optional int32 jobid_ji2 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jobid_ji2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jobid_ji2_)));
          set_has_jobid_ji2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_printername;
        break;
      }
      
      // optional string printername = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_printername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_printername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->printername().data(), this->printername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_machinename;
        break;
      }
      
      // optional string machinename = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machinename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machinename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machinename().data(), this->machinename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_username;
        break;
      }
      
      // optional string username = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_doucment;
        break;
      }
      
      // optional string doucment = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_doucment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_doucment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->doucment().data(), this->doucment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_notifyname;
        break;
      }
      
      // optional string notifyname = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notifyname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notifyname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notifyname().data(), this->notifyname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_datatype;
        break;
      }
      
      // optional string datatype = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datatype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datatype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->datatype().data(), this->datatype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_paramenters;
        break;
      }
      
      // optional string paramenters = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_paramenters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_paramenters()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->paramenters().data(), this->paramenters().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_driver_name;
        break;
      }
      
      // optional string driver_name = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_driver_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_driver_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->driver_name().data(), this->driver_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_device_mode;
        break;
      }
      
      // optional int32 device_mode = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_device_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &device_mode_)));
          set_has_device_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_pstatus;
        break;
      }
      
      // optional string pstatus = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pstatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pstatus()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pstatus().data(), this->pstatus().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_status;
        break;
      }
      
      // optional int32 status = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_priority;
        break;
      }
      
      // optional int32 priority = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_position;
        break;
      }
      
      // optional int32 position = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_starttime;
        break;
      }
      
      // optional int32 starttime = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_untiltime;
        break;
      }
      
      // optional int32 untiltime = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_untiltime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &untiltime_)));
          set_has_untiltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_totalpages;
        break;
      }
      
      // optional int32 totalpages = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalpages:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalpages_)));
          set_has_totalpages();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_size;
        break;
      }
      
      // optional int32 size = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_submitted;
        break;
      }
      
      // optional string submitted = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_submitted:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_submitted()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->submitted().data(), this->submitted().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_time;
        break;
      }
      
      // optional int32 time = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_pagesprinted;
        break;
      }
      
      // optional int32 pagesprinted = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pagesprinted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pagesprinted_)));
          set_has_pagesprinted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_spl_path;
        break;
      }
      
      // optional string spl_path = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spl_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spl_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->spl_path().data(), this->spl_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_ret_user_id;
        break;
      }
      
      // optional int32 ret_user_id = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_user_id_)));
          set_has_ret_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_ret_ack_type;
        break;
      }
      
      // optional int32 ret_ack_type = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret_ack_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_ack_type_)));
          set_has_ret_ack_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_paper_size;
        break;
      }
      
      // optional int32 paper_size = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paper_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paper_size_)));
          set_has_paper_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_dm_copies;
        break;
      }
      
      // optional int32 dm_copies = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dm_copies:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dm_copies_)));
          set_has_dm_copies();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_dm_Orientation;
        break;
      }
      
      // optional int32 dm_Orientation = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dm_Orientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dm_orientation_)));
          set_has_dm_orientation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(424)) goto parse_double_print;
        break;
      }
      
      // optional int32 double_print = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_double_print:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &double_print_)));
          set_has_double_print();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(433)) goto parse_submit_time;
        break;
      }
      
      // optional double submit_time = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_submit_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &submit_time_)));
          set_has_submit_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrtCenterSvr_UserPrintReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 prt_id = 1;
  if (has_prt_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->prt_id(), output);
  }
  
  // optional string prt_name = 2;
  if (has_prt_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prt_name().data(), this->prt_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->prt_name(), output);
  }
  
  // optional string user_name = 3;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user_name(), output);
  }
  
  // optional string doc_name = 4;
  if (has_doc_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->doc_name().data(), this->doc_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->doc_name(), output);
  }
  
  // optional int32 doc_id = 5;
  if (has_doc_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->doc_id(), output);
  }
  
  // optional string page_type = 6;
  if (has_page_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page_type().data(), this->page_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->page_type(), output);
  }
  
  // optional int32 page_count = 7;
  if (has_page_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->page_count(), output);
  }
  
  // optional int32 color = 8;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->color(), output);
  }
  
  // optional int32 job_size = 9;
  if (has_job_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->job_size(), output);
  }
  
  // optional int32 job_id_SqlLite = 10;
  if (has_job_id_sqllite()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->job_id_sqllite(), output);
  }
  
  // optional int32 jobid_ji2 = 11;
  if (has_jobid_ji2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->jobid_ji2(), output);
  }
  
  // optional string printername = 12;
  if (has_printername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->printername().data(), this->printername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->printername(), output);
  }
  
  // optional string machinename = 13;
  if (has_machinename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machinename().data(), this->machinename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->machinename(), output);
  }
  
  // optional string username = 14;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->username(), output);
  }
  
  // optional string doucment = 15;
  if (has_doucment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->doucment().data(), this->doucment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->doucment(), output);
  }
  
  // optional string notifyname = 16;
  if (has_notifyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notifyname().data(), this->notifyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->notifyname(), output);
  }
  
  // optional string datatype = 17;
  if (has_datatype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datatype().data(), this->datatype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->datatype(), output);
  }
  
  // optional string paramenters = 18;
  if (has_paramenters()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paramenters().data(), this->paramenters().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->paramenters(), output);
  }
  
  // optional string driver_name = 19;
  if (has_driver_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->driver_name().data(), this->driver_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->driver_name(), output);
  }
  
  // optional int32 device_mode = 20;
  if (has_device_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->device_mode(), output);
  }
  
  // optional string pstatus = 21;
  if (has_pstatus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pstatus().data(), this->pstatus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->pstatus(), output);
  }
  
  // optional int32 status = 22;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->status(), output);
  }
  
  // optional int32 priority = 23;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->priority(), output);
  }
  
  // optional int32 position = 24;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->position(), output);
  }
  
  // optional int32 starttime = 25;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->starttime(), output);
  }
  
  // optional int32 untiltime = 26;
  if (has_untiltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->untiltime(), output);
  }
  
  // optional int32 totalpages = 27;
  if (has_totalpages()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->totalpages(), output);
  }
  
  // optional int32 size = 28;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->size(), output);
  }
  
  // optional string submitted = 29;
  if (has_submitted()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->submitted().data(), this->submitted().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      29, this->submitted(), output);
  }
  
  // optional int32 time = 30;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->time(), output);
  }
  
  // optional int32 pagesprinted = 31;
  if (has_pagesprinted()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->pagesprinted(), output);
  }
  
  // optional string spl_path = 32;
  if (has_spl_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spl_path().data(), this->spl_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      32, this->spl_path(), output);
  }
  
  // optional int32 ret_user_id = 33;
  if (has_ret_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->ret_user_id(), output);
  }
  
  // optional int32 ret_ack_type = 34;
  if (has_ret_ack_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->ret_ack_type(), output);
  }
  
  // optional int32 paper_size = 50;
  if (has_paper_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->paper_size(), output);
  }
  
  // optional int32 dm_copies = 51;
  if (has_dm_copies()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->dm_copies(), output);
  }
  
  // optional int32 dm_Orientation = 52;
  if (has_dm_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->dm_orientation(), output);
  }
  
  // optional int32 double_print = 53;
  if (has_double_print()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(53, this->double_print(), output);
  }
  
  // optional double submit_time = 54;
  if (has_submit_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(54, this->submit_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrtCenterSvr_UserPrintReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 prt_id = 1;
  if (has_prt_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->prt_id(), target);
  }
  
  // optional string prt_name = 2;
  if (has_prt_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prt_name().data(), this->prt_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->prt_name(), target);
  }
  
  // optional string user_name = 3;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_name(), target);
  }
  
  // optional string doc_name = 4;
  if (has_doc_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->doc_name().data(), this->doc_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->doc_name(), target);
  }
  
  // optional int32 doc_id = 5;
  if (has_doc_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->doc_id(), target);
  }
  
  // optional string page_type = 6;
  if (has_page_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page_type().data(), this->page_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->page_type(), target);
  }
  
  // optional int32 page_count = 7;
  if (has_page_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->page_count(), target);
  }
  
  // optional int32 color = 8;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->color(), target);
  }
  
  // optional int32 job_size = 9;
  if (has_job_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->job_size(), target);
  }
  
  // optional int32 job_id_SqlLite = 10;
  if (has_job_id_sqllite()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->job_id_sqllite(), target);
  }
  
  // optional int32 jobid_ji2 = 11;
  if (has_jobid_ji2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->jobid_ji2(), target);
  }
  
  // optional string printername = 12;
  if (has_printername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->printername().data(), this->printername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->printername(), target);
  }
  
  // optional string machinename = 13;
  if (has_machinename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machinename().data(), this->machinename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->machinename(), target);
  }
  
  // optional string username = 14;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->username(), target);
  }
  
  // optional string doucment = 15;
  if (has_doucment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->doucment().data(), this->doucment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->doucment(), target);
  }
  
  // optional string notifyname = 16;
  if (has_notifyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notifyname().data(), this->notifyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->notifyname(), target);
  }
  
  // optional string datatype = 17;
  if (has_datatype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datatype().data(), this->datatype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->datatype(), target);
  }
  
  // optional string paramenters = 18;
  if (has_paramenters()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paramenters().data(), this->paramenters().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->paramenters(), target);
  }
  
  // optional string driver_name = 19;
  if (has_driver_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->driver_name().data(), this->driver_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->driver_name(), target);
  }
  
  // optional int32 device_mode = 20;
  if (has_device_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->device_mode(), target);
  }
  
  // optional string pstatus = 21;
  if (has_pstatus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pstatus().data(), this->pstatus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->pstatus(), target);
  }
  
  // optional int32 status = 22;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->status(), target);
  }
  
  // optional int32 priority = 23;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->priority(), target);
  }
  
  // optional int32 position = 24;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->position(), target);
  }
  
  // optional int32 starttime = 25;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->starttime(), target);
  }
  
  // optional int32 untiltime = 26;
  if (has_untiltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->untiltime(), target);
  }
  
  // optional int32 totalpages = 27;
  if (has_totalpages()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->totalpages(), target);
  }
  
  // optional int32 size = 28;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->size(), target);
  }
  
  // optional string submitted = 29;
  if (has_submitted()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->submitted().data(), this->submitted().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->submitted(), target);
  }
  
  // optional int32 time = 30;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->time(), target);
  }
  
  // optional int32 pagesprinted = 31;
  if (has_pagesprinted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->pagesprinted(), target);
  }
  
  // optional string spl_path = 32;
  if (has_spl_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spl_path().data(), this->spl_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->spl_path(), target);
  }
  
  // optional int32 ret_user_id = 33;
  if (has_ret_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->ret_user_id(), target);
  }
  
  // optional int32 ret_ack_type = 34;
  if (has_ret_ack_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->ret_ack_type(), target);
  }
  
  // optional int32 paper_size = 50;
  if (has_paper_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->paper_size(), target);
  }
  
  // optional int32 dm_copies = 51;
  if (has_dm_copies()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->dm_copies(), target);
  }
  
  // optional int32 dm_Orientation = 52;
  if (has_dm_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(52, this->dm_orientation(), target);
  }
  
  // optional int32 double_print = 53;
  if (has_double_print()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(53, this->double_print(), target);
  }
  
  // optional double submit_time = 54;
  if (has_submit_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(54, this->submit_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrtCenterSvr_UserPrintReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 prt_id = 1;
    if (has_prt_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prt_id());
    }
    
    // optional string prt_name = 2;
    if (has_prt_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prt_name());
    }
    
    // optional string user_name = 3;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }
    
    // optional string doc_name = 4;
    if (has_doc_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->doc_name());
    }
    
    // optional int32 doc_id = 5;
    if (has_doc_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doc_id());
    }
    
    // optional string page_type = 6;
    if (has_page_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->page_type());
    }
    
    // optional int32 page_count = 7;
    if (has_page_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page_count());
    }
    
    // optional int32 color = 8;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 job_size = 9;
    if (has_job_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job_size());
    }
    
    // optional int32 job_id_SqlLite = 10;
    if (has_job_id_sqllite()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job_id_sqllite());
    }
    
    // optional int32 jobid_ji2 = 11;
    if (has_jobid_ji2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jobid_ji2());
    }
    
    // optional string printername = 12;
    if (has_printername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->printername());
    }
    
    // optional string machinename = 13;
    if (has_machinename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machinename());
    }
    
    // optional string username = 14;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // optional string doucment = 15;
    if (has_doucment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->doucment());
    }
    
    // optional string notifyname = 16;
    if (has_notifyname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notifyname());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string datatype = 17;
    if (has_datatype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datatype());
    }
    
    // optional string paramenters = 18;
    if (has_paramenters()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->paramenters());
    }
    
    // optional string driver_name = 19;
    if (has_driver_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->driver_name());
    }
    
    // optional int32 device_mode = 20;
    if (has_device_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->device_mode());
    }
    
    // optional string pstatus = 21;
    if (has_pstatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pstatus());
    }
    
    // optional int32 status = 22;
    if (has_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // optional int32 priority = 23;
    if (has_priority()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priority());
    }
    
    // optional int32 position = 24;
    if (has_position()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 starttime = 25;
    if (has_starttime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starttime());
    }
    
    // optional int32 untiltime = 26;
    if (has_untiltime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->untiltime());
    }
    
    // optional int32 totalpages = 27;
    if (has_totalpages()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalpages());
    }
    
    // optional int32 size = 28;
    if (has_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }
    
    // optional string submitted = 29;
    if (has_submitted()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->submitted());
    }
    
    // optional int32 time = 30;
    if (has_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
    // optional int32 pagesprinted = 31;
    if (has_pagesprinted()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pagesprinted());
    }
    
    // optional string spl_path = 32;
    if (has_spl_path()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->spl_path());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 ret_user_id = 33;
    if (has_ret_user_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_user_id());
    }
    
    // optional int32 ret_ack_type = 34;
    if (has_ret_ack_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_ack_type());
    }
    
    // optional int32 paper_size = 50;
    if (has_paper_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->paper_size());
    }
    
    // optional int32 dm_copies = 51;
    if (has_dm_copies()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dm_copies());
    }
    
    // optional int32 dm_Orientation = 52;
    if (has_dm_orientation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dm_orientation());
    }
    
    // optional int32 double_print = 53;
    if (has_double_print()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->double_print());
    }
    
    // optional double submit_time = 54;
    if (has_submit_time()) {
      total_size += 2 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtCenterSvr_UserPrintReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtCenterSvr_UserPrintReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtCenterSvr_UserPrintReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtCenterSvr_UserPrintReq::MergeFrom(const PrtCenterSvr_UserPrintReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prt_id()) {
      set_prt_id(from.prt_id());
    }
    if (from.has_prt_name()) {
      set_prt_name(from.prt_name());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_doc_name()) {
      set_doc_name(from.doc_name());
    }
    if (from.has_doc_id()) {
      set_doc_id(from.doc_id());
    }
    if (from.has_page_type()) {
      set_page_type(from.page_type());
    }
    if (from.has_page_count()) {
      set_page_count(from.page_count());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_job_size()) {
      set_job_size(from.job_size());
    }
    if (from.has_job_id_sqllite()) {
      set_job_id_sqllite(from.job_id_sqllite());
    }
    if (from.has_jobid_ji2()) {
      set_jobid_ji2(from.jobid_ji2());
    }
    if (from.has_printername()) {
      set_printername(from.printername());
    }
    if (from.has_machinename()) {
      set_machinename(from.machinename());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_doucment()) {
      set_doucment(from.doucment());
    }
    if (from.has_notifyname()) {
      set_notifyname(from.notifyname());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_datatype()) {
      set_datatype(from.datatype());
    }
    if (from.has_paramenters()) {
      set_paramenters(from.paramenters());
    }
    if (from.has_driver_name()) {
      set_driver_name(from.driver_name());
    }
    if (from.has_device_mode()) {
      set_device_mode(from.device_mode());
    }
    if (from.has_pstatus()) {
      set_pstatus(from.pstatus());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_untiltime()) {
      set_untiltime(from.untiltime());
    }
    if (from.has_totalpages()) {
      set_totalpages(from.totalpages());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_submitted()) {
      set_submitted(from.submitted());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_pagesprinted()) {
      set_pagesprinted(from.pagesprinted());
    }
    if (from.has_spl_path()) {
      set_spl_path(from.spl_path());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_ret_user_id()) {
      set_ret_user_id(from.ret_user_id());
    }
    if (from.has_ret_ack_type()) {
      set_ret_ack_type(from.ret_ack_type());
    }
    if (from.has_paper_size()) {
      set_paper_size(from.paper_size());
    }
    if (from.has_dm_copies()) {
      set_dm_copies(from.dm_copies());
    }
    if (from.has_dm_orientation()) {
      set_dm_orientation(from.dm_orientation());
    }
    if (from.has_double_print()) {
      set_double_print(from.double_print());
    }
    if (from.has_submit_time()) {
      set_submit_time(from.submit_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtCenterSvr_UserPrintReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtCenterSvr_UserPrintReq::CopyFrom(const PrtCenterSvr_UserPrintReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtCenterSvr_UserPrintReq::IsInitialized() const {
  
  return true;
}

void PrtCenterSvr_UserPrintReq::Swap(PrtCenterSvr_UserPrintReq* other) {
  if (other != this) {
    std::swap(prt_id_, other->prt_id_);
    std::swap(prt_name_, other->prt_name_);
    std::swap(user_name_, other->user_name_);
    std::swap(doc_name_, other->doc_name_);
    std::swap(doc_id_, other->doc_id_);
    std::swap(page_type_, other->page_type_);
    std::swap(page_count_, other->page_count_);
    std::swap(color_, other->color_);
    std::swap(job_size_, other->job_size_);
    std::swap(job_id_sqllite_, other->job_id_sqllite_);
    std::swap(jobid_ji2_, other->jobid_ji2_);
    std::swap(printername_, other->printername_);
    std::swap(machinename_, other->machinename_);
    std::swap(username_, other->username_);
    std::swap(doucment_, other->doucment_);
    std::swap(notifyname_, other->notifyname_);
    std::swap(datatype_, other->datatype_);
    std::swap(paramenters_, other->paramenters_);
    std::swap(driver_name_, other->driver_name_);
    std::swap(device_mode_, other->device_mode_);
    std::swap(pstatus_, other->pstatus_);
    std::swap(status_, other->status_);
    std::swap(priority_, other->priority_);
    std::swap(position_, other->position_);
    std::swap(starttime_, other->starttime_);
    std::swap(untiltime_, other->untiltime_);
    std::swap(totalpages_, other->totalpages_);
    std::swap(size_, other->size_);
    std::swap(submitted_, other->submitted_);
    std::swap(time_, other->time_);
    std::swap(pagesprinted_, other->pagesprinted_);
    std::swap(spl_path_, other->spl_path_);
    std::swap(ret_user_id_, other->ret_user_id_);
    std::swap(ret_ack_type_, other->ret_ack_type_);
    std::swap(paper_size_, other->paper_size_);
    std::swap(dm_copies_, other->dm_copies_);
    std::swap(dm_orientation_, other->dm_orientation_);
    std::swap(double_print_, other->double_print_);
    std::swap(submit_time_, other->submit_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtCenterSvr_UserPrintReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtCenterSvr_UserPrintReq_descriptor_;
  metadata.reflection = PrtCenterSvr_UserPrintReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AdjustPrintCountInfo::kUseridFieldNumber;
const int AdjustPrintCountInfo::kAccountidFieldNumber;
const int AdjustPrintCountInfo::kShouldprintedcountFieldNumber;
const int AdjustPrintCountInfo::kPrintedcountFieldNumber;
const int AdjustPrintCountInfo::kPrinteridFieldNumber;
const int AdjustPrintCountInfo::kOriprintjobFieldNumber;
const int AdjustPrintCountInfo::kShouldspendFieldNumber;
const int AdjustPrintCountInfo::kPrintedspendFieldNumber;
const int AdjustPrintCountInfo::kJobidFieldNumber;
#endif  // !_MSC_VER

AdjustPrintCountInfo::AdjustPrintCountInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AdjustPrintCountInfo::InitAsDefaultInstance() {
  oriprintjob_ = const_cast< ::isafetec::PrtSationReqPrintJob*>(&::isafetec::PrtSationReqPrintJob::default_instance());
}

AdjustPrintCountInfo::AdjustPrintCountInfo(const AdjustPrintCountInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AdjustPrintCountInfo::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  accountid_ = 0;
  shouldprintedcount_ = 0;
  printedcount_ = 0;
  printerid_ = 0;
  oriprintjob_ = NULL;
  shouldspend_ = 0;
  printedspend_ = 0;
  jobid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdjustPrintCountInfo::~AdjustPrintCountInfo() {
  SharedDtor();
}

void AdjustPrintCountInfo::SharedDtor() {
  if (this != default_instance_) {
    delete oriprintjob_;
  }
}

void AdjustPrintCountInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdjustPrintCountInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdjustPrintCountInfo_descriptor_;
}

const AdjustPrintCountInfo& AdjustPrintCountInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

AdjustPrintCountInfo* AdjustPrintCountInfo::default_instance_ = NULL;

AdjustPrintCountInfo* AdjustPrintCountInfo::New() const {
  return new AdjustPrintCountInfo;
}

void AdjustPrintCountInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    accountid_ = 0;
    shouldprintedcount_ = 0;
    printedcount_ = 0;
    printerid_ = 0;
    if (has_oriprintjob()) {
      if (oriprintjob_ != NULL) oriprintjob_->::isafetec::PrtSationReqPrintJob::Clear();
    }
    shouldspend_ = 0;
    printedspend_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    jobid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdjustPrintCountInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_accountid;
        break;
      }
      
      // optional int32 accountid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accountid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_shouldprintedcount;
        break;
      }
      
      // optional int32 shouldprintedcount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shouldprintedcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shouldprintedcount_)));
          set_has_shouldprintedcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_printedcount;
        break;
      }
      
      // optional int32 printedcount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_printedcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &printedcount_)));
          set_has_printedcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_printerid;
        break;
      }
      
      // optional int32 printerid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_printerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &printerid_)));
          set_has_printerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_oriprintjob;
        break;
      }
      
      // optional .isafetec.PrtSationReqPrintJob oriprintjob = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oriprintjob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oriprintjob()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_shouldspend;
        break;
      }
      
      // optional double shouldspend = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_shouldspend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shouldspend_)));
          set_has_shouldspend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_printedspend;
        break;
      }
      
      // optional double printedspend = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_printedspend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &printedspend_)));
          set_has_printedspend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_jobid;
        break;
      }
      
      // optional int32 jobid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jobid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jobid_)));
          set_has_jobid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AdjustPrintCountInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }
  
  // optional int32 accountid = 2;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->accountid(), output);
  }
  
  // optional int32 shouldprintedcount = 3;
  if (has_shouldprintedcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->shouldprintedcount(), output);
  }
  
  // optional int32 printedcount = 4;
  if (has_printedcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->printedcount(), output);
  }
  
  // optional int32 printerid = 5;
  if (has_printerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->printerid(), output);
  }
  
  // optional .isafetec.PrtSationReqPrintJob oriprintjob = 6;
  if (has_oriprintjob()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->oriprintjob(), output);
  }
  
  // optional double shouldspend = 7;
  if (has_shouldspend()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->shouldspend(), output);
  }
  
  // optional double printedspend = 8;
  if (has_printedspend()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->printedspend(), output);
  }
  
  // optional int32 jobid = 9;
  if (has_jobid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->jobid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AdjustPrintCountInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }
  
  // optional int32 accountid = 2;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->accountid(), target);
  }
  
  // optional int32 shouldprintedcount = 3;
  if (has_shouldprintedcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->shouldprintedcount(), target);
  }
  
  // optional int32 printedcount = 4;
  if (has_printedcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->printedcount(), target);
  }
  
  // optional int32 printerid = 5;
  if (has_printerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->printerid(), target);
  }
  
  // optional .isafetec.PrtSationReqPrintJob oriprintjob = 6;
  if (has_oriprintjob()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->oriprintjob(), target);
  }
  
  // optional double shouldspend = 7;
  if (has_shouldspend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->shouldspend(), target);
  }
  
  // optional double printedspend = 8;
  if (has_printedspend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->printedspend(), target);
  }
  
  // optional int32 jobid = 9;
  if (has_jobid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->jobid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AdjustPrintCountInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }
    
    // optional int32 accountid = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accountid());
    }
    
    // optional int32 shouldprintedcount = 3;
    if (has_shouldprintedcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shouldprintedcount());
    }
    
    // optional int32 printedcount = 4;
    if (has_printedcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->printedcount());
    }
    
    // optional int32 printerid = 5;
    if (has_printerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->printerid());
    }
    
    // optional .isafetec.PrtSationReqPrintJob oriprintjob = 6;
    if (has_oriprintjob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oriprintjob());
    }
    
    // optional double shouldspend = 7;
    if (has_shouldspend()) {
      total_size += 1 + 8;
    }
    
    // optional double printedspend = 8;
    if (has_printedspend()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 jobid = 9;
    if (has_jobid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jobid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdjustPrintCountInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdjustPrintCountInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdjustPrintCountInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdjustPrintCountInfo::MergeFrom(const AdjustPrintCountInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_shouldprintedcount()) {
      set_shouldprintedcount(from.shouldprintedcount());
    }
    if (from.has_printedcount()) {
      set_printedcount(from.printedcount());
    }
    if (from.has_printerid()) {
      set_printerid(from.printerid());
    }
    if (from.has_oriprintjob()) {
      mutable_oriprintjob()->::isafetec::PrtSationReqPrintJob::MergeFrom(from.oriprintjob());
    }
    if (from.has_shouldspend()) {
      set_shouldspend(from.shouldspend());
    }
    if (from.has_printedspend()) {
      set_printedspend(from.printedspend());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_jobid()) {
      set_jobid(from.jobid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdjustPrintCountInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdjustPrintCountInfo::CopyFrom(const AdjustPrintCountInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdjustPrintCountInfo::IsInitialized() const {
  
  return true;
}

void AdjustPrintCountInfo::Swap(AdjustPrintCountInfo* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(accountid_, other->accountid_);
    std::swap(shouldprintedcount_, other->shouldprintedcount_);
    std::swap(printedcount_, other->printedcount_);
    std::swap(printerid_, other->printerid_);
    std::swap(oriprintjob_, other->oriprintjob_);
    std::swap(shouldspend_, other->shouldspend_);
    std::swap(printedspend_, other->printedspend_);
    std::swap(jobid_, other->jobid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdjustPrintCountInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdjustPrintCountInfo_descriptor_;
  metadata.reflection = AdjustPrintCountInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScanToMailAddrList::kUseridFieldNumber;
const int ScanToMailAddrList::kMailaddressFieldNumber;
#endif  // !_MSC_VER

ScanToMailAddrList::ScanToMailAddrList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScanToMailAddrList::InitAsDefaultInstance() {
}

ScanToMailAddrList::ScanToMailAddrList(const ScanToMailAddrList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScanToMailAddrList::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScanToMailAddrList::~ScanToMailAddrList() {
  SharedDtor();
}

void ScanToMailAddrList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScanToMailAddrList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScanToMailAddrList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScanToMailAddrList_descriptor_;
}

const ScanToMailAddrList& ScanToMailAddrList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

ScanToMailAddrList* ScanToMailAddrList::default_instance_ = NULL;

ScanToMailAddrList* ScanToMailAddrList::New() const {
  return new ScanToMailAddrList;
}

void ScanToMailAddrList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
  }
  mailaddress_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScanToMailAddrList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mailaddress;
        break;
      }
      
      // repeated string mailaddress = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mailaddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mailaddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mailaddress(0).data(), this->mailaddress(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mailaddress;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScanToMailAddrList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }
  
  // repeated string mailaddress = 2;
  for (int i = 0; i < this->mailaddress_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->mailaddress(i).data(), this->mailaddress(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->mailaddress(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScanToMailAddrList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }
  
  // repeated string mailaddress = 2;
  for (int i = 0; i < this->mailaddress_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mailaddress(i).data(), this->mailaddress(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->mailaddress(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScanToMailAddrList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }
    
  }
  // repeated string mailaddress = 2;
  total_size += 1 * this->mailaddress_size();
  for (int i = 0; i < this->mailaddress_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mailaddress(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScanToMailAddrList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScanToMailAddrList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScanToMailAddrList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScanToMailAddrList::MergeFrom(const ScanToMailAddrList& from) {
  GOOGLE_CHECK_NE(&from, this);
  mailaddress_.MergeFrom(from.mailaddress_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScanToMailAddrList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanToMailAddrList::CopyFrom(const ScanToMailAddrList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanToMailAddrList::IsInitialized() const {
  
  return true;
}

void ScanToMailAddrList::Swap(ScanToMailAddrList* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    mailaddress_.Swap(&other->mailaddress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScanToMailAddrList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScanToMailAddrList_descriptor_;
  metadata.reflection = ScanToMailAddrList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtTranscriptIToolLogon::kIdFieldNumber;
const int PrtTranscriptIToolLogon::kNameFieldNumber;
const int PrtTranscriptIToolLogon::kPwdFieldNumber;
#endif  // !_MSC_VER

PrtTranscriptIToolLogon::PrtTranscriptIToolLogon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrtTranscriptIToolLogon::InitAsDefaultInstance() {
}

PrtTranscriptIToolLogon::PrtTranscriptIToolLogon(const PrtTranscriptIToolLogon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrtTranscriptIToolLogon::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtTranscriptIToolLogon::~PrtTranscriptIToolLogon() {
  SharedDtor();
}

void PrtTranscriptIToolLogon::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete pwd_;
  }
  if (this != default_instance_) {
  }
}

void PrtTranscriptIToolLogon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtTranscriptIToolLogon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtTranscriptIToolLogon_descriptor_;
}

const PrtTranscriptIToolLogon& PrtTranscriptIToolLogon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrtTranscriptIToolLogon* PrtTranscriptIToolLogon::default_instance_ = NULL;

PrtTranscriptIToolLogon* PrtTranscriptIToolLogon::New() const {
  return new PrtTranscriptIToolLogon;
}

void PrtTranscriptIToolLogon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_pwd()) {
      if (pwd_ != &::google::protobuf::internal::kEmptyString) {
        pwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtTranscriptIToolLogon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pwd;
        break;
      }
      
      // optional string pwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pwd().data(), this->pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrtTranscriptIToolLogon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string pwd = 3;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pwd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrtTranscriptIToolLogon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional string pwd = 3;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pwd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrtTranscriptIToolLogon::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string pwd = 3;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtTranscriptIToolLogon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtTranscriptIToolLogon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtTranscriptIToolLogon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtTranscriptIToolLogon::MergeFrom(const PrtTranscriptIToolLogon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_pwd()) {
      set_pwd(from.pwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtTranscriptIToolLogon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtTranscriptIToolLogon::CopyFrom(const PrtTranscriptIToolLogon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtTranscriptIToolLogon::IsInitialized() const {
  
  return true;
}

void PrtTranscriptIToolLogon::Swap(PrtTranscriptIToolLogon* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(pwd_, other->pwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtTranscriptIToolLogon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtTranscriptIToolLogon_descriptor_;
  metadata.reflection = PrtTranscriptIToolLogon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtTranscriptIToolCheckResult::kIdFieldNumber;
const int PrtTranscriptIToolCheckResult::kNameFieldNumber;
const int PrtTranscriptIToolCheckResult::kPwdFieldNumber;
#endif  // !_MSC_VER

PrtTranscriptIToolCheckResult::PrtTranscriptIToolCheckResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrtTranscriptIToolCheckResult::InitAsDefaultInstance() {
}

PrtTranscriptIToolCheckResult::PrtTranscriptIToolCheckResult(const PrtTranscriptIToolCheckResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrtTranscriptIToolCheckResult::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtTranscriptIToolCheckResult::~PrtTranscriptIToolCheckResult() {
  SharedDtor();
}

void PrtTranscriptIToolCheckResult::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    delete pwd_;
  }
  if (this != default_instance_) {
  }
}

void PrtTranscriptIToolCheckResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtTranscriptIToolCheckResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtTranscriptIToolCheckResult_descriptor_;
}

const PrtTranscriptIToolCheckResult& PrtTranscriptIToolCheckResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrtTranscriptIToolCheckResult* PrtTranscriptIToolCheckResult::default_instance_ = NULL;

PrtTranscriptIToolCheckResult* PrtTranscriptIToolCheckResult::New() const {
  return new PrtTranscriptIToolCheckResult;
}

void PrtTranscriptIToolCheckResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_pwd()) {
      if (pwd_ != &::google::protobuf::internal::kEmptyString) {
        pwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtTranscriptIToolCheckResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pwd;
        break;
      }
      
      // optional string pwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pwd().data(), this->pwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrtTranscriptIToolCheckResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string pwd = 3;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pwd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrtTranscriptIToolCheckResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional string pwd = 3;
  if (has_pwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pwd().data(), this->pwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pwd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrtTranscriptIToolCheckResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string pwd = 3;
    if (has_pwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pwd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtTranscriptIToolCheckResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtTranscriptIToolCheckResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtTranscriptIToolCheckResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtTranscriptIToolCheckResult::MergeFrom(const PrtTranscriptIToolCheckResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_pwd()) {
      set_pwd(from.pwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtTranscriptIToolCheckResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtTranscriptIToolCheckResult::CopyFrom(const PrtTranscriptIToolCheckResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtTranscriptIToolCheckResult::IsInitialized() const {
  
  return true;
}

void PrtTranscriptIToolCheckResult::Swap(PrtTranscriptIToolCheckResult* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(pwd_, other->pwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtTranscriptIToolCheckResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtTranscriptIToolCheckResult_descriptor_;
  metadata.reflection = PrtTranscriptIToolCheckResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtDbConfigInfo::kDbTypeFieldNumber;
const int PrtDbConfigInfo::kDbIpFieldNumber;
const int PrtDbConfigInfo::kDbPortFieldNumber;
const int PrtDbConfigInfo::kDbNameFieldNumber;
const int PrtDbConfigInfo::kDbUserFieldNumber;
const int PrtDbConfigInfo::kDbPwdFieldNumber;
#endif  // !_MSC_VER

PrtDbConfigInfo::PrtDbConfigInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrtDbConfigInfo::InitAsDefaultInstance() {
}

PrtDbConfigInfo::PrtDbConfigInfo(const PrtDbConfigInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrtDbConfigInfo::SharedCtor() {
  _cached_size_ = 0;
  dbtype_ = 0;
  dbip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dbport_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dbname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dbuser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dbpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtDbConfigInfo::~PrtDbConfigInfo() {
  SharedDtor();
}

void PrtDbConfigInfo::SharedDtor() {
  if (dbip_ != &::google::protobuf::internal::kEmptyString) {
    delete dbip_;
  }
  if (dbport_ != &::google::protobuf::internal::kEmptyString) {
    delete dbport_;
  }
  if (dbname_ != &::google::protobuf::internal::kEmptyString) {
    delete dbname_;
  }
  if (dbuser_ != &::google::protobuf::internal::kEmptyString) {
    delete dbuser_;
  }
  if (dbpwd_ != &::google::protobuf::internal::kEmptyString) {
    delete dbpwd_;
  }
  if (this != default_instance_) {
  }
}

void PrtDbConfigInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtDbConfigInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtDbConfigInfo_descriptor_;
}

const PrtDbConfigInfo& PrtDbConfigInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrtDbConfigInfo* PrtDbConfigInfo::default_instance_ = NULL;

PrtDbConfigInfo* PrtDbConfigInfo::New() const {
  return new PrtDbConfigInfo;
}

void PrtDbConfigInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dbtype_ = 0;
    if (has_dbip()) {
      if (dbip_ != &::google::protobuf::internal::kEmptyString) {
        dbip_->clear();
      }
    }
    if (has_dbport()) {
      if (dbport_ != &::google::protobuf::internal::kEmptyString) {
        dbport_->clear();
      }
    }
    if (has_dbname()) {
      if (dbname_ != &::google::protobuf::internal::kEmptyString) {
        dbname_->clear();
      }
    }
    if (has_dbuser()) {
      if (dbuser_ != &::google::protobuf::internal::kEmptyString) {
        dbuser_->clear();
      }
    }
    if (has_dbpwd()) {
      if (dbpwd_ != &::google::protobuf::internal::kEmptyString) {
        dbpwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtDbConfigInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 DbType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dbtype_)));
          set_has_dbtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_DbIp;
        break;
      }
      
      // optional string DbIp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DbIp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dbip().data(), this->dbip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_DbPort;
        break;
      }
      
      // optional string DbPort = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DbPort:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbport()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dbport().data(), this->dbport().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_DbName;
        break;
      }
      
      // optional string DbName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DbName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dbname().data(), this->dbname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_DbUser;
        break;
      }
      
      // optional string DbUser = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DbUser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbuser()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dbuser().data(), this->dbuser().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_DbPwd;
        break;
      }
      
      // optional string DbPwd = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DbPwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbpwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dbpwd().data(), this->dbpwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrtDbConfigInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 DbType = 1;
  if (has_dbtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dbtype(), output);
  }
  
  // optional string DbIp = 2;
  if (has_dbip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbip().data(), this->dbip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dbip(), output);
  }
  
  // optional string DbPort = 3;
  if (has_dbport()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbport().data(), this->dbport().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->dbport(), output);
  }
  
  // optional string DbName = 4;
  if (has_dbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbname().data(), this->dbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->dbname(), output);
  }
  
  // optional string DbUser = 5;
  if (has_dbuser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbuser().data(), this->dbuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->dbuser(), output);
  }
  
  // optional string DbPwd = 6;
  if (has_dbpwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbpwd().data(), this->dbpwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->dbpwd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrtDbConfigInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 DbType = 1;
  if (has_dbtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dbtype(), target);
  }
  
  // optional string DbIp = 2;
  if (has_dbip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbip().data(), this->dbip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dbip(), target);
  }
  
  // optional string DbPort = 3;
  if (has_dbport()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbport().data(), this->dbport().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dbport(), target);
  }
  
  // optional string DbName = 4;
  if (has_dbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbname().data(), this->dbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->dbname(), target);
  }
  
  // optional string DbUser = 5;
  if (has_dbuser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbuser().data(), this->dbuser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->dbuser(), target);
  }
  
  // optional string DbPwd = 6;
  if (has_dbpwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dbpwd().data(), this->dbpwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->dbpwd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrtDbConfigInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 DbType = 1;
    if (has_dbtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dbtype());
    }
    
    // optional string DbIp = 2;
    if (has_dbip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbip());
    }
    
    // optional string DbPort = 3;
    if (has_dbport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbport());
    }
    
    // optional string DbName = 4;
    if (has_dbname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbname());
    }
    
    // optional string DbUser = 5;
    if (has_dbuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbuser());
    }
    
    // optional string DbPwd = 6;
    if (has_dbpwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbpwd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtDbConfigInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtDbConfigInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtDbConfigInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtDbConfigInfo::MergeFrom(const PrtDbConfigInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dbtype()) {
      set_dbtype(from.dbtype());
    }
    if (from.has_dbip()) {
      set_dbip(from.dbip());
    }
    if (from.has_dbport()) {
      set_dbport(from.dbport());
    }
    if (from.has_dbname()) {
      set_dbname(from.dbname());
    }
    if (from.has_dbuser()) {
      set_dbuser(from.dbuser());
    }
    if (from.has_dbpwd()) {
      set_dbpwd(from.dbpwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtDbConfigInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtDbConfigInfo::CopyFrom(const PrtDbConfigInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtDbConfigInfo::IsInitialized() const {
  
  return true;
}

void PrtDbConfigInfo::Swap(PrtDbConfigInfo* other) {
  if (other != this) {
    std::swap(dbtype_, other->dbtype_);
    std::swap(dbip_, other->dbip_);
    std::swap(dbport_, other->dbport_);
    std::swap(dbname_, other->dbname_);
    std::swap(dbuser_, other->dbuser_);
    std::swap(dbpwd_, other->dbpwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtDbConfigInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtDbConfigInfo_descriptor_;
  metadata.reflection = PrtDbConfigInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqChargePrintTicket::kAccountNameFieldNumber;
const int ReqChargePrintTicket::kRealNameFieldNumber;
const int ReqChargePrintTicket::kCardNoFieldNumber;
#endif  // !_MSC_VER

ReqChargePrintTicket::ReqChargePrintTicket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqChargePrintTicket::InitAsDefaultInstance() {
}

ReqChargePrintTicket::ReqChargePrintTicket(const ReqChargePrintTicket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqChargePrintTicket::SharedCtor() {
  _cached_size_ = 0;
  account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  card_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqChargePrintTicket::~ReqChargePrintTicket() {
  SharedDtor();
}

void ReqChargePrintTicket::SharedDtor() {
  if (account_name_ != &::google::protobuf::internal::kEmptyString) {
    delete account_name_;
  }
  if (real_name_ != &::google::protobuf::internal::kEmptyString) {
    delete real_name_;
  }
  if (card_no_ != &::google::protobuf::internal::kEmptyString) {
    delete card_no_;
  }
  if (this != default_instance_) {
  }
}

void ReqChargePrintTicket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqChargePrintTicket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqChargePrintTicket_descriptor_;
}

const ReqChargePrintTicket& ReqChargePrintTicket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

ReqChargePrintTicket* ReqChargePrintTicket::default_instance_ = NULL;

ReqChargePrintTicket* ReqChargePrintTicket::New() const {
  return new ReqChargePrintTicket;
}

void ReqChargePrintTicket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account_name()) {
      if (account_name_ != &::google::protobuf::internal::kEmptyString) {
        account_name_->clear();
      }
    }
    if (has_real_name()) {
      if (real_name_ != &::google::protobuf::internal::kEmptyString) {
        real_name_->clear();
      }
    }
    if (has_card_no()) {
      if (card_no_ != &::google::protobuf::internal::kEmptyString) {
        card_no_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqChargePrintTicket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account_name().data(), this->account_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_real_name;
        break;
      }
      
      // optional string real_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_real_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_real_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->real_name().data(), this->real_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_card_no;
        break;
      }
      
      // optional string card_no = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_no()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->card_no().data(), this->card_no().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqChargePrintTicket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account_name = 1;
  if (has_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_name().data(), this->account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account_name(), output);
  }
  
  // optional string real_name = 2;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->real_name().data(), this->real_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->real_name(), output);
  }
  
  // optional string card_no = 3;
  if (has_card_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->card_no().data(), this->card_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->card_no(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqChargePrintTicket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account_name = 1;
  if (has_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_name().data(), this->account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account_name(), target);
  }
  
  // optional string real_name = 2;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->real_name().data(), this->real_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->real_name(), target);
  }
  
  // optional string card_no = 3;
  if (has_card_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->card_no().data(), this->card_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->card_no(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqChargePrintTicket::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account_name = 1;
    if (has_account_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_name());
    }
    
    // optional string real_name = 2;
    if (has_real_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->real_name());
    }
    
    // optional string card_no = 3;
    if (has_card_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->card_no());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqChargePrintTicket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqChargePrintTicket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqChargePrintTicket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqChargePrintTicket::MergeFrom(const ReqChargePrintTicket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_name()) {
      set_account_name(from.account_name());
    }
    if (from.has_real_name()) {
      set_real_name(from.real_name());
    }
    if (from.has_card_no()) {
      set_card_no(from.card_no());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqChargePrintTicket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqChargePrintTicket::CopyFrom(const ReqChargePrintTicket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqChargePrintTicket::IsInitialized() const {
  
  return true;
}

void ReqChargePrintTicket::Swap(ReqChargePrintTicket* other) {
  if (other != this) {
    std::swap(account_name_, other->account_name_);
    std::swap(real_name_, other->real_name_);
    std::swap(card_no_, other->card_no_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqChargePrintTicket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqChargePrintTicket_descriptor_;
  metadata.reflection = ReqChargePrintTicket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChargePrintTicket::kUserIdFieldNumber;
const int ChargePrintTicket::kAccountIdFieldNumber;
const int ChargePrintTicket::kLeftMoneyFieldNumber;
const int ChargePrintTicket::kSpecialLeftMoneyFieldNumber;
const int ChargePrintTicket::kAccountNameFieldNumber;
const int ChargePrintTicket::kRealNameFieldNumber;
const int ChargePrintTicket::kCardNoFieldNumber;
const int ChargePrintTicket::kPrintCountA4FieldNumber;
const int ChargePrintTicket::kPrintCountA3FieldNumber;
const int ChargePrintTicket::kPrintPriceA4FieldNumber;
const int ChargePrintTicket::kPrintPriceA3FieldNumber;
const int ChargePrintTicket::kPrintSpendFieldNumber;
const int ChargePrintTicket::kCopyCountA4FieldNumber;
const int ChargePrintTicket::kCopyCountA3FieldNumber;
const int ChargePrintTicket::kCopyPriceA4FieldNumber;
const int ChargePrintTicket::kCopyPriceA3FieldNumber;
const int ChargePrintTicket::kCopySpendFieldNumber;
const int ChargePrintTicket::kScanUnitFieldNumber;
const int ChargePrintTicket::kScanCountFieldNumber;
const int ChargePrintTicket::kScanSizeFieldNumber;
const int ChargePrintTicket::kScanPriceFieldNumber;
const int ChargePrintTicket::kScanSpendFieldNumber;
const int ChargePrintTicket::kFaxCountFieldNumber;
const int ChargePrintTicket::kFaxPriceFieldNumber;
const int ChargePrintTicket::kFaxSpendFieldNumber;
const int ChargePrintTicket::kCashPledgeFieldNumber;
const int ChargePrintTicket::kCashBackFieldNumber;
const int ChargePrintTicket::kOtherInfoFieldNumber;
const int ChargePrintTicket::kBeforeMoneyFieldNumber;
const int ChargePrintTicket::kAfterMoneyFieldNumber;
const int ChargePrintTicket::kPurchaseDateFieldNumber;
const int ChargePrintTicket::kTermIDFieldNumber;
const int ChargePrintTicket::kVerificationCodeFieldNumber;
const int ChargePrintTicket::kTicketPrintedTimesFieldNumber;
const int ChargePrintTicket::kTicketLogIdFieldNumber;
#endif  // !_MSC_VER

ChargePrintTicket::ChargePrintTicket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChargePrintTicket::InitAsDefaultInstance() {
}

ChargePrintTicket::ChargePrintTicket(const ChargePrintTicket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChargePrintTicket::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0;
  account_id_ = 0;
  left_money_ = 0;
  special_left_money_ = 0;
  account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  card_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  print_count_a4_ = 0;
  print_count_a3_ = 0;
  print_price_a4_ = 0;
  print_price_a3_ = 0;
  print_spend_ = 0;
  copy_count_a4_ = 0;
  copy_count_a3_ = 0;
  copy_price_a4_ = 0;
  copy_price_a3_ = 0;
  copy_spend_ = 0;
  scan_unit_ = 0;
  scan_count_ = 0;
  scan_size_ = 0;
  scan_price_ = 0;
  scan_spend_ = 0;
  fax_count_ = 0;
  fax_price_ = 0;
  fax_spend_ = 0;
  cash_pledge_ = 0;
  cash_back_ = 0;
  other_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  before_money_ = 0;
  after_money_ = 0;
  purchase_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  termid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  verification_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ticket_printed_times_ = 0;
  ticket_log_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChargePrintTicket::~ChargePrintTicket() {
  SharedDtor();
}

void ChargePrintTicket::SharedDtor() {
  if (account_name_ != &::google::protobuf::internal::kEmptyString) {
    delete account_name_;
  }
  if (real_name_ != &::google::protobuf::internal::kEmptyString) {
    delete real_name_;
  }
  if (card_no_ != &::google::protobuf::internal::kEmptyString) {
    delete card_no_;
  }
  if (other_info_ != &::google::protobuf::internal::kEmptyString) {
    delete other_info_;
  }
  if (purchase_date_ != &::google::protobuf::internal::kEmptyString) {
    delete purchase_date_;
  }
  if (termid_ != &::google::protobuf::internal::kEmptyString) {
    delete termid_;
  }
  if (verification_code_ != &::google::protobuf::internal::kEmptyString) {
    delete verification_code_;
  }
  if (this != default_instance_) {
  }
}

void ChargePrintTicket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChargePrintTicket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChargePrintTicket_descriptor_;
}

const ChargePrintTicket& ChargePrintTicket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

ChargePrintTicket* ChargePrintTicket::default_instance_ = NULL;

ChargePrintTicket* ChargePrintTicket::New() const {
  return new ChargePrintTicket;
}

void ChargePrintTicket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0;
    account_id_ = 0;
    left_money_ = 0;
    special_left_money_ = 0;
    if (has_account_name()) {
      if (account_name_ != &::google::protobuf::internal::kEmptyString) {
        account_name_->clear();
      }
    }
    if (has_real_name()) {
      if (real_name_ != &::google::protobuf::internal::kEmptyString) {
        real_name_->clear();
      }
    }
    if (has_card_no()) {
      if (card_no_ != &::google::protobuf::internal::kEmptyString) {
        card_no_->clear();
      }
    }
    print_count_a4_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    print_count_a3_ = 0;
    print_price_a4_ = 0;
    print_price_a3_ = 0;
    print_spend_ = 0;
    copy_count_a4_ = 0;
    copy_count_a3_ = 0;
    copy_price_a4_ = 0;
    copy_price_a3_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    copy_spend_ = 0;
    scan_unit_ = 0;
    scan_count_ = 0;
    scan_size_ = 0;
    scan_price_ = 0;
    scan_spend_ = 0;
    fax_count_ = 0;
    fax_price_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    fax_spend_ = 0;
    cash_pledge_ = 0;
    cash_back_ = 0;
    if (has_other_info()) {
      if (other_info_ != &::google::protobuf::internal::kEmptyString) {
        other_info_->clear();
      }
    }
    before_money_ = 0;
    after_money_ = 0;
    if (has_purchase_date()) {
      if (purchase_date_ != &::google::protobuf::internal::kEmptyString) {
        purchase_date_->clear();
      }
    }
    if (has_termid()) {
      if (termid_ != &::google::protobuf::internal::kEmptyString) {
        termid_->clear();
      }
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_verification_code()) {
      if (verification_code_ != &::google::protobuf::internal::kEmptyString) {
        verification_code_->clear();
      }
    }
    ticket_printed_times_ = 0;
    ticket_log_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChargePrintTicket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_account_id;
        break;
      }
      
      // optional int32 account_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_left_money;
        break;
      }
      
      // optional double left_money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_left_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &left_money_)));
          set_has_left_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_special_left_money;
        break;
      }
      
      // optional double special_left_money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_special_left_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &special_left_money_)));
          set_has_special_left_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_account_name;
        break;
      }
      
      // optional string account_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account_name().data(), this->account_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_real_name;
        break;
      }
      
      // optional string real_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_real_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_real_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->real_name().data(), this->real_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_card_no;
        break;
      }
      
      // optional string card_no = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_no()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->card_no().data(), this->card_no().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_print_count_A4;
        break;
      }
      
      // optional int32 print_count_A4 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_print_count_A4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &print_count_a4_)));
          set_has_print_count_a4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_print_count_A3;
        break;
      }
      
      // optional int32 print_count_A3 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_print_count_A3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &print_count_a3_)));
          set_has_print_count_a3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_print_price_A4;
        break;
      }
      
      // optional double print_price_A4 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_print_price_A4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &print_price_a4_)));
          set_has_print_price_a4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_print_price_A3;
        break;
      }
      
      // optional double print_price_A3 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_print_price_A3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &print_price_a3_)));
          set_has_print_price_a3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_print_spend;
        break;
      }
      
      // optional double print_spend = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_print_spend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &print_spend_)));
          set_has_print_spend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_copy_count_A4;
        break;
      }
      
      // optional int32 copy_count_A4 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copy_count_A4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &copy_count_a4_)));
          set_has_copy_count_a4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_copy_count_A3;
        break;
      }
      
      // optional int32 copy_count_A3 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copy_count_A3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &copy_count_a3_)));
          set_has_copy_count_a3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_copy_price_A4;
        break;
      }
      
      // optional double copy_price_A4 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_copy_price_A4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &copy_price_a4_)));
          set_has_copy_price_a4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_copy_price_A3;
        break;
      }
      
      // optional double copy_price_A3 = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_copy_price_A3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &copy_price_a3_)));
          set_has_copy_price_a3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_copy_spend;
        break;
      }
      
      // optional double copy_spend = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_copy_spend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &copy_spend_)));
          set_has_copy_spend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_scan_unit;
        break;
      }
      
      // optional int32 scan_unit = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scan_unit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scan_unit_)));
          set_has_scan_unit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_scan_count;
        break;
      }
      
      // optional int32 scan_count = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scan_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scan_count_)));
          set_has_scan_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_scan_size;
        break;
      }
      
      // optional double scan_size = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_scan_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &scan_size_)));
          set_has_scan_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_scan_price;
        break;
      }
      
      // optional double scan_price = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_scan_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &scan_price_)));
          set_has_scan_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_scan_spend;
        break;
      }
      
      // optional double scan_spend = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_scan_spend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &scan_spend_)));
          set_has_scan_spend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_fax_count;
        break;
      }
      
      // optional int32 fax_count = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fax_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fax_count_)));
          set_has_fax_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(193)) goto parse_fax_price;
        break;
      }
      
      // optional double fax_price = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_fax_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fax_price_)));
          set_has_fax_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(201)) goto parse_fax_spend;
        break;
      }
      
      // optional double fax_spend = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_fax_spend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fax_spend_)));
          set_has_fax_spend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(209)) goto parse_cash_pledge;
        break;
      }
      
      // optional double cash_pledge = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_cash_pledge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cash_pledge_)));
          set_has_cash_pledge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(217)) goto parse_cash_back;
        break;
      }
      
      // optional double cash_back = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_cash_back:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cash_back_)));
          set_has_cash_back();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_other_info;
        break;
      }
      
      // optional string other_info = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_other_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_other_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->other_info().data(), this->other_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(233)) goto parse_before_money;
        break;
      }
      
      // optional double before_money = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_before_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &before_money_)));
          set_has_before_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(241)) goto parse_after_money;
        break;
      }
      
      // optional double after_money = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_after_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &after_money_)));
          set_has_after_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_purchase_date;
        break;
      }
      
      // optional string purchase_date = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_purchase_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_purchase_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->purchase_date().data(), this->purchase_date().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_termID;
        break;
      }
      
      // optional string termID = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_termID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_termid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->termid().data(), this->termid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_verification_code;
        break;
      }
      
      // optional string verification_code = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_verification_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_verification_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->verification_code().data(), this->verification_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_ticket_printed_times;
        break;
      }
      
      // optional int32 ticket_printed_times = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ticket_printed_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ticket_printed_times_)));
          set_has_ticket_printed_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_ticket_log_id;
        break;
      }
      
      // optional int32 ticket_log_id = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ticket_log_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ticket_log_id_)));
          set_has_ticket_log_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChargePrintTicket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }
  
  // optional int32 account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->account_id(), output);
  }
  
  // optional double left_money = 3;
  if (has_left_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->left_money(), output);
  }
  
  // optional double special_left_money = 4;
  if (has_special_left_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->special_left_money(), output);
  }
  
  // optional string account_name = 5;
  if (has_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_name().data(), this->account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->account_name(), output);
  }
  
  // optional string real_name = 6;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->real_name().data(), this->real_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->real_name(), output);
  }
  
  // optional string card_no = 7;
  if (has_card_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->card_no().data(), this->card_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->card_no(), output);
  }
  
  // optional int32 print_count_A4 = 8;
  if (has_print_count_a4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->print_count_a4(), output);
  }
  
  // optional int32 print_count_A3 = 9;
  if (has_print_count_a3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->print_count_a3(), output);
  }
  
  // optional double print_price_A4 = 10;
  if (has_print_price_a4()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->print_price_a4(), output);
  }
  
  // optional double print_price_A3 = 11;
  if (has_print_price_a3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->print_price_a3(), output);
  }
  
  // optional double print_spend = 12;
  if (has_print_spend()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->print_spend(), output);
  }
  
  // optional int32 copy_count_A4 = 13;
  if (has_copy_count_a4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->copy_count_a4(), output);
  }
  
  // optional int32 copy_count_A3 = 14;
  if (has_copy_count_a3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->copy_count_a3(), output);
  }
  
  // optional double copy_price_A4 = 15;
  if (has_copy_price_a4()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->copy_price_a4(), output);
  }
  
  // optional double copy_price_A3 = 16;
  if (has_copy_price_a3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->copy_price_a3(), output);
  }
  
  // optional double copy_spend = 17;
  if (has_copy_spend()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->copy_spend(), output);
  }
  
  // optional int32 scan_unit = 18;
  if (has_scan_unit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->scan_unit(), output);
  }
  
  // optional int32 scan_count = 19;
  if (has_scan_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->scan_count(), output);
  }
  
  // optional double scan_size = 20;
  if (has_scan_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->scan_size(), output);
  }
  
  // optional double scan_price = 21;
  if (has_scan_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->scan_price(), output);
  }
  
  // optional double scan_spend = 22;
  if (has_scan_spend()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->scan_spend(), output);
  }
  
  // optional int32 fax_count = 23;
  if (has_fax_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->fax_count(), output);
  }
  
  // optional double fax_price = 24;
  if (has_fax_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->fax_price(), output);
  }
  
  // optional double fax_spend = 25;
  if (has_fax_spend()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->fax_spend(), output);
  }
  
  // optional double cash_pledge = 26;
  if (has_cash_pledge()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->cash_pledge(), output);
  }
  
  // optional double cash_back = 27;
  if (has_cash_back()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->cash_back(), output);
  }
  
  // optional string other_info = 28;
  if (has_other_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->other_info().data(), this->other_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->other_info(), output);
  }
  
  // optional double before_money = 29;
  if (has_before_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->before_money(), output);
  }
  
  // optional double after_money = 30;
  if (has_after_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->after_money(), output);
  }
  
  // optional string purchase_date = 31;
  if (has_purchase_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->purchase_date().data(), this->purchase_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->purchase_date(), output);
  }
  
  // optional string termID = 32;
  if (has_termid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->termid().data(), this->termid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      32, this->termid(), output);
  }
  
  // optional string verification_code = 33;
  if (has_verification_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->verification_code().data(), this->verification_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      33, this->verification_code(), output);
  }
  
  // optional int32 ticket_printed_times = 34;
  if (has_ticket_printed_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->ticket_printed_times(), output);
  }
  
  // optional int32 ticket_log_id = 35;
  if (has_ticket_log_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->ticket_log_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChargePrintTicket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->user_id(), target);
  }
  
  // optional int32 account_id = 2;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->account_id(), target);
  }
  
  // optional double left_money = 3;
  if (has_left_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->left_money(), target);
  }
  
  // optional double special_left_money = 4;
  if (has_special_left_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->special_left_money(), target);
  }
  
  // optional string account_name = 5;
  if (has_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_name().data(), this->account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->account_name(), target);
  }
  
  // optional string real_name = 6;
  if (has_real_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->real_name().data(), this->real_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->real_name(), target);
  }
  
  // optional string card_no = 7;
  if (has_card_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->card_no().data(), this->card_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->card_no(), target);
  }
  
  // optional int32 print_count_A4 = 8;
  if (has_print_count_a4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->print_count_a4(), target);
  }
  
  // optional int32 print_count_A3 = 9;
  if (has_print_count_a3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->print_count_a3(), target);
  }
  
  // optional double print_price_A4 = 10;
  if (has_print_price_a4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->print_price_a4(), target);
  }
  
  // optional double print_price_A3 = 11;
  if (has_print_price_a3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->print_price_a3(), target);
  }
  
  // optional double print_spend = 12;
  if (has_print_spend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->print_spend(), target);
  }
  
  // optional int32 copy_count_A4 = 13;
  if (has_copy_count_a4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->copy_count_a4(), target);
  }
  
  // optional int32 copy_count_A3 = 14;
  if (has_copy_count_a3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->copy_count_a3(), target);
  }
  
  // optional double copy_price_A4 = 15;
  if (has_copy_price_a4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->copy_price_a4(), target);
  }
  
  // optional double copy_price_A3 = 16;
  if (has_copy_price_a3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->copy_price_a3(), target);
  }
  
  // optional double copy_spend = 17;
  if (has_copy_spend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->copy_spend(), target);
  }
  
  // optional int32 scan_unit = 18;
  if (has_scan_unit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->scan_unit(), target);
  }
  
  // optional int32 scan_count = 19;
  if (has_scan_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->scan_count(), target);
  }
  
  // optional double scan_size = 20;
  if (has_scan_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->scan_size(), target);
  }
  
  // optional double scan_price = 21;
  if (has_scan_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->scan_price(), target);
  }
  
  // optional double scan_spend = 22;
  if (has_scan_spend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->scan_spend(), target);
  }
  
  // optional int32 fax_count = 23;
  if (has_fax_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->fax_count(), target);
  }
  
  // optional double fax_price = 24;
  if (has_fax_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->fax_price(), target);
  }
  
  // optional double fax_spend = 25;
  if (has_fax_spend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->fax_spend(), target);
  }
  
  // optional double cash_pledge = 26;
  if (has_cash_pledge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->cash_pledge(), target);
  }
  
  // optional double cash_back = 27;
  if (has_cash_back()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->cash_back(), target);
  }
  
  // optional string other_info = 28;
  if (has_other_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->other_info().data(), this->other_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->other_info(), target);
  }
  
  // optional double before_money = 29;
  if (has_before_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->before_money(), target);
  }
  
  // optional double after_money = 30;
  if (has_after_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->after_money(), target);
  }
  
  // optional string purchase_date = 31;
  if (has_purchase_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->purchase_date().data(), this->purchase_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->purchase_date(), target);
  }
  
  // optional string termID = 32;
  if (has_termid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->termid().data(), this->termid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->termid(), target);
  }
  
  // optional string verification_code = 33;
  if (has_verification_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->verification_code().data(), this->verification_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->verification_code(), target);
  }
  
  // optional int32 ticket_printed_times = 34;
  if (has_ticket_printed_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->ticket_printed_times(), target);
  }
  
  // optional int32 ticket_log_id = 35;
  if (has_ticket_log_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->ticket_log_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChargePrintTicket::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }
    
    // optional int32 account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->account_id());
    }
    
    // optional double left_money = 3;
    if (has_left_money()) {
      total_size += 1 + 8;
    }
    
    // optional double special_left_money = 4;
    if (has_special_left_money()) {
      total_size += 1 + 8;
    }
    
    // optional string account_name = 5;
    if (has_account_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_name());
    }
    
    // optional string real_name = 6;
    if (has_real_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->real_name());
    }
    
    // optional string card_no = 7;
    if (has_card_no()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->card_no());
    }
    
    // optional int32 print_count_A4 = 8;
    if (has_print_count_a4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->print_count_a4());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 print_count_A3 = 9;
    if (has_print_count_a3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->print_count_a3());
    }
    
    // optional double print_price_A4 = 10;
    if (has_print_price_a4()) {
      total_size += 1 + 8;
    }
    
    // optional double print_price_A3 = 11;
    if (has_print_price_a3()) {
      total_size += 1 + 8;
    }
    
    // optional double print_spend = 12;
    if (has_print_spend()) {
      total_size += 1 + 8;
    }
    
    // optional int32 copy_count_A4 = 13;
    if (has_copy_count_a4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->copy_count_a4());
    }
    
    // optional int32 copy_count_A3 = 14;
    if (has_copy_count_a3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->copy_count_a3());
    }
    
    // optional double copy_price_A4 = 15;
    if (has_copy_price_a4()) {
      total_size += 1 + 8;
    }
    
    // optional double copy_price_A3 = 16;
    if (has_copy_price_a3()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional double copy_spend = 17;
    if (has_copy_spend()) {
      total_size += 2 + 8;
    }
    
    // optional int32 scan_unit = 18;
    if (has_scan_unit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scan_unit());
    }
    
    // optional int32 scan_count = 19;
    if (has_scan_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scan_count());
    }
    
    // optional double scan_size = 20;
    if (has_scan_size()) {
      total_size += 2 + 8;
    }
    
    // optional double scan_price = 21;
    if (has_scan_price()) {
      total_size += 2 + 8;
    }
    
    // optional double scan_spend = 22;
    if (has_scan_spend()) {
      total_size += 2 + 8;
    }
    
    // optional int32 fax_count = 23;
    if (has_fax_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fax_count());
    }
    
    // optional double fax_price = 24;
    if (has_fax_price()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional double fax_spend = 25;
    if (has_fax_spend()) {
      total_size += 2 + 8;
    }
    
    // optional double cash_pledge = 26;
    if (has_cash_pledge()) {
      total_size += 2 + 8;
    }
    
    // optional double cash_back = 27;
    if (has_cash_back()) {
      total_size += 2 + 8;
    }
    
    // optional string other_info = 28;
    if (has_other_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->other_info());
    }
    
    // optional double before_money = 29;
    if (has_before_money()) {
      total_size += 2 + 8;
    }
    
    // optional double after_money = 30;
    if (has_after_money()) {
      total_size += 2 + 8;
    }
    
    // optional string purchase_date = 31;
    if (has_purchase_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->purchase_date());
    }
    
    // optional string termID = 32;
    if (has_termid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->termid());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional string verification_code = 33;
    if (has_verification_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->verification_code());
    }
    
    // optional int32 ticket_printed_times = 34;
    if (has_ticket_printed_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ticket_printed_times());
    }
    
    // optional int32 ticket_log_id = 35;
    if (has_ticket_log_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ticket_log_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChargePrintTicket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChargePrintTicket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChargePrintTicket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChargePrintTicket::MergeFrom(const ChargePrintTicket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_left_money()) {
      set_left_money(from.left_money());
    }
    if (from.has_special_left_money()) {
      set_special_left_money(from.special_left_money());
    }
    if (from.has_account_name()) {
      set_account_name(from.account_name());
    }
    if (from.has_real_name()) {
      set_real_name(from.real_name());
    }
    if (from.has_card_no()) {
      set_card_no(from.card_no());
    }
    if (from.has_print_count_a4()) {
      set_print_count_a4(from.print_count_a4());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_print_count_a3()) {
      set_print_count_a3(from.print_count_a3());
    }
    if (from.has_print_price_a4()) {
      set_print_price_a4(from.print_price_a4());
    }
    if (from.has_print_price_a3()) {
      set_print_price_a3(from.print_price_a3());
    }
    if (from.has_print_spend()) {
      set_print_spend(from.print_spend());
    }
    if (from.has_copy_count_a4()) {
      set_copy_count_a4(from.copy_count_a4());
    }
    if (from.has_copy_count_a3()) {
      set_copy_count_a3(from.copy_count_a3());
    }
    if (from.has_copy_price_a4()) {
      set_copy_price_a4(from.copy_price_a4());
    }
    if (from.has_copy_price_a3()) {
      set_copy_price_a3(from.copy_price_a3());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_copy_spend()) {
      set_copy_spend(from.copy_spend());
    }
    if (from.has_scan_unit()) {
      set_scan_unit(from.scan_unit());
    }
    if (from.has_scan_count()) {
      set_scan_count(from.scan_count());
    }
    if (from.has_scan_size()) {
      set_scan_size(from.scan_size());
    }
    if (from.has_scan_price()) {
      set_scan_price(from.scan_price());
    }
    if (from.has_scan_spend()) {
      set_scan_spend(from.scan_spend());
    }
    if (from.has_fax_count()) {
      set_fax_count(from.fax_count());
    }
    if (from.has_fax_price()) {
      set_fax_price(from.fax_price());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_fax_spend()) {
      set_fax_spend(from.fax_spend());
    }
    if (from.has_cash_pledge()) {
      set_cash_pledge(from.cash_pledge());
    }
    if (from.has_cash_back()) {
      set_cash_back(from.cash_back());
    }
    if (from.has_other_info()) {
      set_other_info(from.other_info());
    }
    if (from.has_before_money()) {
      set_before_money(from.before_money());
    }
    if (from.has_after_money()) {
      set_after_money(from.after_money());
    }
    if (from.has_purchase_date()) {
      set_purchase_date(from.purchase_date());
    }
    if (from.has_termid()) {
      set_termid(from.termid());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_verification_code()) {
      set_verification_code(from.verification_code());
    }
    if (from.has_ticket_printed_times()) {
      set_ticket_printed_times(from.ticket_printed_times());
    }
    if (from.has_ticket_log_id()) {
      set_ticket_log_id(from.ticket_log_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChargePrintTicket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChargePrintTicket::CopyFrom(const ChargePrintTicket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChargePrintTicket::IsInitialized() const {
  
  return true;
}

void ChargePrintTicket::Swap(ChargePrintTicket* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(account_id_, other->account_id_);
    std::swap(left_money_, other->left_money_);
    std::swap(special_left_money_, other->special_left_money_);
    std::swap(account_name_, other->account_name_);
    std::swap(real_name_, other->real_name_);
    std::swap(card_no_, other->card_no_);
    std::swap(print_count_a4_, other->print_count_a4_);
    std::swap(print_count_a3_, other->print_count_a3_);
    std::swap(print_price_a4_, other->print_price_a4_);
    std::swap(print_price_a3_, other->print_price_a3_);
    std::swap(print_spend_, other->print_spend_);
    std::swap(copy_count_a4_, other->copy_count_a4_);
    std::swap(copy_count_a3_, other->copy_count_a3_);
    std::swap(copy_price_a4_, other->copy_price_a4_);
    std::swap(copy_price_a3_, other->copy_price_a3_);
    std::swap(copy_spend_, other->copy_spend_);
    std::swap(scan_unit_, other->scan_unit_);
    std::swap(scan_count_, other->scan_count_);
    std::swap(scan_size_, other->scan_size_);
    std::swap(scan_price_, other->scan_price_);
    std::swap(scan_spend_, other->scan_spend_);
    std::swap(fax_count_, other->fax_count_);
    std::swap(fax_price_, other->fax_price_);
    std::swap(fax_spend_, other->fax_spend_);
    std::swap(cash_pledge_, other->cash_pledge_);
    std::swap(cash_back_, other->cash_back_);
    std::swap(other_info_, other->other_info_);
    std::swap(before_money_, other->before_money_);
    std::swap(after_money_, other->after_money_);
    std::swap(purchase_date_, other->purchase_date_);
    std::swap(termid_, other->termid_);
    std::swap(verification_code_, other->verification_code_);
    std::swap(ticket_printed_times_, other->ticket_printed_times_);
    std::swap(ticket_log_id_, other->ticket_log_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChargePrintTicket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChargePrintTicket_descriptor_;
  metadata.reflection = ChargePrintTicket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrintLimitPolicy::kJobTypeFieldNumber;
const int PrintLimitPolicy::kJobLimitTypeFieldNumber;
const int PrintLimitPolicy::kJobLimitPeriodTypeFieldNumber;
const int PrintLimitPolicy::kStateFieldNumber;
const int PrintLimitPolicy::kLimitPageFieldNumber;
const int PrintLimitPolicy::kHaveOpPageFieldNumber;
#endif  // !_MSC_VER

PrintLimitPolicy::PrintLimitPolicy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrintLimitPolicy::InitAsDefaultInstance() {
}

PrintLimitPolicy::PrintLimitPolicy(const PrintLimitPolicy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrintLimitPolicy::SharedCtor() {
  _cached_size_ = 0;
  job_type_ = 0;
  job_limit_type_ = 0;
  job_limit_period_type_ = 0;
  state_ = 0;
  limitpage_ = 0;
  haveoppage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrintLimitPolicy::~PrintLimitPolicy() {
  SharedDtor();
}

void PrintLimitPolicy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrintLimitPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrintLimitPolicy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrintLimitPolicy_descriptor_;
}

const PrintLimitPolicy& PrintLimitPolicy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrintLimitPolicy* PrintLimitPolicy::default_instance_ = NULL;

PrintLimitPolicy* PrintLimitPolicy::New() const {
  return new PrintLimitPolicy;
}

void PrintLimitPolicy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    job_type_ = 0;
    job_limit_type_ = 0;
    job_limit_period_type_ = 0;
    state_ = 0;
    limitpage_ = 0;
    haveoppage_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrintLimitPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .isafetec.JOB_TYPE job_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::JOB_TYPE_IsValid(value)) {
            set_job_type(static_cast< isafetec::JOB_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_job_limit_type;
        break;
      }
      
      // optional .isafetec.JOB_LIMIT_TYPE job_limit_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job_limit_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::JOB_LIMIT_TYPE_IsValid(value)) {
            set_job_limit_type(static_cast< isafetec::JOB_LIMIT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_job_limit_period_type;
        break;
      }
      
      // optional .isafetec.JOB_LIMIT_PERIOD_TYPE job_limit_period_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job_limit_period_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::JOB_LIMIT_PERIOD_TYPE_IsValid(value)) {
            set_job_limit_period_type(static_cast< isafetec::JOB_LIMIT_PERIOD_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }
      
      // optional int32 state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_LimitPage;
        break;
      }
      
      // optional int32 LimitPage = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LimitPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limitpage_)));
          set_has_limitpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_HaveOpPage;
        break;
      }
      
      // optional int32 HaveOpPage = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HaveOpPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &haveoppage_)));
          set_has_haveoppage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrintLimitPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .isafetec.JOB_TYPE job_type = 1;
  if (has_job_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->job_type(), output);
  }
  
  // optional .isafetec.JOB_LIMIT_TYPE job_limit_type = 2;
  if (has_job_limit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->job_limit_type(), output);
  }
  
  // optional .isafetec.JOB_LIMIT_PERIOD_TYPE job_limit_period_type = 3;
  if (has_job_limit_period_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->job_limit_period_type(), output);
  }
  
  // optional int32 state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->state(), output);
  }
  
  // optional int32 LimitPage = 5;
  if (has_limitpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->limitpage(), output);
  }
  
  // optional int32 HaveOpPage = 6;
  if (has_haveoppage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->haveoppage(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrintLimitPolicy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .isafetec.JOB_TYPE job_type = 1;
  if (has_job_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->job_type(), target);
  }
  
  // optional .isafetec.JOB_LIMIT_TYPE job_limit_type = 2;
  if (has_job_limit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->job_limit_type(), target);
  }
  
  // optional .isafetec.JOB_LIMIT_PERIOD_TYPE job_limit_period_type = 3;
  if (has_job_limit_period_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->job_limit_period_type(), target);
  }
  
  // optional int32 state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->state(), target);
  }
  
  // optional int32 LimitPage = 5;
  if (has_limitpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->limitpage(), target);
  }
  
  // optional int32 HaveOpPage = 6;
  if (has_haveoppage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->haveoppage(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrintLimitPolicy::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .isafetec.JOB_TYPE job_type = 1;
    if (has_job_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->job_type());
    }
    
    // optional .isafetec.JOB_LIMIT_TYPE job_limit_type = 2;
    if (has_job_limit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->job_limit_type());
    }
    
    // optional .isafetec.JOB_LIMIT_PERIOD_TYPE job_limit_period_type = 3;
    if (has_job_limit_period_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->job_limit_period_type());
    }
    
    // optional int32 state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }
    
    // optional int32 LimitPage = 5;
    if (has_limitpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limitpage());
    }
    
    // optional int32 HaveOpPage = 6;
    if (has_haveoppage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->haveoppage());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrintLimitPolicy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrintLimitPolicy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrintLimitPolicy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrintLimitPolicy::MergeFrom(const PrintLimitPolicy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_job_type()) {
      set_job_type(from.job_type());
    }
    if (from.has_job_limit_type()) {
      set_job_limit_type(from.job_limit_type());
    }
    if (from.has_job_limit_period_type()) {
      set_job_limit_period_type(from.job_limit_period_type());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_limitpage()) {
      set_limitpage(from.limitpage());
    }
    if (from.has_haveoppage()) {
      set_haveoppage(from.haveoppage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrintLimitPolicy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrintLimitPolicy::CopyFrom(const PrintLimitPolicy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrintLimitPolicy::IsInitialized() const {
  
  return true;
}

void PrintLimitPolicy::Swap(PrintLimitPolicy* other) {
  if (other != this) {
    std::swap(job_type_, other->job_type_);
    std::swap(job_limit_type_, other->job_limit_type_);
    std::swap(job_limit_period_type_, other->job_limit_period_type_);
    std::swap(state_, other->state_);
    std::swap(limitpage_, other->limitpage_);
    std::swap(haveoppage_, other->haveoppage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrintLimitPolicy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrintLimitPolicy_descriptor_;
  metadata.reflection = PrintLimitPolicy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CopyLimitPolicy::kJobTypeFieldNumber;
const int CopyLimitPolicy::kJobLimitTypeFieldNumber;
const int CopyLimitPolicy::kJobLimitPeriodTypeFieldNumber;
const int CopyLimitPolicy::kStateFieldNumber;
const int CopyLimitPolicy::kLimitPageFieldNumber;
const int CopyLimitPolicy::kHaveOpPageFieldNumber;
#endif  // !_MSC_VER

CopyLimitPolicy::CopyLimitPolicy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CopyLimitPolicy::InitAsDefaultInstance() {
}

CopyLimitPolicy::CopyLimitPolicy(const CopyLimitPolicy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CopyLimitPolicy::SharedCtor() {
  _cached_size_ = 0;
  job_type_ = 0;
  job_limit_type_ = 0;
  job_limit_period_type_ = 0;
  state_ = 0;
  limitpage_ = 0;
  haveoppage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CopyLimitPolicy::~CopyLimitPolicy() {
  SharedDtor();
}

void CopyLimitPolicy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CopyLimitPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CopyLimitPolicy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CopyLimitPolicy_descriptor_;
}

const CopyLimitPolicy& CopyLimitPolicy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

CopyLimitPolicy* CopyLimitPolicy::default_instance_ = NULL;

CopyLimitPolicy* CopyLimitPolicy::New() const {
  return new CopyLimitPolicy;
}

void CopyLimitPolicy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    job_type_ = 0;
    job_limit_type_ = 0;
    job_limit_period_type_ = 0;
    state_ = 0;
    limitpage_ = 0;
    haveoppage_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CopyLimitPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .isafetec.JOB_TYPE job_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::JOB_TYPE_IsValid(value)) {
            set_job_type(static_cast< isafetec::JOB_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_job_limit_type;
        break;
      }
      
      // optional .isafetec.JOB_LIMIT_TYPE job_limit_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job_limit_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::JOB_LIMIT_TYPE_IsValid(value)) {
            set_job_limit_type(static_cast< isafetec::JOB_LIMIT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_job_limit_period_type;
        break;
      }
      
      // optional .isafetec.JOB_LIMIT_PERIOD_TYPE job_limit_period_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job_limit_period_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::JOB_LIMIT_PERIOD_TYPE_IsValid(value)) {
            set_job_limit_period_type(static_cast< isafetec::JOB_LIMIT_PERIOD_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }
      
      // optional int32 state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_LimitPage;
        break;
      }
      
      // optional int32 LimitPage = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LimitPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limitpage_)));
          set_has_limitpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_HaveOpPage;
        break;
      }
      
      // optional int32 HaveOpPage = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HaveOpPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &haveoppage_)));
          set_has_haveoppage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CopyLimitPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .isafetec.JOB_TYPE job_type = 1;
  if (has_job_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->job_type(), output);
  }
  
  // optional .isafetec.JOB_LIMIT_TYPE job_limit_type = 2;
  if (has_job_limit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->job_limit_type(), output);
  }
  
  // optional .isafetec.JOB_LIMIT_PERIOD_TYPE job_limit_period_type = 3;
  if (has_job_limit_period_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->job_limit_period_type(), output);
  }
  
  // optional int32 state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->state(), output);
  }
  
  // optional int32 LimitPage = 5;
  if (has_limitpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->limitpage(), output);
  }
  
  // optional int32 HaveOpPage = 6;
  if (has_haveoppage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->haveoppage(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CopyLimitPolicy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .isafetec.JOB_TYPE job_type = 1;
  if (has_job_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->job_type(), target);
  }
  
  // optional .isafetec.JOB_LIMIT_TYPE job_limit_type = 2;
  if (has_job_limit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->job_limit_type(), target);
  }
  
  // optional .isafetec.JOB_LIMIT_PERIOD_TYPE job_limit_period_type = 3;
  if (has_job_limit_period_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->job_limit_period_type(), target);
  }
  
  // optional int32 state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->state(), target);
  }
  
  // optional int32 LimitPage = 5;
  if (has_limitpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->limitpage(), target);
  }
  
  // optional int32 HaveOpPage = 6;
  if (has_haveoppage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->haveoppage(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CopyLimitPolicy::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .isafetec.JOB_TYPE job_type = 1;
    if (has_job_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->job_type());
    }
    
    // optional .isafetec.JOB_LIMIT_TYPE job_limit_type = 2;
    if (has_job_limit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->job_limit_type());
    }
    
    // optional .isafetec.JOB_LIMIT_PERIOD_TYPE job_limit_period_type = 3;
    if (has_job_limit_period_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->job_limit_period_type());
    }
    
    // optional int32 state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }
    
    // optional int32 LimitPage = 5;
    if (has_limitpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limitpage());
    }
    
    // optional int32 HaveOpPage = 6;
    if (has_haveoppage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->haveoppage());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CopyLimitPolicy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CopyLimitPolicy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CopyLimitPolicy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CopyLimitPolicy::MergeFrom(const CopyLimitPolicy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_job_type()) {
      set_job_type(from.job_type());
    }
    if (from.has_job_limit_type()) {
      set_job_limit_type(from.job_limit_type());
    }
    if (from.has_job_limit_period_type()) {
      set_job_limit_period_type(from.job_limit_period_type());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_limitpage()) {
      set_limitpage(from.limitpage());
    }
    if (from.has_haveoppage()) {
      set_haveoppage(from.haveoppage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CopyLimitPolicy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CopyLimitPolicy::CopyFrom(const CopyLimitPolicy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CopyLimitPolicy::IsInitialized() const {
  
  return true;
}

void CopyLimitPolicy::Swap(CopyLimitPolicy* other) {
  if (other != this) {
    std::swap(job_type_, other->job_type_);
    std::swap(job_limit_type_, other->job_limit_type_);
    std::swap(job_limit_period_type_, other->job_limit_period_type_);
    std::swap(state_, other->state_);
    std::swap(limitpage_, other->limitpage_);
    std::swap(haveoppage_, other->haveoppage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CopyLimitPolicy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CopyLimitPolicy_descriptor_;
  metadata.reflection = CopyLimitPolicy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScanLimitPolicy::kJobTypeFieldNumber;
const int ScanLimitPolicy::kJobLimitTypeFieldNumber;
const int ScanLimitPolicy::kJobLimitPeriodTypeFieldNumber;
const int ScanLimitPolicy::kStateFieldNumber;
const int ScanLimitPolicy::kLimitPageFieldNumber;
const int ScanLimitPolicy::kHaveOpPageFieldNumber;
#endif  // !_MSC_VER

ScanLimitPolicy::ScanLimitPolicy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScanLimitPolicy::InitAsDefaultInstance() {
}

ScanLimitPolicy::ScanLimitPolicy(const ScanLimitPolicy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScanLimitPolicy::SharedCtor() {
  _cached_size_ = 0;
  job_type_ = 0;
  job_limit_type_ = 0;
  job_limit_period_type_ = 0;
  state_ = 0;
  limitpage_ = 0;
  haveoppage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScanLimitPolicy::~ScanLimitPolicy() {
  SharedDtor();
}

void ScanLimitPolicy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScanLimitPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScanLimitPolicy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScanLimitPolicy_descriptor_;
}

const ScanLimitPolicy& ScanLimitPolicy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

ScanLimitPolicy* ScanLimitPolicy::default_instance_ = NULL;

ScanLimitPolicy* ScanLimitPolicy::New() const {
  return new ScanLimitPolicy;
}

void ScanLimitPolicy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    job_type_ = 0;
    job_limit_type_ = 0;
    job_limit_period_type_ = 0;
    state_ = 0;
    limitpage_ = 0;
    haveoppage_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScanLimitPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .isafetec.JOB_TYPE job_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::JOB_TYPE_IsValid(value)) {
            set_job_type(static_cast< isafetec::JOB_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_job_limit_type;
        break;
      }
      
      // optional .isafetec.JOB_LIMIT_TYPE job_limit_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job_limit_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::JOB_LIMIT_TYPE_IsValid(value)) {
            set_job_limit_type(static_cast< isafetec::JOB_LIMIT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_job_limit_period_type;
        break;
      }
      
      // optional .isafetec.JOB_LIMIT_PERIOD_TYPE job_limit_period_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job_limit_period_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::JOB_LIMIT_PERIOD_TYPE_IsValid(value)) {
            set_job_limit_period_type(static_cast< isafetec::JOB_LIMIT_PERIOD_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }
      
      // optional int32 state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_LimitPage;
        break;
      }
      
      // optional int32 LimitPage = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LimitPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limitpage_)));
          set_has_limitpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_HaveOpPage;
        break;
      }
      
      // optional int32 HaveOpPage = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HaveOpPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &haveoppage_)));
          set_has_haveoppage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScanLimitPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .isafetec.JOB_TYPE job_type = 1;
  if (has_job_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->job_type(), output);
  }
  
  // optional .isafetec.JOB_LIMIT_TYPE job_limit_type = 2;
  if (has_job_limit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->job_limit_type(), output);
  }
  
  // optional .isafetec.JOB_LIMIT_PERIOD_TYPE job_limit_period_type = 3;
  if (has_job_limit_period_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->job_limit_period_type(), output);
  }
  
  // optional int32 state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->state(), output);
  }
  
  // optional int32 LimitPage = 5;
  if (has_limitpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->limitpage(), output);
  }
  
  // optional int32 HaveOpPage = 6;
  if (has_haveoppage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->haveoppage(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScanLimitPolicy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .isafetec.JOB_TYPE job_type = 1;
  if (has_job_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->job_type(), target);
  }
  
  // optional .isafetec.JOB_LIMIT_TYPE job_limit_type = 2;
  if (has_job_limit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->job_limit_type(), target);
  }
  
  // optional .isafetec.JOB_LIMIT_PERIOD_TYPE job_limit_period_type = 3;
  if (has_job_limit_period_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->job_limit_period_type(), target);
  }
  
  // optional int32 state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->state(), target);
  }
  
  // optional int32 LimitPage = 5;
  if (has_limitpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->limitpage(), target);
  }
  
  // optional int32 HaveOpPage = 6;
  if (has_haveoppage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->haveoppage(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScanLimitPolicy::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .isafetec.JOB_TYPE job_type = 1;
    if (has_job_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->job_type());
    }
    
    // optional .isafetec.JOB_LIMIT_TYPE job_limit_type = 2;
    if (has_job_limit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->job_limit_type());
    }
    
    // optional .isafetec.JOB_LIMIT_PERIOD_TYPE job_limit_period_type = 3;
    if (has_job_limit_period_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->job_limit_period_type());
    }
    
    // optional int32 state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }
    
    // optional int32 LimitPage = 5;
    if (has_limitpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limitpage());
    }
    
    // optional int32 HaveOpPage = 6;
    if (has_haveoppage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->haveoppage());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScanLimitPolicy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScanLimitPolicy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScanLimitPolicy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScanLimitPolicy::MergeFrom(const ScanLimitPolicy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_job_type()) {
      set_job_type(from.job_type());
    }
    if (from.has_job_limit_type()) {
      set_job_limit_type(from.job_limit_type());
    }
    if (from.has_job_limit_period_type()) {
      set_job_limit_period_type(from.job_limit_period_type());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_limitpage()) {
      set_limitpage(from.limitpage());
    }
    if (from.has_haveoppage()) {
      set_haveoppage(from.haveoppage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScanLimitPolicy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanLimitPolicy::CopyFrom(const ScanLimitPolicy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanLimitPolicy::IsInitialized() const {
  
  return true;
}

void ScanLimitPolicy::Swap(ScanLimitPolicy* other) {
  if (other != this) {
    std::swap(job_type_, other->job_type_);
    std::swap(job_limit_type_, other->job_limit_type_);
    std::swap(job_limit_period_type_, other->job_limit_period_type_);
    std::swap(state_, other->state_);
    std::swap(limitpage_, other->limitpage_);
    std::swap(haveoppage_, other->haveoppage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScanLimitPolicy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScanLimitPolicy_descriptor_;
  metadata.reflection = ScanLimitPolicy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrinterMeterLog::kPrintIdFieldNumber;
const int PrinterMeterLog::kRecordPrintMeterTimeFieldNumber;
const int PrinterMeterLog::kOpAdminIdFieldNumber;
const int PrinterMeterLog::kA4PrintTotalPageFieldNumber;
const int PrinterMeterLog::kA4PrintColorPageFieldNumber;
const int PrinterMeterLog::kA4PrintHBPageFieldNumber;
const int PrinterMeterLog::kA3PrintTotalPageFieldNumber;
const int PrinterMeterLog::kA3PrintColorPageFieldNumber;
const int PrinterMeterLog::kA3PrintHBPageFieldNumber;
const int PrinterMeterLog::kOtherPrintTotalPageFieldNumber;
const int PrinterMeterLog::kOtherPrintColorPageFieldNumber;
const int PrinterMeterLog::kOtherPrintHBPageFieldNumber;
const int PrinterMeterLog::kA4CopyTotalPageFieldNumber;
const int PrinterMeterLog::kA4CopyColorPageFieldNumber;
const int PrinterMeterLog::kA4CopyHBPageFieldNumber;
const int PrinterMeterLog::kA3CopyTotalPageFieldNumber;
const int PrinterMeterLog::kA3CopyColorPageFieldNumber;
const int PrinterMeterLog::kA3CopyHBPageFieldNumber;
const int PrinterMeterLog::kOtherCopyTotalPageFieldNumber;
const int PrinterMeterLog::kOtherCopyColorPageFieldNumber;
const int PrinterMeterLog::kOtherCopyHBPageFieldNumber;
const int PrinterMeterLog::kScanTotalPageFieldNumber;
const int PrinterMeterLog::kScanBigColorPageFieldNumber;
const int PrinterMeterLog::kScanBigHBPageFieldNumber;
const int PrinterMeterLog::kScanSmallColorPageFieldNumber;
const int PrinterMeterLog::kScanSmallHBPageFieldNumber;
const int PrinterMeterLog::kA4FaxTotalPageFieldNumber;
const int PrinterMeterLog::kA4FaxColorPageFieldNumber;
const int PrinterMeterLog::kA4FaxHBPageFieldNumber;
const int PrinterMeterLog::kA3FaxTotalPageFieldNumber;
const int PrinterMeterLog::kA3FaxColorPageFieldNumber;
const int PrinterMeterLog::kA3FaxHBPageFieldNumber;
const int PrinterMeterLog::kOtherFaxTotalPageFieldNumber;
const int PrinterMeterLog::kOtherFaxColorPageFieldNumber;
const int PrinterMeterLog::kOtherFaxHBPageFieldNumber;
const int PrinterMeterLog::kOtherOpTotalPageFieldNumber;
const int PrinterMeterLog::kOtherOpColorPageFieldNumber;
const int PrinterMeterLog::kOtherOpHBPageFieldNumber;
#endif  // !_MSC_VER

PrinterMeterLog::PrinterMeterLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrinterMeterLog::InitAsDefaultInstance() {
}

PrinterMeterLog::PrinterMeterLog(const PrinterMeterLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrinterMeterLog::SharedCtor() {
  _cached_size_ = 0;
  printid_ = 0;
  recordprintmetertime_ = 0;
  opadminid_ = 0;
  a4printtotalpage_ = 0;
  a4printcolorpage_ = 0;
  a4printhbpage_ = 0;
  a3printtotalpage_ = 0;
  a3printcolorpage_ = 0;
  a3printhbpage_ = 0;
  otherprinttotalpage_ = 0;
  otherprintcolorpage_ = 0;
  otherprinthbpage_ = 0;
  a4copytotalpage_ = 0;
  a4copycolorpage_ = 0;
  a4copyhbpage_ = 0;
  a3copytotalpage_ = 0;
  a3copycolorpage_ = 0;
  a3copyhbpage_ = 0;
  othercopytotalpage_ = 0;
  othercopycolorpage_ = 0;
  othercopyhbpage_ = 0;
  scantotalpage_ = 0;
  scanbigcolorpage_ = 0;
  scanbighbpage_ = 0;
  scansmallcolorpage_ = 0;
  scansmallhbpage_ = 0;
  a4faxtotalpage_ = 0;
  a4faxcolorpage_ = 0;
  a4faxhbpage_ = 0;
  a3faxtotalpage_ = 0;
  a3faxcolorpage_ = 0;
  a3faxhbpage_ = 0;
  otherfaxtotalpage_ = 0;
  otherfaxcolorpage_ = 0;
  otherfaxhbpage_ = 0;
  otheroptotalpage_ = 0;
  otheropcolorpage_ = 0;
  otherophbpage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrinterMeterLog::~PrinterMeterLog() {
  SharedDtor();
}

void PrinterMeterLog::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrinterMeterLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrinterMeterLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrinterMeterLog_descriptor_;
}

const PrinterMeterLog& PrinterMeterLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrinterMeterLog* PrinterMeterLog::default_instance_ = NULL;

PrinterMeterLog* PrinterMeterLog::New() const {
  return new PrinterMeterLog;
}

void PrinterMeterLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    printid_ = 0;
    recordprintmetertime_ = 0;
    opadminid_ = 0;
    a4printtotalpage_ = 0;
    a4printcolorpage_ = 0;
    a4printhbpage_ = 0;
    a3printtotalpage_ = 0;
    a3printcolorpage_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    a3printhbpage_ = 0;
    otherprinttotalpage_ = 0;
    otherprintcolorpage_ = 0;
    otherprinthbpage_ = 0;
    a4copytotalpage_ = 0;
    a4copycolorpage_ = 0;
    a4copyhbpage_ = 0;
    a3copytotalpage_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    a3copycolorpage_ = 0;
    a3copyhbpage_ = 0;
    othercopytotalpage_ = 0;
    othercopycolorpage_ = 0;
    othercopyhbpage_ = 0;
    scantotalpage_ = 0;
    scanbigcolorpage_ = 0;
    scanbighbpage_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    scansmallcolorpage_ = 0;
    scansmallhbpage_ = 0;
    a4faxtotalpage_ = 0;
    a4faxcolorpage_ = 0;
    a4faxhbpage_ = 0;
    a3faxtotalpage_ = 0;
    a3faxcolorpage_ = 0;
    a3faxhbpage_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    otherfaxtotalpage_ = 0;
    otherfaxcolorpage_ = 0;
    otherfaxhbpage_ = 0;
    otheroptotalpage_ = 0;
    otheropcolorpage_ = 0;
    otherophbpage_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrinterMeterLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 PrintId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &printid_)));
          set_has_printid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_RecordPrintMeterTime;
        break;
      }
      
      // optional double RecordPrintMeterTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_RecordPrintMeterTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &recordprintmetertime_)));
          set_has_recordprintmetertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OpAdminId;
        break;
      }
      
      // optional int32 OpAdminId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OpAdminId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opadminid_)));
          set_has_opadminid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_A4PrintTotalPage;
        break;
      }
      
      // optional int32 A4PrintTotalPage = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_A4PrintTotalPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a4printtotalpage_)));
          set_has_a4printtotalpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_A4PrintColorPage;
        break;
      }
      
      // optional int32 A4PrintColorPage = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_A4PrintColorPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a4printcolorpage_)));
          set_has_a4printcolorpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_A4PrintHBPage;
        break;
      }
      
      // optional int32 A4PrintHBPage = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_A4PrintHBPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a4printhbpage_)));
          set_has_a4printhbpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_A3PrintTotalPage;
        break;
      }
      
      // optional int32 A3PrintTotalPage = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_A3PrintTotalPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a3printtotalpage_)));
          set_has_a3printtotalpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_A3PrintColorPage;
        break;
      }
      
      // optional int32 A3PrintColorPage = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_A3PrintColorPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a3printcolorpage_)));
          set_has_a3printcolorpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_A3PrintHBPage;
        break;
      }
      
      // optional int32 A3PrintHBPage = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_A3PrintHBPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a3printhbpage_)));
          set_has_a3printhbpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_OtherPrintTotalPage;
        break;
      }
      
      // optional int32 OtherPrintTotalPage = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OtherPrintTotalPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &otherprinttotalpage_)));
          set_has_otherprinttotalpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_OtherPrintColorPage;
        break;
      }
      
      // optional int32 OtherPrintColorPage = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OtherPrintColorPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &otherprintcolorpage_)));
          set_has_otherprintcolorpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_OtherPrintHBPage;
        break;
      }
      
      // optional int32 OtherPrintHBPage = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OtherPrintHBPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &otherprinthbpage_)));
          set_has_otherprinthbpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_A4CopyTotalPage;
        break;
      }
      
      // optional int32 A4CopyTotalPage = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_A4CopyTotalPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a4copytotalpage_)));
          set_has_a4copytotalpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_A4CopyColorPage;
        break;
      }
      
      // optional int32 A4CopyColorPage = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_A4CopyColorPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a4copycolorpage_)));
          set_has_a4copycolorpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_A4CopyHBPage;
        break;
      }
      
      // optional int32 A4CopyHBPage = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_A4CopyHBPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a4copyhbpage_)));
          set_has_a4copyhbpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_A3CopyTotalPage;
        break;
      }
      
      // optional int32 A3CopyTotalPage = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_A3CopyTotalPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a3copytotalpage_)));
          set_has_a3copytotalpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_A3CopyColorPage;
        break;
      }
      
      // optional int32 A3CopyColorPage = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_A3CopyColorPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a3copycolorpage_)));
          set_has_a3copycolorpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_A3CopyHBPage;
        break;
      }
      
      // optional int32 A3CopyHBPage = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_A3CopyHBPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a3copyhbpage_)));
          set_has_a3copyhbpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_OtherCopyTotalPage;
        break;
      }
      
      // optional int32 OtherCopyTotalPage = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OtherCopyTotalPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &othercopytotalpage_)));
          set_has_othercopytotalpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_OtherCopyColorPage;
        break;
      }
      
      // optional int32 OtherCopyColorPage = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OtherCopyColorPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &othercopycolorpage_)));
          set_has_othercopycolorpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_OtherCopyHBPage;
        break;
      }
      
      // optional int32 OtherCopyHBPage = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OtherCopyHBPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &othercopyhbpage_)));
          set_has_othercopyhbpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_ScanTotalPage;
        break;
      }
      
      // optional int32 ScanTotalPage = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ScanTotalPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scantotalpage_)));
          set_has_scantotalpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_ScanBigColorPage;
        break;
      }
      
      // optional int32 ScanBigColorPage = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ScanBigColorPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scanbigcolorpage_)));
          set_has_scanbigcolorpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_ScanBigHBPage;
        break;
      }
      
      // optional int32 ScanBigHBPage = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ScanBigHBPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scanbighbpage_)));
          set_has_scanbighbpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_ScanSmallColorPage;
        break;
      }
      
      // optional int32 ScanSmallColorPage = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ScanSmallColorPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scansmallcolorpage_)));
          set_has_scansmallcolorpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_ScanSmallHBPage;
        break;
      }
      
      // optional int32 ScanSmallHBPage = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ScanSmallHBPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scansmallhbpage_)));
          set_has_scansmallhbpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_A4FaxTotalPage;
        break;
      }
      
      // optional int32 A4FaxTotalPage = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_A4FaxTotalPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a4faxtotalpage_)));
          set_has_a4faxtotalpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_A4FaxColorPage;
        break;
      }
      
      // optional int32 A4FaxColorPage = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_A4FaxColorPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a4faxcolorpage_)));
          set_has_a4faxcolorpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_A4FaxHBPage;
        break;
      }
      
      // optional int32 A4FaxHBPage = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_A4FaxHBPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a4faxhbpage_)));
          set_has_a4faxhbpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_A3FaxTotalPage;
        break;
      }
      
      // optional int32 A3FaxTotalPage = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_A3FaxTotalPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a3faxtotalpage_)));
          set_has_a3faxtotalpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_A3FaxColorPage;
        break;
      }
      
      // optional int32 A3FaxColorPage = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_A3FaxColorPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a3faxcolorpage_)));
          set_has_a3faxcolorpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_A3FaxHBPage;
        break;
      }
      
      // optional int32 A3FaxHBPage = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_A3FaxHBPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a3faxhbpage_)));
          set_has_a3faxhbpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_OtherFaxTotalPage;
        break;
      }
      
      // optional int32 OtherFaxTotalPage = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OtherFaxTotalPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &otherfaxtotalpage_)));
          set_has_otherfaxtotalpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_OtherFaxColorPage;
        break;
      }
      
      // optional int32 OtherFaxColorPage = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OtherFaxColorPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &otherfaxcolorpage_)));
          set_has_otherfaxcolorpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_OtherFaxHBPage;
        break;
      }
      
      // optional int32 OtherFaxHBPage = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OtherFaxHBPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &otherfaxhbpage_)));
          set_has_otherfaxhbpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_OtherOpTotalPage;
        break;
      }
      
      // optional int32 OtherOpTotalPage = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OtherOpTotalPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &otheroptotalpage_)));
          set_has_otheroptotalpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_OtherOpColorPage;
        break;
      }
      
      // optional int32 OtherOpColorPage = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OtherOpColorPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &otheropcolorpage_)));
          set_has_otheropcolorpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_OtherOpHBPage;
        break;
      }
      
      // optional int32 OtherOpHBPage = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OtherOpHBPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &otherophbpage_)));
          set_has_otherophbpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrinterMeterLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 PrintId = 1;
  if (has_printid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->printid(), output);
  }
  
  // optional double RecordPrintMeterTime = 2;
  if (has_recordprintmetertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->recordprintmetertime(), output);
  }
  
  // optional int32 OpAdminId = 3;
  if (has_opadminid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->opadminid(), output);
  }
  
  // optional int32 A4PrintTotalPage = 4;
  if (has_a4printtotalpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->a4printtotalpage(), output);
  }
  
  // optional int32 A4PrintColorPage = 5;
  if (has_a4printcolorpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->a4printcolorpage(), output);
  }
  
  // optional int32 A4PrintHBPage = 6;
  if (has_a4printhbpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->a4printhbpage(), output);
  }
  
  // optional int32 A3PrintTotalPage = 7;
  if (has_a3printtotalpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->a3printtotalpage(), output);
  }
  
  // optional int32 A3PrintColorPage = 8;
  if (has_a3printcolorpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->a3printcolorpage(), output);
  }
  
  // optional int32 A3PrintHBPage = 9;
  if (has_a3printhbpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->a3printhbpage(), output);
  }
  
  // optional int32 OtherPrintTotalPage = 10;
  if (has_otherprinttotalpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->otherprinttotalpage(), output);
  }
  
  // optional int32 OtherPrintColorPage = 11;
  if (has_otherprintcolorpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->otherprintcolorpage(), output);
  }
  
  // optional int32 OtherPrintHBPage = 12;
  if (has_otherprinthbpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->otherprinthbpage(), output);
  }
  
  // optional int32 A4CopyTotalPage = 13;
  if (has_a4copytotalpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->a4copytotalpage(), output);
  }
  
  // optional int32 A4CopyColorPage = 14;
  if (has_a4copycolorpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->a4copycolorpage(), output);
  }
  
  // optional int32 A4CopyHBPage = 15;
  if (has_a4copyhbpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->a4copyhbpage(), output);
  }
  
  // optional int32 A3CopyTotalPage = 16;
  if (has_a3copytotalpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->a3copytotalpage(), output);
  }
  
  // optional int32 A3CopyColorPage = 17;
  if (has_a3copycolorpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->a3copycolorpage(), output);
  }
  
  // optional int32 A3CopyHBPage = 18;
  if (has_a3copyhbpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->a3copyhbpage(), output);
  }
  
  // optional int32 OtherCopyTotalPage = 19;
  if (has_othercopytotalpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->othercopytotalpage(), output);
  }
  
  // optional int32 OtherCopyColorPage = 20;
  if (has_othercopycolorpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->othercopycolorpage(), output);
  }
  
  // optional int32 OtherCopyHBPage = 21;
  if (has_othercopyhbpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->othercopyhbpage(), output);
  }
  
  // optional int32 ScanTotalPage = 22;
  if (has_scantotalpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->scantotalpage(), output);
  }
  
  // optional int32 ScanBigColorPage = 23;
  if (has_scanbigcolorpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->scanbigcolorpage(), output);
  }
  
  // optional int32 ScanBigHBPage = 24;
  if (has_scanbighbpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->scanbighbpage(), output);
  }
  
  // optional int32 ScanSmallColorPage = 25;
  if (has_scansmallcolorpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->scansmallcolorpage(), output);
  }
  
  // optional int32 ScanSmallHBPage = 26;
  if (has_scansmallhbpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->scansmallhbpage(), output);
  }
  
  // optional int32 A4FaxTotalPage = 27;
  if (has_a4faxtotalpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->a4faxtotalpage(), output);
  }
  
  // optional int32 A4FaxColorPage = 28;
  if (has_a4faxcolorpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->a4faxcolorpage(), output);
  }
  
  // optional int32 A4FaxHBPage = 29;
  if (has_a4faxhbpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->a4faxhbpage(), output);
  }
  
  // optional int32 A3FaxTotalPage = 30;
  if (has_a3faxtotalpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->a3faxtotalpage(), output);
  }
  
  // optional int32 A3FaxColorPage = 31;
  if (has_a3faxcolorpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->a3faxcolorpage(), output);
  }
  
  // optional int32 A3FaxHBPage = 32;
  if (has_a3faxhbpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->a3faxhbpage(), output);
  }
  
  // optional int32 OtherFaxTotalPage = 33;
  if (has_otherfaxtotalpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->otherfaxtotalpage(), output);
  }
  
  // optional int32 OtherFaxColorPage = 34;
  if (has_otherfaxcolorpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->otherfaxcolorpage(), output);
  }
  
  // optional int32 OtherFaxHBPage = 35;
  if (has_otherfaxhbpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->otherfaxhbpage(), output);
  }
  
  // optional int32 OtherOpTotalPage = 36;
  if (has_otheroptotalpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->otheroptotalpage(), output);
  }
  
  // optional int32 OtherOpColorPage = 37;
  if (has_otheropcolorpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->otheropcolorpage(), output);
  }
  
  // optional int32 OtherOpHBPage = 38;
  if (has_otherophbpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->otherophbpage(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrinterMeterLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 PrintId = 1;
  if (has_printid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->printid(), target);
  }
  
  // optional double RecordPrintMeterTime = 2;
  if (has_recordprintmetertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->recordprintmetertime(), target);
  }
  
  // optional int32 OpAdminId = 3;
  if (has_opadminid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->opadminid(), target);
  }
  
  // optional int32 A4PrintTotalPage = 4;
  if (has_a4printtotalpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->a4printtotalpage(), target);
  }
  
  // optional int32 A4PrintColorPage = 5;
  if (has_a4printcolorpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->a4printcolorpage(), target);
  }
  
  // optional int32 A4PrintHBPage = 6;
  if (has_a4printhbpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->a4printhbpage(), target);
  }
  
  // optional int32 A3PrintTotalPage = 7;
  if (has_a3printtotalpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->a3printtotalpage(), target);
  }
  
  // optional int32 A3PrintColorPage = 8;
  if (has_a3printcolorpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->a3printcolorpage(), target);
  }
  
  // optional int32 A3PrintHBPage = 9;
  if (has_a3printhbpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->a3printhbpage(), target);
  }
  
  // optional int32 OtherPrintTotalPage = 10;
  if (has_otherprinttotalpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->otherprinttotalpage(), target);
  }
  
  // optional int32 OtherPrintColorPage = 11;
  if (has_otherprintcolorpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->otherprintcolorpage(), target);
  }
  
  // optional int32 OtherPrintHBPage = 12;
  if (has_otherprinthbpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->otherprinthbpage(), target);
  }
  
  // optional int32 A4CopyTotalPage = 13;
  if (has_a4copytotalpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->a4copytotalpage(), target);
  }
  
  // optional int32 A4CopyColorPage = 14;
  if (has_a4copycolorpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->a4copycolorpage(), target);
  }
  
  // optional int32 A4CopyHBPage = 15;
  if (has_a4copyhbpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->a4copyhbpage(), target);
  }
  
  // optional int32 A3CopyTotalPage = 16;
  if (has_a3copytotalpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->a3copytotalpage(), target);
  }
  
  // optional int32 A3CopyColorPage = 17;
  if (has_a3copycolorpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->a3copycolorpage(), target);
  }
  
  // optional int32 A3CopyHBPage = 18;
  if (has_a3copyhbpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->a3copyhbpage(), target);
  }
  
  // optional int32 OtherCopyTotalPage = 19;
  if (has_othercopytotalpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->othercopytotalpage(), target);
  }
  
  // optional int32 OtherCopyColorPage = 20;
  if (has_othercopycolorpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->othercopycolorpage(), target);
  }
  
  // optional int32 OtherCopyHBPage = 21;
  if (has_othercopyhbpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->othercopyhbpage(), target);
  }
  
  // optional int32 ScanTotalPage = 22;
  if (has_scantotalpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->scantotalpage(), target);
  }
  
  // optional int32 ScanBigColorPage = 23;
  if (has_scanbigcolorpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->scanbigcolorpage(), target);
  }
  
  // optional int32 ScanBigHBPage = 24;
  if (has_scanbighbpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->scanbighbpage(), target);
  }
  
  // optional int32 ScanSmallColorPage = 25;
  if (has_scansmallcolorpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->scansmallcolorpage(), target);
  }
  
  // optional int32 ScanSmallHBPage = 26;
  if (has_scansmallhbpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->scansmallhbpage(), target);
  }
  
  // optional int32 A4FaxTotalPage = 27;
  if (has_a4faxtotalpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->a4faxtotalpage(), target);
  }
  
  // optional int32 A4FaxColorPage = 28;
  if (has_a4faxcolorpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->a4faxcolorpage(), target);
  }
  
  // optional int32 A4FaxHBPage = 29;
  if (has_a4faxhbpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->a4faxhbpage(), target);
  }
  
  // optional int32 A3FaxTotalPage = 30;
  if (has_a3faxtotalpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->a3faxtotalpage(), target);
  }
  
  // optional int32 A3FaxColorPage = 31;
  if (has_a3faxcolorpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->a3faxcolorpage(), target);
  }
  
  // optional int32 A3FaxHBPage = 32;
  if (has_a3faxhbpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->a3faxhbpage(), target);
  }
  
  // optional int32 OtherFaxTotalPage = 33;
  if (has_otherfaxtotalpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->otherfaxtotalpage(), target);
  }
  
  // optional int32 OtherFaxColorPage = 34;
  if (has_otherfaxcolorpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->otherfaxcolorpage(), target);
  }
  
  // optional int32 OtherFaxHBPage = 35;
  if (has_otherfaxhbpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->otherfaxhbpage(), target);
  }
  
  // optional int32 OtherOpTotalPage = 36;
  if (has_otheroptotalpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->otheroptotalpage(), target);
  }
  
  // optional int32 OtherOpColorPage = 37;
  if (has_otheropcolorpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->otheropcolorpage(), target);
  }
  
  // optional int32 OtherOpHBPage = 38;
  if (has_otherophbpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->otherophbpage(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrinterMeterLog::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 PrintId = 1;
    if (has_printid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->printid());
    }
    
    // optional double RecordPrintMeterTime = 2;
    if (has_recordprintmetertime()) {
      total_size += 1 + 8;
    }
    
    // optional int32 OpAdminId = 3;
    if (has_opadminid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opadminid());
    }
    
    // optional int32 A4PrintTotalPage = 4;
    if (has_a4printtotalpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->a4printtotalpage());
    }
    
    // optional int32 A4PrintColorPage = 5;
    if (has_a4printcolorpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->a4printcolorpage());
    }
    
    // optional int32 A4PrintHBPage = 6;
    if (has_a4printhbpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->a4printhbpage());
    }
    
    // optional int32 A3PrintTotalPage = 7;
    if (has_a3printtotalpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->a3printtotalpage());
    }
    
    // optional int32 A3PrintColorPage = 8;
    if (has_a3printcolorpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->a3printcolorpage());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 A3PrintHBPage = 9;
    if (has_a3printhbpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->a3printhbpage());
    }
    
    // optional int32 OtherPrintTotalPage = 10;
    if (has_otherprinttotalpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->otherprinttotalpage());
    }
    
    // optional int32 OtherPrintColorPage = 11;
    if (has_otherprintcolorpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->otherprintcolorpage());
    }
    
    // optional int32 OtherPrintHBPage = 12;
    if (has_otherprinthbpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->otherprinthbpage());
    }
    
    // optional int32 A4CopyTotalPage = 13;
    if (has_a4copytotalpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->a4copytotalpage());
    }
    
    // optional int32 A4CopyColorPage = 14;
    if (has_a4copycolorpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->a4copycolorpage());
    }
    
    // optional int32 A4CopyHBPage = 15;
    if (has_a4copyhbpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->a4copyhbpage());
    }
    
    // optional int32 A3CopyTotalPage = 16;
    if (has_a3copytotalpage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->a3copytotalpage());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 A3CopyColorPage = 17;
    if (has_a3copycolorpage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->a3copycolorpage());
    }
    
    // optional int32 A3CopyHBPage = 18;
    if (has_a3copyhbpage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->a3copyhbpage());
    }
    
    // optional int32 OtherCopyTotalPage = 19;
    if (has_othercopytotalpage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->othercopytotalpage());
    }
    
    // optional int32 OtherCopyColorPage = 20;
    if (has_othercopycolorpage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->othercopycolorpage());
    }
    
    // optional int32 OtherCopyHBPage = 21;
    if (has_othercopyhbpage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->othercopyhbpage());
    }
    
    // optional int32 ScanTotalPage = 22;
    if (has_scantotalpage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scantotalpage());
    }
    
    // optional int32 ScanBigColorPage = 23;
    if (has_scanbigcolorpage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scanbigcolorpage());
    }
    
    // optional int32 ScanBigHBPage = 24;
    if (has_scanbighbpage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scanbighbpage());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 ScanSmallColorPage = 25;
    if (has_scansmallcolorpage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scansmallcolorpage());
    }
    
    // optional int32 ScanSmallHBPage = 26;
    if (has_scansmallhbpage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scansmallhbpage());
    }
    
    // optional int32 A4FaxTotalPage = 27;
    if (has_a4faxtotalpage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->a4faxtotalpage());
    }
    
    // optional int32 A4FaxColorPage = 28;
    if (has_a4faxcolorpage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->a4faxcolorpage());
    }
    
    // optional int32 A4FaxHBPage = 29;
    if (has_a4faxhbpage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->a4faxhbpage());
    }
    
    // optional int32 A3FaxTotalPage = 30;
    if (has_a3faxtotalpage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->a3faxtotalpage());
    }
    
    // optional int32 A3FaxColorPage = 31;
    if (has_a3faxcolorpage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->a3faxcolorpage());
    }
    
    // optional int32 A3FaxHBPage = 32;
    if (has_a3faxhbpage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->a3faxhbpage());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 OtherFaxTotalPage = 33;
    if (has_otherfaxtotalpage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->otherfaxtotalpage());
    }
    
    // optional int32 OtherFaxColorPage = 34;
    if (has_otherfaxcolorpage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->otherfaxcolorpage());
    }
    
    // optional int32 OtherFaxHBPage = 35;
    if (has_otherfaxhbpage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->otherfaxhbpage());
    }
    
    // optional int32 OtherOpTotalPage = 36;
    if (has_otheroptotalpage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->otheroptotalpage());
    }
    
    // optional int32 OtherOpColorPage = 37;
    if (has_otheropcolorpage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->otheropcolorpage());
    }
    
    // optional int32 OtherOpHBPage = 38;
    if (has_otherophbpage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->otherophbpage());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrinterMeterLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrinterMeterLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrinterMeterLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrinterMeterLog::MergeFrom(const PrinterMeterLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_printid()) {
      set_printid(from.printid());
    }
    if (from.has_recordprintmetertime()) {
      set_recordprintmetertime(from.recordprintmetertime());
    }
    if (from.has_opadminid()) {
      set_opadminid(from.opadminid());
    }
    if (from.has_a4printtotalpage()) {
      set_a4printtotalpage(from.a4printtotalpage());
    }
    if (from.has_a4printcolorpage()) {
      set_a4printcolorpage(from.a4printcolorpage());
    }
    if (from.has_a4printhbpage()) {
      set_a4printhbpage(from.a4printhbpage());
    }
    if (from.has_a3printtotalpage()) {
      set_a3printtotalpage(from.a3printtotalpage());
    }
    if (from.has_a3printcolorpage()) {
      set_a3printcolorpage(from.a3printcolorpage());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_a3printhbpage()) {
      set_a3printhbpage(from.a3printhbpage());
    }
    if (from.has_otherprinttotalpage()) {
      set_otherprinttotalpage(from.otherprinttotalpage());
    }
    if (from.has_otherprintcolorpage()) {
      set_otherprintcolorpage(from.otherprintcolorpage());
    }
    if (from.has_otherprinthbpage()) {
      set_otherprinthbpage(from.otherprinthbpage());
    }
    if (from.has_a4copytotalpage()) {
      set_a4copytotalpage(from.a4copytotalpage());
    }
    if (from.has_a4copycolorpage()) {
      set_a4copycolorpage(from.a4copycolorpage());
    }
    if (from.has_a4copyhbpage()) {
      set_a4copyhbpage(from.a4copyhbpage());
    }
    if (from.has_a3copytotalpage()) {
      set_a3copytotalpage(from.a3copytotalpage());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_a3copycolorpage()) {
      set_a3copycolorpage(from.a3copycolorpage());
    }
    if (from.has_a3copyhbpage()) {
      set_a3copyhbpage(from.a3copyhbpage());
    }
    if (from.has_othercopytotalpage()) {
      set_othercopytotalpage(from.othercopytotalpage());
    }
    if (from.has_othercopycolorpage()) {
      set_othercopycolorpage(from.othercopycolorpage());
    }
    if (from.has_othercopyhbpage()) {
      set_othercopyhbpage(from.othercopyhbpage());
    }
    if (from.has_scantotalpage()) {
      set_scantotalpage(from.scantotalpage());
    }
    if (from.has_scanbigcolorpage()) {
      set_scanbigcolorpage(from.scanbigcolorpage());
    }
    if (from.has_scanbighbpage()) {
      set_scanbighbpage(from.scanbighbpage());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_scansmallcolorpage()) {
      set_scansmallcolorpage(from.scansmallcolorpage());
    }
    if (from.has_scansmallhbpage()) {
      set_scansmallhbpage(from.scansmallhbpage());
    }
    if (from.has_a4faxtotalpage()) {
      set_a4faxtotalpage(from.a4faxtotalpage());
    }
    if (from.has_a4faxcolorpage()) {
      set_a4faxcolorpage(from.a4faxcolorpage());
    }
    if (from.has_a4faxhbpage()) {
      set_a4faxhbpage(from.a4faxhbpage());
    }
    if (from.has_a3faxtotalpage()) {
      set_a3faxtotalpage(from.a3faxtotalpage());
    }
    if (from.has_a3faxcolorpage()) {
      set_a3faxcolorpage(from.a3faxcolorpage());
    }
    if (from.has_a3faxhbpage()) {
      set_a3faxhbpage(from.a3faxhbpage());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_otherfaxtotalpage()) {
      set_otherfaxtotalpage(from.otherfaxtotalpage());
    }
    if (from.has_otherfaxcolorpage()) {
      set_otherfaxcolorpage(from.otherfaxcolorpage());
    }
    if (from.has_otherfaxhbpage()) {
      set_otherfaxhbpage(from.otherfaxhbpage());
    }
    if (from.has_otheroptotalpage()) {
      set_otheroptotalpage(from.otheroptotalpage());
    }
    if (from.has_otheropcolorpage()) {
      set_otheropcolorpage(from.otheropcolorpage());
    }
    if (from.has_otherophbpage()) {
      set_otherophbpage(from.otherophbpage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrinterMeterLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrinterMeterLog::CopyFrom(const PrinterMeterLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrinterMeterLog::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PrinterMeterLog::Swap(PrinterMeterLog* other) {
  if (other != this) {
    std::swap(printid_, other->printid_);
    std::swap(recordprintmetertime_, other->recordprintmetertime_);
    std::swap(opadminid_, other->opadminid_);
    std::swap(a4printtotalpage_, other->a4printtotalpage_);
    std::swap(a4printcolorpage_, other->a4printcolorpage_);
    std::swap(a4printhbpage_, other->a4printhbpage_);
    std::swap(a3printtotalpage_, other->a3printtotalpage_);
    std::swap(a3printcolorpage_, other->a3printcolorpage_);
    std::swap(a3printhbpage_, other->a3printhbpage_);
    std::swap(otherprinttotalpage_, other->otherprinttotalpage_);
    std::swap(otherprintcolorpage_, other->otherprintcolorpage_);
    std::swap(otherprinthbpage_, other->otherprinthbpage_);
    std::swap(a4copytotalpage_, other->a4copytotalpage_);
    std::swap(a4copycolorpage_, other->a4copycolorpage_);
    std::swap(a4copyhbpage_, other->a4copyhbpage_);
    std::swap(a3copytotalpage_, other->a3copytotalpage_);
    std::swap(a3copycolorpage_, other->a3copycolorpage_);
    std::swap(a3copyhbpage_, other->a3copyhbpage_);
    std::swap(othercopytotalpage_, other->othercopytotalpage_);
    std::swap(othercopycolorpage_, other->othercopycolorpage_);
    std::swap(othercopyhbpage_, other->othercopyhbpage_);
    std::swap(scantotalpage_, other->scantotalpage_);
    std::swap(scanbigcolorpage_, other->scanbigcolorpage_);
    std::swap(scanbighbpage_, other->scanbighbpage_);
    std::swap(scansmallcolorpage_, other->scansmallcolorpage_);
    std::swap(scansmallhbpage_, other->scansmallhbpage_);
    std::swap(a4faxtotalpage_, other->a4faxtotalpage_);
    std::swap(a4faxcolorpage_, other->a4faxcolorpage_);
    std::swap(a4faxhbpage_, other->a4faxhbpage_);
    std::swap(a3faxtotalpage_, other->a3faxtotalpage_);
    std::swap(a3faxcolorpage_, other->a3faxcolorpage_);
    std::swap(a3faxhbpage_, other->a3faxhbpage_);
    std::swap(otherfaxtotalpage_, other->otherfaxtotalpage_);
    std::swap(otherfaxcolorpage_, other->otherfaxcolorpage_);
    std::swap(otherfaxhbpage_, other->otherfaxhbpage_);
    std::swap(otheroptotalpage_, other->otheroptotalpage_);
    std::swap(otheropcolorpage_, other->otheropcolorpage_);
    std::swap(otherophbpage_, other->otherophbpage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrinterMeterLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrinterMeterLog_descriptor_;
  metadata.reflection = PrinterMeterLog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrinterShareInfo::kIdFieldNumber;
const int PrinterShareInfo::kPcIpAddrFieldNumber;
const int PrinterShareInfo::kPrinterNameFieldNumber;
const int PrinterShareInfo::kPrintShareNameFieldNumber;
const int PrinterShareInfo::kPrinterIpFieldNumber;
const int PrinterShareInfo::kPrinterDpiFieldNumber;
const int PrinterShareInfo::kPrinterSpeedFieldNumber;
const int PrinterShareInfo::kBeginTimeFieldNumber;
const int PrinterShareInfo::kEndTimeFieldNumber;
const int PrinterShareInfo::kSupportDuplexFieldNumber;
const int PrinterShareInfo::kSupportColorFieldNumber;
const int PrinterShareInfo::kPcAddrFieldNumber;
const int PrinterShareInfo::kPcHostFieldNumber;
const int PrinterShareInfo::kPcMacAddrFieldNumber;
const int PrinterShareInfo::kPcDisknumFieldNumber;
const int PrinterShareInfo::kPrintStateFieldNumber;
const int PrinterShareInfo::kTelFieldNumber;
const int PrinterShareInfo::kEmailFieldNumber;
const int PrinterShareInfo::kCommentFieldNumber;
#endif  // !_MSC_VER

PrinterShareInfo::PrinterShareInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrinterShareInfo::InitAsDefaultInstance() {
}

PrinterShareInfo::PrinterShareInfo(const PrinterShareInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrinterShareInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  pc_ip_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  printer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  print_share_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  printer_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  printer_dpi_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  printer_speed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  begin_time_ = 0;
  end_time_ = 0;
  support_duplex_ = 0;
  support_color_ = 0;
  pc_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pc_host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pc_mac_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pc_disknum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  print_state_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrinterShareInfo::~PrinterShareInfo() {
  SharedDtor();
}

void PrinterShareInfo::SharedDtor() {
  if (pc_ip_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete pc_ip_addr_;
  }
  if (printer_name_ != &::google::protobuf::internal::kEmptyString) {
    delete printer_name_;
  }
  if (print_share_name_ != &::google::protobuf::internal::kEmptyString) {
    delete print_share_name_;
  }
  if (printer_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete printer_ip_;
  }
  if (printer_dpi_ != &::google::protobuf::internal::kEmptyString) {
    delete printer_dpi_;
  }
  if (printer_speed_ != &::google::protobuf::internal::kEmptyString) {
    delete printer_speed_;
  }
  if (pc_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete pc_addr_;
  }
  if (pc_host_ != &::google::protobuf::internal::kEmptyString) {
    delete pc_host_;
  }
  if (pc_mac_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete pc_mac_addr_;
  }
  if (pc_disknum_ != &::google::protobuf::internal::kEmptyString) {
    delete pc_disknum_;
  }
  if (print_state_ != &::google::protobuf::internal::kEmptyString) {
    delete print_state_;
  }
  if (tel_ != &::google::protobuf::internal::kEmptyString) {
    delete tel_;
  }
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (this != default_instance_) {
  }
}

void PrinterShareInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrinterShareInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrinterShareInfo_descriptor_;
}

const PrinterShareInfo& PrinterShareInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_printermessage_2eproto();  return *default_instance_;
}

PrinterShareInfo* PrinterShareInfo::default_instance_ = NULL;

PrinterShareInfo* PrinterShareInfo::New() const {
  return new PrinterShareInfo;
}

void PrinterShareInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_pc_ip_addr()) {
      if (pc_ip_addr_ != &::google::protobuf::internal::kEmptyString) {
        pc_ip_addr_->clear();
      }
    }
    if (has_printer_name()) {
      if (printer_name_ != &::google::protobuf::internal::kEmptyString) {
        printer_name_->clear();
      }
    }
    if (has_print_share_name()) {
      if (print_share_name_ != &::google::protobuf::internal::kEmptyString) {
        print_share_name_->clear();
      }
    }
    if (has_printer_ip()) {
      if (printer_ip_ != &::google::protobuf::internal::kEmptyString) {
        printer_ip_->clear();
      }
    }
    if (has_printer_dpi()) {
      if (printer_dpi_ != &::google::protobuf::internal::kEmptyString) {
        printer_dpi_->clear();
      }
    }
    if (has_printer_speed()) {
      if (printer_speed_ != &::google::protobuf::internal::kEmptyString) {
        printer_speed_->clear();
      }
    }
    begin_time_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    end_time_ = 0;
    support_duplex_ = 0;
    support_color_ = 0;
    if (has_pc_addr()) {
      if (pc_addr_ != &::google::protobuf::internal::kEmptyString) {
        pc_addr_->clear();
      }
    }
    if (has_pc_host()) {
      if (pc_host_ != &::google::protobuf::internal::kEmptyString) {
        pc_host_->clear();
      }
    }
    if (has_pc_mac_addr()) {
      if (pc_mac_addr_ != &::google::protobuf::internal::kEmptyString) {
        pc_mac_addr_->clear();
      }
    }
    if (has_pc_disknum()) {
      if (pc_disknum_ != &::google::protobuf::internal::kEmptyString) {
        pc_disknum_->clear();
      }
    }
    if (has_print_state()) {
      if (print_state_ != &::google::protobuf::internal::kEmptyString) {
        print_state_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_tel()) {
      if (tel_ != &::google::protobuf::internal::kEmptyString) {
        tel_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrinterShareInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pc_ip_addr;
        break;
      }
      
      // required string pc_ip_addr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pc_ip_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pc_ip_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pc_ip_addr().data(), this->pc_ip_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_printer_name;
        break;
      }
      
      // required string printer_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_printer_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_printer_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->printer_name().data(), this->printer_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_print_share_name;
        break;
      }
      
      // required string print_share_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_print_share_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_print_share_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->print_share_name().data(), this->print_share_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_printer_ip;
        break;
      }
      
      // optional string printer_ip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_printer_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_printer_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->printer_ip().data(), this->printer_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_printer_dpi;
        break;
      }
      
      // optional string printer_dpi = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_printer_dpi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_printer_dpi()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->printer_dpi().data(), this->printer_dpi().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_printer_speed;
        break;
      }
      
      // optional string printer_speed = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_printer_speed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_printer_speed()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->printer_speed().data(), this->printer_speed().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_begin_time;
        break;
      }
      
      // optional double begin_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &begin_time_)));
          set_has_begin_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_end_time;
        break;
      }
      
      // optional double end_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_support_duplex;
        break;
      }
      
      // optional int32 support_duplex = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_support_duplex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &support_duplex_)));
          set_has_support_duplex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_support_color;
        break;
      }
      
      // optional int32 support_color = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_support_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &support_color_)));
          set_has_support_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_pc_addr;
        break;
      }
      
      // optional string pc_addr = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pc_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pc_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pc_addr().data(), this->pc_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_pc_host;
        break;
      }
      
      // optional string pc_host = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pc_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pc_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pc_host().data(), this->pc_host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_pc_mac_addr;
        break;
      }
      
      // optional string pc_mac_addr = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pc_mac_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pc_mac_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pc_mac_addr().data(), this->pc_mac_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_pc_disknum;
        break;
      }
      
      // optional string pc_disknum = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pc_disknum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pc_disknum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pc_disknum().data(), this->pc_disknum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_print_state;
        break;
      }
      
      // optional string print_state = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_print_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_print_state()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->print_state().data(), this->print_state().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_tel;
        break;
      }
      
      // optional string tel = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tel().data(), this->tel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_email;
        break;
      }
      
      // optional string email = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_comment;
        break;
      }
      
      // optional string comment = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrinterShareInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // required string pc_ip_addr = 2;
  if (has_pc_ip_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pc_ip_addr().data(), this->pc_ip_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pc_ip_addr(), output);
  }
  
  // required string printer_name = 3;
  if (has_printer_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->printer_name().data(), this->printer_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->printer_name(), output);
  }
  
  // required string print_share_name = 4;
  if (has_print_share_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->print_share_name().data(), this->print_share_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->print_share_name(), output);
  }
  
  // optional string printer_ip = 5;
  if (has_printer_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->printer_ip().data(), this->printer_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->printer_ip(), output);
  }
  
  // optional string printer_dpi = 6;
  if (has_printer_dpi()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->printer_dpi().data(), this->printer_dpi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->printer_dpi(), output);
  }
  
  // optional string printer_speed = 7;
  if (has_printer_speed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->printer_speed().data(), this->printer_speed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->printer_speed(), output);
  }
  
  // optional double begin_time = 8;
  if (has_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->begin_time(), output);
  }
  
  // optional double end_time = 9;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->end_time(), output);
  }
  
  // optional int32 support_duplex = 10;
  if (has_support_duplex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->support_duplex(), output);
  }
  
  // optional int32 support_color = 11;
  if (has_support_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->support_color(), output);
  }
  
  // optional string pc_addr = 12;
  if (has_pc_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pc_addr().data(), this->pc_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->pc_addr(), output);
  }
  
  // optional string pc_host = 13;
  if (has_pc_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pc_host().data(), this->pc_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->pc_host(), output);
  }
  
  // optional string pc_mac_addr = 14;
  if (has_pc_mac_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pc_mac_addr().data(), this->pc_mac_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->pc_mac_addr(), output);
  }
  
  // optional string pc_disknum = 15;
  if (has_pc_disknum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pc_disknum().data(), this->pc_disknum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->pc_disknum(), output);
  }
  
  // optional string print_state = 16;
  if (has_print_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->print_state().data(), this->print_state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->print_state(), output);
  }
  
  // optional string tel = 17;
  if (has_tel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tel().data(), this->tel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->tel(), output);
  }
  
  // optional string email = 18;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->email(), output);
  }
  
  // optional string comment = 19;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->comment(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrinterShareInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // required string pc_ip_addr = 2;
  if (has_pc_ip_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pc_ip_addr().data(), this->pc_ip_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pc_ip_addr(), target);
  }
  
  // required string printer_name = 3;
  if (has_printer_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->printer_name().data(), this->printer_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->printer_name(), target);
  }
  
  // required string print_share_name = 4;
  if (has_print_share_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->print_share_name().data(), this->print_share_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->print_share_name(), target);
  }
  
  // optional string printer_ip = 5;
  if (has_printer_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->printer_ip().data(), this->printer_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->printer_ip(), target);
  }
  
  // optional string printer_dpi = 6;
  if (has_printer_dpi()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->printer_dpi().data(), this->printer_dpi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->printer_dpi(), target);
  }
  
  // optional string printer_speed = 7;
  if (has_printer_speed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->printer_speed().data(), this->printer_speed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->printer_speed(), target);
  }
  
  // optional double begin_time = 8;
  if (has_begin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->begin_time(), target);
  }
  
  // optional double end_time = 9;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->end_time(), target);
  }
  
  // optional int32 support_duplex = 10;
  if (has_support_duplex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->support_duplex(), target);
  }
  
  // optional int32 support_color = 11;
  if (has_support_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->support_color(), target);
  }
  
  // optional string pc_addr = 12;
  if (has_pc_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pc_addr().data(), this->pc_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->pc_addr(), target);
  }
  
  // optional string pc_host = 13;
  if (has_pc_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pc_host().data(), this->pc_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->pc_host(), target);
  }
  
  // optional string pc_mac_addr = 14;
  if (has_pc_mac_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pc_mac_addr().data(), this->pc_mac_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->pc_mac_addr(), target);
  }
  
  // optional string pc_disknum = 15;
  if (has_pc_disknum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pc_disknum().data(), this->pc_disknum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->pc_disknum(), target);
  }
  
  // optional string print_state = 16;
  if (has_print_state()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->print_state().data(), this->print_state().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->print_state(), target);
  }
  
  // optional string tel = 17;
  if (has_tel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tel().data(), this->tel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->tel(), target);
  }
  
  // optional string email = 18;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->email(), target);
  }
  
  // optional string comment = 19;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->comment(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrinterShareInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // required string pc_ip_addr = 2;
    if (has_pc_ip_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pc_ip_addr());
    }
    
    // required string printer_name = 3;
    if (has_printer_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->printer_name());
    }
    
    // required string print_share_name = 4;
    if (has_print_share_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->print_share_name());
    }
    
    // optional string printer_ip = 5;
    if (has_printer_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->printer_ip());
    }
    
    // optional string printer_dpi = 6;
    if (has_printer_dpi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->printer_dpi());
    }
    
    // optional string printer_speed = 7;
    if (has_printer_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->printer_speed());
    }
    
    // optional double begin_time = 8;
    if (has_begin_time()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double end_time = 9;
    if (has_end_time()) {
      total_size += 1 + 8;
    }
    
    // optional int32 support_duplex = 10;
    if (has_support_duplex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->support_duplex());
    }
    
    // optional int32 support_color = 11;
    if (has_support_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->support_color());
    }
    
    // optional string pc_addr = 12;
    if (has_pc_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pc_addr());
    }
    
    // optional string pc_host = 13;
    if (has_pc_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pc_host());
    }
    
    // optional string pc_mac_addr = 14;
    if (has_pc_mac_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pc_mac_addr());
    }
    
    // optional string pc_disknum = 15;
    if (has_pc_disknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pc_disknum());
    }
    
    // optional string print_state = 16;
    if (has_print_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->print_state());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string tel = 17;
    if (has_tel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tel());
    }
    
    // optional string email = 18;
    if (has_email()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }
    
    // optional string comment = 19;
    if (has_comment()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrinterShareInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrinterShareInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrinterShareInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrinterShareInfo::MergeFrom(const PrinterShareInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pc_ip_addr()) {
      set_pc_ip_addr(from.pc_ip_addr());
    }
    if (from.has_printer_name()) {
      set_printer_name(from.printer_name());
    }
    if (from.has_print_share_name()) {
      set_print_share_name(from.print_share_name());
    }
    if (from.has_printer_ip()) {
      set_printer_ip(from.printer_ip());
    }
    if (from.has_printer_dpi()) {
      set_printer_dpi(from.printer_dpi());
    }
    if (from.has_printer_speed()) {
      set_printer_speed(from.printer_speed());
    }
    if (from.has_begin_time()) {
      set_begin_time(from.begin_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_support_duplex()) {
      set_support_duplex(from.support_duplex());
    }
    if (from.has_support_color()) {
      set_support_color(from.support_color());
    }
    if (from.has_pc_addr()) {
      set_pc_addr(from.pc_addr());
    }
    if (from.has_pc_host()) {
      set_pc_host(from.pc_host());
    }
    if (from.has_pc_mac_addr()) {
      set_pc_mac_addr(from.pc_mac_addr());
    }
    if (from.has_pc_disknum()) {
      set_pc_disknum(from.pc_disknum());
    }
    if (from.has_print_state()) {
      set_print_state(from.print_state());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_tel()) {
      set_tel(from.tel());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrinterShareInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrinterShareInfo::CopyFrom(const PrinterShareInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrinterShareInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  
  return true;
}

void PrinterShareInfo::Swap(PrinterShareInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pc_ip_addr_, other->pc_ip_addr_);
    std::swap(printer_name_, other->printer_name_);
    std::swap(print_share_name_, other->print_share_name_);
    std::swap(printer_ip_, other->printer_ip_);
    std::swap(printer_dpi_, other->printer_dpi_);
    std::swap(printer_speed_, other->printer_speed_);
    std::swap(begin_time_, other->begin_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(support_duplex_, other->support_duplex_);
    std::swap(support_color_, other->support_color_);
    std::swap(pc_addr_, other->pc_addr_);
    std::swap(pc_host_, other->pc_host_);
    std::swap(pc_mac_addr_, other->pc_mac_addr_);
    std::swap(pc_disknum_, other->pc_disknum_);
    std::swap(print_state_, other->print_state_);
    std::swap(tel_, other->tel_);
    std::swap(email_, other->email_);
    std::swap(comment_, other->comment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrinterShareInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrinterShareInfo_descriptor_;
  metadata.reflection = PrinterShareInfo_reflection_;
  return metadata;
}

// PrintSecPolicy

// optional int32 active_footer = 1;
inline bool PrintSecPolicy::has_active_footer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrintSecPolicy::set_has_active_footer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrintSecPolicy::clear_has_active_footer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrintSecPolicy::clear_active_footer() {
  active_footer_ = 0;
  clear_has_active_footer();
}
inline ::google::protobuf::int32 PrintSecPolicy::active_footer() const {
  return active_footer_;
}
inline void PrintSecPolicy::set_active_footer(::google::protobuf::int32 value) {
  set_has_active_footer();
  active_footer_ = value;
}

// optional int32 active_header = 2;
inline bool PrintSecPolicy::has_active_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrintSecPolicy::set_has_active_header() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrintSecPolicy::clear_has_active_header() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrintSecPolicy::clear_active_header() {
  active_header_ = 0;
  clear_has_active_header();
}
inline ::google::protobuf::int32 PrintSecPolicy::active_header() const {
  return active_header_;
}
inline void PrintSecPolicy::set_active_header(::google::protobuf::int32 value) {
  set_has_active_header();
  active_header_ = value;
}

// optional int32 active_watermark = 3;
inline bool PrintSecPolicy::has_active_watermark() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrintSecPolicy::set_has_active_watermark() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrintSecPolicy::clear_has_active_watermark() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrintSecPolicy::clear_active_watermark() {
  active_watermark_ = 0;
  clear_has_active_watermark();
}
inline ::google::protobuf::int32 PrintSecPolicy::active_watermark() const {
  return active_watermark_;
}
inline void PrintSecPolicy::set_active_watermark(::google::protobuf::int32 value) {
  set_has_active_watermark();
  active_watermark_ = value;
}

// optional string footer = 4;
inline bool PrintSecPolicy::has_footer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrintSecPolicy::set_has_footer() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrintSecPolicy::clear_has_footer() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrintSecPolicy::clear_footer() {
  if (footer_ != &::google::protobuf::internal::kEmptyString) {
    footer_->clear();
  }
  clear_has_footer();
}
inline const ::std::string& PrintSecPolicy::footer() const {
  return *footer_;
}
inline void PrintSecPolicy::set_footer(const ::std::string& value) {
  set_has_footer();
  if (footer_ == &::google::protobuf::internal::kEmptyString) {
    footer_ = new ::std::string;
  }
  footer_->assign(value);
}
inline void PrintSecPolicy::set_footer(const char* value) {
  set_has_footer();
  if (footer_ == &::google::protobuf::internal::kEmptyString) {
    footer_ = new ::std::string;
  }
  footer_->assign(value);
}
inline void PrintSecPolicy::set_footer(const char* value, size_t size) {
  set_has_footer();
  if (footer_ == &::google::protobuf::internal::kEmptyString) {
    footer_ = new ::std::string;
  }
  footer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrintSecPolicy::mutable_footer() {
  set_has_footer();
  if (footer_ == &::google::protobuf::internal::kEmptyString) {
    footer_ = new ::std::string;
  }
  return footer_;
}
inline ::std::string* PrintSecPolicy::release_footer() {
  clear_has_footer();
  if (footer_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = footer_;
    footer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string header = 5;
inline bool PrintSecPolicy::has_header() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PrintSecPolicy::set_has_header() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PrintSecPolicy::clear_has_header() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PrintSecPolicy::clear_header() {
  if (header_ != &::google::protobuf::internal::kEmptyString) {
    header_->clear();
  }
  clear_has_header();
}
inline const ::std::string& PrintSecPolicy::header() const {
  return *header_;
}
inline void PrintSecPolicy::set_header(const ::std::string& value) {
  set_has_header();
  if (header_ == &::google::protobuf::internal::kEmptyString) {
    header_ = new ::std::string;
  }
  header_->assign(value);
}
inline void PrintSecPolicy::set_header(const char* value) {
  set_has_header();
  if (header_ == &::google::protobuf::internal::kEmptyString) {
    header_ = new ::std::string;
  }
  header_->assign(value);
}
inline void PrintSecPolicy::set_header(const char* value, size_t size) {
  set_has_header();
  if (header_ == &::google::protobuf::internal::kEmptyString) {
    header_ = new ::std::string;
  }
  header_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrintSecPolicy::mutable_header() {
  set_has_header();
  if (header_ == &::google::protobuf::internal::kEmptyString) {
    header_ = new ::std::string;
  }
  return header_;
}
inline ::std::string* PrintSecPolicy::release_header() {
  clear_has_header();
  if (header_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = header_;
    header_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string watermark = 6;
inline bool PrintSecPolicy::has_watermark() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PrintSecPolicy::set_has_watermark() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PrintSecPolicy::clear_has_watermark() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PrintSecPolicy::clear_watermark() {
  if (watermark_ != &::google::protobuf::internal::kEmptyString) {
    watermark_->clear();
  }
  clear_has_watermark();
}
inline const ::std::string& PrintSecPolicy::watermark() const {
  return *watermark_;
}
inline void PrintSecPolicy::set_watermark(const ::std::string& value) {
  set_has_watermark();
  if (watermark_ == &::google::protobuf::internal::kEmptyString) {
    watermark_ = new ::std::string;
  }
  watermark_->assign(value);
}
inline void PrintSecPolicy::set_watermark(const char* value) {
  set_has_watermark();
  if (watermark_ == &::google::protobuf::internal::kEmptyString) {
    watermark_ = new ::std::string;
  }
  watermark_->assign(value);
}
inline void PrintSecPolicy::set_watermark(const char* value, size_t size) {
  set_has_watermark();
  if (watermark_ == &::google::protobuf::internal::kEmptyString) {
    watermark_ = new ::std::string;
  }
  watermark_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrintSecPolicy::mutable_watermark() {
  set_has_watermark();
  if (watermark_ == &::google::protobuf::internal::kEmptyString) {
    watermark_ = new ::std::string;
  }
  return watermark_;
}
inline ::std::string* PrintSecPolicy::release_watermark() {
  clear_has_watermark();
  if (watermark_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = watermark_;
    watermark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// JobSubmitCtrl

// optional int32 max_page_each_time = 1;
inline bool JobSubmitCtrl::has_max_page_each_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JobSubmitCtrl::set_has_max_page_each_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JobSubmitCtrl::clear_has_max_page_each_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JobSubmitCtrl::clear_max_page_each_time() {
  max_page_each_time_ = 0;
  clear_has_max_page_each_time();
}
inline ::google::protobuf::int32 JobSubmitCtrl::max_page_each_time() const {
  return max_page_each_time_;
}
inline void JobSubmitCtrl::set_max_page_each_time(::google::protobuf::int32 value) {
  set_has_max_page_each_time();
  max_page_each_time_ = value;
}

// optional int32 max_size_each_time = 2;
inline bool JobSubmitCtrl::has_max_size_each_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JobSubmitCtrl::set_has_max_size_each_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JobSubmitCtrl::clear_has_max_size_each_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JobSubmitCtrl::clear_max_size_each_time() {
  max_size_each_time_ = 0;
  clear_has_max_size_each_time();
}
inline ::google::protobuf::int32 JobSubmitCtrl::max_size_each_time() const {
  return max_size_each_time_;
}
inline void JobSubmitCtrl::set_max_size_each_time(::google::protobuf::int32 value) {
  set_has_max_size_each_time();
  max_size_each_time_ = value;
}

// optional int32 max_size_all = 3;
inline bool JobSubmitCtrl::has_max_size_all() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JobSubmitCtrl::set_has_max_size_all() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JobSubmitCtrl::clear_has_max_size_all() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JobSubmitCtrl::clear_max_size_all() {
  max_size_all_ = 0;
  clear_has_max_size_all();
}
inline ::google::protobuf::int32 JobSubmitCtrl::max_size_all() const {
  return max_size_all_;
}
inline void JobSubmitCtrl::set_max_size_all(::google::protobuf::int32 value) {
  set_has_max_size_all();
  max_size_all_ = value;
}

// optional int32 cur_all_size = 4;
inline bool JobSubmitCtrl::has_cur_all_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JobSubmitCtrl::set_has_cur_all_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JobSubmitCtrl::clear_has_cur_all_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JobSubmitCtrl::clear_cur_all_size() {
  cur_all_size_ = 0;
  clear_has_cur_all_size();
}
inline ::google::protobuf::int32 JobSubmitCtrl::cur_all_size() const {
  return cur_all_size_;
}
inline void JobSubmitCtrl::set_cur_all_size(::google::protobuf::int32 value) {
  set_has_cur_all_size();
  cur_all_size_ = value;
}

// -------------------------------------------------------------------

// JobFilterPolciy

// optional .isafetec.JOB_FILTER_TYPE type = 1;
inline bool JobFilterPolciy::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JobFilterPolciy::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JobFilterPolciy::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JobFilterPolciy::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline isafetec::JOB_FILTER_TYPE JobFilterPolciy::type() const {
  return static_cast< isafetec::JOB_FILTER_TYPE >(type_);
}
inline void JobFilterPolciy::set_type(isafetec::JOB_FILTER_TYPE value) {
  GOOGLE_DCHECK(isafetec::JOB_FILTER_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string key_word = 2;
inline bool JobFilterPolciy::has_key_word() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JobFilterPolciy::set_has_key_word() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JobFilterPolciy::clear_has_key_word() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JobFilterPolciy::clear_key_word() {
  if (key_word_ != &::google::protobuf::internal::kEmptyString) {
    key_word_->clear();
  }
  clear_has_key_word();
}
inline const ::std::string& JobFilterPolciy::key_word() const {
  return *key_word_;
}
inline void JobFilterPolciy::set_key_word(const ::std::string& value) {
  set_has_key_word();
  if (key_word_ == &::google::protobuf::internal::kEmptyString) {
    key_word_ = new ::std::string;
  }
  key_word_->assign(value);
}
inline void JobFilterPolciy::set_key_word(const char* value) {
  set_has_key_word();
  if (key_word_ == &::google::protobuf::internal::kEmptyString) {
    key_word_ = new ::std::string;
  }
  key_word_->assign(value);
}
inline void JobFilterPolciy::set_key_word(const char* value, size_t size) {
  set_has_key_word();
  if (key_word_ == &::google::protobuf::internal::kEmptyString) {
    key_word_ = new ::std::string;
  }
  key_word_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JobFilterPolciy::mutable_key_word() {
  set_has_key_word();
  if (key_word_ == &::google::protobuf::internal::kEmptyString) {
    key_word_ = new ::std::string;
  }
  return key_word_;
}
inline ::std::string* JobFilterPolciy::release_key_word() {
  clear_has_key_word();
  if (key_word_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_word_;
    key_word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// JobAuditProcess

// optional .isafetec.JOb_CHECK_BY check_by = 1;
inline bool JobAuditProcess::has_check_by() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JobAuditProcess::set_has_check_by() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JobAuditProcess::clear_has_check_by() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JobAuditProcess::clear_check_by() {
  check_by_ = 0;
  clear_has_check_by();
}
inline isafetec::JOb_CHECK_BY JobAuditProcess::check_by() const {
  return static_cast< isafetec::JOb_CHECK_BY >(check_by_);
}
inline void JobAuditProcess::set_check_by(isafetec::JOb_CHECK_BY value) {
  GOOGLE_DCHECK(isafetec::JOb_CHECK_BY_IsValid(value));
  set_has_check_by();
  check_by_ = value;
}

// optional int32 admin_id = 2;
inline bool JobAuditProcess::has_admin_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JobAuditProcess::set_has_admin_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JobAuditProcess::clear_has_admin_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JobAuditProcess::clear_admin_id() {
  admin_id_ = 0;
  clear_has_admin_id();
}
inline ::google::protobuf::int32 JobAuditProcess::admin_id() const {
  return admin_id_;
}
inline void JobAuditProcess::set_admin_id(::google::protobuf::int32 value) {
  set_has_admin_id();
  admin_id_ = value;
}

// optional .isafetec.JobFilterPolciy flt_policy = 3;
inline bool JobAuditProcess::has_flt_policy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JobAuditProcess::set_has_flt_policy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JobAuditProcess::clear_has_flt_policy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JobAuditProcess::clear_flt_policy() {
  if (flt_policy_ != NULL) flt_policy_->::isafetec::JobFilterPolciy::Clear();
  clear_has_flt_policy();
}
inline const ::isafetec::JobFilterPolciy& JobAuditProcess::flt_policy() const {
  return flt_policy_ != NULL ? *flt_policy_ : *default_instance_->flt_policy_;
}
inline ::isafetec::JobFilterPolciy* JobAuditProcess::mutable_flt_policy() {
  set_has_flt_policy();
  if (flt_policy_ == NULL) flt_policy_ = new ::isafetec::JobFilterPolciy;
  return flt_policy_;
}
inline ::isafetec::JobFilterPolciy* JobAuditProcess::release_flt_policy() {
  clear_has_flt_policy();
  ::isafetec::JobFilterPolciy* temp = flt_policy_;
  flt_policy_ = NULL;
  return temp;
}

// optional .isafetec.JOB_CHECK_FAILURE_ACTION_TYPE next_action = 4;
inline bool JobAuditProcess::has_next_action() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JobAuditProcess::set_has_next_action() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JobAuditProcess::clear_has_next_action() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JobAuditProcess::clear_next_action() {
  next_action_ = 0;
  clear_has_next_action();
}
inline isafetec::JOB_CHECK_FAILURE_ACTION_TYPE JobAuditProcess::next_action() const {
  return static_cast< isafetec::JOB_CHECK_FAILURE_ACTION_TYPE >(next_action_);
}
inline void JobAuditProcess::set_next_action(isafetec::JOB_CHECK_FAILURE_ACTION_TYPE value) {
  GOOGLE_DCHECK(isafetec::JOB_CHECK_FAILURE_ACTION_TYPE_IsValid(value));
  set_has_next_action();
  next_action_ = value;
}

// -------------------------------------------------------------------

// SubmitPrintJob

// optional int32 equip_id = 1;
inline bool SubmitPrintJob::has_equip_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubmitPrintJob::set_has_equip_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubmitPrintJob::clear_has_equip_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubmitPrintJob::clear_equip_id() {
  equip_id_ = 0;
  clear_has_equip_id();
}
inline ::google::protobuf::int32 SubmitPrintJob::equip_id() const {
  return equip_id_;
}
inline void SubmitPrintJob::set_equip_id(::google::protobuf::int32 value) {
  set_has_equip_id();
  equip_id_ = value;
}

// optional string equip_host = 2;
inline bool SubmitPrintJob::has_equip_host() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SubmitPrintJob::set_has_equip_host() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SubmitPrintJob::clear_has_equip_host() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SubmitPrintJob::clear_equip_host() {
  if (equip_host_ != &::google::protobuf::internal::kEmptyString) {
    equip_host_->clear();
  }
  clear_has_equip_host();
}
inline const ::std::string& SubmitPrintJob::equip_host() const {
  return *equip_host_;
}
inline void SubmitPrintJob::set_equip_host(const ::std::string& value) {
  set_has_equip_host();
  if (equip_host_ == &::google::protobuf::internal::kEmptyString) {
    equip_host_ = new ::std::string;
  }
  equip_host_->assign(value);
}
inline void SubmitPrintJob::set_equip_host(const char* value) {
  set_has_equip_host();
  if (equip_host_ == &::google::protobuf::internal::kEmptyString) {
    equip_host_ = new ::std::string;
  }
  equip_host_->assign(value);
}
inline void SubmitPrintJob::set_equip_host(const char* value, size_t size) {
  set_has_equip_host();
  if (equip_host_ == &::google::protobuf::internal::kEmptyString) {
    equip_host_ = new ::std::string;
  }
  equip_host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SubmitPrintJob::mutable_equip_host() {
  set_has_equip_host();
  if (equip_host_ == &::google::protobuf::internal::kEmptyString) {
    equip_host_ = new ::std::string;
  }
  return equip_host_;
}
inline ::std::string* SubmitPrintJob::release_equip_host() {
  clear_has_equip_host();
  if (equip_host_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = equip_host_;
    equip_host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string win_user = 3;
inline bool SubmitPrintJob::has_win_user() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SubmitPrintJob::set_has_win_user() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SubmitPrintJob::clear_has_win_user() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SubmitPrintJob::clear_win_user() {
  if (win_user_ != &::google::protobuf::internal::kEmptyString) {
    win_user_->clear();
  }
  clear_has_win_user();
}
inline const ::std::string& SubmitPrintJob::win_user() const {
  return *win_user_;
}
inline void SubmitPrintJob::set_win_user(const ::std::string& value) {
  set_has_win_user();
  if (win_user_ == &::google::protobuf::internal::kEmptyString) {
    win_user_ = new ::std::string;
  }
  win_user_->assign(value);
}
inline void SubmitPrintJob::set_win_user(const char* value) {
  set_has_win_user();
  if (win_user_ == &::google::protobuf::internal::kEmptyString) {
    win_user_ = new ::std::string;
  }
  win_user_->assign(value);
}
inline void SubmitPrintJob::set_win_user(const char* value, size_t size) {
  set_has_win_user();
  if (win_user_ == &::google::protobuf::internal::kEmptyString) {
    win_user_ = new ::std::string;
  }
  win_user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SubmitPrintJob::mutable_win_user() {
  set_has_win_user();
  if (win_user_ == &::google::protobuf::internal::kEmptyString) {
    win_user_ = new ::std::string;
  }
  return win_user_;
}
inline ::std::string* SubmitPrintJob::release_win_user() {
  clear_has_win_user();
  if (win_user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = win_user_;
    win_user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 user_id = 4;
inline bool SubmitPrintJob::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SubmitPrintJob::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SubmitPrintJob::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SubmitPrintJob::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 SubmitPrintJob::user_id() const {
  return user_id_;
}
inline void SubmitPrintJob::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional int32 job_id = 5;
inline bool SubmitPrintJob::has_job_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SubmitPrintJob::set_has_job_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SubmitPrintJob::clear_has_job_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SubmitPrintJob::clear_job_id() {
  job_id_ = 0;
  clear_has_job_id();
}
inline ::google::protobuf::int32 SubmitPrintJob::job_id() const {
  return job_id_;
}
inline void SubmitPrintJob::set_job_id(::google::protobuf::int32 value) {
  set_has_job_id();
  job_id_ = value;
}

// optional int32 paper_size = 6;
inline bool SubmitPrintJob::has_paper_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SubmitPrintJob::set_has_paper_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SubmitPrintJob::clear_has_paper_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SubmitPrintJob::clear_paper_size() {
  paper_size_ = 0;
  clear_has_paper_size();
}
inline ::google::protobuf::int32 SubmitPrintJob::paper_size() const {
  return paper_size_;
}
inline void SubmitPrintJob::set_paper_size(::google::protobuf::int32 value) {
  set_has_paper_size();
  paper_size_ = value;
}

// optional string page_type = 7;
inline bool SubmitPrintJob::has_page_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SubmitPrintJob::set_has_page_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SubmitPrintJob::clear_has_page_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SubmitPrintJob::clear_page_type() {
  if (page_type_ != &::google::protobuf::internal::kEmptyString) {
    page_type_->clear();
  }
  clear_has_page_type();
}
inline const ::std::string& SubmitPrintJob::page_type() const {
  return *page_type_;
}
inline void SubmitPrintJob::set_page_type(const ::std::string& value) {
  set_has_page_type();
  if (page_type_ == &::google::protobuf::internal::kEmptyString) {
    page_type_ = new ::std::string;
  }
  page_type_->assign(value);
}
inline void SubmitPrintJob::set_page_type(const char* value) {
  set_has_page_type();
  if (page_type_ == &::google::protobuf::internal::kEmptyString) {
    page_type_ = new ::std::string;
  }
  page_type_->assign(value);
}
inline void SubmitPrintJob::set_page_type(const char* value, size_t size) {
  set_has_page_type();
  if (page_type_ == &::google::protobuf::internal::kEmptyString) {
    page_type_ = new ::std::string;
  }
  page_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SubmitPrintJob::mutable_page_type() {
  set_has_page_type();
  if (page_type_ == &::google::protobuf::internal::kEmptyString) {
    page_type_ = new ::std::string;
  }
  return page_type_;
}
inline ::std::string* SubmitPrintJob::release_page_type() {
  clear_has_page_type();
  if (page_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = page_type_;
    page_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 copies = 8;
inline bool SubmitPrintJob::has_copies() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SubmitPrintJob::set_has_copies() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SubmitPrintJob::clear_has_copies() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SubmitPrintJob::clear_copies() {
  copies_ = 0;
  clear_has_copies();
}
inline ::google::protobuf::int32 SubmitPrintJob::copies() const {
  return copies_;
}
inline void SubmitPrintJob::set_copies(::google::protobuf::int32 value) {
  set_has_copies();
  copies_ = value;
}

// optional int32 color = 9;
inline bool SubmitPrintJob::has_color() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SubmitPrintJob::set_has_color() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SubmitPrintJob::clear_has_color() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SubmitPrintJob::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::google::protobuf::int32 SubmitPrintJob::color() const {
  return color_;
}
inline void SubmitPrintJob::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
}

// optional int32 total_page = 10;
inline bool SubmitPrintJob::has_total_page() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SubmitPrintJob::set_has_total_page() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SubmitPrintJob::clear_has_total_page() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SubmitPrintJob::clear_total_page() {
  total_page_ = 0;
  clear_has_total_page();
}
inline ::google::protobuf::int32 SubmitPrintJob::total_page() const {
  return total_page_;
}
inline void SubmitPrintJob::set_total_page(::google::protobuf::int32 value) {
  set_has_total_page();
  total_page_ = value;
}

// optional int32 orientation = 11;
inline bool SubmitPrintJob::has_orientation() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SubmitPrintJob::set_has_orientation() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SubmitPrintJob::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SubmitPrintJob::clear_orientation() {
  orientation_ = 0;
  clear_has_orientation();
}
inline ::google::protobuf::int32 SubmitPrintJob::orientation() const {
  return orientation_;
}
inline void SubmitPrintJob::set_orientation(::google::protobuf::int32 value) {
  set_has_orientation();
  orientation_ = value;
}

// optional int32 double_print = 12;
inline bool SubmitPrintJob::has_double_print() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SubmitPrintJob::set_has_double_print() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SubmitPrintJob::clear_has_double_print() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SubmitPrintJob::clear_double_print() {
  double_print_ = 0;
  clear_has_double_print();
}
inline ::google::protobuf::int32 SubmitPrintJob::double_print() const {
  return double_print_;
}
inline void SubmitPrintJob::set_double_print(::google::protobuf::int32 value) {
  set_has_double_print();
  double_print_ = value;
}

// optional string doc_name = 13;
inline bool SubmitPrintJob::has_doc_name() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SubmitPrintJob::set_has_doc_name() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SubmitPrintJob::clear_has_doc_name() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SubmitPrintJob::clear_doc_name() {
  if (doc_name_ != &::google::protobuf::internal::kEmptyString) {
    doc_name_->clear();
  }
  clear_has_doc_name();
}
inline const ::std::string& SubmitPrintJob::doc_name() const {
  return *doc_name_;
}
inline void SubmitPrintJob::set_doc_name(const ::std::string& value) {
  set_has_doc_name();
  if (doc_name_ == &::google::protobuf::internal::kEmptyString) {
    doc_name_ = new ::std::string;
  }
  doc_name_->assign(value);
}
inline void SubmitPrintJob::set_doc_name(const char* value) {
  set_has_doc_name();
  if (doc_name_ == &::google::protobuf::internal::kEmptyString) {
    doc_name_ = new ::std::string;
  }
  doc_name_->assign(value);
}
inline void SubmitPrintJob::set_doc_name(const char* value, size_t size) {
  set_has_doc_name();
  if (doc_name_ == &::google::protobuf::internal::kEmptyString) {
    doc_name_ = new ::std::string;
  }
  doc_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SubmitPrintJob::mutable_doc_name() {
  set_has_doc_name();
  if (doc_name_ == &::google::protobuf::internal::kEmptyString) {
    doc_name_ = new ::std::string;
  }
  return doc_name_;
}
inline ::std::string* SubmitPrintJob::release_doc_name() {
  clear_has_doc_name();
  if (doc_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = doc_name_;
    doc_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string printer_name = 14;
inline bool SubmitPrintJob::has_printer_name() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SubmitPrintJob::set_has_printer_name() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SubmitPrintJob::clear_has_printer_name() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SubmitPrintJob::clear_printer_name() {
  if (printer_name_ != &::google::protobuf::internal::kEmptyString) {
    printer_name_->clear();
  }
  clear_has_printer_name();
}
inline const ::std::string& SubmitPrintJob::printer_name() const {
  return *printer_name_;
}
inline void SubmitPrintJob::set_printer_name(const ::std::string& value) {
  set_has_printer_name();
  if (printer_name_ == &::google::protobuf::internal::kEmptyString) {
    printer_name_ = new ::std::string;
  }
  printer_name_->assign(value);
}
inline void SubmitPrintJob::set_printer_name(const char* value) {
  set_has_printer_name();
  if (printer_name_ == &::google::protobuf::internal::kEmptyString) {
    printer_name_ = new ::std::string;
  }
  printer_name_->assign(value);
}
inline void SubmitPrintJob::set_printer_name(const char* value, size_t size) {
  set_has_printer_name();
  if (printer_name_ == &::google::protobuf::internal::kEmptyString) {
    printer_name_ = new ::std::string;
  }
  printer_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SubmitPrintJob::mutable_printer_name() {
  set_has_printer_name();
  if (printer_name_ == &::google::protobuf::internal::kEmptyString) {
    printer_name_ = new ::std::string;
  }
  return printer_name_;
}
inline ::std::string* SubmitPrintJob::release_printer_name() {
  clear_has_printer_name();
  if (printer_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = printer_name_;
    printer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional double submit_time = 15;
inline bool SubmitPrintJob::has_submit_time() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SubmitPrintJob::set_has_submit_time() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SubmitPrintJob::clear_has_submit_time() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SubmitPrintJob::clear_submit_time() {
  submit_time_ = 0;
  clear_has_submit_time();
}
inline double SubmitPrintJob::submit_time() const {
  return submit_time_;
}
inline void SubmitPrintJob::set_submit_time(double value) {
  set_has_submit_time();
  submit_time_ = value;
}

// optional int32 doc_size = 16;
inline bool SubmitPrintJob::has_doc_size() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SubmitPrintJob::set_has_doc_size() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SubmitPrintJob::clear_has_doc_size() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SubmitPrintJob::clear_doc_size() {
  doc_size_ = 0;
  clear_has_doc_size();
}
inline ::google::protobuf::int32 SubmitPrintJob::doc_size() const {
  return doc_size_;
}
inline void SubmitPrintJob::set_doc_size(::google::protobuf::int32 value) {
  set_has_doc_size();
  doc_size_ = value;
}

// optional int32 zip_job_size = 17;
inline bool SubmitPrintJob::has_zip_job_size() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SubmitPrintJob::set_has_zip_job_size() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SubmitPrintJob::clear_has_zip_job_size() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SubmitPrintJob::clear_zip_job_size() {
  zip_job_size_ = 0;
  clear_has_zip_job_size();
}
inline ::google::protobuf::int32 SubmitPrintJob::zip_job_size() const {
  return zip_job_size_;
}
inline void SubmitPrintJob::set_zip_job_size(::google::protobuf::int32 value) {
  set_has_zip_job_size();
  zip_job_size_ = value;
}

// optional string job_path = 18;
inline bool SubmitPrintJob::has_job_path() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SubmitPrintJob::set_has_job_path() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SubmitPrintJob::clear_has_job_path() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SubmitPrintJob::clear_job_path() {
  if (job_path_ != &::google::protobuf::internal::kEmptyString) {
    job_path_->clear();
  }
  clear_has_job_path();
}
inline const ::std::string& SubmitPrintJob::job_path() const {
  return *job_path_;
}
inline void SubmitPrintJob::set_job_path(const ::std::string& value) {
  set_has_job_path();
  if (job_path_ == &::google::protobuf::internal::kEmptyString) {
    job_path_ = new ::std::string;
  }
  job_path_->assign(value);
}
inline void SubmitPrintJob::set_job_path(const char* value) {
  set_has_job_path();
  if (job_path_ == &::google::protobuf::internal::kEmptyString) {
    job_path_ = new ::std::string;
  }
  job_path_->assign(value);
}
inline void SubmitPrintJob::set_job_path(const char* value, size_t size) {
  set_has_job_path();
  if (job_path_ == &::google::protobuf::internal::kEmptyString) {
    job_path_ = new ::std::string;
  }
  job_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SubmitPrintJob::mutable_job_path() {
  set_has_job_path();
  if (job_path_ == &::google::protobuf::internal::kEmptyString) {
    job_path_ = new ::std::string;
  }
  return job_path_;
}
inline ::std::string* SubmitPrintJob::release_job_path() {
  clear_has_job_path();
  if (job_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = job_path_;
    job_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string job_dir = 19;
inline bool SubmitPrintJob::has_job_dir() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SubmitPrintJob::set_has_job_dir() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SubmitPrintJob::clear_has_job_dir() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SubmitPrintJob::clear_job_dir() {
  if (job_dir_ != &::google::protobuf::internal::kEmptyString) {
    job_dir_->clear();
  }
  clear_has_job_dir();
}
inline const ::std::string& SubmitPrintJob::job_dir() const {
  return *job_dir_;
}
inline void SubmitPrintJob::set_job_dir(const ::std::string& value) {
  set_has_job_dir();
  if (job_dir_ == &::google::protobuf::internal::kEmptyString) {
    job_dir_ = new ::std::string;
  }
  job_dir_->assign(value);
}
inline void SubmitPrintJob::set_job_dir(const char* value) {
  set_has_job_dir();
  if (job_dir_ == &::google::protobuf::internal::kEmptyString) {
    job_dir_ = new ::std::string;
  }
  job_dir_->assign(value);
}
inline void SubmitPrintJob::set_job_dir(const char* value, size_t size) {
  set_has_job_dir();
  if (job_dir_ == &::google::protobuf::internal::kEmptyString) {
    job_dir_ = new ::std::string;
  }
  job_dir_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SubmitPrintJob::mutable_job_dir() {
  set_has_job_dir();
  if (job_dir_ == &::google::protobuf::internal::kEmptyString) {
    job_dir_ = new ::std::string;
  }
  return job_dir_;
}
inline ::std::string* SubmitPrintJob::release_job_dir() {
  clear_has_job_dir();
  if (job_dir_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = job_dir_;
    job_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 project_id = 20;
inline bool SubmitPrintJob::has_project_id() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SubmitPrintJob::set_has_project_id() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SubmitPrintJob::clear_has_project_id() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SubmitPrintJob::clear_project_id() {
  project_id_ = 0;
  clear_has_project_id();
}
inline ::google::protobuf::int32 SubmitPrintJob::project_id() const {
  return project_id_;
}
inline void SubmitPrintJob::set_project_id(::google::protobuf::int32 value) {
  set_has_project_id();
  project_id_ = value;
}

// optional int32 order_PrtStation_id = 21;
inline bool SubmitPrintJob::has_order_prtstation_id() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SubmitPrintJob::set_has_order_prtstation_id() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SubmitPrintJob::clear_has_order_prtstation_id() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SubmitPrintJob::clear_order_prtstation_id() {
  order_prtstation_id_ = 0;
  clear_has_order_prtstation_id();
}
inline ::google::protobuf::int32 SubmitPrintJob::order_prtstation_id() const {
  return order_prtstation_id_;
}
inline void SubmitPrintJob::set_order_prtstation_id(::google::protobuf::int32 value) {
  set_has_order_prtstation_id();
  order_prtstation_id_ = value;
}

// optional int32 direct_PrtStation_id = 22;
inline bool SubmitPrintJob::has_direct_prtstation_id() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SubmitPrintJob::set_has_direct_prtstation_id() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SubmitPrintJob::clear_has_direct_prtstation_id() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SubmitPrintJob::clear_direct_prtstation_id() {
  direct_prtstation_id_ = 0;
  clear_has_direct_prtstation_id();
}
inline ::google::protobuf::int32 SubmitPrintJob::direct_prtstation_id() const {
  return direct_prtstation_id_;
}
inline void SubmitPrintJob::set_direct_prtstation_id(::google::protobuf::int32 value) {
  set_has_direct_prtstation_id();
  direct_prtstation_id_ = value;
}

// optional .isafetec.JOB_STORAGE_TYPE sec_type = 23;
inline bool SubmitPrintJob::has_sec_type() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SubmitPrintJob::set_has_sec_type() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SubmitPrintJob::clear_has_sec_type() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SubmitPrintJob::clear_sec_type() {
  sec_type_ = 0;
  clear_has_sec_type();
}
inline isafetec::JOB_STORAGE_TYPE SubmitPrintJob::sec_type() const {
  return static_cast< isafetec::JOB_STORAGE_TYPE >(sec_type_);
}
inline void SubmitPrintJob::set_sec_type(isafetec::JOB_STORAGE_TYPE value) {
  GOOGLE_DCHECK(isafetec::JOB_STORAGE_TYPE_IsValid(value));
  set_has_sec_type();
  sec_type_ = value;
}

// optional .isafetec.Printer_Paper_Source paper_source = 24;
inline bool SubmitPrintJob::has_paper_source() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SubmitPrintJob::set_has_paper_source() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SubmitPrintJob::clear_has_paper_source() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SubmitPrintJob::clear_paper_source() {
  paper_source_ = 1000;
  clear_has_paper_source();
}
inline isafetec::Printer_Paper_Source SubmitPrintJob::paper_source() const {
  return static_cast< isafetec::Printer_Paper_Source >(paper_source_);
}
inline void SubmitPrintJob::set_paper_source(isafetec::Printer_Paper_Source value) {
  GOOGLE_DCHECK(isafetec::Printer_Paper_Source_IsValid(value));
  set_has_paper_source();
  paper_source_ = value;
}

// optional bool image_use_physical_area = 25;
inline bool SubmitPrintJob::has_image_use_physical_area() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SubmitPrintJob::set_has_image_use_physical_area() {
  _has_bits_[0] |= 0x01000000u;
}
inline void SubmitPrintJob::clear_has_image_use_physical_area() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void SubmitPrintJob::clear_image_use_physical_area() {
  image_use_physical_area_ = false;
  clear_has_image_use_physical_area();
}
inline bool SubmitPrintJob::image_use_physical_area() const {
  return image_use_physical_area_;
}
inline void SubmitPrintJob::set_image_use_physical_area(bool value) {
  set_has_image_use_physical_area();
  image_use_physical_area_ = value;
}

// optional int32 collate = 26;
inline bool SubmitPrintJob::has_collate() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SubmitPrintJob::set_has_collate() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SubmitPrintJob::clear_has_collate() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SubmitPrintJob::clear_collate() {
  collate_ = 0;
  clear_has_collate();
}
inline ::google::protobuf::int32 SubmitPrintJob::collate() const {
  return collate_;
}
inline void SubmitPrintJob::set_collate(::google::protobuf::int32 value) {
  set_has_collate();
  collate_ = value;
}

// -------------------------------------------------------------------

// SubmitPrintJobList

// repeated .isafetec.SubmitPrintJob list = 1;
inline int SubmitPrintJobList::list_size() const {
  return list_.size();
}
inline void SubmitPrintJobList::clear_list() {
  list_.Clear();
}
inline const ::isafetec::SubmitPrintJob& SubmitPrintJobList::list(int index) const {
  return list_.Get(index);
}
inline ::isafetec::SubmitPrintJob* SubmitPrintJobList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::isafetec::SubmitPrintJob* SubmitPrintJobList::list_ReleaseAt(int index) {
  return list_.ReleaseAt(index);
}
inline void SubmitPrintJobList::list_RemoveAt(int index) {
  list_.RemoveAt(index);
}
inline ::isafetec::SubmitPrintJob* SubmitPrintJobList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::SubmitPrintJob >&
SubmitPrintJobList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::SubmitPrintJob >*
SubmitPrintJobList::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// PrtSationReqPrintJob

// optional int32 id = 1;
inline bool PrtSationReqPrintJob::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrtSationReqPrintJob::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrtSationReqPrintJob::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrtSationReqPrintJob::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PrtSationReqPrintJob::id() const {
  return id_;
}
inline void PrtSationReqPrintJob::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string job_path = 2;
inline bool PrtSationReqPrintJob::has_job_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrtSationReqPrintJob::set_has_job_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrtSationReqPrintJob::clear_has_job_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrtSationReqPrintJob::clear_job_path() {
  if (job_path_ != &::google::protobuf::internal::kEmptyString) {
    job_path_->clear();
  }
  clear_has_job_path();
}
inline const ::std::string& PrtSationReqPrintJob::job_path() const {
  return *job_path_;
}
inline void PrtSationReqPrintJob::set_job_path(const ::std::string& value) {
  set_has_job_path();
  if (job_path_ == &::google::protobuf::internal::kEmptyString) {
    job_path_ = new ::std::string;
  }
  job_path_->assign(value);
}
inline void PrtSationReqPrintJob::set_job_path(const char* value) {
  set_has_job_path();
  if (job_path_ == &::google::protobuf::internal::kEmptyString) {
    job_path_ = new ::std::string;
  }
  job_path_->assign(value);
}
inline void PrtSationReqPrintJob::set_job_path(const char* value, size_t size) {
  set_has_job_path();
  if (job_path_ == &::google::protobuf::internal::kEmptyString) {
    job_path_ = new ::std::string;
  }
  job_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtSationReqPrintJob::mutable_job_path() {
  set_has_job_path();
  if (job_path_ == &::google::protobuf::internal::kEmptyString) {
    job_path_ = new ::std::string;
  }
  return job_path_;
}
inline ::std::string* PrtSationReqPrintJob::release_job_path() {
  clear_has_job_path();
  if (job_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = job_path_;
    job_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string job_dir = 3;
inline bool PrtSationReqPrintJob::has_job_dir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrtSationReqPrintJob::set_has_job_dir() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrtSationReqPrintJob::clear_has_job_dir() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrtSationReqPrintJob::clear_job_dir() {
  if (job_dir_ != &::google::protobuf::internal::kEmptyString) {
    job_dir_->clear();
  }
  clear_has_job_dir();
}
inline const ::std::string& PrtSationReqPrintJob::job_dir() const {
  return *job_dir_;
}
inline void PrtSationReqPrintJob::set_job_dir(const ::std::string& value) {
  set_has_job_dir();
  if (job_dir_ == &::google::protobuf::internal::kEmptyString) {
    job_dir_ = new ::std::string;
  }
  job_dir_->assign(value);
}
inline void PrtSationReqPrintJob::set_job_dir(const char* value) {
  set_has_job_dir();
  if (job_dir_ == &::google::protobuf::internal::kEmptyString) {
    job_dir_ = new ::std::string;
  }
  job_dir_->assign(value);
}
inline void PrtSationReqPrintJob::set_job_dir(const char* value, size_t size) {
  set_has_job_dir();
  if (job_dir_ == &::google::protobuf::internal::kEmptyString) {
    job_dir_ = new ::std::string;
  }
  job_dir_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtSationReqPrintJob::mutable_job_dir() {
  set_has_job_dir();
  if (job_dir_ == &::google::protobuf::internal::kEmptyString) {
    job_dir_ = new ::std::string;
  }
  return job_dir_;
}
inline ::std::string* PrtSationReqPrintJob::release_job_dir() {
  clear_has_job_dir();
  if (job_dir_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = job_dir_;
    job_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional double submit_time = 4;
inline bool PrtSationReqPrintJob::has_submit_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrtSationReqPrintJob::set_has_submit_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrtSationReqPrintJob::clear_has_submit_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrtSationReqPrintJob::clear_submit_time() {
  submit_time_ = 0;
  clear_has_submit_time();
}
inline double PrtSationReqPrintJob::submit_time() const {
  return submit_time_;
}
inline void PrtSationReqPrintJob::set_submit_time(double value) {
  set_has_submit_time();
  submit_time_ = value;
}

// optional int32 job_size = 5;
inline bool PrtSationReqPrintJob::has_job_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PrtSationReqPrintJob::set_has_job_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PrtSationReqPrintJob::clear_has_job_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PrtSationReqPrintJob::clear_job_size() {
  job_size_ = 0;
  clear_has_job_size();
}
inline ::google::protobuf::int32 PrtSationReqPrintJob::job_size() const {
  return job_size_;
}
inline void PrtSationReqPrintJob::set_job_size(::google::protobuf::int32 value) {
  set_has_job_size();
  job_size_ = value;
}

// optional int32 zip_job_size = 6;
inline bool PrtSationReqPrintJob::has_zip_job_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PrtSationReqPrintJob::set_has_zip_job_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PrtSationReqPrintJob::clear_has_zip_job_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PrtSationReqPrintJob::clear_zip_job_size() {
  zip_job_size_ = 0;
  clear_has_zip_job_size();
}
inline ::google::protobuf::int32 PrtSationReqPrintJob::zip_job_size() const {
  return zip_job_size_;
}
inline void PrtSationReqPrintJob::set_zip_job_size(::google::protobuf::int32 value) {
  set_has_zip_job_size();
  zip_job_size_ = value;
}

// optional string doc_name = 7;
inline bool PrtSationReqPrintJob::has_doc_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PrtSationReqPrintJob::set_has_doc_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PrtSationReqPrintJob::clear_has_doc_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PrtSationReqPrintJob::clear_doc_name() {
  if (doc_name_ != &::google::protobuf::internal::kEmptyString) {
    doc_name_->clear();
  }
  clear_has_doc_name();
}
inline const ::std::string& PrtSationReqPrintJob::doc_name() const {
  return *doc_name_;
}
inline void PrtSationReqPrintJob::set_doc_name(const ::std::string& value) {
  set_has_doc_name();
  if (doc_name_ == &::google::protobuf::internal::kEmptyString) {
    doc_name_ = new ::std::string;
  }
  doc_name_->assign(value);
}
inline void PrtSationReqPrintJob::set_doc_name(const char* value) {
  set_has_doc_name();
  if (doc_name_ == &::google::protobuf::internal::kEmptyString) {
    doc_name_ = new ::std::string;
  }
  doc_name_->assign(value);
}
inline void PrtSationReqPrintJob::set_doc_name(const char* value, size_t size) {
  set_has_doc_name();
  if (doc_name_ == &::google::protobuf::internal::kEmptyString) {
    doc_name_ = new ::std::string;
  }
  doc_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtSationReqPrintJob::mutable_doc_name() {
  set_has_doc_name();
  if (doc_name_ == &::google::protobuf::internal::kEmptyString) {
    doc_name_ = new ::std::string;
  }
  return doc_name_;
}
inline ::std::string* PrtSationReqPrintJob::release_doc_name() {
  clear_has_doc_name();
  if (doc_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = doc_name_;
    doc_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 paper_size = 8;
inline bool PrtSationReqPrintJob::has_paper_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PrtSationReqPrintJob::set_has_paper_size() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PrtSationReqPrintJob::clear_has_paper_size() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PrtSationReqPrintJob::clear_paper_size() {
  paper_size_ = 0;
  clear_has_paper_size();
}
inline ::google::protobuf::int32 PrtSationReqPrintJob::paper_size() const {
  return paper_size_;
}
inline void PrtSationReqPrintJob::set_paper_size(::google::protobuf::int32 value) {
  set_has_paper_size();
  paper_size_ = value;
}

// optional string page_type = 9;
inline bool PrtSationReqPrintJob::has_page_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PrtSationReqPrintJob::set_has_page_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PrtSationReqPrintJob::clear_has_page_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PrtSationReqPrintJob::clear_page_type() {
  if (page_type_ != &::google::protobuf::internal::kEmptyString) {
    page_type_->clear();
  }
  clear_has_page_type();
}
inline const ::std::string& PrtSationReqPrintJob::page_type() const {
  return *page_type_;
}
inline void PrtSationReqPrintJob::set_page_type(const ::std::string& value) {
  set_has_page_type();
  if (page_type_ == &::google::protobuf::internal::kEmptyString) {
    page_type_ = new ::std::string;
  }
  page_type_->assign(value);
}
inline void PrtSationReqPrintJob::set_page_type(const char* value) {
  set_has_page_type();
  if (page_type_ == &::google::protobuf::internal::kEmptyString) {
    page_type_ = new ::std::string;
  }
  page_type_->assign(value);
}
inline void PrtSationReqPrintJob::set_page_type(const char* value, size_t size) {
  set_has_page_type();
  if (page_type_ == &::google::protobuf::internal::kEmptyString) {
    page_type_ = new ::std::string;
  }
  page_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtSationReqPrintJob::mutable_page_type() {
  set_has_page_type();
  if (page_type_ == &::google::protobuf::internal::kEmptyString) {
    page_type_ = new ::std::string;
  }
  return page_type_;
}
inline ::std::string* PrtSationReqPrintJob::release_page_type() {
  clear_has_page_type();
  if (page_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = page_type_;
    page_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 copies = 10;
inline bool PrtSationReqPrintJob::has_copies() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PrtSationReqPrintJob::set_has_copies() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PrtSationReqPrintJob::clear_has_copies() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PrtSationReqPrintJob::clear_copies() {
  copies_ = 0;
  clear_has_copies();
}
inline ::google::protobuf::int32 PrtSationReqPrintJob::copies() const {
  return copies_;
}
inline void PrtSationReqPrintJob::set_copies(::google::protobuf::int32 value) {
  set_has_copies();
  copies_ = value;
}

// optional int32 color = 11;
inline bool PrtSationReqPrintJob::has_color() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PrtSationReqPrintJob::set_has_color() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PrtSationReqPrintJob::clear_has_color() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PrtSationReqPrintJob::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::google::protobuf::int32 PrtSationReqPrintJob::color() const {
  return color_;
}
inline void PrtSationReqPrintJob::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
}

// optional int32 total_page = 12;
inline bool PrtSationReqPrintJob::has_total_page() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PrtSationReqPrintJob::set_has_total_page() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PrtSationReqPrintJob::clear_has_total_page() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PrtSationReqPrintJob::clear_total_page() {
  total_page_ = 0;
  clear_has_total_page();
}
inline ::google::protobuf::int32 PrtSationReqPrintJob::total_page() const {
  return total_page_;
}
inline void PrtSationReqPrintJob::set_total_page(::google::protobuf::int32 value) {
  set_has_total_page();
  total_page_ = value;
}

// optional int32 orientation = 13;
inline bool PrtSationReqPrintJob::has_orientation() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PrtSationReqPrintJob::set_has_orientation() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PrtSationReqPrintJob::clear_has_orientation() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PrtSationReqPrintJob::clear_orientation() {
  orientation_ = 0;
  clear_has_orientation();
}
inline ::google::protobuf::int32 PrtSationReqPrintJob::orientation() const {
  return orientation_;
}
inline void PrtSationReqPrintJob::set_orientation(::google::protobuf::int32 value) {
  set_has_orientation();
  orientation_ = value;
}

// optional int32 double_print = 14;
inline bool PrtSationReqPrintJob::has_double_print() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PrtSationReqPrintJob::set_has_double_print() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PrtSationReqPrintJob::clear_has_double_print() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PrtSationReqPrintJob::clear_double_print() {
  double_print_ = 0;
  clear_has_double_print();
}
inline ::google::protobuf::int32 PrtSationReqPrintJob::double_print() const {
  return double_print_;
}
inline void PrtSationReqPrintJob::set_double_print(::google::protobuf::int32 value) {
  set_has_double_print();
  double_print_ = value;
}

// optional string equip_host = 15;
inline bool PrtSationReqPrintJob::has_equip_host() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PrtSationReqPrintJob::set_has_equip_host() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PrtSationReqPrintJob::clear_has_equip_host() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PrtSationReqPrintJob::clear_equip_host() {
  if (equip_host_ != &::google::protobuf::internal::kEmptyString) {
    equip_host_->clear();
  }
  clear_has_equip_host();
}
inline const ::std::string& PrtSationReqPrintJob::equip_host() const {
  return *equip_host_;
}
inline void PrtSationReqPrintJob::set_equip_host(const ::std::string& value) {
  set_has_equip_host();
  if (equip_host_ == &::google::protobuf::internal::kEmptyString) {
    equip_host_ = new ::std::string;
  }
  equip_host_->assign(value);
}
inline void PrtSationReqPrintJob::set_equip_host(const char* value) {
  set_has_equip_host();
  if (equip_host_ == &::google::protobuf::internal::kEmptyString) {
    equip_host_ = new ::std::string;
  }
  equip_host_->assign(value);
}
inline void PrtSationReqPrintJob::set_equip_host(const char* value, size_t size) {
  set_has_equip_host();
  if (equip_host_ == &::google::protobuf::internal::kEmptyString) {
    equip_host_ = new ::std::string;
  }
  equip_host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtSationReqPrintJob::mutable_equip_host() {
  set_has_equip_host();
  if (equip_host_ == &::google::protobuf::internal::kEmptyString) {
    equip_host_ = new ::std::string;
  }
  return equip_host_;
}
inline ::std::string* PrtSationReqPrintJob::release_equip_host() {
  clear_has_equip_host();
  if (equip_host_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = equip_host_;
    equip_host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string win_user = 16;
inline bool PrtSationReqPrintJob::has_win_user() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PrtSationReqPrintJob::set_has_win_user() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PrtSationReqPrintJob::clear_has_win_user() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PrtSationReqPrintJob::clear_win_user() {
  if (win_user_ != &::google::protobuf::internal::kEmptyString) {
    win_user_->clear();
  }
  clear_has_win_user();
}
inline const ::std::string& PrtSationReqPrintJob::win_user() const {
  return *win_user_;
}
inline void PrtSationReqPrintJob::set_win_user(const ::std::string& value) {
  set_has_win_user();
  if (win_user_ == &::google::protobuf::internal::kEmptyString) {
    win_user_ = new ::std::string;
  }
  win_user_->assign(value);
}
inline void PrtSationReqPrintJob::set_win_user(const char* value) {
  set_has_win_user();
  if (win_user_ == &::google::protobuf::internal::kEmptyString) {
    win_user_ = new ::std::string;
  }
  win_user_->assign(value);
}
inline void PrtSationReqPrintJob::set_win_user(const char* value, size_t size) {
  set_has_win_user();
  if (win_user_ == &::google::protobuf::internal::kEmptyString) {
    win_user_ = new ::std::string;
  }
  win_user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtSationReqPrintJob::mutable_win_user() {
  set_has_win_user();
  if (win_user_ == &::google::protobuf::internal::kEmptyString) {
    win_user_ = new ::std::string;
  }
  return win_user_;
}
inline ::std::string* PrtSationReqPrintJob::release_win_user() {
  clear_has_win_user();
  if (win_user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = win_user_;
    win_user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string equip_ip = 17;
inline bool PrtSationReqPrintJob::has_equip_ip() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PrtSationReqPrintJob::set_has_equip_ip() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PrtSationReqPrintJob::clear_has_equip_ip() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PrtSationReqPrintJob::clear_equip_ip() {
  if (equip_ip_ != &::google::protobuf::internal::kEmptyString) {
    equip_ip_->clear();
  }
  clear_has_equip_ip();
}
inline const ::std::string& PrtSationReqPrintJob::equip_ip() const {
  return *equip_ip_;
}
inline void PrtSationReqPrintJob::set_equip_ip(const ::std::string& value) {
  set_has_equip_ip();
  if (equip_ip_ == &::google::protobuf::internal::kEmptyString) {
    equip_ip_ = new ::std::string;
  }
  equip_ip_->assign(value);
}
inline void PrtSationReqPrintJob::set_equip_ip(const char* value) {
  set_has_equip_ip();
  if (equip_ip_ == &::google::protobuf::internal::kEmptyString) {
    equip_ip_ = new ::std::string;
  }
  equip_ip_->assign(value);
}
inline void PrtSationReqPrintJob::set_equip_ip(const char* value, size_t size) {
  set_has_equip_ip();
  if (equip_ip_ == &::google::protobuf::internal::kEmptyString) {
    equip_ip_ = new ::std::string;
  }
  equip_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtSationReqPrintJob::mutable_equip_ip() {
  set_has_equip_ip();
  if (equip_ip_ == &::google::protobuf::internal::kEmptyString) {
    equip_ip_ = new ::std::string;
  }
  return equip_ip_;
}
inline ::std::string* PrtSationReqPrintJob::release_equip_ip() {
  clear_has_equip_ip();
  if (equip_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = equip_ip_;
    equip_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string user_name = 18;
inline bool PrtSationReqPrintJob::has_user_name() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PrtSationReqPrintJob::set_has_user_name() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PrtSationReqPrintJob::clear_has_user_name() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PrtSationReqPrintJob::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& PrtSationReqPrintJob::user_name() const {
  return *user_name_;
}
inline void PrtSationReqPrintJob::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void PrtSationReqPrintJob::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void PrtSationReqPrintJob::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtSationReqPrintJob::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* PrtSationReqPrintJob::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .isafetec.PRT_REQ_JOB_BY job_req_by = 19;
inline bool PrtSationReqPrintJob::has_job_req_by() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PrtSationReqPrintJob::set_has_job_req_by() {
  _has_bits_[0] |= 0x00040000u;
}
inline void PrtSationReqPrintJob::clear_has_job_req_by() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void PrtSationReqPrintJob::clear_job_req_by() {
  job_req_by_ = 0;
  clear_has_job_req_by();
}
inline isafetec::PRT_REQ_JOB_BY PrtSationReqPrintJob::job_req_by() const {
  return static_cast< isafetec::PRT_REQ_JOB_BY >(job_req_by_);
}
inline void PrtSationReqPrintJob::set_job_req_by(isafetec::PRT_REQ_JOB_BY value) {
  GOOGLE_DCHECK(isafetec::PRT_REQ_JOB_BY_IsValid(value));
  set_has_job_req_by();
  job_req_by_ = value;
}

// optional int32 user_id = 20;
inline bool PrtSationReqPrintJob::has_user_id() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void PrtSationReqPrintJob::set_has_user_id() {
  _has_bits_[0] |= 0x00080000u;
}
inline void PrtSationReqPrintJob::clear_has_user_id() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void PrtSationReqPrintJob::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 PrtSationReqPrintJob::user_id() const {
  return user_id_;
}
inline void PrtSationReqPrintJob::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional double left_money = 22;
inline bool PrtSationReqPrintJob::has_left_money() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void PrtSationReqPrintJob::set_has_left_money() {
  _has_bits_[0] |= 0x00100000u;
}
inline void PrtSationReqPrintJob::clear_has_left_money() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void PrtSationReqPrintJob::clear_left_money() {
  left_money_ = 0;
  clear_has_left_money();
}
inline double PrtSationReqPrintJob::left_money() const {
  return left_money_;
}
inline void PrtSationReqPrintJob::set_left_money(double value) {
  set_has_left_money();
  left_money_ = value;
}

// optional double special_left_money = 23;
inline bool PrtSationReqPrintJob::has_special_left_money() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void PrtSationReqPrintJob::set_has_special_left_money() {
  _has_bits_[0] |= 0x00200000u;
}
inline void PrtSationReqPrintJob::clear_has_special_left_money() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void PrtSationReqPrintJob::clear_special_left_money() {
  special_left_money_ = 0;
  clear_has_special_left_money();
}
inline double PrtSationReqPrintJob::special_left_money() const {
  return special_left_money_;
}
inline void PrtSationReqPrintJob::set_special_left_money(double value) {
  set_has_special_left_money();
  special_left_money_ = value;
}

// optional .isafetec.JOB_PRICE_TYPE price_type = 24;
inline bool PrtSationReqPrintJob::has_price_type() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void PrtSationReqPrintJob::set_has_price_type() {
  _has_bits_[0] |= 0x00400000u;
}
inline void PrtSationReqPrintJob::clear_has_price_type() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void PrtSationReqPrintJob::clear_price_type() {
  price_type_ = 0;
  clear_has_price_type();
}
inline isafetec::JOB_PRICE_TYPE PrtSationReqPrintJob::price_type() const {
  return static_cast< isafetec::JOB_PRICE_TYPE >(price_type_);
}
inline void PrtSationReqPrintJob::set_price_type(isafetec::JOB_PRICE_TYPE value) {
  GOOGLE_DCHECK(isafetec::JOB_PRICE_TYPE_IsValid(value));
  set_has_price_type();
  price_type_ = value;
}

// optional double price = 25;
inline bool PrtSationReqPrintJob::has_price() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void PrtSationReqPrintJob::set_has_price() {
  _has_bits_[0] |= 0x00800000u;
}
inline void PrtSationReqPrintJob::clear_has_price() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void PrtSationReqPrintJob::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline double PrtSationReqPrintJob::price() const {
  return price_;
}
inline void PrtSationReqPrintJob::set_price(double value) {
  set_has_price();
  price_ = value;
}

// optional int32 project_id = 26;
inline bool PrtSationReqPrintJob::has_project_id() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void PrtSationReqPrintJob::set_has_project_id() {
  _has_bits_[0] |= 0x01000000u;
}
inline void PrtSationReqPrintJob::clear_has_project_id() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void PrtSationReqPrintJob::clear_project_id() {
  project_id_ = 0;
  clear_has_project_id();
}
inline ::google::protobuf::int32 PrtSationReqPrintJob::project_id() const {
  return project_id_;
}
inline void PrtSationReqPrintJob::set_project_id(::google::protobuf::int32 value) {
  set_has_project_id();
  project_id_ = value;
}

// optional string project_name = 27;
inline bool PrtSationReqPrintJob::has_project_name() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void PrtSationReqPrintJob::set_has_project_name() {
  _has_bits_[0] |= 0x02000000u;
}
inline void PrtSationReqPrintJob::clear_has_project_name() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void PrtSationReqPrintJob::clear_project_name() {
  if (project_name_ != &::google::protobuf::internal::kEmptyString) {
    project_name_->clear();
  }
  clear_has_project_name();
}
inline const ::std::string& PrtSationReqPrintJob::project_name() const {
  return *project_name_;
}
inline void PrtSationReqPrintJob::set_project_name(const ::std::string& value) {
  set_has_project_name();
  if (project_name_ == &::google::protobuf::internal::kEmptyString) {
    project_name_ = new ::std::string;
  }
  project_name_->assign(value);
}
inline void PrtSationReqPrintJob::set_project_name(const char* value) {
  set_has_project_name();
  if (project_name_ == &::google::protobuf::internal::kEmptyString) {
    project_name_ = new ::std::string;
  }
  project_name_->assign(value);
}
inline void PrtSationReqPrintJob::set_project_name(const char* value, size_t size) {
  set_has_project_name();
  if (project_name_ == &::google::protobuf::internal::kEmptyString) {
    project_name_ = new ::std::string;
  }
  project_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtSationReqPrintJob::mutable_project_name() {
  set_has_project_name();
  if (project_name_ == &::google::protobuf::internal::kEmptyString) {
    project_name_ = new ::std::string;
  }
  return project_name_;
}
inline ::std::string* PrtSationReqPrintJob::release_project_name() {
  clear_has_project_name();
  if (project_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = project_name_;
    project_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .isafetec.PrintSecPolicy sec_policy = 28;
inline bool PrtSationReqPrintJob::has_sec_policy() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void PrtSationReqPrintJob::set_has_sec_policy() {
  _has_bits_[0] |= 0x04000000u;
}
inline void PrtSationReqPrintJob::clear_has_sec_policy() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void PrtSationReqPrintJob::clear_sec_policy() {
  if (sec_policy_ != NULL) sec_policy_->::isafetec::PrintSecPolicy::Clear();
  clear_has_sec_policy();
}
inline const ::isafetec::PrintSecPolicy& PrtSationReqPrintJob::sec_policy() const {
  return sec_policy_ != NULL ? *sec_policy_ : *default_instance_->sec_policy_;
}
inline ::isafetec::PrintSecPolicy* PrtSationReqPrintJob::mutable_sec_policy() {
  set_has_sec_policy();
  if (sec_policy_ == NULL) sec_policy_ = new ::isafetec::PrintSecPolicy;
  return sec_policy_;
}
inline ::isafetec::PrintSecPolicy* PrtSationReqPrintJob::release_sec_policy() {
  clear_has_sec_policy();
  ::isafetec::PrintSecPolicy* temp = sec_policy_;
  sec_policy_ = NULL;
  return temp;
}

// optional int32 printed = 29;
inline bool PrtSationReqPrintJob::has_printed() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void PrtSationReqPrintJob::set_has_printed() {
  _has_bits_[0] |= 0x08000000u;
}
inline void PrtSationReqPrintJob::clear_has_printed() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void PrtSationReqPrintJob::clear_printed() {
  printed_ = 0;
  clear_has_printed();
}
inline ::google::protobuf::int32 PrtSationReqPrintJob::printed() const {
  return printed_;
}
inline void PrtSationReqPrintJob::set_printed(::google::protobuf::int32 value) {
  set_has_printed();
  printed_ = value;
}

// optional string guid = 30;
inline bool PrtSationReqPrintJob::has_guid() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void PrtSationReqPrintJob::set_has_guid() {
  _has_bits_[0] |= 0x10000000u;
}
inline void PrtSationReqPrintJob::clear_has_guid() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void PrtSationReqPrintJob::clear_guid() {
  if (guid_ != &::google::protobuf::internal::kEmptyString) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& PrtSationReqPrintJob::guid() const {
  return *guid_;
}
inline void PrtSationReqPrintJob::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
}
inline void PrtSationReqPrintJob::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
}
inline void PrtSationReqPrintJob::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtSationReqPrintJob::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  return guid_;
}
inline ::std::string* PrtSationReqPrintJob::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 printed_id = 31;
inline bool PrtSationReqPrintJob::has_printed_id() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void PrtSationReqPrintJob::set_has_printed_id() {
  _has_bits_[0] |= 0x20000000u;
}
inline void PrtSationReqPrintJob::clear_has_printed_id() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void PrtSationReqPrintJob::clear_printed_id() {
  printed_id_ = 0;
  clear_has_printed_id();
}
inline ::google::protobuf::int32 PrtSationReqPrintJob::printed_id() const {
  return printed_id_;
}
inline void PrtSationReqPrintJob::set_printed_id(::google::protobuf::int32 value) {
  set_has_printed_id();
  printed_id_ = value;
}

// optional .isafetec.Printer_Paper_Source paper_source = 32;
inline bool PrtSationReqPrintJob::has_paper_source() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void PrtSationReqPrintJob::set_has_paper_source() {
  _has_bits_[0] |= 0x40000000u;
}
inline void PrtSationReqPrintJob::clear_has_paper_source() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void PrtSationReqPrintJob::clear_paper_source() {
  paper_source_ = 1000;
  clear_has_paper_source();
}
inline isafetec::Printer_Paper_Source PrtSationReqPrintJob::paper_source() const {
  return static_cast< isafetec::Printer_Paper_Source >(paper_source_);
}
inline void PrtSationReqPrintJob::set_paper_source(isafetec::Printer_Paper_Source value) {
  GOOGLE_DCHECK(isafetec::Printer_Paper_Source_IsValid(value));
  set_has_paper_source();
  paper_source_ = value;
}

// optional .isafetec.Print_Job_Type print_job_type = 33;
inline bool PrtSationReqPrintJob::has_print_job_type() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void PrtSationReqPrintJob::set_has_print_job_type() {
  _has_bits_[0] |= 0x80000000u;
}
inline void PrtSationReqPrintJob::clear_has_print_job_type() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void PrtSationReqPrintJob::clear_print_job_type() {
  print_job_type_ = 0;
  clear_has_print_job_type();
}
inline isafetec::Print_Job_Type PrtSationReqPrintJob::print_job_type() const {
  return static_cast< isafetec::Print_Job_Type >(print_job_type_);
}
inline void PrtSationReqPrintJob::set_print_job_type(isafetec::Print_Job_Type value) {
  GOOGLE_DCHECK(isafetec::Print_Job_Type_IsValid(value));
  set_has_print_job_type();
  print_job_type_ = value;
}

// optional int32 print_from = 34;
inline bool PrtSationReqPrintJob::has_print_from() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void PrtSationReqPrintJob::set_has_print_from() {
  _has_bits_[1] |= 0x00000001u;
}
inline void PrtSationReqPrintJob::clear_has_print_from() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void PrtSationReqPrintJob::clear_print_from() {
  print_from_ = 0;
  clear_has_print_from();
}
inline ::google::protobuf::int32 PrtSationReqPrintJob::print_from() const {
  return print_from_;
}
inline void PrtSationReqPrintJob::set_print_from(::google::protobuf::int32 value) {
  set_has_print_from();
  print_from_ = value;
}

// optional int32 print_to = 35;
inline bool PrtSationReqPrintJob::has_print_to() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void PrtSationReqPrintJob::set_has_print_to() {
  _has_bits_[1] |= 0x00000002u;
}
inline void PrtSationReqPrintJob::clear_has_print_to() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void PrtSationReqPrintJob::clear_print_to() {
  print_to_ = 0;
  clear_has_print_to();
}
inline ::google::protobuf::int32 PrtSationReqPrintJob::print_to() const {
  return print_to_;
}
inline void PrtSationReqPrintJob::set_print_to(::google::protobuf::int32 value) {
  set_has_print_to();
  print_to_ = value;
}

// optional int32 tiff_use_physical_area = 36;
inline bool PrtSationReqPrintJob::has_tiff_use_physical_area() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void PrtSationReqPrintJob::set_has_tiff_use_physical_area() {
  _has_bits_[1] |= 0x00000004u;
}
inline void PrtSationReqPrintJob::clear_has_tiff_use_physical_area() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void PrtSationReqPrintJob::clear_tiff_use_physical_area() {
  tiff_use_physical_area_ = 0;
  clear_has_tiff_use_physical_area();
}
inline ::google::protobuf::int32 PrtSationReqPrintJob::tiff_use_physical_area() const {
  return tiff_use_physical_area_;
}
inline void PrtSationReqPrintJob::set_tiff_use_physical_area(::google::protobuf::int32 value) {
  set_has_tiff_use_physical_area();
  tiff_use_physical_area_ = value;
}

// -------------------------------------------------------------------

// PrtSationReqPrintJobList

// repeated .isafetec.PrtSationReqPrintJob list = 1;
inline int PrtSationReqPrintJobList::list_size() const {
  return list_.size();
}
inline void PrtSationReqPrintJobList::clear_list() {
  list_.Clear();
}
inline const ::isafetec::PrtSationReqPrintJob& PrtSationReqPrintJobList::list(int index) const {
  return list_.Get(index);
}
inline ::isafetec::PrtSationReqPrintJob* PrtSationReqPrintJobList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::isafetec::PrtSationReqPrintJob* PrtSationReqPrintJobList::list_ReleaseAt(int index) {
  return list_.ReleaseAt(index);
}
inline void PrtSationReqPrintJobList::list_RemoveAt(int index) {
  list_.RemoveAt(index);
}
inline ::isafetec::PrtSationReqPrintJob* PrtSationReqPrintJobList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::PrtSationReqPrintJob >&
PrtSationReqPrintJobList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::PrtSationReqPrintJob >*
PrtSationReqPrintJobList::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// PrtSationReqPrintHistoryJob

// optional .isafetec.PrtSationReqPrintJob job = 1;
inline bool PrtSationReqPrintHistoryJob::has_job() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrtSationReqPrintHistoryJob::set_has_job() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrtSationReqPrintHistoryJob::clear_has_job() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrtSationReqPrintHistoryJob::clear_job() {
  if (job_ != NULL) job_->::isafetec::PrtSationReqPrintJob::Clear();
  clear_has_job();
}
inline const ::isafetec::PrtSationReqPrintJob& PrtSationReqPrintHistoryJob::job() const {
  return job_ != NULL ? *job_ : *default_instance_->job_;
}
inline ::isafetec::PrtSationReqPrintJob* PrtSationReqPrintHistoryJob::mutable_job() {
  set_has_job();
  if (job_ == NULL) job_ = new ::isafetec::PrtSationReqPrintJob;
  return job_;
}
inline ::isafetec::PrtSationReqPrintJob* PrtSationReqPrintHistoryJob::release_job() {
  clear_has_job();
  ::isafetec::PrtSationReqPrintJob* temp = job_;
  job_ = NULL;
  return temp;
}

// optional int32 job_state = 2;
inline bool PrtSationReqPrintHistoryJob::has_job_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrtSationReqPrintHistoryJob::set_has_job_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrtSationReqPrintHistoryJob::clear_has_job_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrtSationReqPrintHistoryJob::clear_job_state() {
  job_state_ = 0;
  clear_has_job_state();
}
inline ::google::protobuf::int32 PrtSationReqPrintHistoryJob::job_state() const {
  return job_state_;
}
inline void PrtSationReqPrintHistoryJob::set_job_state(::google::protobuf::int32 value) {
  set_has_job_state();
  job_state_ = value;
}

// optional int32 job_file_deleted = 3;
inline bool PrtSationReqPrintHistoryJob::has_job_file_deleted() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrtSationReqPrintHistoryJob::set_has_job_file_deleted() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrtSationReqPrintHistoryJob::clear_has_job_file_deleted() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrtSationReqPrintHistoryJob::clear_job_file_deleted() {
  job_file_deleted_ = 0;
  clear_has_job_file_deleted();
}
inline ::google::protobuf::int32 PrtSationReqPrintHistoryJob::job_file_deleted() const {
  return job_file_deleted_;
}
inline void PrtSationReqPrintHistoryJob::set_job_file_deleted(::google::protobuf::int32 value) {
  set_has_job_file_deleted();
  job_file_deleted_ = value;
}

// optional double job_last_print_time = 4;
inline bool PrtSationReqPrintHistoryJob::has_job_last_print_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrtSationReqPrintHistoryJob::set_has_job_last_print_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrtSationReqPrintHistoryJob::clear_has_job_last_print_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrtSationReqPrintHistoryJob::clear_job_last_print_time() {
  job_last_print_time_ = 0;
  clear_has_job_last_print_time();
}
inline double PrtSationReqPrintHistoryJob::job_last_print_time() const {
  return job_last_print_time_;
}
inline void PrtSationReqPrintHistoryJob::set_job_last_print_time(double value) {
  set_has_job_last_print_time();
  job_last_print_time_ = value;
}

// optional double job_delete_time = 5;
inline bool PrtSationReqPrintHistoryJob::has_job_delete_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PrtSationReqPrintHistoryJob::set_has_job_delete_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PrtSationReqPrintHistoryJob::clear_has_job_delete_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PrtSationReqPrintHistoryJob::clear_job_delete_time() {
  job_delete_time_ = 0;
  clear_has_job_delete_time();
}
inline double PrtSationReqPrintHistoryJob::job_delete_time() const {
  return job_delete_time_;
}
inline void PrtSationReqPrintHistoryJob::set_job_delete_time(double value) {
  set_has_job_delete_time();
  job_delete_time_ = value;
}

// -------------------------------------------------------------------

// PrtSationReqPrintHistoryJobList

// repeated .isafetec.PrtSationReqPrintHistoryJob list = 1;
inline int PrtSationReqPrintHistoryJobList::list_size() const {
  return list_.size();
}
inline void PrtSationReqPrintHistoryJobList::clear_list() {
  list_.Clear();
}
inline const ::isafetec::PrtSationReqPrintHistoryJob& PrtSationReqPrintHistoryJobList::list(int index) const {
  return list_.Get(index);
}
inline ::isafetec::PrtSationReqPrintHistoryJob* PrtSationReqPrintHistoryJobList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::isafetec::PrtSationReqPrintHistoryJob* PrtSationReqPrintHistoryJobList::list_ReleaseAt(int index) {
  return list_.ReleaseAt(index);
}
inline void PrtSationReqPrintHistoryJobList::list_RemoveAt(int index) {
  list_.RemoveAt(index);
}
inline ::isafetec::PrtSationReqPrintHistoryJob* PrtSationReqPrintHistoryJobList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::PrtSationReqPrintHistoryJob >&
PrtSationReqPrintHistoryJobList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::PrtSationReqPrintHistoryJob >*
PrtSationReqPrintHistoryJobList::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// CardInfo

// optional string code = 1;
inline bool CardInfo::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CardInfo::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CardInfo::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CardInfo::clear_code() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& CardInfo::code() const {
  return *code_;
}
inline void CardInfo::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void CardInfo::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void CardInfo::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CardInfo::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  return code_;
}
inline ::std::string* CardInfo::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string user_name = 2;
inline bool CardInfo::has_user_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CardInfo::set_has_user_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CardInfo::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CardInfo::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& CardInfo::user_name() const {
  return *user_name_;
}
inline void CardInfo::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void CardInfo::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void CardInfo::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CardInfo::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* CardInfo::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string dep_name = 3;
inline bool CardInfo::has_dep_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CardInfo::set_has_dep_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CardInfo::clear_has_dep_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CardInfo::clear_dep_name() {
  if (dep_name_ != &::google::protobuf::internal::kEmptyString) {
    dep_name_->clear();
  }
  clear_has_dep_name();
}
inline const ::std::string& CardInfo::dep_name() const {
  return *dep_name_;
}
inline void CardInfo::set_dep_name(const ::std::string& value) {
  set_has_dep_name();
  if (dep_name_ == &::google::protobuf::internal::kEmptyString) {
    dep_name_ = new ::std::string;
  }
  dep_name_->assign(value);
}
inline void CardInfo::set_dep_name(const char* value) {
  set_has_dep_name();
  if (dep_name_ == &::google::protobuf::internal::kEmptyString) {
    dep_name_ = new ::std::string;
  }
  dep_name_->assign(value);
}
inline void CardInfo::set_dep_name(const char* value, size_t size) {
  set_has_dep_name();
  if (dep_name_ == &::google::protobuf::internal::kEmptyString) {
    dep_name_ = new ::std::string;
  }
  dep_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CardInfo::mutable_dep_name() {
  set_has_dep_name();
  if (dep_name_ == &::google::protobuf::internal::kEmptyString) {
    dep_name_ = new ::std::string;
  }
  return dep_name_;
}
inline ::std::string* CardInfo::release_dep_name() {
  clear_has_dep_name();
  if (dep_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dep_name_;
    dep_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional double left_money = 4;
inline bool CardInfo::has_left_money() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CardInfo::set_has_left_money() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CardInfo::clear_has_left_money() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CardInfo::clear_left_money() {
  left_money_ = 0;
  clear_has_left_money();
}
inline double CardInfo::left_money() const {
  return left_money_;
}
inline void CardInfo::set_left_money(double value) {
  set_has_left_money();
  left_money_ = value;
}

// optional string pwd = 5;
inline bool CardInfo::has_pwd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CardInfo::set_has_pwd() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CardInfo::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CardInfo::clear_pwd() {
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    pwd_->clear();
  }
  clear_has_pwd();
}
inline const ::std::string& CardInfo::pwd() const {
  return *pwd_;
}
inline void CardInfo::set_pwd(const ::std::string& value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
}
inline void CardInfo::set_pwd(const char* value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
}
inline void CardInfo::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CardInfo::mutable_pwd() {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  return pwd_;
}
inline ::std::string* CardInfo::release_pwd() {
  clear_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pwd_;
    pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string id_card_no = 6;
inline bool CardInfo::has_id_card_no() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CardInfo::set_has_id_card_no() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CardInfo::clear_has_id_card_no() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CardInfo::clear_id_card_no() {
  if (id_card_no_ != &::google::protobuf::internal::kEmptyString) {
    id_card_no_->clear();
  }
  clear_has_id_card_no();
}
inline const ::std::string& CardInfo::id_card_no() const {
  return *id_card_no_;
}
inline void CardInfo::set_id_card_no(const ::std::string& value) {
  set_has_id_card_no();
  if (id_card_no_ == &::google::protobuf::internal::kEmptyString) {
    id_card_no_ = new ::std::string;
  }
  id_card_no_->assign(value);
}
inline void CardInfo::set_id_card_no(const char* value) {
  set_has_id_card_no();
  if (id_card_no_ == &::google::protobuf::internal::kEmptyString) {
    id_card_no_ = new ::std::string;
  }
  id_card_no_->assign(value);
}
inline void CardInfo::set_id_card_no(const char* value, size_t size) {
  set_has_id_card_no();
  if (id_card_no_ == &::google::protobuf::internal::kEmptyString) {
    id_card_no_ = new ::std::string;
  }
  id_card_no_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CardInfo::mutable_id_card_no() {
  set_has_id_card_no();
  if (id_card_no_ == &::google::protobuf::internal::kEmptyString) {
    id_card_no_ = new ::std::string;
  }
  return id_card_no_;
}
inline ::std::string* CardInfo::release_id_card_no() {
  clear_has_id_card_no();
  if (id_card_no_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_card_no_;
    id_card_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string citizen_card_no = 7;
inline bool CardInfo::has_citizen_card_no() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CardInfo::set_has_citizen_card_no() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CardInfo::clear_has_citizen_card_no() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CardInfo::clear_citizen_card_no() {
  if (citizen_card_no_ != &::google::protobuf::internal::kEmptyString) {
    citizen_card_no_->clear();
  }
  clear_has_citizen_card_no();
}
inline const ::std::string& CardInfo::citizen_card_no() const {
  return *citizen_card_no_;
}
inline void CardInfo::set_citizen_card_no(const ::std::string& value) {
  set_has_citizen_card_no();
  if (citizen_card_no_ == &::google::protobuf::internal::kEmptyString) {
    citizen_card_no_ = new ::std::string;
  }
  citizen_card_no_->assign(value);
}
inline void CardInfo::set_citizen_card_no(const char* value) {
  set_has_citizen_card_no();
  if (citizen_card_no_ == &::google::protobuf::internal::kEmptyString) {
    citizen_card_no_ = new ::std::string;
  }
  citizen_card_no_->assign(value);
}
inline void CardInfo::set_citizen_card_no(const char* value, size_t size) {
  set_has_citizen_card_no();
  if (citizen_card_no_ == &::google::protobuf::internal::kEmptyString) {
    citizen_card_no_ = new ::std::string;
  }
  citizen_card_no_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CardInfo::mutable_citizen_card_no() {
  set_has_citizen_card_no();
  if (citizen_card_no_ == &::google::protobuf::internal::kEmptyString) {
    citizen_card_no_ = new ::std::string;
  }
  return citizen_card_no_;
}
inline ::std::string* CardInfo::release_citizen_card_no() {
  clear_has_citizen_card_no();
  if (citizen_card_no_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = citizen_card_no_;
    citizen_card_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string mobile_no = 8;
inline bool CardInfo::has_mobile_no() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CardInfo::set_has_mobile_no() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CardInfo::clear_has_mobile_no() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CardInfo::clear_mobile_no() {
  if (mobile_no_ != &::google::protobuf::internal::kEmptyString) {
    mobile_no_->clear();
  }
  clear_has_mobile_no();
}
inline const ::std::string& CardInfo::mobile_no() const {
  return *mobile_no_;
}
inline void CardInfo::set_mobile_no(const ::std::string& value) {
  set_has_mobile_no();
  if (mobile_no_ == &::google::protobuf::internal::kEmptyString) {
    mobile_no_ = new ::std::string;
  }
  mobile_no_->assign(value);
}
inline void CardInfo::set_mobile_no(const char* value) {
  set_has_mobile_no();
  if (mobile_no_ == &::google::protobuf::internal::kEmptyString) {
    mobile_no_ = new ::std::string;
  }
  mobile_no_->assign(value);
}
inline void CardInfo::set_mobile_no(const char* value, size_t size) {
  set_has_mobile_no();
  if (mobile_no_ == &::google::protobuf::internal::kEmptyString) {
    mobile_no_ = new ::std::string;
  }
  mobile_no_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CardInfo::mutable_mobile_no() {
  set_has_mobile_no();
  if (mobile_no_ == &::google::protobuf::internal::kEmptyString) {
    mobile_no_ = new ::std::string;
  }
  return mobile_no_;
}
inline ::std::string* CardInfo::release_mobile_no() {
  clear_has_mobile_no();
  if (mobile_no_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mobile_no_;
    mobile_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PrtStationLogon

// optional int32 ptr_id = 1;
inline bool PrtStationLogon::has_ptr_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrtStationLogon::set_has_ptr_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrtStationLogon::clear_has_ptr_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrtStationLogon::clear_ptr_id() {
  ptr_id_ = 0;
  clear_has_ptr_id();
}
inline ::google::protobuf::int32 PrtStationLogon::ptr_id() const {
  return ptr_id_;
}
inline void PrtStationLogon::set_ptr_id(::google::protobuf::int32 value) {
  set_has_ptr_id();
  ptr_id_ = value;
}

// optional string name = 2;
inline bool PrtStationLogon::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrtStationLogon::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrtStationLogon::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrtStationLogon::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PrtStationLogon::name() const {
  return *name_;
}
inline void PrtStationLogon::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PrtStationLogon::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PrtStationLogon::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtStationLogon::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PrtStationLogon::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string pwd = 3;
inline bool PrtStationLogon::has_pwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrtStationLogon::set_has_pwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrtStationLogon::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrtStationLogon::clear_pwd() {
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    pwd_->clear();
  }
  clear_has_pwd();
}
inline const ::std::string& PrtStationLogon::pwd() const {
  return *pwd_;
}
inline void PrtStationLogon::set_pwd(const ::std::string& value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
}
inline void PrtStationLogon::set_pwd(const char* value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
}
inline void PrtStationLogon::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtStationLogon::mutable_pwd() {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  return pwd_;
}
inline ::std::string* PrtStationLogon::release_pwd() {
  clear_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pwd_;
    pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 audit_ok = 4;
inline bool PrtStationLogon::has_audit_ok() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrtStationLogon::set_has_audit_ok() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrtStationLogon::clear_has_audit_ok() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrtStationLogon::clear_audit_ok() {
  audit_ok_ = 0;
  clear_has_audit_ok();
}
inline ::google::protobuf::int32 PrtStationLogon::audit_ok() const {
  return audit_ok_;
}
inline void PrtStationLogon::set_audit_ok(::google::protobuf::int32 value) {
  set_has_audit_ok();
  audit_ok_ = value;
}

// optional .isafetec.CardInfo card = 5;
inline bool PrtStationLogon::has_card() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PrtStationLogon::set_has_card() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PrtStationLogon::clear_has_card() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PrtStationLogon::clear_card() {
  if (card_ != NULL) card_->::isafetec::CardInfo::Clear();
  clear_has_card();
}
inline const ::isafetec::CardInfo& PrtStationLogon::card() const {
  return card_ != NULL ? *card_ : *default_instance_->card_;
}
inline ::isafetec::CardInfo* PrtStationLogon::mutable_card() {
  set_has_card();
  if (card_ == NULL) card_ = new ::isafetec::CardInfo;
  return card_;
}
inline ::isafetec::CardInfo* PrtStationLogon::release_card() {
  clear_has_card();
  ::isafetec::CardInfo* temp = card_;
  card_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PrtStationUserAccount

// optional int32 user_id = 1;
inline bool PrtStationUserAccount::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrtStationUserAccount::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrtStationUserAccount::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrtStationUserAccount::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 PrtStationUserAccount::user_id() const {
  return user_id_;
}
inline void PrtStationUserAccount::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional int32 account_id = 2;
inline bool PrtStationUserAccount::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrtStationUserAccount::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrtStationUserAccount::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrtStationUserAccount::clear_account_id() {
  account_id_ = 0;
  clear_has_account_id();
}
inline ::google::protobuf::int32 PrtStationUserAccount::account_id() const {
  return account_id_;
}
inline void PrtStationUserAccount::set_account_id(::google::protobuf::int32 value) {
  set_has_account_id();
  account_id_ = value;
}

// optional double left_money = 3;
inline bool PrtStationUserAccount::has_left_money() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrtStationUserAccount::set_has_left_money() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrtStationUserAccount::clear_has_left_money() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrtStationUserAccount::clear_left_money() {
  left_money_ = 0;
  clear_has_left_money();
}
inline double PrtStationUserAccount::left_money() const {
  return left_money_;
}
inline void PrtStationUserAccount::set_left_money(double value) {
  set_has_left_money();
  left_money_ = value;
}

// optional double special_left_money = 4;
inline bool PrtStationUserAccount::has_special_left_money() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrtStationUserAccount::set_has_special_left_money() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrtStationUserAccount::clear_has_special_left_money() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrtStationUserAccount::clear_special_left_money() {
  special_left_money_ = 0;
  clear_has_special_left_money();
}
inline double PrtStationUserAccount::special_left_money() const {
  return special_left_money_;
}
inline void PrtStationUserAccount::set_special_left_money(double value) {
  set_has_special_left_money();
  special_left_money_ = value;
}

// optional string account_name = 5;
inline bool PrtStationUserAccount::has_account_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PrtStationUserAccount::set_has_account_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PrtStationUserAccount::clear_has_account_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PrtStationUserAccount::clear_account_name() {
  if (account_name_ != &::google::protobuf::internal::kEmptyString) {
    account_name_->clear();
  }
  clear_has_account_name();
}
inline const ::std::string& PrtStationUserAccount::account_name() const {
  return *account_name_;
}
inline void PrtStationUserAccount::set_account_name(const ::std::string& value) {
  set_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    account_name_ = new ::std::string;
  }
  account_name_->assign(value);
}
inline void PrtStationUserAccount::set_account_name(const char* value) {
  set_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    account_name_ = new ::std::string;
  }
  account_name_->assign(value);
}
inline void PrtStationUserAccount::set_account_name(const char* value, size_t size) {
  set_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    account_name_ = new ::std::string;
  }
  account_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtStationUserAccount::mutable_account_name() {
  set_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    account_name_ = new ::std::string;
  }
  return account_name_;
}
inline ::std::string* PrtStationUserAccount::release_account_name() {
  clear_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_name_;
    account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string real_name = 6;
inline bool PrtStationUserAccount::has_real_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PrtStationUserAccount::set_has_real_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PrtStationUserAccount::clear_has_real_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PrtStationUserAccount::clear_real_name() {
  if (real_name_ != &::google::protobuf::internal::kEmptyString) {
    real_name_->clear();
  }
  clear_has_real_name();
}
inline const ::std::string& PrtStationUserAccount::real_name() const {
  return *real_name_;
}
inline void PrtStationUserAccount::set_real_name(const ::std::string& value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::kEmptyString) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
}
inline void PrtStationUserAccount::set_real_name(const char* value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::kEmptyString) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
}
inline void PrtStationUserAccount::set_real_name(const char* value, size_t size) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::kEmptyString) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtStationUserAccount::mutable_real_name() {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::kEmptyString) {
    real_name_ = new ::std::string;
  }
  return real_name_;
}
inline ::std::string* PrtStationUserAccount::release_real_name() {
  clear_has_real_name();
  if (real_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = real_name_;
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string card_no = 7;
inline bool PrtStationUserAccount::has_card_no() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PrtStationUserAccount::set_has_card_no() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PrtStationUserAccount::clear_has_card_no() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PrtStationUserAccount::clear_card_no() {
  if (card_no_ != &::google::protobuf::internal::kEmptyString) {
    card_no_->clear();
  }
  clear_has_card_no();
}
inline const ::std::string& PrtStationUserAccount::card_no() const {
  return *card_no_;
}
inline void PrtStationUserAccount::set_card_no(const ::std::string& value) {
  set_has_card_no();
  if (card_no_ == &::google::protobuf::internal::kEmptyString) {
    card_no_ = new ::std::string;
  }
  card_no_->assign(value);
}
inline void PrtStationUserAccount::set_card_no(const char* value) {
  set_has_card_no();
  if (card_no_ == &::google::protobuf::internal::kEmptyString) {
    card_no_ = new ::std::string;
  }
  card_no_->assign(value);
}
inline void PrtStationUserAccount::set_card_no(const char* value, size_t size) {
  set_has_card_no();
  if (card_no_ == &::google::protobuf::internal::kEmptyString) {
    card_no_ = new ::std::string;
  }
  card_no_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtStationUserAccount::mutable_card_no() {
  set_has_card_no();
  if (card_no_ == &::google::protobuf::internal::kEmptyString) {
    card_no_ = new ::std::string;
  }
  return card_no_;
}
inline ::std::string* PrtStationUserAccount::release_card_no() {
  clear_has_card_no();
  if (card_no_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = card_no_;
    card_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string id_card_no = 8;
inline bool PrtStationUserAccount::has_id_card_no() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PrtStationUserAccount::set_has_id_card_no() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PrtStationUserAccount::clear_has_id_card_no() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PrtStationUserAccount::clear_id_card_no() {
  if (id_card_no_ != &::google::protobuf::internal::kEmptyString) {
    id_card_no_->clear();
  }
  clear_has_id_card_no();
}
inline const ::std::string& PrtStationUserAccount::id_card_no() const {
  return *id_card_no_;
}
inline void PrtStationUserAccount::set_id_card_no(const ::std::string& value) {
  set_has_id_card_no();
  if (id_card_no_ == &::google::protobuf::internal::kEmptyString) {
    id_card_no_ = new ::std::string;
  }
  id_card_no_->assign(value);
}
inline void PrtStationUserAccount::set_id_card_no(const char* value) {
  set_has_id_card_no();
  if (id_card_no_ == &::google::protobuf::internal::kEmptyString) {
    id_card_no_ = new ::std::string;
  }
  id_card_no_->assign(value);
}
inline void PrtStationUserAccount::set_id_card_no(const char* value, size_t size) {
  set_has_id_card_no();
  if (id_card_no_ == &::google::protobuf::internal::kEmptyString) {
    id_card_no_ = new ::std::string;
  }
  id_card_no_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtStationUserAccount::mutable_id_card_no() {
  set_has_id_card_no();
  if (id_card_no_ == &::google::protobuf::internal::kEmptyString) {
    id_card_no_ = new ::std::string;
  }
  return id_card_no_;
}
inline ::std::string* PrtStationUserAccount::release_id_card_no() {
  clear_has_id_card_no();
  if (id_card_no_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_card_no_;
    id_card_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string citizen_card_no = 9;
inline bool PrtStationUserAccount::has_citizen_card_no() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PrtStationUserAccount::set_has_citizen_card_no() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PrtStationUserAccount::clear_has_citizen_card_no() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PrtStationUserAccount::clear_citizen_card_no() {
  if (citizen_card_no_ != &::google::protobuf::internal::kEmptyString) {
    citizen_card_no_->clear();
  }
  clear_has_citizen_card_no();
}
inline const ::std::string& PrtStationUserAccount::citizen_card_no() const {
  return *citizen_card_no_;
}
inline void PrtStationUserAccount::set_citizen_card_no(const ::std::string& value) {
  set_has_citizen_card_no();
  if (citizen_card_no_ == &::google::protobuf::internal::kEmptyString) {
    citizen_card_no_ = new ::std::string;
  }
  citizen_card_no_->assign(value);
}
inline void PrtStationUserAccount::set_citizen_card_no(const char* value) {
  set_has_citizen_card_no();
  if (citizen_card_no_ == &::google::protobuf::internal::kEmptyString) {
    citizen_card_no_ = new ::std::string;
  }
  citizen_card_no_->assign(value);
}
inline void PrtStationUserAccount::set_citizen_card_no(const char* value, size_t size) {
  set_has_citizen_card_no();
  if (citizen_card_no_ == &::google::protobuf::internal::kEmptyString) {
    citizen_card_no_ = new ::std::string;
  }
  citizen_card_no_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtStationUserAccount::mutable_citizen_card_no() {
  set_has_citizen_card_no();
  if (citizen_card_no_ == &::google::protobuf::internal::kEmptyString) {
    citizen_card_no_ = new ::std::string;
  }
  return citizen_card_no_;
}
inline ::std::string* PrtStationUserAccount::release_citizen_card_no() {
  clear_has_citizen_card_no();
  if (citizen_card_no_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = citizen_card_no_;
    citizen_card_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string mobile_no = 10;
inline bool PrtStationUserAccount::has_mobile_no() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PrtStationUserAccount::set_has_mobile_no() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PrtStationUserAccount::clear_has_mobile_no() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PrtStationUserAccount::clear_mobile_no() {
  if (mobile_no_ != &::google::protobuf::internal::kEmptyString) {
    mobile_no_->clear();
  }
  clear_has_mobile_no();
}
inline const ::std::string& PrtStationUserAccount::mobile_no() const {
  return *mobile_no_;
}
inline void PrtStationUserAccount::set_mobile_no(const ::std::string& value) {
  set_has_mobile_no();
  if (mobile_no_ == &::google::protobuf::internal::kEmptyString) {
    mobile_no_ = new ::std::string;
  }
  mobile_no_->assign(value);
}
inline void PrtStationUserAccount::set_mobile_no(const char* value) {
  set_has_mobile_no();
  if (mobile_no_ == &::google::protobuf::internal::kEmptyString) {
    mobile_no_ = new ::std::string;
  }
  mobile_no_->assign(value);
}
inline void PrtStationUserAccount::set_mobile_no(const char* value, size_t size) {
  set_has_mobile_no();
  if (mobile_no_ == &::google::protobuf::internal::kEmptyString) {
    mobile_no_ = new ::std::string;
  }
  mobile_no_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtStationUserAccount::mutable_mobile_no() {
  set_has_mobile_no();
  if (mobile_no_ == &::google::protobuf::internal::kEmptyString) {
    mobile_no_ = new ::std::string;
  }
  return mobile_no_;
}
inline ::std::string* PrtStationUserAccount::release_mobile_no() {
  clear_has_mobile_no();
  if (mobile_no_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mobile_no_;
    mobile_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string dep_name = 11;
inline bool PrtStationUserAccount::has_dep_name() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PrtStationUserAccount::set_has_dep_name() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PrtStationUserAccount::clear_has_dep_name() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PrtStationUserAccount::clear_dep_name() {
  if (dep_name_ != &::google::protobuf::internal::kEmptyString) {
    dep_name_->clear();
  }
  clear_has_dep_name();
}
inline const ::std::string& PrtStationUserAccount::dep_name() const {
  return *dep_name_;
}
inline void PrtStationUserAccount::set_dep_name(const ::std::string& value) {
  set_has_dep_name();
  if (dep_name_ == &::google::protobuf::internal::kEmptyString) {
    dep_name_ = new ::std::string;
  }
  dep_name_->assign(value);
}
inline void PrtStationUserAccount::set_dep_name(const char* value) {
  set_has_dep_name();
  if (dep_name_ == &::google::protobuf::internal::kEmptyString) {
    dep_name_ = new ::std::string;
  }
  dep_name_->assign(value);
}
inline void PrtStationUserAccount::set_dep_name(const char* value, size_t size) {
  set_has_dep_name();
  if (dep_name_ == &::google::protobuf::internal::kEmptyString) {
    dep_name_ = new ::std::string;
  }
  dep_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtStationUserAccount::mutable_dep_name() {
  set_has_dep_name();
  if (dep_name_ == &::google::protobuf::internal::kEmptyString) {
    dep_name_ = new ::std::string;
  }
  return dep_name_;
}
inline ::std::string* PrtStationUserAccount::release_dep_name() {
  clear_has_dep_name();
  if (dep_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dep_name_;
    dep_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PrtStationPrice

// optional .isafetec.JOB_PRICE_TYPE price_type = 1;
inline bool PrtStationPrice::has_price_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrtStationPrice::set_has_price_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrtStationPrice::clear_has_price_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrtStationPrice::clear_price_type() {
  price_type_ = 0;
  clear_has_price_type();
}
inline isafetec::JOB_PRICE_TYPE PrtStationPrice::price_type() const {
  return static_cast< isafetec::JOB_PRICE_TYPE >(price_type_);
}
inline void PrtStationPrice::set_price_type(isafetec::JOB_PRICE_TYPE value) {
  GOOGLE_DCHECK(isafetec::JOB_PRICE_TYPE_IsValid(value));
  set_has_price_type();
  price_type_ = value;
}

// optional double a3_hb_price = 2;
inline bool PrtStationPrice::has_a3_hb_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrtStationPrice::set_has_a3_hb_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrtStationPrice::clear_has_a3_hb_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrtStationPrice::clear_a3_hb_price() {
  a3_hb_price_ = 0;
  clear_has_a3_hb_price();
}
inline double PrtStationPrice::a3_hb_price() const {
  return a3_hb_price_;
}
inline void PrtStationPrice::set_a3_hb_price(double value) {
  set_has_a3_hb_price();
  a3_hb_price_ = value;
}

// optional double a3_color_price = 3;
inline bool PrtStationPrice::has_a3_color_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrtStationPrice::set_has_a3_color_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrtStationPrice::clear_has_a3_color_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrtStationPrice::clear_a3_color_price() {
  a3_color_price_ = 0;
  clear_has_a3_color_price();
}
inline double PrtStationPrice::a3_color_price() const {
  return a3_color_price_;
}
inline void PrtStationPrice::set_a3_color_price(double value) {
  set_has_a3_color_price();
  a3_color_price_ = value;
}

// optional double a4_hb_price = 4;
inline bool PrtStationPrice::has_a4_hb_price() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrtStationPrice::set_has_a4_hb_price() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrtStationPrice::clear_has_a4_hb_price() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrtStationPrice::clear_a4_hb_price() {
  a4_hb_price_ = 0;
  clear_has_a4_hb_price();
}
inline double PrtStationPrice::a4_hb_price() const {
  return a4_hb_price_;
}
inline void PrtStationPrice::set_a4_hb_price(double value) {
  set_has_a4_hb_price();
  a4_hb_price_ = value;
}

// optional double a4_color_price = 5;
inline bool PrtStationPrice::has_a4_color_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PrtStationPrice::set_has_a4_color_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PrtStationPrice::clear_has_a4_color_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PrtStationPrice::clear_a4_color_price() {
  a4_color_price_ = 0;
  clear_has_a4_color_price();
}
inline double PrtStationPrice::a4_color_price() const {
  return a4_color_price_;
}
inline void PrtStationPrice::set_a4_color_price(double value) {
  set_has_a4_color_price();
  a4_color_price_ = value;
}

// optional double a3_hb_price_duplex = 6;
inline bool PrtStationPrice::has_a3_hb_price_duplex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PrtStationPrice::set_has_a3_hb_price_duplex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PrtStationPrice::clear_has_a3_hb_price_duplex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PrtStationPrice::clear_a3_hb_price_duplex() {
  a3_hb_price_duplex_ = 0;
  clear_has_a3_hb_price_duplex();
}
inline double PrtStationPrice::a3_hb_price_duplex() const {
  return a3_hb_price_duplex_;
}
inline void PrtStationPrice::set_a3_hb_price_duplex(double value) {
  set_has_a3_hb_price_duplex();
  a3_hb_price_duplex_ = value;
}

// optional double a3_color_price_duplex = 7;
inline bool PrtStationPrice::has_a3_color_price_duplex() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PrtStationPrice::set_has_a3_color_price_duplex() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PrtStationPrice::clear_has_a3_color_price_duplex() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PrtStationPrice::clear_a3_color_price_duplex() {
  a3_color_price_duplex_ = 0;
  clear_has_a3_color_price_duplex();
}
inline double PrtStationPrice::a3_color_price_duplex() const {
  return a3_color_price_duplex_;
}
inline void PrtStationPrice::set_a3_color_price_duplex(double value) {
  set_has_a3_color_price_duplex();
  a3_color_price_duplex_ = value;
}

// optional double a4_hb_price_duplex = 8;
inline bool PrtStationPrice::has_a4_hb_price_duplex() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PrtStationPrice::set_has_a4_hb_price_duplex() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PrtStationPrice::clear_has_a4_hb_price_duplex() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PrtStationPrice::clear_a4_hb_price_duplex() {
  a4_hb_price_duplex_ = 0;
  clear_has_a4_hb_price_duplex();
}
inline double PrtStationPrice::a4_hb_price_duplex() const {
  return a4_hb_price_duplex_;
}
inline void PrtStationPrice::set_a4_hb_price_duplex(double value) {
  set_has_a4_hb_price_duplex();
  a4_hb_price_duplex_ = value;
}

// optional double a4_color_price_duplex = 9;
inline bool PrtStationPrice::has_a4_color_price_duplex() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PrtStationPrice::set_has_a4_color_price_duplex() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PrtStationPrice::clear_has_a4_color_price_duplex() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PrtStationPrice::clear_a4_color_price_duplex() {
  a4_color_price_duplex_ = 0;
  clear_has_a4_color_price_duplex();
}
inline double PrtStationPrice::a4_color_price_duplex() const {
  return a4_color_price_duplex_;
}
inline void PrtStationPrice::set_a4_color_price_duplex(double value) {
  set_has_a4_color_price_duplex();
  a4_color_price_duplex_ = value;
}

// optional int32 IsSupportPrintDuplexPrice = 10;
inline bool PrtStationPrice::has_issupportprintduplexprice() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PrtStationPrice::set_has_issupportprintduplexprice() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PrtStationPrice::clear_has_issupportprintduplexprice() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PrtStationPrice::clear_issupportprintduplexprice() {
  issupportprintduplexprice_ = 0;
  clear_has_issupportprintduplexprice();
}
inline ::google::protobuf::int32 PrtStationPrice::issupportprintduplexprice() const {
  return issupportprintduplexprice_;
}
inline void PrtStationPrice::set_issupportprintduplexprice(::google::protobuf::int32 value) {
  set_has_issupportprintduplexprice();
  issupportprintduplexprice_ = value;
}

// -------------------------------------------------------------------

// PrtStationPriceStep

// optional .isafetec.PrtStationPrice price = 1;
inline bool PrtStationPriceStep::has_price() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrtStationPriceStep::set_has_price() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrtStationPriceStep::clear_has_price() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrtStationPriceStep::clear_price() {
  if (price_ != NULL) price_->::isafetec::PrtStationPrice::Clear();
  clear_has_price();
}
inline const ::isafetec::PrtStationPrice& PrtStationPriceStep::price() const {
  return price_ != NULL ? *price_ : *default_instance_->price_;
}
inline ::isafetec::PrtStationPrice* PrtStationPriceStep::mutable_price() {
  set_has_price();
  if (price_ == NULL) price_ = new ::isafetec::PrtStationPrice;
  return price_;
}
inline ::isafetec::PrtStationPrice* PrtStationPriceStep::release_price() {
  clear_has_price();
  ::isafetec::PrtStationPrice* temp = price_;
  price_ = NULL;
  return temp;
}

// optional string PriceDesc = 2;
inline bool PrtStationPriceStep::has_pricedesc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrtStationPriceStep::set_has_pricedesc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrtStationPriceStep::clear_has_pricedesc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrtStationPriceStep::clear_pricedesc() {
  if (pricedesc_ != &::google::protobuf::internal::kEmptyString) {
    pricedesc_->clear();
  }
  clear_has_pricedesc();
}
inline const ::std::string& PrtStationPriceStep::pricedesc() const {
  return *pricedesc_;
}
inline void PrtStationPriceStep::set_pricedesc(const ::std::string& value) {
  set_has_pricedesc();
  if (pricedesc_ == &::google::protobuf::internal::kEmptyString) {
    pricedesc_ = new ::std::string;
  }
  pricedesc_->assign(value);
}
inline void PrtStationPriceStep::set_pricedesc(const char* value) {
  set_has_pricedesc();
  if (pricedesc_ == &::google::protobuf::internal::kEmptyString) {
    pricedesc_ = new ::std::string;
  }
  pricedesc_->assign(value);
}
inline void PrtStationPriceStep::set_pricedesc(const char* value, size_t size) {
  set_has_pricedesc();
  if (pricedesc_ == &::google::protobuf::internal::kEmptyString) {
    pricedesc_ = new ::std::string;
  }
  pricedesc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtStationPriceStep::mutable_pricedesc() {
  set_has_pricedesc();
  if (pricedesc_ == &::google::protobuf::internal::kEmptyString) {
    pricedesc_ = new ::std::string;
  }
  return pricedesc_;
}
inline ::std::string* PrtStationPriceStep::release_pricedesc() {
  clear_has_pricedesc();
  if (pricedesc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pricedesc_;
    pricedesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 PageMin = 3;
inline bool PrtStationPriceStep::has_pagemin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrtStationPriceStep::set_has_pagemin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrtStationPriceStep::clear_has_pagemin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrtStationPriceStep::clear_pagemin() {
  pagemin_ = 0;
  clear_has_pagemin();
}
inline ::google::protobuf::int32 PrtStationPriceStep::pagemin() const {
  return pagemin_;
}
inline void PrtStationPriceStep::set_pagemin(::google::protobuf::int32 value) {
  set_has_pagemin();
  pagemin_ = value;
}

// optional int32 PageMax = 4;
inline bool PrtStationPriceStep::has_pagemax() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrtStationPriceStep::set_has_pagemax() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrtStationPriceStep::clear_has_pagemax() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrtStationPriceStep::clear_pagemax() {
  pagemax_ = 0;
  clear_has_pagemax();
}
inline ::google::protobuf::int32 PrtStationPriceStep::pagemax() const {
  return pagemax_;
}
inline void PrtStationPriceStep::set_pagemax(::google::protobuf::int32 value) {
  set_has_pagemax();
  pagemax_ = value;
}

// -------------------------------------------------------------------

// PrtStationPriceStepList

// repeated .isafetec.PrtStationPriceStep list = 1;
inline int PrtStationPriceStepList::list_size() const {
  return list_.size();
}
inline void PrtStationPriceStepList::clear_list() {
  list_.Clear();
}
inline const ::isafetec::PrtStationPriceStep& PrtStationPriceStepList::list(int index) const {
  return list_.Get(index);
}
inline ::isafetec::PrtStationPriceStep* PrtStationPriceStepList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::isafetec::PrtStationPriceStep* PrtStationPriceStepList::list_ReleaseAt(int index) {
  return list_.ReleaseAt(index);
}
inline void PrtStationPriceStepList::list_RemoveAt(int index) {
  list_.RemoveAt(index);
}
inline ::isafetec::PrtStationPriceStep* PrtStationPriceStepList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::PrtStationPriceStep >&
PrtStationPriceStepList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::PrtStationPriceStep >*
PrtStationPriceStepList::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// PrtCopyPrice

// optional .isafetec.JOB_PRICE_TYPE price_type = 1;
inline bool PrtCopyPrice::has_price_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrtCopyPrice::set_has_price_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrtCopyPrice::clear_has_price_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrtCopyPrice::clear_price_type() {
  price_type_ = 0;
  clear_has_price_type();
}
inline isafetec::JOB_PRICE_TYPE PrtCopyPrice::price_type() const {
  return static_cast< isafetec::JOB_PRICE_TYPE >(price_type_);
}
inline void PrtCopyPrice::set_price_type(isafetec::JOB_PRICE_TYPE value) {
  GOOGLE_DCHECK(isafetec::JOB_PRICE_TYPE_IsValid(value));
  set_has_price_type();
  price_type_ = value;
}

// optional double a3_hb_price = 2;
inline bool PrtCopyPrice::has_a3_hb_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrtCopyPrice::set_has_a3_hb_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrtCopyPrice::clear_has_a3_hb_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrtCopyPrice::clear_a3_hb_price() {
  a3_hb_price_ = 0;
  clear_has_a3_hb_price();
}
inline double PrtCopyPrice::a3_hb_price() const {
  return a3_hb_price_;
}
inline void PrtCopyPrice::set_a3_hb_price(double value) {
  set_has_a3_hb_price();
  a3_hb_price_ = value;
}

// optional double a3_color_price = 3;
inline bool PrtCopyPrice::has_a3_color_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrtCopyPrice::set_has_a3_color_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrtCopyPrice::clear_has_a3_color_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrtCopyPrice::clear_a3_color_price() {
  a3_color_price_ = 0;
  clear_has_a3_color_price();
}
inline double PrtCopyPrice::a3_color_price() const {
  return a3_color_price_;
}
inline void PrtCopyPrice::set_a3_color_price(double value) {
  set_has_a3_color_price();
  a3_color_price_ = value;
}

// optional double a4_hb_price = 4;
inline bool PrtCopyPrice::has_a4_hb_price() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrtCopyPrice::set_has_a4_hb_price() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrtCopyPrice::clear_has_a4_hb_price() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrtCopyPrice::clear_a4_hb_price() {
  a4_hb_price_ = 0;
  clear_has_a4_hb_price();
}
inline double PrtCopyPrice::a4_hb_price() const {
  return a4_hb_price_;
}
inline void PrtCopyPrice::set_a4_hb_price(double value) {
  set_has_a4_hb_price();
  a4_hb_price_ = value;
}

// optional double a4_color_price = 5;
inline bool PrtCopyPrice::has_a4_color_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PrtCopyPrice::set_has_a4_color_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PrtCopyPrice::clear_has_a4_color_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PrtCopyPrice::clear_a4_color_price() {
  a4_color_price_ = 0;
  clear_has_a4_color_price();
}
inline double PrtCopyPrice::a4_color_price() const {
  return a4_color_price_;
}
inline void PrtCopyPrice::set_a4_color_price(double value) {
  set_has_a4_color_price();
  a4_color_price_ = value;
}

// -------------------------------------------------------------------

// PrtCopyPriceStep

// optional .isafetec.PrtCopyPrice price = 1;
inline bool PrtCopyPriceStep::has_price() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrtCopyPriceStep::set_has_price() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrtCopyPriceStep::clear_has_price() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrtCopyPriceStep::clear_price() {
  if (price_ != NULL) price_->::isafetec::PrtCopyPrice::Clear();
  clear_has_price();
}
inline const ::isafetec::PrtCopyPrice& PrtCopyPriceStep::price() const {
  return price_ != NULL ? *price_ : *default_instance_->price_;
}
inline ::isafetec::PrtCopyPrice* PrtCopyPriceStep::mutable_price() {
  set_has_price();
  if (price_ == NULL) price_ = new ::isafetec::PrtCopyPrice;
  return price_;
}
inline ::isafetec::PrtCopyPrice* PrtCopyPriceStep::release_price() {
  clear_has_price();
  ::isafetec::PrtCopyPrice* temp = price_;
  price_ = NULL;
  return temp;
}

// optional string PriceDesc = 2;
inline bool PrtCopyPriceStep::has_pricedesc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrtCopyPriceStep::set_has_pricedesc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrtCopyPriceStep::clear_has_pricedesc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrtCopyPriceStep::clear_pricedesc() {
  if (pricedesc_ != &::google::protobuf::internal::kEmptyString) {
    pricedesc_->clear();
  }
  clear_has_pricedesc();
}
inline const ::std::string& PrtCopyPriceStep::pricedesc() const {
  return *pricedesc_;
}
inline void PrtCopyPriceStep::set_pricedesc(const ::std::string& value) {
  set_has_pricedesc();
  if (pricedesc_ == &::google::protobuf::internal::kEmptyString) {
    pricedesc_ = new ::std::string;
  }
  pricedesc_->assign(value);
}
inline void PrtCopyPriceStep::set_pricedesc(const char* value) {
  set_has_pricedesc();
  if (pricedesc_ == &::google::protobuf::internal::kEmptyString) {
    pricedesc_ = new ::std::string;
  }
  pricedesc_->assign(value);
}
inline void PrtCopyPriceStep::set_pricedesc(const char* value, size_t size) {
  set_has_pricedesc();
  if (pricedesc_ == &::google::protobuf::internal::kEmptyString) {
    pricedesc_ = new ::std::string;
  }
  pricedesc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtCopyPriceStep::mutable_pricedesc() {
  set_has_pricedesc();
  if (pricedesc_ == &::google::protobuf::internal::kEmptyString) {
    pricedesc_ = new ::std::string;
  }
  return pricedesc_;
}
inline ::std::string* PrtCopyPriceStep::release_pricedesc() {
  clear_has_pricedesc();
  if (pricedesc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pricedesc_;
    pricedesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 PageMin = 3;
inline bool PrtCopyPriceStep::has_pagemin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrtCopyPriceStep::set_has_pagemin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrtCopyPriceStep::clear_has_pagemin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrtCopyPriceStep::clear_pagemin() {
  pagemin_ = 0;
  clear_has_pagemin();
}
inline ::google::protobuf::int32 PrtCopyPriceStep::pagemin() const {
  return pagemin_;
}
inline void PrtCopyPriceStep::set_pagemin(::google::protobuf::int32 value) {
  set_has_pagemin();
  pagemin_ = value;
}

// optional int32 PageMax = 4;
inline bool PrtCopyPriceStep::has_pagemax() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrtCopyPriceStep::set_has_pagemax() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrtCopyPriceStep::clear_has_pagemax() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrtCopyPriceStep::clear_pagemax() {
  pagemax_ = 0;
  clear_has_pagemax();
}
inline ::google::protobuf::int32 PrtCopyPriceStep::pagemax() const {
  return pagemax_;
}
inline void PrtCopyPriceStep::set_pagemax(::google::protobuf::int32 value) {
  set_has_pagemax();
  pagemax_ = value;
}

// -------------------------------------------------------------------

// PrtCopyPriceStepList

// repeated .isafetec.PrtCopyPriceStep list = 1;
inline int PrtCopyPriceStepList::list_size() const {
  return list_.size();
}
inline void PrtCopyPriceStepList::clear_list() {
  list_.Clear();
}
inline const ::isafetec::PrtCopyPriceStep& PrtCopyPriceStepList::list(int index) const {
  return list_.Get(index);
}
inline ::isafetec::PrtCopyPriceStep* PrtCopyPriceStepList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::isafetec::PrtCopyPriceStep* PrtCopyPriceStepList::list_ReleaseAt(int index) {
  return list_.ReleaseAt(index);
}
inline void PrtCopyPriceStepList::list_RemoveAt(int index) {
  list_.RemoveAt(index);
}
inline ::isafetec::PrtCopyPriceStep* PrtCopyPriceStepList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::PrtCopyPriceStep >&
PrtCopyPriceStepList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::PrtCopyPriceStep >*
PrtCopyPriceStepList::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// PrtScanPrice

// optional .isafetec.JOB_PRICE_TYPE price_type = 1;
inline bool PrtScanPrice::has_price_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrtScanPrice::set_has_price_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrtScanPrice::clear_has_price_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrtScanPrice::clear_price_type() {
  price_type_ = 0;
  clear_has_price_type();
}
inline isafetec::JOB_PRICE_TYPE PrtScanPrice::price_type() const {
  return static_cast< isafetec::JOB_PRICE_TYPE >(price_type_);
}
inline void PrtScanPrice::set_price_type(isafetec::JOB_PRICE_TYPE value) {
  GOOGLE_DCHECK(isafetec::JOB_PRICE_TYPE_IsValid(value));
  set_has_price_type();
  price_type_ = value;
}

// optional double hb_price = 2;
inline bool PrtScanPrice::has_hb_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrtScanPrice::set_has_hb_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrtScanPrice::clear_has_hb_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrtScanPrice::clear_hb_price() {
  hb_price_ = 0;
  clear_has_hb_price();
}
inline double PrtScanPrice::hb_price() const {
  return hb_price_;
}
inline void PrtScanPrice::set_hb_price(double value) {
  set_has_hb_price();
  hb_price_ = value;
}

// optional double color_price = 3;
inline bool PrtScanPrice::has_color_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrtScanPrice::set_has_color_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrtScanPrice::clear_has_color_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrtScanPrice::clear_color_price() {
  color_price_ = 0;
  clear_has_color_price();
}
inline double PrtScanPrice::color_price() const {
  return color_price_;
}
inline void PrtScanPrice::set_color_price(double value) {
  set_has_color_price();
  color_price_ = value;
}

// optional int32 unit = 4;
inline bool PrtScanPrice::has_unit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrtScanPrice::set_has_unit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrtScanPrice::clear_has_unit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrtScanPrice::clear_unit() {
  unit_ = 0;
  clear_has_unit();
}
inline ::google::protobuf::int32 PrtScanPrice::unit() const {
  return unit_;
}
inline void PrtScanPrice::set_unit(::google::protobuf::int32 value) {
  set_has_unit();
  unit_ = value;
}

// -------------------------------------------------------------------

// PrtScanPriceStep

// optional .isafetec.PrtScanPrice price = 1;
inline bool PrtScanPriceStep::has_price() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrtScanPriceStep::set_has_price() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrtScanPriceStep::clear_has_price() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrtScanPriceStep::clear_price() {
  if (price_ != NULL) price_->::isafetec::PrtScanPrice::Clear();
  clear_has_price();
}
inline const ::isafetec::PrtScanPrice& PrtScanPriceStep::price() const {
  return price_ != NULL ? *price_ : *default_instance_->price_;
}
inline ::isafetec::PrtScanPrice* PrtScanPriceStep::mutable_price() {
  set_has_price();
  if (price_ == NULL) price_ = new ::isafetec::PrtScanPrice;
  return price_;
}
inline ::isafetec::PrtScanPrice* PrtScanPriceStep::release_price() {
  clear_has_price();
  ::isafetec::PrtScanPrice* temp = price_;
  price_ = NULL;
  return temp;
}

// optional string PriceDesc = 2;
inline bool PrtScanPriceStep::has_pricedesc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrtScanPriceStep::set_has_pricedesc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrtScanPriceStep::clear_has_pricedesc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrtScanPriceStep::clear_pricedesc() {
  if (pricedesc_ != &::google::protobuf::internal::kEmptyString) {
    pricedesc_->clear();
  }
  clear_has_pricedesc();
}
inline const ::std::string& PrtScanPriceStep::pricedesc() const {
  return *pricedesc_;
}
inline void PrtScanPriceStep::set_pricedesc(const ::std::string& value) {
  set_has_pricedesc();
  if (pricedesc_ == &::google::protobuf::internal::kEmptyString) {
    pricedesc_ = new ::std::string;
  }
  pricedesc_->assign(value);
}
inline void PrtScanPriceStep::set_pricedesc(const char* value) {
  set_has_pricedesc();
  if (pricedesc_ == &::google::protobuf::internal::kEmptyString) {
    pricedesc_ = new ::std::string;
  }
  pricedesc_->assign(value);
}
inline void PrtScanPriceStep::set_pricedesc(const char* value, size_t size) {
  set_has_pricedesc();
  if (pricedesc_ == &::google::protobuf::internal::kEmptyString) {
    pricedesc_ = new ::std::string;
  }
  pricedesc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtScanPriceStep::mutable_pricedesc() {
  set_has_pricedesc();
  if (pricedesc_ == &::google::protobuf::internal::kEmptyString) {
    pricedesc_ = new ::std::string;
  }
  return pricedesc_;
}
inline ::std::string* PrtScanPriceStep::release_pricedesc() {
  clear_has_pricedesc();
  if (pricedesc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pricedesc_;
    pricedesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 PageMin = 3;
inline bool PrtScanPriceStep::has_pagemin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrtScanPriceStep::set_has_pagemin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrtScanPriceStep::clear_has_pagemin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrtScanPriceStep::clear_pagemin() {
  pagemin_ = 0;
  clear_has_pagemin();
}
inline ::google::protobuf::int32 PrtScanPriceStep::pagemin() const {
  return pagemin_;
}
inline void PrtScanPriceStep::set_pagemin(::google::protobuf::int32 value) {
  set_has_pagemin();
  pagemin_ = value;
}

// optional int32 PageMax = 4;
inline bool PrtScanPriceStep::has_pagemax() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrtScanPriceStep::set_has_pagemax() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrtScanPriceStep::clear_has_pagemax() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrtScanPriceStep::clear_pagemax() {
  pagemax_ = 0;
  clear_has_pagemax();
}
inline ::google::protobuf::int32 PrtScanPriceStep::pagemax() const {
  return pagemax_;
}
inline void PrtScanPriceStep::set_pagemax(::google::protobuf::int32 value) {
  set_has_pagemax();
  pagemax_ = value;
}

// -------------------------------------------------------------------

// PrtScanPriceStepList

// repeated .isafetec.PrtScanPriceStep list = 1;
inline int PrtScanPriceStepList::list_size() const {
  return list_.size();
}
inline void PrtScanPriceStepList::clear_list() {
  list_.Clear();
}
inline const ::isafetec::PrtScanPriceStep& PrtScanPriceStepList::list(int index) const {
  return list_.Get(index);
}
inline ::isafetec::PrtScanPriceStep* PrtScanPriceStepList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::isafetec::PrtScanPriceStep* PrtScanPriceStepList::list_ReleaseAt(int index) {
  return list_.ReleaseAt(index);
}
inline void PrtScanPriceStepList::list_RemoveAt(int index) {
  list_.RemoveAt(index);
}
inline ::isafetec::PrtScanPriceStep* PrtScanPriceStepList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::PrtScanPriceStep >&
PrtScanPriceStepList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::PrtScanPriceStep >*
PrtScanPriceStepList::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// PrtStationCheckUserResult

// optional .isafetec.PrtStationUserAccount account = 1;
inline bool PrtStationCheckUserResult::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrtStationCheckUserResult::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrtStationCheckUserResult::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrtStationCheckUserResult::clear_account() {
  if (account_ != NULL) account_->::isafetec::PrtStationUserAccount::Clear();
  clear_has_account();
}
inline const ::isafetec::PrtStationUserAccount& PrtStationCheckUserResult::account() const {
  return account_ != NULL ? *account_ : *default_instance_->account_;
}
inline ::isafetec::PrtStationUserAccount* PrtStationCheckUserResult::mutable_account() {
  set_has_account();
  if (account_ == NULL) account_ = new ::isafetec::PrtStationUserAccount;
  return account_;
}
inline ::isafetec::PrtStationUserAccount* PrtStationCheckUserResult::release_account() {
  clear_has_account();
  ::isafetec::PrtStationUserAccount* temp = account_;
  account_ = NULL;
  return temp;
}

// optional .isafetec.PrtStationPrice price = 2;
inline bool PrtStationCheckUserResult::has_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrtStationCheckUserResult::set_has_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrtStationCheckUserResult::clear_has_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrtStationCheckUserResult::clear_price() {
  if (price_ != NULL) price_->::isafetec::PrtStationPrice::Clear();
  clear_has_price();
}
inline const ::isafetec::PrtStationPrice& PrtStationCheckUserResult::price() const {
  return price_ != NULL ? *price_ : *default_instance_->price_;
}
inline ::isafetec::PrtStationPrice* PrtStationCheckUserResult::mutable_price() {
  set_has_price();
  if (price_ == NULL) price_ = new ::isafetec::PrtStationPrice;
  return price_;
}
inline ::isafetec::PrtStationPrice* PrtStationCheckUserResult::release_price() {
  clear_has_price();
  ::isafetec::PrtStationPrice* temp = price_;
  price_ = NULL;
  return temp;
}

// optional .isafetec.PrtCopyPrice copy_price = 3;
inline bool PrtStationCheckUserResult::has_copy_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrtStationCheckUserResult::set_has_copy_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrtStationCheckUserResult::clear_has_copy_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrtStationCheckUserResult::clear_copy_price() {
  if (copy_price_ != NULL) copy_price_->::isafetec::PrtCopyPrice::Clear();
  clear_has_copy_price();
}
inline const ::isafetec::PrtCopyPrice& PrtStationCheckUserResult::copy_price() const {
  return copy_price_ != NULL ? *copy_price_ : *default_instance_->copy_price_;
}
inline ::isafetec::PrtCopyPrice* PrtStationCheckUserResult::mutable_copy_price() {
  set_has_copy_price();
  if (copy_price_ == NULL) copy_price_ = new ::isafetec::PrtCopyPrice;
  return copy_price_;
}
inline ::isafetec::PrtCopyPrice* PrtStationCheckUserResult::release_copy_price() {
  clear_has_copy_price();
  ::isafetec::PrtCopyPrice* temp = copy_price_;
  copy_price_ = NULL;
  return temp;
}

// optional .isafetec.PrtScanPrice scan_price = 4;
inline bool PrtStationCheckUserResult::has_scan_price() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrtStationCheckUserResult::set_has_scan_price() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrtStationCheckUserResult::clear_has_scan_price() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrtStationCheckUserResult::clear_scan_price() {
  if (scan_price_ != NULL) scan_price_->::isafetec::PrtScanPrice::Clear();
  clear_has_scan_price();
}
inline const ::isafetec::PrtScanPrice& PrtStationCheckUserResult::scan_price() const {
  return scan_price_ != NULL ? *scan_price_ : *default_instance_->scan_price_;
}
inline ::isafetec::PrtScanPrice* PrtStationCheckUserResult::mutable_scan_price() {
  set_has_scan_price();
  if (scan_price_ == NULL) scan_price_ = new ::isafetec::PrtScanPrice;
  return scan_price_;
}
inline ::isafetec::PrtScanPrice* PrtStationCheckUserResult::release_scan_price() {
  clear_has_scan_price();
  ::isafetec::PrtScanPrice* temp = scan_price_;
  scan_price_ = NULL;
  return temp;
}

// optional int32 prt_id = 8;
inline bool PrtStationCheckUserResult::has_prt_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PrtStationCheckUserResult::set_has_prt_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PrtStationCheckUserResult::clear_has_prt_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PrtStationCheckUserResult::clear_prt_id() {
  prt_id_ = 0;
  clear_has_prt_id();
}
inline ::google::protobuf::int32 PrtStationCheckUserResult::prt_id() const {
  return prt_id_;
}
inline void PrtStationCheckUserResult::set_prt_id(::google::protobuf::int32 value) {
  set_has_prt_id();
  prt_id_ = value;
}

// optional .isafetec.PrtStationPriceStepList print_price_step_list = 9;
inline bool PrtStationCheckUserResult::has_print_price_step_list() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PrtStationCheckUserResult::set_has_print_price_step_list() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PrtStationCheckUserResult::clear_has_print_price_step_list() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PrtStationCheckUserResult::clear_print_price_step_list() {
  if (print_price_step_list_ != NULL) print_price_step_list_->::isafetec::PrtStationPriceStepList::Clear();
  clear_has_print_price_step_list();
}
inline const ::isafetec::PrtStationPriceStepList& PrtStationCheckUserResult::print_price_step_list() const {
  return print_price_step_list_ != NULL ? *print_price_step_list_ : *default_instance_->print_price_step_list_;
}
inline ::isafetec::PrtStationPriceStepList* PrtStationCheckUserResult::mutable_print_price_step_list() {
  set_has_print_price_step_list();
  if (print_price_step_list_ == NULL) print_price_step_list_ = new ::isafetec::PrtStationPriceStepList;
  return print_price_step_list_;
}
inline ::isafetec::PrtStationPriceStepList* PrtStationCheckUserResult::release_print_price_step_list() {
  clear_has_print_price_step_list();
  ::isafetec::PrtStationPriceStepList* temp = print_price_step_list_;
  print_price_step_list_ = NULL;
  return temp;
}

// optional .isafetec.PrtCopyPriceStepList copy_price_step_list = 10;
inline bool PrtStationCheckUserResult::has_copy_price_step_list() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PrtStationCheckUserResult::set_has_copy_price_step_list() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PrtStationCheckUserResult::clear_has_copy_price_step_list() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PrtStationCheckUserResult::clear_copy_price_step_list() {
  if (copy_price_step_list_ != NULL) copy_price_step_list_->::isafetec::PrtCopyPriceStepList::Clear();
  clear_has_copy_price_step_list();
}
inline const ::isafetec::PrtCopyPriceStepList& PrtStationCheckUserResult::copy_price_step_list() const {
  return copy_price_step_list_ != NULL ? *copy_price_step_list_ : *default_instance_->copy_price_step_list_;
}
inline ::isafetec::PrtCopyPriceStepList* PrtStationCheckUserResult::mutable_copy_price_step_list() {
  set_has_copy_price_step_list();
  if (copy_price_step_list_ == NULL) copy_price_step_list_ = new ::isafetec::PrtCopyPriceStepList;
  return copy_price_step_list_;
}
inline ::isafetec::PrtCopyPriceStepList* PrtStationCheckUserResult::release_copy_price_step_list() {
  clear_has_copy_price_step_list();
  ::isafetec::PrtCopyPriceStepList* temp = copy_price_step_list_;
  copy_price_step_list_ = NULL;
  return temp;
}

// optional .isafetec.PrtScanPriceStepList scan_price_step_list = 11;
inline bool PrtStationCheckUserResult::has_scan_price_step_list() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PrtStationCheckUserResult::set_has_scan_price_step_list() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PrtStationCheckUserResult::clear_has_scan_price_step_list() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PrtStationCheckUserResult::clear_scan_price_step_list() {
  if (scan_price_step_list_ != NULL) scan_price_step_list_->::isafetec::PrtScanPriceStepList::Clear();
  clear_has_scan_price_step_list();
}
inline const ::isafetec::PrtScanPriceStepList& PrtStationCheckUserResult::scan_price_step_list() const {
  return scan_price_step_list_ != NULL ? *scan_price_step_list_ : *default_instance_->scan_price_step_list_;
}
inline ::isafetec::PrtScanPriceStepList* PrtStationCheckUserResult::mutable_scan_price_step_list() {
  set_has_scan_price_step_list();
  if (scan_price_step_list_ == NULL) scan_price_step_list_ = new ::isafetec::PrtScanPriceStepList;
  return scan_price_step_list_;
}
inline ::isafetec::PrtScanPriceStepList* PrtStationCheckUserResult::release_scan_price_step_list() {
  clear_has_scan_price_step_list();
  ::isafetec::PrtScanPriceStepList* temp = scan_price_step_list_;
  scan_price_step_list_ = NULL;
  return temp;
}

// optional .isafetec.PrintLimitPolicy print_limit_policy = 12;
inline bool PrtStationCheckUserResult::has_print_limit_policy() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PrtStationCheckUserResult::set_has_print_limit_policy() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PrtStationCheckUserResult::clear_has_print_limit_policy() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PrtStationCheckUserResult::clear_print_limit_policy() {
  if (print_limit_policy_ != NULL) print_limit_policy_->::isafetec::PrintLimitPolicy::Clear();
  clear_has_print_limit_policy();
}
inline const ::isafetec::PrintLimitPolicy& PrtStationCheckUserResult::print_limit_policy() const {
  return print_limit_policy_ != NULL ? *print_limit_policy_ : *default_instance_->print_limit_policy_;
}
inline ::isafetec::PrintLimitPolicy* PrtStationCheckUserResult::mutable_print_limit_policy() {
  set_has_print_limit_policy();
  if (print_limit_policy_ == NULL) print_limit_policy_ = new ::isafetec::PrintLimitPolicy;
  return print_limit_policy_;
}
inline ::isafetec::PrintLimitPolicy* PrtStationCheckUserResult::release_print_limit_policy() {
  clear_has_print_limit_policy();
  ::isafetec::PrintLimitPolicy* temp = print_limit_policy_;
  print_limit_policy_ = NULL;
  return temp;
}

// optional .isafetec.CopyLimitPolicy copy_limit_policy = 13;
inline bool PrtStationCheckUserResult::has_copy_limit_policy() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PrtStationCheckUserResult::set_has_copy_limit_policy() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PrtStationCheckUserResult::clear_has_copy_limit_policy() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PrtStationCheckUserResult::clear_copy_limit_policy() {
  if (copy_limit_policy_ != NULL) copy_limit_policy_->::isafetec::CopyLimitPolicy::Clear();
  clear_has_copy_limit_policy();
}
inline const ::isafetec::CopyLimitPolicy& PrtStationCheckUserResult::copy_limit_policy() const {
  return copy_limit_policy_ != NULL ? *copy_limit_policy_ : *default_instance_->copy_limit_policy_;
}
inline ::isafetec::CopyLimitPolicy* PrtStationCheckUserResult::mutable_copy_limit_policy() {
  set_has_copy_limit_policy();
  if (copy_limit_policy_ == NULL) copy_limit_policy_ = new ::isafetec::CopyLimitPolicy;
  return copy_limit_policy_;
}
inline ::isafetec::CopyLimitPolicy* PrtStationCheckUserResult::release_copy_limit_policy() {
  clear_has_copy_limit_policy();
  ::isafetec::CopyLimitPolicy* temp = copy_limit_policy_;
  copy_limit_policy_ = NULL;
  return temp;
}

// optional .isafetec.ScanLimitPolicy scan_limit_policy = 14;
inline bool PrtStationCheckUserResult::has_scan_limit_policy() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PrtStationCheckUserResult::set_has_scan_limit_policy() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PrtStationCheckUserResult::clear_has_scan_limit_policy() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PrtStationCheckUserResult::clear_scan_limit_policy() {
  if (scan_limit_policy_ != NULL) scan_limit_policy_->::isafetec::ScanLimitPolicy::Clear();
  clear_has_scan_limit_policy();
}
inline const ::isafetec::ScanLimitPolicy& PrtStationCheckUserResult::scan_limit_policy() const {
  return scan_limit_policy_ != NULL ? *scan_limit_policy_ : *default_instance_->scan_limit_policy_;
}
inline ::isafetec::ScanLimitPolicy* PrtStationCheckUserResult::mutable_scan_limit_policy() {
  set_has_scan_limit_policy();
  if (scan_limit_policy_ == NULL) scan_limit_policy_ = new ::isafetec::ScanLimitPolicy;
  return scan_limit_policy_;
}
inline ::isafetec::ScanLimitPolicy* PrtStationCheckUserResult::release_scan_limit_policy() {
  clear_has_scan_limit_policy();
  ::isafetec::ScanLimitPolicy* temp = scan_limit_policy_;
  scan_limit_policy_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PrtStationChargeErr

// optional int32 job_id = 1;
inline bool PrtStationChargeErr::has_job_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrtStationChargeErr::set_has_job_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrtStationChargeErr::clear_has_job_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrtStationChargeErr::clear_job_id() {
  job_id_ = 0;
  clear_has_job_id();
}
inline ::google::protobuf::int32 PrtStationChargeErr::job_id() const {
  return job_id_;
}
inline void PrtStationChargeErr::set_job_id(::google::protobuf::int32 value) {
  set_has_job_id();
  job_id_ = value;
}

// optional int32 user_id = 2;
inline bool PrtStationChargeErr::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrtStationChargeErr::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrtStationChargeErr::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrtStationChargeErr::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 PrtStationChargeErr::user_id() const {
  return user_id_;
}
inline void PrtStationChargeErr::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional bool need_update_job_state = 3;
inline bool PrtStationChargeErr::has_need_update_job_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrtStationChargeErr::set_has_need_update_job_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrtStationChargeErr::clear_has_need_update_job_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrtStationChargeErr::clear_need_update_job_state() {
  need_update_job_state_ = false;
  clear_has_need_update_job_state();
}
inline bool PrtStationChargeErr::need_update_job_state() const {
  return need_update_job_state_;
}
inline void PrtStationChargeErr::set_need_update_job_state(bool value) {
  set_has_need_update_job_state();
  need_update_job_state_ = value;
}

// optional .isafetec.SUBMIT_JOB_STATE job_new_state = 4;
inline bool PrtStationChargeErr::has_job_new_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrtStationChargeErr::set_has_job_new_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrtStationChargeErr::clear_has_job_new_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrtStationChargeErr::clear_job_new_state() {
  job_new_state_ = 0;
  clear_has_job_new_state();
}
inline isafetec::SUBMIT_JOB_STATE PrtStationChargeErr::job_new_state() const {
  return static_cast< isafetec::SUBMIT_JOB_STATE >(job_new_state_);
}
inline void PrtStationChargeErr::set_job_new_state(isafetec::SUBMIT_JOB_STATE value) {
  GOOGLE_DCHECK(isafetec::SUBMIT_JOB_STATE_IsValid(value));
  set_has_job_new_state();
  job_new_state_ = value;
}

// -------------------------------------------------------------------

// PrtStationInfo

// optional int32 id = 1;
inline bool PrtStationInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrtStationInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrtStationInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrtStationInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PrtStationInfo::id() const {
  return id_;
}
inline void PrtStationInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 allow_order = 2;
inline bool PrtStationInfo::has_allow_order() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrtStationInfo::set_has_allow_order() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrtStationInfo::clear_has_allow_order() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrtStationInfo::clear_allow_order() {
  allow_order_ = 0;
  clear_has_allow_order();
}
inline ::google::protobuf::int32 PrtStationInfo::allow_order() const {
  return allow_order_;
}
inline void PrtStationInfo::set_allow_order(::google::protobuf::int32 value) {
  set_has_allow_order();
  allow_order_ = value;
}

// optional int32 check_order_internal = 3;
inline bool PrtStationInfo::has_check_order_internal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrtStationInfo::set_has_check_order_internal() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrtStationInfo::clear_has_check_order_internal() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrtStationInfo::clear_check_order_internal() {
  check_order_internal_ = 0;
  clear_has_check_order_internal();
}
inline ::google::protobuf::int32 PrtStationInfo::check_order_internal() const {
  return check_order_internal_;
}
inline void PrtStationInfo::set_check_order_internal(::google::protobuf::int32 value) {
  set_has_check_order_internal();
  check_order_internal_ = value;
}

// optional int32 allow_direct_print = 4;
inline bool PrtStationInfo::has_allow_direct_print() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrtStationInfo::set_has_allow_direct_print() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrtStationInfo::clear_has_allow_direct_print() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrtStationInfo::clear_allow_direct_print() {
  allow_direct_print_ = 0;
  clear_has_allow_direct_print();
}
inline ::google::protobuf::int32 PrtStationInfo::allow_direct_print() const {
  return allow_direct_print_;
}
inline void PrtStationInfo::set_allow_direct_print(::google::protobuf::int32 value) {
  set_has_allow_direct_print();
  allow_direct_print_ = value;
}

// optional int32 check_direct_job_internal = 5;
inline bool PrtStationInfo::has_check_direct_job_internal() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PrtStationInfo::set_has_check_direct_job_internal() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PrtStationInfo::clear_has_check_direct_job_internal() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PrtStationInfo::clear_check_direct_job_internal() {
  check_direct_job_internal_ = 0;
  clear_has_check_direct_job_internal();
}
inline ::google::protobuf::int32 PrtStationInfo::check_direct_job_internal() const {
  return check_direct_job_internal_;
}
inline void PrtStationInfo::set_check_direct_job_internal(::google::protobuf::int32 value) {
  set_has_check_direct_job_internal();
  check_direct_job_internal_ = value;
}

// optional bool on_server = 6;
inline bool PrtStationInfo::has_on_server() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PrtStationInfo::set_has_on_server() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PrtStationInfo::clear_has_on_server() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PrtStationInfo::clear_on_server() {
  on_server_ = false;
  clear_has_on_server();
}
inline bool PrtStationInfo::on_server() const {
  return on_server_;
}
inline void PrtStationInfo::set_on_server(bool value) {
  set_has_on_server();
  on_server_ = value;
}

// optional string printer_name = 7;
inline bool PrtStationInfo::has_printer_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PrtStationInfo::set_has_printer_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PrtStationInfo::clear_has_printer_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PrtStationInfo::clear_printer_name() {
  if (printer_name_ != &::google::protobuf::internal::kEmptyString) {
    printer_name_->clear();
  }
  clear_has_printer_name();
}
inline const ::std::string& PrtStationInfo::printer_name() const {
  return *printer_name_;
}
inline void PrtStationInfo::set_printer_name(const ::std::string& value) {
  set_has_printer_name();
  if (printer_name_ == &::google::protobuf::internal::kEmptyString) {
    printer_name_ = new ::std::string;
  }
  printer_name_->assign(value);
}
inline void PrtStationInfo::set_printer_name(const char* value) {
  set_has_printer_name();
  if (printer_name_ == &::google::protobuf::internal::kEmptyString) {
    printer_name_ = new ::std::string;
  }
  printer_name_->assign(value);
}
inline void PrtStationInfo::set_printer_name(const char* value, size_t size) {
  set_has_printer_name();
  if (printer_name_ == &::google::protobuf::internal::kEmptyString) {
    printer_name_ = new ::std::string;
  }
  printer_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtStationInfo::mutable_printer_name() {
  set_has_printer_name();
  if (printer_name_ == &::google::protobuf::internal::kEmptyString) {
    printer_name_ = new ::std::string;
  }
  return printer_name_;
}
inline ::std::string* PrtStationInfo::release_printer_name() {
  clear_has_printer_name();
  if (printer_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = printer_name_;
    printer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string fun_code = 8;
inline bool PrtStationInfo::has_fun_code() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PrtStationInfo::set_has_fun_code() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PrtStationInfo::clear_has_fun_code() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PrtStationInfo::clear_fun_code() {
  if (fun_code_ != &::google::protobuf::internal::kEmptyString) {
    fun_code_->clear();
  }
  clear_has_fun_code();
}
inline const ::std::string& PrtStationInfo::fun_code() const {
  return *fun_code_;
}
inline void PrtStationInfo::set_fun_code(const ::std::string& value) {
  set_has_fun_code();
  if (fun_code_ == &::google::protobuf::internal::kEmptyString) {
    fun_code_ = new ::std::string;
  }
  fun_code_->assign(value);
}
inline void PrtStationInfo::set_fun_code(const char* value) {
  set_has_fun_code();
  if (fun_code_ == &::google::protobuf::internal::kEmptyString) {
    fun_code_ = new ::std::string;
  }
  fun_code_->assign(value);
}
inline void PrtStationInfo::set_fun_code(const char* value, size_t size) {
  set_has_fun_code();
  if (fun_code_ == &::google::protobuf::internal::kEmptyString) {
    fun_code_ = new ::std::string;
  }
  fun_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtStationInfo::mutable_fun_code() {
  set_has_fun_code();
  if (fun_code_ == &::google::protobuf::internal::kEmptyString) {
    fun_code_ = new ::std::string;
  }
  return fun_code_;
}
inline ::std::string* PrtStationInfo::release_fun_code() {
  clear_has_fun_code();
  if (fun_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fun_code_;
    fun_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool support_color = 9;
inline bool PrtStationInfo::has_support_color() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PrtStationInfo::set_has_support_color() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PrtStationInfo::clear_has_support_color() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PrtStationInfo::clear_support_color() {
  support_color_ = false;
  clear_has_support_color();
}
inline bool PrtStationInfo::support_color() const {
  return support_color_;
}
inline void PrtStationInfo::set_support_color(bool value) {
  set_has_support_color();
  support_color_ = value;
}

// optional double begin_time = 10;
inline bool PrtStationInfo::has_begin_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PrtStationInfo::set_has_begin_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PrtStationInfo::clear_has_begin_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PrtStationInfo::clear_begin_time() {
  begin_time_ = 0;
  clear_has_begin_time();
}
inline double PrtStationInfo::begin_time() const {
  return begin_time_;
}
inline void PrtStationInfo::set_begin_time(double value) {
  set_has_begin_time();
  begin_time_ = value;
}

// optional double end_time = 11;
inline bool PrtStationInfo::has_end_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PrtStationInfo::set_has_end_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PrtStationInfo::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PrtStationInfo::clear_end_time() {
  end_time_ = 0;
  clear_has_end_time();
}
inline double PrtStationInfo::end_time() const {
  return end_time_;
}
inline void PrtStationInfo::set_end_time(double value) {
  set_has_end_time();
  end_time_ = value;
}

// optional string prt_name = 12;
inline bool PrtStationInfo::has_prt_name() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PrtStationInfo::set_has_prt_name() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PrtStationInfo::clear_has_prt_name() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PrtStationInfo::clear_prt_name() {
  if (prt_name_ != &::google::protobuf::internal::kEmptyString) {
    prt_name_->clear();
  }
  clear_has_prt_name();
}
inline const ::std::string& PrtStationInfo::prt_name() const {
  return *prt_name_;
}
inline void PrtStationInfo::set_prt_name(const ::std::string& value) {
  set_has_prt_name();
  if (prt_name_ == &::google::protobuf::internal::kEmptyString) {
    prt_name_ = new ::std::string;
  }
  prt_name_->assign(value);
}
inline void PrtStationInfo::set_prt_name(const char* value) {
  set_has_prt_name();
  if (prt_name_ == &::google::protobuf::internal::kEmptyString) {
    prt_name_ = new ::std::string;
  }
  prt_name_->assign(value);
}
inline void PrtStationInfo::set_prt_name(const char* value, size_t size) {
  set_has_prt_name();
  if (prt_name_ == &::google::protobuf::internal::kEmptyString) {
    prt_name_ = new ::std::string;
  }
  prt_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtStationInfo::mutable_prt_name() {
  set_has_prt_name();
  if (prt_name_ == &::google::protobuf::internal::kEmptyString) {
    prt_name_ = new ::std::string;
  }
  return prt_name_;
}
inline ::std::string* PrtStationInfo::release_prt_name() {
  clear_has_prt_name();
  if (prt_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = prt_name_;
    prt_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 support_duplex = 13;
inline bool PrtStationInfo::has_support_duplex() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PrtStationInfo::set_has_support_duplex() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PrtStationInfo::clear_has_support_duplex() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PrtStationInfo::clear_support_duplex() {
  support_duplex_ = 0;
  clear_has_support_duplex();
}
inline ::google::protobuf::int32 PrtStationInfo::support_duplex() const {
  return support_duplex_;
}
inline void PrtStationInfo::set_support_duplex(::google::protobuf::int32 value) {
  set_has_support_duplex();
  support_duplex_ = value;
}

// optional .isafetec.PrtStationPrice print_price = 14;
inline bool PrtStationInfo::has_print_price() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PrtStationInfo::set_has_print_price() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PrtStationInfo::clear_has_print_price() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PrtStationInfo::clear_print_price() {
  if (print_price_ != NULL) print_price_->::isafetec::PrtStationPrice::Clear();
  clear_has_print_price();
}
inline const ::isafetec::PrtStationPrice& PrtStationInfo::print_price() const {
  return print_price_ != NULL ? *print_price_ : *default_instance_->print_price_;
}
inline ::isafetec::PrtStationPrice* PrtStationInfo::mutable_print_price() {
  set_has_print_price();
  if (print_price_ == NULL) print_price_ = new ::isafetec::PrtStationPrice;
  return print_price_;
}
inline ::isafetec::PrtStationPrice* PrtStationInfo::release_print_price() {
  clear_has_print_price();
  ::isafetec::PrtStationPrice* temp = print_price_;
  print_price_ = NULL;
  return temp;
}

// optional .isafetec.PrtCopyPrice copy_price = 15;
inline bool PrtStationInfo::has_copy_price() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PrtStationInfo::set_has_copy_price() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PrtStationInfo::clear_has_copy_price() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PrtStationInfo::clear_copy_price() {
  if (copy_price_ != NULL) copy_price_->::isafetec::PrtCopyPrice::Clear();
  clear_has_copy_price();
}
inline const ::isafetec::PrtCopyPrice& PrtStationInfo::copy_price() const {
  return copy_price_ != NULL ? *copy_price_ : *default_instance_->copy_price_;
}
inline ::isafetec::PrtCopyPrice* PrtStationInfo::mutable_copy_price() {
  set_has_copy_price();
  if (copy_price_ == NULL) copy_price_ = new ::isafetec::PrtCopyPrice;
  return copy_price_;
}
inline ::isafetec::PrtCopyPrice* PrtStationInfo::release_copy_price() {
  clear_has_copy_price();
  ::isafetec::PrtCopyPrice* temp = copy_price_;
  copy_price_ = NULL;
  return temp;
}

// optional .isafetec.PrtScanPrice scan_price = 16;
inline bool PrtStationInfo::has_scan_price() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PrtStationInfo::set_has_scan_price() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PrtStationInfo::clear_has_scan_price() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PrtStationInfo::clear_scan_price() {
  if (scan_price_ != NULL) scan_price_->::isafetec::PrtScanPrice::Clear();
  clear_has_scan_price();
}
inline const ::isafetec::PrtScanPrice& PrtStationInfo::scan_price() const {
  return scan_price_ != NULL ? *scan_price_ : *default_instance_->scan_price_;
}
inline ::isafetec::PrtScanPrice* PrtStationInfo::mutable_scan_price() {
  set_has_scan_price();
  if (scan_price_ == NULL) scan_price_ = new ::isafetec::PrtScanPrice;
  return scan_price_;
}
inline ::isafetec::PrtScanPrice* PrtStationInfo::release_scan_price() {
  clear_has_scan_price();
  ::isafetec::PrtScanPrice* temp = scan_price_;
  scan_price_ = NULL;
  return temp;
}

// optional string printer_ip = 17;
inline bool PrtStationInfo::has_printer_ip() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PrtStationInfo::set_has_printer_ip() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PrtStationInfo::clear_has_printer_ip() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PrtStationInfo::clear_printer_ip() {
  if (printer_ip_ != &::google::protobuf::internal::kEmptyString) {
    printer_ip_->clear();
  }
  clear_has_printer_ip();
}
inline const ::std::string& PrtStationInfo::printer_ip() const {
  return *printer_ip_;
}
inline void PrtStationInfo::set_printer_ip(const ::std::string& value) {
  set_has_printer_ip();
  if (printer_ip_ == &::google::protobuf::internal::kEmptyString) {
    printer_ip_ = new ::std::string;
  }
  printer_ip_->assign(value);
}
inline void PrtStationInfo::set_printer_ip(const char* value) {
  set_has_printer_ip();
  if (printer_ip_ == &::google::protobuf::internal::kEmptyString) {
    printer_ip_ = new ::std::string;
  }
  printer_ip_->assign(value);
}
inline void PrtStationInfo::set_printer_ip(const char* value, size_t size) {
  set_has_printer_ip();
  if (printer_ip_ == &::google::protobuf::internal::kEmptyString) {
    printer_ip_ = new ::std::string;
  }
  printer_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtStationInfo::mutable_printer_ip() {
  set_has_printer_ip();
  if (printer_ip_ == &::google::protobuf::internal::kEmptyString) {
    printer_ip_ = new ::std::string;
  }
  return printer_ip_;
}
inline ::std::string* PrtStationInfo::release_printer_ip() {
  clear_has_printer_ip();
  if (printer_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = printer_ip_;
    printer_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string print_station_ip = 18;
inline bool PrtStationInfo::has_print_station_ip() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PrtStationInfo::set_has_print_station_ip() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PrtStationInfo::clear_has_print_station_ip() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PrtStationInfo::clear_print_station_ip() {
  if (print_station_ip_ != &::google::protobuf::internal::kEmptyString) {
    print_station_ip_->clear();
  }
  clear_has_print_station_ip();
}
inline const ::std::string& PrtStationInfo::print_station_ip() const {
  return *print_station_ip_;
}
inline void PrtStationInfo::set_print_station_ip(const ::std::string& value) {
  set_has_print_station_ip();
  if (print_station_ip_ == &::google::protobuf::internal::kEmptyString) {
    print_station_ip_ = new ::std::string;
  }
  print_station_ip_->assign(value);
}
inline void PrtStationInfo::set_print_station_ip(const char* value) {
  set_has_print_station_ip();
  if (print_station_ip_ == &::google::protobuf::internal::kEmptyString) {
    print_station_ip_ = new ::std::string;
  }
  print_station_ip_->assign(value);
}
inline void PrtStationInfo::set_print_station_ip(const char* value, size_t size) {
  set_has_print_station_ip();
  if (print_station_ip_ == &::google::protobuf::internal::kEmptyString) {
    print_station_ip_ = new ::std::string;
  }
  print_station_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtStationInfo::mutable_print_station_ip() {
  set_has_print_station_ip();
  if (print_station_ip_ == &::google::protobuf::internal::kEmptyString) {
    print_station_ip_ = new ::std::string;
  }
  return print_station_ip_;
}
inline ::std::string* PrtStationInfo::release_print_station_ip() {
  clear_has_print_station_ip();
  if (print_station_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = print_station_ip_;
    print_station_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// AutoAddPrtStationInfo

// optional string printer_name = 1;
inline bool AutoAddPrtStationInfo::has_printer_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AutoAddPrtStationInfo::set_has_printer_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AutoAddPrtStationInfo::clear_has_printer_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AutoAddPrtStationInfo::clear_printer_name() {
  if (printer_name_ != &::google::protobuf::internal::kEmptyString) {
    printer_name_->clear();
  }
  clear_has_printer_name();
}
inline const ::std::string& AutoAddPrtStationInfo::printer_name() const {
  return *printer_name_;
}
inline void AutoAddPrtStationInfo::set_printer_name(const ::std::string& value) {
  set_has_printer_name();
  if (printer_name_ == &::google::protobuf::internal::kEmptyString) {
    printer_name_ = new ::std::string;
  }
  printer_name_->assign(value);
}
inline void AutoAddPrtStationInfo::set_printer_name(const char* value) {
  set_has_printer_name();
  if (printer_name_ == &::google::protobuf::internal::kEmptyString) {
    printer_name_ = new ::std::string;
  }
  printer_name_->assign(value);
}
inline void AutoAddPrtStationInfo::set_printer_name(const char* value, size_t size) {
  set_has_printer_name();
  if (printer_name_ == &::google::protobuf::internal::kEmptyString) {
    printer_name_ = new ::std::string;
  }
  printer_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AutoAddPrtStationInfo::mutable_printer_name() {
  set_has_printer_name();
  if (printer_name_ == &::google::protobuf::internal::kEmptyString) {
    printer_name_ = new ::std::string;
  }
  return printer_name_;
}
inline ::std::string* AutoAddPrtStationInfo::release_printer_name() {
  clear_has_printer_name();
  if (printer_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = printer_name_;
    printer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 printer_resolution = 2;
inline bool AutoAddPrtStationInfo::has_printer_resolution() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AutoAddPrtStationInfo::set_has_printer_resolution() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AutoAddPrtStationInfo::clear_has_printer_resolution() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AutoAddPrtStationInfo::clear_printer_resolution() {
  printer_resolution_ = 0;
  clear_has_printer_resolution();
}
inline ::google::protobuf::int32 AutoAddPrtStationInfo::printer_resolution() const {
  return printer_resolution_;
}
inline void AutoAddPrtStationInfo::set_printer_resolution(::google::protobuf::int32 value) {
  set_has_printer_resolution();
  printer_resolution_ = value;
}

// optional int32 printer_speed = 3;
inline bool AutoAddPrtStationInfo::has_printer_speed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AutoAddPrtStationInfo::set_has_printer_speed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AutoAddPrtStationInfo::clear_has_printer_speed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AutoAddPrtStationInfo::clear_printer_speed() {
  printer_speed_ = 0;
  clear_has_printer_speed();
}
inline ::google::protobuf::int32 AutoAddPrtStationInfo::printer_speed() const {
  return printer_speed_;
}
inline void AutoAddPrtStationInfo::set_printer_speed(::google::protobuf::int32 value) {
  set_has_printer_speed();
  printer_speed_ = value;
}

// optional int32 printer_color = 4;
inline bool AutoAddPrtStationInfo::has_printer_color() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AutoAddPrtStationInfo::set_has_printer_color() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AutoAddPrtStationInfo::clear_has_printer_color() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AutoAddPrtStationInfo::clear_printer_color() {
  printer_color_ = 0;
  clear_has_printer_color();
}
inline ::google::protobuf::int32 AutoAddPrtStationInfo::printer_color() const {
  return printer_color_;
}
inline void AutoAddPrtStationInfo::set_printer_color(::google::protobuf::int32 value) {
  set_has_printer_color();
  printer_color_ = value;
}

// optional string prt_station_name = 5;
inline bool AutoAddPrtStationInfo::has_prt_station_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AutoAddPrtStationInfo::set_has_prt_station_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AutoAddPrtStationInfo::clear_has_prt_station_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AutoAddPrtStationInfo::clear_prt_station_name() {
  if (prt_station_name_ != &::google::protobuf::internal::kEmptyString) {
    prt_station_name_->clear();
  }
  clear_has_prt_station_name();
}
inline const ::std::string& AutoAddPrtStationInfo::prt_station_name() const {
  return *prt_station_name_;
}
inline void AutoAddPrtStationInfo::set_prt_station_name(const ::std::string& value) {
  set_has_prt_station_name();
  if (prt_station_name_ == &::google::protobuf::internal::kEmptyString) {
    prt_station_name_ = new ::std::string;
  }
  prt_station_name_->assign(value);
}
inline void AutoAddPrtStationInfo::set_prt_station_name(const char* value) {
  set_has_prt_station_name();
  if (prt_station_name_ == &::google::protobuf::internal::kEmptyString) {
    prt_station_name_ = new ::std::string;
  }
  prt_station_name_->assign(value);
}
inline void AutoAddPrtStationInfo::set_prt_station_name(const char* value, size_t size) {
  set_has_prt_station_name();
  if (prt_station_name_ == &::google::protobuf::internal::kEmptyString) {
    prt_station_name_ = new ::std::string;
  }
  prt_station_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AutoAddPrtStationInfo::mutable_prt_station_name() {
  set_has_prt_station_name();
  if (prt_station_name_ == &::google::protobuf::internal::kEmptyString) {
    prt_station_name_ = new ::std::string;
  }
  return prt_station_name_;
}
inline ::std::string* AutoAddPrtStationInfo::release_prt_station_name() {
  clear_has_prt_station_name();
  if (prt_station_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = prt_station_name_;
    prt_station_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string prt_station_comment = 6;
inline bool AutoAddPrtStationInfo::has_prt_station_comment() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AutoAddPrtStationInfo::set_has_prt_station_comment() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AutoAddPrtStationInfo::clear_has_prt_station_comment() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AutoAddPrtStationInfo::clear_prt_station_comment() {
  if (prt_station_comment_ != &::google::protobuf::internal::kEmptyString) {
    prt_station_comment_->clear();
  }
  clear_has_prt_station_comment();
}
inline const ::std::string& AutoAddPrtStationInfo::prt_station_comment() const {
  return *prt_station_comment_;
}
inline void AutoAddPrtStationInfo::set_prt_station_comment(const ::std::string& value) {
  set_has_prt_station_comment();
  if (prt_station_comment_ == &::google::protobuf::internal::kEmptyString) {
    prt_station_comment_ = new ::std::string;
  }
  prt_station_comment_->assign(value);
}
inline void AutoAddPrtStationInfo::set_prt_station_comment(const char* value) {
  set_has_prt_station_comment();
  if (prt_station_comment_ == &::google::protobuf::internal::kEmptyString) {
    prt_station_comment_ = new ::std::string;
  }
  prt_station_comment_->assign(value);
}
inline void AutoAddPrtStationInfo::set_prt_station_comment(const char* value, size_t size) {
  set_has_prt_station_comment();
  if (prt_station_comment_ == &::google::protobuf::internal::kEmptyString) {
    prt_station_comment_ = new ::std::string;
  }
  prt_station_comment_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AutoAddPrtStationInfo::mutable_prt_station_comment() {
  set_has_prt_station_comment();
  if (prt_station_comment_ == &::google::protobuf::internal::kEmptyString) {
    prt_station_comment_ = new ::std::string;
  }
  return prt_station_comment_;
}
inline ::std::string* AutoAddPrtStationInfo::release_prt_station_comment() {
  clear_has_prt_station_comment();
  if (prt_station_comment_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = prt_station_comment_;
    prt_station_comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional double a3_hb_price = 7;
inline bool AutoAddPrtStationInfo::has_a3_hb_price() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AutoAddPrtStationInfo::set_has_a3_hb_price() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AutoAddPrtStationInfo::clear_has_a3_hb_price() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AutoAddPrtStationInfo::clear_a3_hb_price() {
  a3_hb_price_ = 0;
  clear_has_a3_hb_price();
}
inline double AutoAddPrtStationInfo::a3_hb_price() const {
  return a3_hb_price_;
}
inline void AutoAddPrtStationInfo::set_a3_hb_price(double value) {
  set_has_a3_hb_price();
  a3_hb_price_ = value;
}

// optional double a3_color_price = 8;
inline bool AutoAddPrtStationInfo::has_a3_color_price() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AutoAddPrtStationInfo::set_has_a3_color_price() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AutoAddPrtStationInfo::clear_has_a3_color_price() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AutoAddPrtStationInfo::clear_a3_color_price() {
  a3_color_price_ = 0;
  clear_has_a3_color_price();
}
inline double AutoAddPrtStationInfo::a3_color_price() const {
  return a3_color_price_;
}
inline void AutoAddPrtStationInfo::set_a3_color_price(double value) {
  set_has_a3_color_price();
  a3_color_price_ = value;
}

// optional double a4_hb_price = 9;
inline bool AutoAddPrtStationInfo::has_a4_hb_price() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AutoAddPrtStationInfo::set_has_a4_hb_price() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AutoAddPrtStationInfo::clear_has_a4_hb_price() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AutoAddPrtStationInfo::clear_a4_hb_price() {
  a4_hb_price_ = 0;
  clear_has_a4_hb_price();
}
inline double AutoAddPrtStationInfo::a4_hb_price() const {
  return a4_hb_price_;
}
inline void AutoAddPrtStationInfo::set_a4_hb_price(double value) {
  set_has_a4_hb_price();
  a4_hb_price_ = value;
}

// optional double a4_color_price = 10;
inline bool AutoAddPrtStationInfo::has_a4_color_price() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AutoAddPrtStationInfo::set_has_a4_color_price() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AutoAddPrtStationInfo::clear_has_a4_color_price() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AutoAddPrtStationInfo::clear_a4_color_price() {
  a4_color_price_ = 0;
  clear_has_a4_color_price();
}
inline double AutoAddPrtStationInfo::a4_color_price() const {
  return a4_color_price_;
}
inline void AutoAddPrtStationInfo::set_a4_color_price(double value) {
  set_has_a4_color_price();
  a4_color_price_ = value;
}

// optional string printer_ip = 11;
inline bool AutoAddPrtStationInfo::has_printer_ip() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AutoAddPrtStationInfo::set_has_printer_ip() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AutoAddPrtStationInfo::clear_has_printer_ip() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AutoAddPrtStationInfo::clear_printer_ip() {
  if (printer_ip_ != &::google::protobuf::internal::kEmptyString) {
    printer_ip_->clear();
  }
  clear_has_printer_ip();
}
inline const ::std::string& AutoAddPrtStationInfo::printer_ip() const {
  return *printer_ip_;
}
inline void AutoAddPrtStationInfo::set_printer_ip(const ::std::string& value) {
  set_has_printer_ip();
  if (printer_ip_ == &::google::protobuf::internal::kEmptyString) {
    printer_ip_ = new ::std::string;
  }
  printer_ip_->assign(value);
}
inline void AutoAddPrtStationInfo::set_printer_ip(const char* value) {
  set_has_printer_ip();
  if (printer_ip_ == &::google::protobuf::internal::kEmptyString) {
    printer_ip_ = new ::std::string;
  }
  printer_ip_->assign(value);
}
inline void AutoAddPrtStationInfo::set_printer_ip(const char* value, size_t size) {
  set_has_printer_ip();
  if (printer_ip_ == &::google::protobuf::internal::kEmptyString) {
    printer_ip_ = new ::std::string;
  }
  printer_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AutoAddPrtStationInfo::mutable_printer_ip() {
  set_has_printer_ip();
  if (printer_ip_ == &::google::protobuf::internal::kEmptyString) {
    printer_ip_ = new ::std::string;
  }
  return printer_ip_;
}
inline ::std::string* AutoAddPrtStationInfo::release_printer_ip() {
  clear_has_printer_ip();
  if (printer_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = printer_ip_;
    printer_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PrintProjectSampleInfo

// optional int32 id = 1;
inline bool PrintProjectSampleInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrintProjectSampleInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrintProjectSampleInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrintProjectSampleInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PrintProjectSampleInfo::id() const {
  return id_;
}
inline void PrintProjectSampleInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool PrintProjectSampleInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrintProjectSampleInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrintProjectSampleInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrintProjectSampleInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PrintProjectSampleInfo::name() const {
  return *name_;
}
inline void PrintProjectSampleInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PrintProjectSampleInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PrintProjectSampleInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrintProjectSampleInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PrintProjectSampleInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PrintStationSampleInfo

// optional int32 id = 1;
inline bool PrintStationSampleInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrintStationSampleInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrintStationSampleInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrintStationSampleInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PrintStationSampleInfo::id() const {
  return id_;
}
inline void PrintStationSampleInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool PrintStationSampleInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrintStationSampleInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrintStationSampleInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrintStationSampleInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PrintStationSampleInfo::name() const {
  return *name_;
}
inline void PrintStationSampleInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PrintStationSampleInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PrintStationSampleInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrintStationSampleInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PrintStationSampleInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string addr = 3;
inline bool PrintStationSampleInfo::has_addr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrintStationSampleInfo::set_has_addr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrintStationSampleInfo::clear_has_addr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrintStationSampleInfo::clear_addr() {
  if (addr_ != &::google::protobuf::internal::kEmptyString) {
    addr_->clear();
  }
  clear_has_addr();
}
inline const ::std::string& PrintStationSampleInfo::addr() const {
  return *addr_;
}
inline void PrintStationSampleInfo::set_addr(const ::std::string& value) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    addr_ = new ::std::string;
  }
  addr_->assign(value);
}
inline void PrintStationSampleInfo::set_addr(const char* value) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    addr_ = new ::std::string;
  }
  addr_->assign(value);
}
inline void PrintStationSampleInfo::set_addr(const char* value, size_t size) {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    addr_ = new ::std::string;
  }
  addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrintStationSampleInfo::mutable_addr() {
  set_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    addr_ = new ::std::string;
  }
  return addr_;
}
inline ::std::string* PrintStationSampleInfo::release_addr() {
  clear_has_addr();
  if (addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = addr_;
    addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string comment = 4;
inline bool PrintStationSampleInfo::has_comment() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrintStationSampleInfo::set_has_comment() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrintStationSampleInfo::clear_has_comment() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrintStationSampleInfo::clear_comment() {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& PrintStationSampleInfo::comment() const {
  return *comment_;
}
inline void PrintStationSampleInfo::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void PrintStationSampleInfo::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void PrintStationSampleInfo::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrintStationSampleInfo::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  return comment_;
}
inline ::std::string* PrintStationSampleInfo::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PrintJobSecTypeInfo

// optional .isafetec.JOB_STORAGE_TYPE type = 1;
inline bool PrintJobSecTypeInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrintJobSecTypeInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrintJobSecTypeInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrintJobSecTypeInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline isafetec::JOB_STORAGE_TYPE PrintJobSecTypeInfo::type() const {
  return static_cast< isafetec::JOB_STORAGE_TYPE >(type_);
}
inline void PrintJobSecTypeInfo::set_type(isafetec::JOB_STORAGE_TYPE value) {
  GOOGLE_DCHECK(isafetec::JOB_STORAGE_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string desc = 2;
inline bool PrintJobSecTypeInfo::has_desc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrintJobSecTypeInfo::set_has_desc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrintJobSecTypeInfo::clear_has_desc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrintJobSecTypeInfo::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& PrintJobSecTypeInfo::desc() const {
  return *desc_;
}
inline void PrintJobSecTypeInfo::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void PrintJobSecTypeInfo::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void PrintJobSecTypeInfo::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrintJobSecTypeInfo::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* PrintJobSecTypeInfo::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PrintCtlReqInfo

// repeated .isafetec.PrintStationSampleInfo order_print_list = 1;
inline int PrintCtlReqInfo::order_print_list_size() const {
  return order_print_list_.size();
}
inline void PrintCtlReqInfo::clear_order_print_list() {
  order_print_list_.Clear();
}
inline const ::isafetec::PrintStationSampleInfo& PrintCtlReqInfo::order_print_list(int index) const {
  return order_print_list_.Get(index);
}
inline ::isafetec::PrintStationSampleInfo* PrintCtlReqInfo::mutable_order_print_list(int index) {
  return order_print_list_.Mutable(index);
}
inline ::isafetec::PrintStationSampleInfo* PrintCtlReqInfo::order_print_list_ReleaseAt(int index) {
  return order_print_list_.ReleaseAt(index);
}
inline void PrintCtlReqInfo::order_print_list_RemoveAt(int index) {
  order_print_list_.RemoveAt(index);
}
inline ::isafetec::PrintStationSampleInfo* PrintCtlReqInfo::add_order_print_list() {
  return order_print_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::PrintStationSampleInfo >&
PrintCtlReqInfo::order_print_list() const {
  return order_print_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::PrintStationSampleInfo >*
PrintCtlReqInfo::mutable_order_print_list() {
  return &order_print_list_;
}

// repeated .isafetec.PrintProjectSampleInfo project_list = 2;
inline int PrintCtlReqInfo::project_list_size() const {
  return project_list_.size();
}
inline void PrintCtlReqInfo::clear_project_list() {
  project_list_.Clear();
}
inline const ::isafetec::PrintProjectSampleInfo& PrintCtlReqInfo::project_list(int index) const {
  return project_list_.Get(index);
}
inline ::isafetec::PrintProjectSampleInfo* PrintCtlReqInfo::mutable_project_list(int index) {
  return project_list_.Mutable(index);
}
inline ::isafetec::PrintProjectSampleInfo* PrintCtlReqInfo::project_list_ReleaseAt(int index) {
  return project_list_.ReleaseAt(index);
}
inline void PrintCtlReqInfo::project_list_RemoveAt(int index) {
  project_list_.RemoveAt(index);
}
inline ::isafetec::PrintProjectSampleInfo* PrintCtlReqInfo::add_project_list() {
  return project_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::PrintProjectSampleInfo >&
PrintCtlReqInfo::project_list() const {
  return project_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::PrintProjectSampleInfo >*
PrintCtlReqInfo::mutable_project_list() {
  return &project_list_;
}

// repeated .isafetec.PrintStationSampleInfo direct_print_list = 3;
inline int PrintCtlReqInfo::direct_print_list_size() const {
  return direct_print_list_.size();
}
inline void PrintCtlReqInfo::clear_direct_print_list() {
  direct_print_list_.Clear();
}
inline const ::isafetec::PrintStationSampleInfo& PrintCtlReqInfo::direct_print_list(int index) const {
  return direct_print_list_.Get(index);
}
inline ::isafetec::PrintStationSampleInfo* PrintCtlReqInfo::mutable_direct_print_list(int index) {
  return direct_print_list_.Mutable(index);
}
inline ::isafetec::PrintStationSampleInfo* PrintCtlReqInfo::direct_print_list_ReleaseAt(int index) {
  return direct_print_list_.ReleaseAt(index);
}
inline void PrintCtlReqInfo::direct_print_list_RemoveAt(int index) {
  direct_print_list_.RemoveAt(index);
}
inline ::isafetec::PrintStationSampleInfo* PrintCtlReqInfo::add_direct_print_list() {
  return direct_print_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::PrintStationSampleInfo >&
PrintCtlReqInfo::direct_print_list() const {
  return direct_print_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::PrintStationSampleInfo >*
PrintCtlReqInfo::mutable_direct_print_list() {
  return &direct_print_list_;
}

// -------------------------------------------------------------------

// PrintCltLogon

// optional int32 id = 1;
inline bool PrintCltLogon::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrintCltLogon::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrintCltLogon::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrintCltLogon::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PrintCltLogon::id() const {
  return id_;
}
inline void PrintCltLogon::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool PrintCltLogon::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrintCltLogon::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrintCltLogon::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrintCltLogon::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PrintCltLogon::name() const {
  return *name_;
}
inline void PrintCltLogon::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PrintCltLogon::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PrintCltLogon::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrintCltLogon::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PrintCltLogon::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string pwd = 3;
inline bool PrintCltLogon::has_pwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrintCltLogon::set_has_pwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrintCltLogon::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrintCltLogon::clear_pwd() {
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    pwd_->clear();
  }
  clear_has_pwd();
}
inline const ::std::string& PrintCltLogon::pwd() const {
  return *pwd_;
}
inline void PrintCltLogon::set_pwd(const ::std::string& value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
}
inline void PrintCltLogon::set_pwd(const char* value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
}
inline void PrintCltLogon::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrintCltLogon::mutable_pwd() {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  return pwd_;
}
inline ::std::string* PrintCltLogon::release_pwd() {
  clear_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pwd_;
    pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 project_id = 4;
inline bool PrintCltLogon::has_project_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrintCltLogon::set_has_project_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrintCltLogon::clear_has_project_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrintCltLogon::clear_project_id() {
  project_id_ = 0;
  clear_has_project_id();
}
inline ::google::protobuf::int32 PrintCltLogon::project_id() const {
  return project_id_;
}
inline void PrintCltLogon::set_project_id(::google::protobuf::int32 value) {
  set_has_project_id();
  project_id_ = value;
}

// optional int32 print_station_id = 5;
inline bool PrintCltLogon::has_print_station_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PrintCltLogon::set_has_print_station_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PrintCltLogon::clear_has_print_station_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PrintCltLogon::clear_print_station_id() {
  print_station_id_ = 0;
  clear_has_print_station_id();
}
inline ::google::protobuf::int32 PrintCltLogon::print_station_id() const {
  return print_station_id_;
}
inline void PrintCltLogon::set_print_station_id(::google::protobuf::int32 value) {
  set_has_print_station_id();
  print_station_id_ = value;
}

// optional int32 order_station_id = 6;
inline bool PrintCltLogon::has_order_station_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PrintCltLogon::set_has_order_station_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PrintCltLogon::clear_has_order_station_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PrintCltLogon::clear_order_station_id() {
  order_station_id_ = 0;
  clear_has_order_station_id();
}
inline ::google::protobuf::int32 PrintCltLogon::order_station_id() const {
  return order_station_id_;
}
inline void PrintCltLogon::set_order_station_id(::google::protobuf::int32 value) {
  set_has_order_station_id();
  order_station_id_ = value;
}

// optional int32 job_id = 7;
inline bool PrintCltLogon::has_job_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PrintCltLogon::set_has_job_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PrintCltLogon::clear_has_job_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PrintCltLogon::clear_job_id() {
  job_id_ = 0;
  clear_has_job_id();
}
inline ::google::protobuf::int32 PrintCltLogon::job_id() const {
  return job_id_;
}
inline void PrintCltLogon::set_job_id(::google::protobuf::int32 value) {
  set_has_job_id();
  job_id_ = value;
}

// optional string page_type = 8;
inline bool PrintCltLogon::has_page_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PrintCltLogon::set_has_page_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PrintCltLogon::clear_has_page_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PrintCltLogon::clear_page_type() {
  if (page_type_ != &::google::protobuf::internal::kEmptyString) {
    page_type_->clear();
  }
  clear_has_page_type();
}
inline const ::std::string& PrintCltLogon::page_type() const {
  return *page_type_;
}
inline void PrintCltLogon::set_page_type(const ::std::string& value) {
  set_has_page_type();
  if (page_type_ == &::google::protobuf::internal::kEmptyString) {
    page_type_ = new ::std::string;
  }
  page_type_->assign(value);
}
inline void PrintCltLogon::set_page_type(const char* value) {
  set_has_page_type();
  if (page_type_ == &::google::protobuf::internal::kEmptyString) {
    page_type_ = new ::std::string;
  }
  page_type_->assign(value);
}
inline void PrintCltLogon::set_page_type(const char* value, size_t size) {
  set_has_page_type();
  if (page_type_ == &::google::protobuf::internal::kEmptyString) {
    page_type_ = new ::std::string;
  }
  page_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrintCltLogon::mutable_page_type() {
  set_has_page_type();
  if (page_type_ == &::google::protobuf::internal::kEmptyString) {
    page_type_ = new ::std::string;
  }
  return page_type_;
}
inline ::std::string* PrintCltLogon::release_page_type() {
  clear_has_page_type();
  if (page_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = page_type_;
    page_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 page_count = 9;
inline bool PrintCltLogon::has_page_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PrintCltLogon::set_has_page_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PrintCltLogon::clear_has_page_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PrintCltLogon::clear_page_count() {
  page_count_ = 0;
  clear_has_page_count();
}
inline ::google::protobuf::int32 PrintCltLogon::page_count() const {
  return page_count_;
}
inline void PrintCltLogon::set_page_count(::google::protobuf::int32 value) {
  set_has_page_count();
  page_count_ = value;
}

// optional int32 color = 10;
inline bool PrintCltLogon::has_color() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PrintCltLogon::set_has_color() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PrintCltLogon::clear_has_color() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PrintCltLogon::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::google::protobuf::int32 PrintCltLogon::color() const {
  return color_;
}
inline void PrintCltLogon::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
}

// optional int32 job_size = 11;
inline bool PrintCltLogon::has_job_size() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PrintCltLogon::set_has_job_size() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PrintCltLogon::clear_has_job_size() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PrintCltLogon::clear_job_size() {
  job_size_ = 0;
  clear_has_job_size();
}
inline ::google::protobuf::int32 PrintCltLogon::job_size() const {
  return job_size_;
}
inline void PrintCltLogon::set_job_size(::google::protobuf::int32 value) {
  set_has_job_size();
  job_size_ = value;
}

// -------------------------------------------------------------------

// PrintCltLoginVerifyCode

// optional int32 id = 1;
inline bool PrintCltLoginVerifyCode::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrintCltLoginVerifyCode::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrintCltLoginVerifyCode::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrintCltLoginVerifyCode::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PrintCltLoginVerifyCode::id() const {
  return id_;
}
inline void PrintCltLoginVerifyCode::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool PrintCltLoginVerifyCode::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrintCltLoginVerifyCode::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrintCltLoginVerifyCode::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrintCltLoginVerifyCode::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PrintCltLoginVerifyCode::name() const {
  return *name_;
}
inline void PrintCltLoginVerifyCode::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PrintCltLoginVerifyCode::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PrintCltLoginVerifyCode::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrintCltLoginVerifyCode::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PrintCltLoginVerifyCode::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 loginType = 3;
inline bool PrintCltLoginVerifyCode::has_logintype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrintCltLoginVerifyCode::set_has_logintype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrintCltLoginVerifyCode::clear_has_logintype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrintCltLoginVerifyCode::clear_logintype() {
  logintype_ = 0;
  clear_has_logintype();
}
inline ::google::protobuf::int32 PrintCltLoginVerifyCode::logintype() const {
  return logintype_;
}
inline void PrintCltLoginVerifyCode::set_logintype(::google::protobuf::int32 value) {
  set_has_logintype();
  logintype_ = value;
}

// optional string verifyCode = 4;
inline bool PrintCltLoginVerifyCode::has_verifycode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrintCltLoginVerifyCode::set_has_verifycode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrintCltLoginVerifyCode::clear_has_verifycode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrintCltLoginVerifyCode::clear_verifycode() {
  if (verifycode_ != &::google::protobuf::internal::kEmptyString) {
    verifycode_->clear();
  }
  clear_has_verifycode();
}
inline const ::std::string& PrintCltLoginVerifyCode::verifycode() const {
  return *verifycode_;
}
inline void PrintCltLoginVerifyCode::set_verifycode(const ::std::string& value) {
  set_has_verifycode();
  if (verifycode_ == &::google::protobuf::internal::kEmptyString) {
    verifycode_ = new ::std::string;
  }
  verifycode_->assign(value);
}
inline void PrintCltLoginVerifyCode::set_verifycode(const char* value) {
  set_has_verifycode();
  if (verifycode_ == &::google::protobuf::internal::kEmptyString) {
    verifycode_ = new ::std::string;
  }
  verifycode_->assign(value);
}
inline void PrintCltLoginVerifyCode::set_verifycode(const char* value, size_t size) {
  set_has_verifycode();
  if (verifycode_ == &::google::protobuf::internal::kEmptyString) {
    verifycode_ = new ::std::string;
  }
  verifycode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrintCltLoginVerifyCode::mutable_verifycode() {
  set_has_verifycode();
  if (verifycode_ == &::google::protobuf::internal::kEmptyString) {
    verifycode_ = new ::std::string;
  }
  return verifycode_;
}
inline ::std::string* PrintCltLoginVerifyCode::release_verifycode() {
  clear_has_verifycode();
  if (verifycode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = verifycode_;
    verifycode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 job_id = 5;
inline bool PrintCltLoginVerifyCode::has_job_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PrintCltLoginVerifyCode::set_has_job_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PrintCltLoginVerifyCode::clear_has_job_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PrintCltLoginVerifyCode::clear_job_id() {
  job_id_ = 0;
  clear_has_job_id();
}
inline ::google::protobuf::int32 PrintCltLoginVerifyCode::job_id() const {
  return job_id_;
}
inline void PrintCltLoginVerifyCode::set_job_id(::google::protobuf::int32 value) {
  set_has_job_id();
  job_id_ = value;
}

// -------------------------------------------------------------------

// PrintCltCheckUserResult

// optional int32 user_id = 1;
inline bool PrintCltCheckUserResult::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrintCltCheckUserResult::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrintCltCheckUserResult::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrintCltCheckUserResult::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 PrintCltCheckUserResult::user_id() const {
  return user_id_;
}
inline void PrintCltCheckUserResult::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional int32 account_id = 3;
inline bool PrintCltCheckUserResult::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrintCltCheckUserResult::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrintCltCheckUserResult::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrintCltCheckUserResult::clear_account_id() {
  account_id_ = 0;
  clear_has_account_id();
}
inline ::google::protobuf::int32 PrintCltCheckUserResult::account_id() const {
  return account_id_;
}
inline void PrintCltCheckUserResult::set_account_id(::google::protobuf::int32 value) {
  set_has_account_id();
  account_id_ = value;
}

// optional double left_money = 4;
inline bool PrintCltCheckUserResult::has_left_money() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrintCltCheckUserResult::set_has_left_money() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrintCltCheckUserResult::clear_has_left_money() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrintCltCheckUserResult::clear_left_money() {
  left_money_ = 0;
  clear_has_left_money();
}
inline double PrintCltCheckUserResult::left_money() const {
  return left_money_;
}
inline void PrintCltCheckUserResult::set_left_money(double value) {
  set_has_left_money();
  left_money_ = value;
}

// optional double special_left_money = 5;
inline bool PrintCltCheckUserResult::has_special_left_money() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrintCltCheckUserResult::set_has_special_left_money() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrintCltCheckUserResult::clear_has_special_left_money() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrintCltCheckUserResult::clear_special_left_money() {
  special_left_money_ = 0;
  clear_has_special_left_money();
}
inline double PrintCltCheckUserResult::special_left_money() const {
  return special_left_money_;
}
inline void PrintCltCheckUserResult::set_special_left_money(double value) {
  set_has_special_left_money();
  special_left_money_ = value;
}

// optional int32 a3_quota = 6;
inline bool PrintCltCheckUserResult::has_a3_quota() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PrintCltCheckUserResult::set_has_a3_quota() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PrintCltCheckUserResult::clear_has_a3_quota() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PrintCltCheckUserResult::clear_a3_quota() {
  a3_quota_ = 0;
  clear_has_a3_quota();
}
inline ::google::protobuf::int32 PrintCltCheckUserResult::a3_quota() const {
  return a3_quota_;
}
inline void PrintCltCheckUserResult::set_a3_quota(::google::protobuf::int32 value) {
  set_has_a3_quota();
  a3_quota_ = value;
}

// optional int32 a4_quota = 7;
inline bool PrintCltCheckUserResult::has_a4_quota() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PrintCltCheckUserResult::set_has_a4_quota() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PrintCltCheckUserResult::clear_has_a4_quota() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PrintCltCheckUserResult::clear_a4_quota() {
  a4_quota_ = 0;
  clear_has_a4_quota();
}
inline ::google::protobuf::int32 PrintCltCheckUserResult::a4_quota() const {
  return a4_quota_;
}
inline void PrintCltCheckUserResult::set_a4_quota(::google::protobuf::int32 value) {
  set_has_a4_quota();
  a4_quota_ = value;
}

// optional int32 period_type = 8;
inline bool PrintCltCheckUserResult::has_period_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PrintCltCheckUserResult::set_has_period_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PrintCltCheckUserResult::clear_has_period_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PrintCltCheckUserResult::clear_period_type() {
  period_type_ = 0;
  clear_has_period_type();
}
inline ::google::protobuf::int32 PrintCltCheckUserResult::period_type() const {
  return period_type_;
}
inline void PrintCltCheckUserResult::set_period_type(::google::protobuf::int32 value) {
  set_has_period_type();
  period_type_ = value;
}

// optional int32 a3_printed_count = 9;
inline bool PrintCltCheckUserResult::has_a3_printed_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PrintCltCheckUserResult::set_has_a3_printed_count() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PrintCltCheckUserResult::clear_has_a3_printed_count() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PrintCltCheckUserResult::clear_a3_printed_count() {
  a3_printed_count_ = 0;
  clear_has_a3_printed_count();
}
inline ::google::protobuf::int32 PrintCltCheckUserResult::a3_printed_count() const {
  return a3_printed_count_;
}
inline void PrintCltCheckUserResult::set_a3_printed_count(::google::protobuf::int32 value) {
  set_has_a3_printed_count();
  a3_printed_count_ = value;
}

// optional int32 a4_printed_count = 10;
inline bool PrintCltCheckUserResult::has_a4_printed_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PrintCltCheckUserResult::set_has_a4_printed_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PrintCltCheckUserResult::clear_has_a4_printed_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PrintCltCheckUserResult::clear_a4_printed_count() {
  a4_printed_count_ = 0;
  clear_has_a4_printed_count();
}
inline ::google::protobuf::int32 PrintCltCheckUserResult::a4_printed_count() const {
  return a4_printed_count_;
}
inline void PrintCltCheckUserResult::set_a4_printed_count(::google::protobuf::int32 value) {
  set_has_a4_printed_count();
  a4_printed_count_ = value;
}

// optional int32 project_id = 11;
inline bool PrintCltCheckUserResult::has_project_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PrintCltCheckUserResult::set_has_project_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PrintCltCheckUserResult::clear_has_project_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PrintCltCheckUserResult::clear_project_id() {
  project_id_ = 0;
  clear_has_project_id();
}
inline ::google::protobuf::int32 PrintCltCheckUserResult::project_id() const {
  return project_id_;
}
inline void PrintCltCheckUserResult::set_project_id(::google::protobuf::int32 value) {
  set_has_project_id();
  project_id_ = value;
}

// optional int32 print_station_id = 12;
inline bool PrintCltCheckUserResult::has_print_station_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PrintCltCheckUserResult::set_has_print_station_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PrintCltCheckUserResult::clear_has_print_station_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PrintCltCheckUserResult::clear_print_station_id() {
  print_station_id_ = 0;
  clear_has_print_station_id();
}
inline ::google::protobuf::int32 PrintCltCheckUserResult::print_station_id() const {
  return print_station_id_;
}
inline void PrintCltCheckUserResult::set_print_station_id(::google::protobuf::int32 value) {
  set_has_print_station_id();
  print_station_id_ = value;
}

// optional int32 order_station_id = 13;
inline bool PrintCltCheckUserResult::has_order_station_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PrintCltCheckUserResult::set_has_order_station_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PrintCltCheckUserResult::clear_has_order_station_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PrintCltCheckUserResult::clear_order_station_id() {
  order_station_id_ = 0;
  clear_has_order_station_id();
}
inline ::google::protobuf::int32 PrintCltCheckUserResult::order_station_id() const {
  return order_station_id_;
}
inline void PrintCltCheckUserResult::set_order_station_id(::google::protobuf::int32 value) {
  set_has_order_station_id();
  order_station_id_ = value;
}

// optional int32 job_id = 14;
inline bool PrintCltCheckUserResult::has_job_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PrintCltCheckUserResult::set_has_job_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PrintCltCheckUserResult::clear_has_job_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PrintCltCheckUserResult::clear_job_id() {
  job_id_ = 0;
  clear_has_job_id();
}
inline ::google::protobuf::int32 PrintCltCheckUserResult::job_id() const {
  return job_id_;
}
inline void PrintCltCheckUserResult::set_job_id(::google::protobuf::int32 value) {
  set_has_job_id();
  job_id_ = value;
}

// optional .isafetec.JobFilterPolciy filter = 15;
inline bool PrintCltCheckUserResult::has_filter() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PrintCltCheckUserResult::set_has_filter() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PrintCltCheckUserResult::clear_has_filter() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PrintCltCheckUserResult::clear_filter() {
  if (filter_ != NULL) filter_->::isafetec::JobFilterPolciy::Clear();
  clear_has_filter();
}
inline const ::isafetec::JobFilterPolciy& PrintCltCheckUserResult::filter() const {
  return filter_ != NULL ? *filter_ : *default_instance_->filter_;
}
inline ::isafetec::JobFilterPolciy* PrintCltCheckUserResult::mutable_filter() {
  set_has_filter();
  if (filter_ == NULL) filter_ = new ::isafetec::JobFilterPolciy;
  return filter_;
}
inline ::isafetec::JobFilterPolciy* PrintCltCheckUserResult::release_filter() {
  clear_has_filter();
  ::isafetec::JobFilterPolciy* temp = filter_;
  filter_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// PrintCtrlPolicy

// optional .isafetec.JOB_SUBMIT_MODE submit_mode = 1;
inline bool PrintCtrlPolicy::has_submit_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrintCtrlPolicy::set_has_submit_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrintCtrlPolicy::clear_has_submit_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrintCtrlPolicy::clear_submit_mode() {
  submit_mode_ = 0;
  clear_has_submit_mode();
}
inline isafetec::JOB_SUBMIT_MODE PrintCtrlPolicy::submit_mode() const {
  return static_cast< isafetec::JOB_SUBMIT_MODE >(submit_mode_);
}
inline void PrintCtrlPolicy::set_submit_mode(isafetec::JOB_SUBMIT_MODE value) {
  GOOGLE_DCHECK(isafetec::JOB_SUBMIT_MODE_IsValid(value));
  set_has_submit_mode();
  submit_mode_ = value;
}

// optional .isafetec.JOB_PRINT_MODE print_mode = 2;
inline bool PrintCtrlPolicy::has_print_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrintCtrlPolicy::set_has_print_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrintCtrlPolicy::clear_has_print_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrintCtrlPolicy::clear_print_mode() {
  print_mode_ = 0;
  clear_has_print_mode();
}
inline isafetec::JOB_PRINT_MODE PrintCtrlPolicy::print_mode() const {
  return static_cast< isafetec::JOB_PRINT_MODE >(print_mode_);
}
inline void PrintCtrlPolicy::set_print_mode(isafetec::JOB_PRINT_MODE value) {
  GOOGLE_DCHECK(isafetec::JOB_PRINT_MODE_IsValid(value));
  set_has_print_mode();
  print_mode_ = value;
}

// optional int32 prt_id = 3;
inline bool PrintCtrlPolicy::has_prt_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrintCtrlPolicy::set_has_prt_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrintCtrlPolicy::clear_has_prt_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrintCtrlPolicy::clear_prt_id() {
  prt_id_ = 0;
  clear_has_prt_id();
}
inline ::google::protobuf::int32 PrintCtrlPolicy::prt_id() const {
  return prt_id_;
}
inline void PrintCtrlPolicy::set_prt_id(::google::protobuf::int32 value) {
  set_has_prt_id();
  prt_id_ = value;
}

// optional string url = 4;
inline bool PrintCtrlPolicy::has_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrintCtrlPolicy::set_has_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrintCtrlPolicy::clear_has_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrintCtrlPolicy::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& PrintCtrlPolicy::url() const {
  return *url_;
}
inline void PrintCtrlPolicy::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void PrintCtrlPolicy::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void PrintCtrlPolicy::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrintCtrlPolicy::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* PrintCtrlPolicy::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool enable_doc_log = 5;
inline bool PrintCtrlPolicy::has_enable_doc_log() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PrintCtrlPolicy::set_has_enable_doc_log() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PrintCtrlPolicy::clear_has_enable_doc_log() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PrintCtrlPolicy::clear_enable_doc_log() {
  enable_doc_log_ = false;
  clear_has_enable_doc_log();
}
inline bool PrintCtrlPolicy::enable_doc_log() const {
  return enable_doc_log_;
}
inline void PrintCtrlPolicy::set_enable_doc_log(bool value) {
  set_has_enable_doc_log();
  enable_doc_log_ = value;
}

// optional string doc_type = 6;
inline bool PrintCtrlPolicy::has_doc_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PrintCtrlPolicy::set_has_doc_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PrintCtrlPolicy::clear_has_doc_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PrintCtrlPolicy::clear_doc_type() {
  if (doc_type_ != &::google::protobuf::internal::kEmptyString) {
    doc_type_->clear();
  }
  clear_has_doc_type();
}
inline const ::std::string& PrintCtrlPolicy::doc_type() const {
  return *doc_type_;
}
inline void PrintCtrlPolicy::set_doc_type(const ::std::string& value) {
  set_has_doc_type();
  if (doc_type_ == &::google::protobuf::internal::kEmptyString) {
    doc_type_ = new ::std::string;
  }
  doc_type_->assign(value);
}
inline void PrintCtrlPolicy::set_doc_type(const char* value) {
  set_has_doc_type();
  if (doc_type_ == &::google::protobuf::internal::kEmptyString) {
    doc_type_ = new ::std::string;
  }
  doc_type_->assign(value);
}
inline void PrintCtrlPolicy::set_doc_type(const char* value, size_t size) {
  set_has_doc_type();
  if (doc_type_ == &::google::protobuf::internal::kEmptyString) {
    doc_type_ = new ::std::string;
  }
  doc_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrintCtrlPolicy::mutable_doc_type() {
  set_has_doc_type();
  if (doc_type_ == &::google::protobuf::internal::kEmptyString) {
    doc_type_ = new ::std::string;
  }
  return doc_type_;
}
inline ::std::string* PrintCtrlPolicy::release_doc_type() {
  clear_has_doc_type();
  if (doc_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = doc_type_;
    doc_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PrtOrderCmpltInfo

// optional int32 prt_id = 1;
inline bool PrtOrderCmpltInfo::has_prt_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrtOrderCmpltInfo::set_has_prt_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrtOrderCmpltInfo::clear_has_prt_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrtOrderCmpltInfo::clear_prt_id() {
  prt_id_ = 0;
  clear_has_prt_id();
}
inline ::google::protobuf::int32 PrtOrderCmpltInfo::prt_id() const {
  return prt_id_;
}
inline void PrtOrderCmpltInfo::set_prt_id(::google::protobuf::int32 value) {
  set_has_prt_id();
  prt_id_ = value;
}

// optional int32 job_id = 2;
inline bool PrtOrderCmpltInfo::has_job_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrtOrderCmpltInfo::set_has_job_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrtOrderCmpltInfo::clear_has_job_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrtOrderCmpltInfo::clear_job_id() {
  job_id_ = 0;
  clear_has_job_id();
}
inline ::google::protobuf::int32 PrtOrderCmpltInfo::job_id() const {
  return job_id_;
}
inline void PrtOrderCmpltInfo::set_job_id(::google::protobuf::int32 value) {
  set_has_job_id();
  job_id_ = value;
}

// -------------------------------------------------------------------

// RechargeFromCard

// optional int32 prt_id = 1;
inline bool RechargeFromCard::has_prt_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RechargeFromCard::set_has_prt_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RechargeFromCard::clear_has_prt_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RechargeFromCard::clear_prt_id() {
  prt_id_ = 0;
  clear_has_prt_id();
}
inline ::google::protobuf::int32 RechargeFromCard::prt_id() const {
  return prt_id_;
}
inline void RechargeFromCard::set_prt_id(::google::protobuf::int32 value) {
  set_has_prt_id();
  prt_id_ = value;
}

// optional int32 user_id = 2;
inline bool RechargeFromCard::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RechargeFromCard::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RechargeFromCard::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RechargeFromCard::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 RechargeFromCard::user_id() const {
  return user_id_;
}
inline void RechargeFromCard::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional string card_no = 3;
inline bool RechargeFromCard::has_card_no() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RechargeFromCard::set_has_card_no() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RechargeFromCard::clear_has_card_no() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RechargeFromCard::clear_card_no() {
  if (card_no_ != &::google::protobuf::internal::kEmptyString) {
    card_no_->clear();
  }
  clear_has_card_no();
}
inline const ::std::string& RechargeFromCard::card_no() const {
  return *card_no_;
}
inline void RechargeFromCard::set_card_no(const ::std::string& value) {
  set_has_card_no();
  if (card_no_ == &::google::protobuf::internal::kEmptyString) {
    card_no_ = new ::std::string;
  }
  card_no_->assign(value);
}
inline void RechargeFromCard::set_card_no(const char* value) {
  set_has_card_no();
  if (card_no_ == &::google::protobuf::internal::kEmptyString) {
    card_no_ = new ::std::string;
  }
  card_no_->assign(value);
}
inline void RechargeFromCard::set_card_no(const char* value, size_t size) {
  set_has_card_no();
  if (card_no_ == &::google::protobuf::internal::kEmptyString) {
    card_no_ = new ::std::string;
  }
  card_no_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RechargeFromCard::mutable_card_no() {
  set_has_card_no();
  if (card_no_ == &::google::protobuf::internal::kEmptyString) {
    card_no_ = new ::std::string;
  }
  return card_no_;
}
inline ::std::string* RechargeFromCard::release_card_no() {
  clear_has_card_no();
  if (card_no_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = card_no_;
    card_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional double left_money = 4;
inline bool RechargeFromCard::has_left_money() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RechargeFromCard::set_has_left_money() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RechargeFromCard::clear_has_left_money() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RechargeFromCard::clear_left_money() {
  left_money_ = 0;
  clear_has_left_money();
}
inline double RechargeFromCard::left_money() const {
  return left_money_;
}
inline void RechargeFromCard::set_left_money(double value) {
  set_has_left_money();
  left_money_ = value;
}

// optional double should_spend = 5;
inline bool RechargeFromCard::has_should_spend() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RechargeFromCard::set_has_should_spend() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RechargeFromCard::clear_has_should_spend() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RechargeFromCard::clear_should_spend() {
  should_spend_ = 0;
  clear_has_should_spend();
}
inline double RechargeFromCard::should_spend() const {
  return should_spend_;
}
inline void RechargeFromCard::set_should_spend(double value) {
  set_has_should_spend();
  should_spend_ = value;
}

// optional double recharge_money = 6;
inline bool RechargeFromCard::has_recharge_money() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RechargeFromCard::set_has_recharge_money() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RechargeFromCard::clear_has_recharge_money() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RechargeFromCard::clear_recharge_money() {
  recharge_money_ = 0;
  clear_has_recharge_money();
}
inline double RechargeFromCard::recharge_money() const {
  return recharge_money_;
}
inline void RechargeFromCard::set_recharge_money(double value) {
  set_has_recharge_money();
  recharge_money_ = value;
}

// optional int32 recharge_for = 7;
inline bool RechargeFromCard::has_recharge_for() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RechargeFromCard::set_has_recharge_for() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RechargeFromCard::clear_has_recharge_for() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RechargeFromCard::clear_recharge_for() {
  recharge_for_ = 0;
  clear_has_recharge_for();
}
inline ::google::protobuf::int32 RechargeFromCard::recharge_for() const {
  return recharge_for_;
}
inline void RechargeFromCard::set_recharge_for(::google::protobuf::int32 value) {
  set_has_recharge_for();
  recharge_for_ = value;
}

// -------------------------------------------------------------------

// RechargeFromCardErr

// optional int32 prt_id = 1;
inline bool RechargeFromCardErr::has_prt_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RechargeFromCardErr::set_has_prt_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RechargeFromCardErr::clear_has_prt_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RechargeFromCardErr::clear_prt_id() {
  prt_id_ = 0;
  clear_has_prt_id();
}
inline ::google::protobuf::int32 RechargeFromCardErr::prt_id() const {
  return prt_id_;
}
inline void RechargeFromCardErr::set_prt_id(::google::protobuf::int32 value) {
  set_has_prt_id();
  prt_id_ = value;
}

// optional int32 user_id = 2;
inline bool RechargeFromCardErr::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RechargeFromCardErr::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RechargeFromCardErr::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RechargeFromCardErr::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 RechargeFromCardErr::user_id() const {
  return user_id_;
}
inline void RechargeFromCardErr::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional string card_no = 3;
inline bool RechargeFromCardErr::has_card_no() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RechargeFromCardErr::set_has_card_no() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RechargeFromCardErr::clear_has_card_no() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RechargeFromCardErr::clear_card_no() {
  if (card_no_ != &::google::protobuf::internal::kEmptyString) {
    card_no_->clear();
  }
  clear_has_card_no();
}
inline const ::std::string& RechargeFromCardErr::card_no() const {
  return *card_no_;
}
inline void RechargeFromCardErr::set_card_no(const ::std::string& value) {
  set_has_card_no();
  if (card_no_ == &::google::protobuf::internal::kEmptyString) {
    card_no_ = new ::std::string;
  }
  card_no_->assign(value);
}
inline void RechargeFromCardErr::set_card_no(const char* value) {
  set_has_card_no();
  if (card_no_ == &::google::protobuf::internal::kEmptyString) {
    card_no_ = new ::std::string;
  }
  card_no_->assign(value);
}
inline void RechargeFromCardErr::set_card_no(const char* value, size_t size) {
  set_has_card_no();
  if (card_no_ == &::google::protobuf::internal::kEmptyString) {
    card_no_ = new ::std::string;
  }
  card_no_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RechargeFromCardErr::mutable_card_no() {
  set_has_card_no();
  if (card_no_ == &::google::protobuf::internal::kEmptyString) {
    card_no_ = new ::std::string;
  }
  return card_no_;
}
inline ::std::string* RechargeFromCardErr::release_card_no() {
  clear_has_card_no();
  if (card_no_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = card_no_;
    card_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string err_desc = 4;
inline bool RechargeFromCardErr::has_err_desc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RechargeFromCardErr::set_has_err_desc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RechargeFromCardErr::clear_has_err_desc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RechargeFromCardErr::clear_err_desc() {
  if (err_desc_ != &::google::protobuf::internal::kEmptyString) {
    err_desc_->clear();
  }
  clear_has_err_desc();
}
inline const ::std::string& RechargeFromCardErr::err_desc() const {
  return *err_desc_;
}
inline void RechargeFromCardErr::set_err_desc(const ::std::string& value) {
  set_has_err_desc();
  if (err_desc_ == &::google::protobuf::internal::kEmptyString) {
    err_desc_ = new ::std::string;
  }
  err_desc_->assign(value);
}
inline void RechargeFromCardErr::set_err_desc(const char* value) {
  set_has_err_desc();
  if (err_desc_ == &::google::protobuf::internal::kEmptyString) {
    err_desc_ = new ::std::string;
  }
  err_desc_->assign(value);
}
inline void RechargeFromCardErr::set_err_desc(const char* value, size_t size) {
  set_has_err_desc();
  if (err_desc_ == &::google::protobuf::internal::kEmptyString) {
    err_desc_ = new ::std::string;
  }
  err_desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RechargeFromCardErr::mutable_err_desc() {
  set_has_err_desc();
  if (err_desc_ == &::google::protobuf::internal::kEmptyString) {
    err_desc_ = new ::std::string;
  }
  return err_desc_;
}
inline ::std::string* RechargeFromCardErr::release_err_desc() {
  clear_has_err_desc();
  if (err_desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = err_desc_;
    err_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional double should_spend = 5;
inline bool RechargeFromCardErr::has_should_spend() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RechargeFromCardErr::set_has_should_spend() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RechargeFromCardErr::clear_has_should_spend() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RechargeFromCardErr::clear_should_spend() {
  should_spend_ = 0;
  clear_has_should_spend();
}
inline double RechargeFromCardErr::should_spend() const {
  return should_spend_;
}
inline void RechargeFromCardErr::set_should_spend(double value) {
  set_has_should_spend();
  should_spend_ = value;
}

// optional double recharge_money = 6;
inline bool RechargeFromCardErr::has_recharge_money() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RechargeFromCardErr::set_has_recharge_money() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RechargeFromCardErr::clear_has_recharge_money() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RechargeFromCardErr::clear_recharge_money() {
  recharge_money_ = 0;
  clear_has_recharge_money();
}
inline double RechargeFromCardErr::recharge_money() const {
  return recharge_money_;
}
inline void RechargeFromCardErr::set_recharge_money(double value) {
  set_has_recharge_money();
  recharge_money_ = value;
}

// optional int32 recharge_for = 7;
inline bool RechargeFromCardErr::has_recharge_for() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RechargeFromCardErr::set_has_recharge_for() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RechargeFromCardErr::clear_has_recharge_for() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RechargeFromCardErr::clear_recharge_for() {
  recharge_for_ = 0;
  clear_has_recharge_for();
}
inline ::google::protobuf::int32 RechargeFromCardErr::recharge_for() const {
  return recharge_for_;
}
inline void RechargeFromCardErr::set_recharge_for(::google::protobuf::int32 value) {
  set_has_recharge_for();
  recharge_for_ = value;
}

// -------------------------------------------------------------------

// PrtChargeResult

// optional string seed = 1;
inline bool PrtChargeResult::has_seed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrtChargeResult::set_has_seed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrtChargeResult::clear_has_seed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrtChargeResult::clear_seed() {
  if (seed_ != &::google::protobuf::internal::kEmptyString) {
    seed_->clear();
  }
  clear_has_seed();
}
inline const ::std::string& PrtChargeResult::seed() const {
  return *seed_;
}
inline void PrtChargeResult::set_seed(const ::std::string& value) {
  set_has_seed();
  if (seed_ == &::google::protobuf::internal::kEmptyString) {
    seed_ = new ::std::string;
  }
  seed_->assign(value);
}
inline void PrtChargeResult::set_seed(const char* value) {
  set_has_seed();
  if (seed_ == &::google::protobuf::internal::kEmptyString) {
    seed_ = new ::std::string;
  }
  seed_->assign(value);
}
inline void PrtChargeResult::set_seed(const char* value, size_t size) {
  set_has_seed();
  if (seed_ == &::google::protobuf::internal::kEmptyString) {
    seed_ = new ::std::string;
  }
  seed_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtChargeResult::mutable_seed() {
  set_has_seed();
  if (seed_ == &::google::protobuf::internal::kEmptyString) {
    seed_ = new ::std::string;
  }
  return seed_;
}
inline ::std::string* PrtChargeResult::release_seed() {
  clear_has_seed();
  if (seed_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = seed_;
    seed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 res_code = 2;
inline bool PrtChargeResult::has_res_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrtChargeResult::set_has_res_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrtChargeResult::clear_has_res_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrtChargeResult::clear_res_code() {
  res_code_ = 0;
  clear_has_res_code();
}
inline ::google::protobuf::int32 PrtChargeResult::res_code() const {
  return res_code_;
}
inline void PrtChargeResult::set_res_code(::google::protobuf::int32 value) {
  set_has_res_code();
  res_code_ = value;
}

// optional .isafetec.CHARGE_FOR charge_for = 3;
inline bool PrtChargeResult::has_charge_for() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrtChargeResult::set_has_charge_for() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrtChargeResult::clear_has_charge_for() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrtChargeResult::clear_charge_for() {
  charge_for_ = 0;
  clear_has_charge_for();
}
inline isafetec::CHARGE_FOR PrtChargeResult::charge_for() const {
  return static_cast< isafetec::CHARGE_FOR >(charge_for_);
}
inline void PrtChargeResult::set_charge_for(isafetec::CHARGE_FOR value) {
  GOOGLE_DCHECK(isafetec::CHARGE_FOR_IsValid(value));
  set_has_charge_for();
  charge_for_ = value;
}

// optional .isafetec.PrtStationCheckUserResult res = 4;
inline bool PrtChargeResult::has_res() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrtChargeResult::set_has_res() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrtChargeResult::clear_has_res() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrtChargeResult::clear_res() {
  if (res_ != NULL) res_->::isafetec::PrtStationCheckUserResult::Clear();
  clear_has_res();
}
inline const ::isafetec::PrtStationCheckUserResult& PrtChargeResult::res() const {
  return res_ != NULL ? *res_ : *default_instance_->res_;
}
inline ::isafetec::PrtStationCheckUserResult* PrtChargeResult::mutable_res() {
  set_has_res();
  if (res_ == NULL) res_ = new ::isafetec::PrtStationCheckUserResult;
  return res_;
}
inline ::isafetec::PrtStationCheckUserResult* PrtChargeResult::release_res() {
  clear_has_res();
  ::isafetec::PrtStationCheckUserResult* temp = res_;
  res_ = NULL;
  return temp;
}

// optional string file_path = 5;
inline bool PrtChargeResult::has_file_path() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PrtChargeResult::set_has_file_path() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PrtChargeResult::clear_has_file_path() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PrtChargeResult::clear_file_path() {
  if (file_path_ != &::google::protobuf::internal::kEmptyString) {
    file_path_->clear();
  }
  clear_has_file_path();
}
inline const ::std::string& PrtChargeResult::file_path() const {
  return *file_path_;
}
inline void PrtChargeResult::set_file_path(const ::std::string& value) {
  set_has_file_path();
  if (file_path_ == &::google::protobuf::internal::kEmptyString) {
    file_path_ = new ::std::string;
  }
  file_path_->assign(value);
}
inline void PrtChargeResult::set_file_path(const char* value) {
  set_has_file_path();
  if (file_path_ == &::google::protobuf::internal::kEmptyString) {
    file_path_ = new ::std::string;
  }
  file_path_->assign(value);
}
inline void PrtChargeResult::set_file_path(const char* value, size_t size) {
  set_has_file_path();
  if (file_path_ == &::google::protobuf::internal::kEmptyString) {
    file_path_ = new ::std::string;
  }
  file_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtChargeResult::mutable_file_path() {
  set_has_file_path();
  if (file_path_ == &::google::protobuf::internal::kEmptyString) {
    file_path_ = new ::std::string;
  }
  return file_path_;
}
inline ::std::string* PrtChargeResult::release_file_path() {
  clear_has_file_path();
  if (file_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = file_path_;
    file_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string other_info = 6;
inline bool PrtChargeResult::has_other_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PrtChargeResult::set_has_other_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PrtChargeResult::clear_has_other_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PrtChargeResult::clear_other_info() {
  if (other_info_ != &::google::protobuf::internal::kEmptyString) {
    other_info_->clear();
  }
  clear_has_other_info();
}
inline const ::std::string& PrtChargeResult::other_info() const {
  return *other_info_;
}
inline void PrtChargeResult::set_other_info(const ::std::string& value) {
  set_has_other_info();
  if (other_info_ == &::google::protobuf::internal::kEmptyString) {
    other_info_ = new ::std::string;
  }
  other_info_->assign(value);
}
inline void PrtChargeResult::set_other_info(const char* value) {
  set_has_other_info();
  if (other_info_ == &::google::protobuf::internal::kEmptyString) {
    other_info_ = new ::std::string;
  }
  other_info_->assign(value);
}
inline void PrtChargeResult::set_other_info(const char* value, size_t size) {
  set_has_other_info();
  if (other_info_ == &::google::protobuf::internal::kEmptyString) {
    other_info_ = new ::std::string;
  }
  other_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtChargeResult::mutable_other_info() {
  set_has_other_info();
  if (other_info_ == &::google::protobuf::internal::kEmptyString) {
    other_info_ = new ::std::string;
  }
  return other_info_;
}
inline ::std::string* PrtChargeResult::release_other_info() {
  clear_has_other_info();
  if (other_info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = other_info_;
    other_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PrtCopyCharge

// optional int32 prt_id = 1;
inline bool PrtCopyCharge::has_prt_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrtCopyCharge::set_has_prt_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrtCopyCharge::clear_has_prt_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrtCopyCharge::clear_prt_id() {
  prt_id_ = 0;
  clear_has_prt_id();
}
inline ::google::protobuf::int32 PrtCopyCharge::prt_id() const {
  return prt_id_;
}
inline void PrtCopyCharge::set_prt_id(::google::protobuf::int32 value) {
  set_has_prt_id();
  prt_id_ = value;
}

// optional int32 user_id = 2;
inline bool PrtCopyCharge::has_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrtCopyCharge::set_has_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrtCopyCharge::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrtCopyCharge::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 PrtCopyCharge::user_id() const {
  return user_id_;
}
inline void PrtCopyCharge::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional .isafetec.JOB_PRICE_TYPE price_type = 3;
inline bool PrtCopyCharge::has_price_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrtCopyCharge::set_has_price_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrtCopyCharge::clear_has_price_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrtCopyCharge::clear_price_type() {
  price_type_ = 0;
  clear_has_price_type();
}
inline isafetec::JOB_PRICE_TYPE PrtCopyCharge::price_type() const {
  return static_cast< isafetec::JOB_PRICE_TYPE >(price_type_);
}
inline void PrtCopyCharge::set_price_type(isafetec::JOB_PRICE_TYPE value) {
  GOOGLE_DCHECK(isafetec::JOB_PRICE_TYPE_IsValid(value));
  set_has_price_type();
  price_type_ = value;
}

// optional double price = 4;
inline bool PrtCopyCharge::has_price() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrtCopyCharge::set_has_price() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrtCopyCharge::clear_has_price() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrtCopyCharge::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline double PrtCopyCharge::price() const {
  return price_;
}
inline void PrtCopyCharge::set_price(double value) {
  set_has_price();
  price_ = value;
}

// optional string page_type = 5;
inline bool PrtCopyCharge::has_page_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PrtCopyCharge::set_has_page_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PrtCopyCharge::clear_has_page_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PrtCopyCharge::clear_page_type() {
  if (page_type_ != &::google::protobuf::internal::kEmptyString) {
    page_type_->clear();
  }
  clear_has_page_type();
}
inline const ::std::string& PrtCopyCharge::page_type() const {
  return *page_type_;
}
inline void PrtCopyCharge::set_page_type(const ::std::string& value) {
  set_has_page_type();
  if (page_type_ == &::google::protobuf::internal::kEmptyString) {
    page_type_ = new ::std::string;
  }
  page_type_->assign(value);
}
inline void PrtCopyCharge::set_page_type(const char* value) {
  set_has_page_type();
  if (page_type_ == &::google::protobuf::internal::kEmptyString) {
    page_type_ = new ::std::string;
  }
  page_type_->assign(value);
}
inline void PrtCopyCharge::set_page_type(const char* value, size_t size) {
  set_has_page_type();
  if (page_type_ == &::google::protobuf::internal::kEmptyString) {
    page_type_ = new ::std::string;
  }
  page_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtCopyCharge::mutable_page_type() {
  set_has_page_type();
  if (page_type_ == &::google::protobuf::internal::kEmptyString) {
    page_type_ = new ::std::string;
  }
  return page_type_;
}
inline ::std::string* PrtCopyCharge::release_page_type() {
  clear_has_page_type();
  if (page_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = page_type_;
    page_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 count = 6;
inline bool PrtCopyCharge::has_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PrtCopyCharge::set_has_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PrtCopyCharge::clear_has_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PrtCopyCharge::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 PrtCopyCharge::count() const {
  return count_;
}
inline void PrtCopyCharge::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// optional int32 color = 7;
inline bool PrtCopyCharge::has_color() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PrtCopyCharge::set_has_color() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PrtCopyCharge::clear_has_color() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PrtCopyCharge::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::google::protobuf::int32 PrtCopyCharge::color() const {
  return color_;
}
inline void PrtCopyCharge::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
}

// optional double time = 8;
inline bool PrtCopyCharge::has_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PrtCopyCharge::set_has_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PrtCopyCharge::clear_has_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PrtCopyCharge::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline double PrtCopyCharge::time() const {
  return time_;
}
inline void PrtCopyCharge::set_time(double value) {
  set_has_time();
  time_ = value;
}

// optional double should_spend = 9;
inline bool PrtCopyCharge::has_should_spend() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PrtCopyCharge::set_has_should_spend() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PrtCopyCharge::clear_has_should_spend() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PrtCopyCharge::clear_should_spend() {
  should_spend_ = 0;
  clear_has_should_spend();
}
inline double PrtCopyCharge::should_spend() const {
  return should_spend_;
}
inline void PrtCopyCharge::set_should_spend(double value) {
  set_has_should_spend();
  should_spend_ = value;
}

// optional double real_spend = 10;
inline bool PrtCopyCharge::has_real_spend() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PrtCopyCharge::set_has_real_spend() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PrtCopyCharge::clear_has_real_spend() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PrtCopyCharge::clear_real_spend() {
  real_spend_ = 0;
  clear_has_real_spend();
}
inline double PrtCopyCharge::real_spend() const {
  return real_spend_;
}
inline void PrtCopyCharge::set_real_spend(double value) {
  set_has_real_spend();
  real_spend_ = value;
}

// optional .isafetec.RechargeFromCard card = 15;
inline bool PrtCopyCharge::has_card() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PrtCopyCharge::set_has_card() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PrtCopyCharge::clear_has_card() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PrtCopyCharge::clear_card() {
  if (card_ != NULL) card_->::isafetec::RechargeFromCard::Clear();
  clear_has_card();
}
inline const ::isafetec::RechargeFromCard& PrtCopyCharge::card() const {
  return card_ != NULL ? *card_ : *default_instance_->card_;
}
inline ::isafetec::RechargeFromCard* PrtCopyCharge::mutable_card() {
  set_has_card();
  if (card_ == NULL) card_ = new ::isafetec::RechargeFromCard;
  return card_;
}
inline ::isafetec::RechargeFromCard* PrtCopyCharge::release_card() {
  clear_has_card();
  ::isafetec::RechargeFromCard* temp = card_;
  card_ = NULL;
  return temp;
}

// optional .isafetec.RechargeFromCardErr err = 16;
inline bool PrtCopyCharge::has_err() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PrtCopyCharge::set_has_err() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PrtCopyCharge::clear_has_err() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PrtCopyCharge::clear_err() {
  if (err_ != NULL) err_->::isafetec::RechargeFromCardErr::Clear();
  clear_has_err();
}
inline const ::isafetec::RechargeFromCardErr& PrtCopyCharge::err() const {
  return err_ != NULL ? *err_ : *default_instance_->err_;
}
inline ::isafetec::RechargeFromCardErr* PrtCopyCharge::mutable_err() {
  set_has_err();
  if (err_ == NULL) err_ = new ::isafetec::RechargeFromCardErr;
  return err_;
}
inline ::isafetec::RechargeFromCardErr* PrtCopyCharge::release_err() {
  clear_has_err();
  ::isafetec::RechargeFromCardErr* temp = err_;
  err_ = NULL;
  return temp;
}

// optional string seed = 17;
inline bool PrtCopyCharge::has_seed() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PrtCopyCharge::set_has_seed() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PrtCopyCharge::clear_has_seed() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PrtCopyCharge::clear_seed() {
  if (seed_ != &::google::protobuf::internal::kEmptyString) {
    seed_->clear();
  }
  clear_has_seed();
}
inline const ::std::string& PrtCopyCharge::seed() const {
  return *seed_;
}
inline void PrtCopyCharge::set_seed(const ::std::string& value) {
  set_has_seed();
  if (seed_ == &::google::protobuf::internal::kEmptyString) {
    seed_ = new ::std::string;
  }
  seed_->assign(value);
}
inline void PrtCopyCharge::set_seed(const char* value) {
  set_has_seed();
  if (seed_ == &::google::protobuf::internal::kEmptyString) {
    seed_ = new ::std::string;
  }
  seed_->assign(value);
}
inline void PrtCopyCharge::set_seed(const char* value, size_t size) {
  set_has_seed();
  if (seed_ == &::google::protobuf::internal::kEmptyString) {
    seed_ = new ::std::string;
  }
  seed_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtCopyCharge::mutable_seed() {
  set_has_seed();
  if (seed_ == &::google::protobuf::internal::kEmptyString) {
    seed_ = new ::std::string;
  }
  return seed_;
}
inline ::std::string* PrtCopyCharge::release_seed() {
  clear_has_seed();
  if (seed_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = seed_;
    seed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 job_id = 18;
inline bool PrtCopyCharge::has_job_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PrtCopyCharge::set_has_job_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PrtCopyCharge::clear_has_job_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PrtCopyCharge::clear_job_id() {
  job_id_ = 0;
  clear_has_job_id();
}
inline ::google::protobuf::int32 PrtCopyCharge::job_id() const {
  return job_id_;
}
inline void PrtCopyCharge::set_job_id(::google::protobuf::int32 value) {
  set_has_job_id();
  job_id_ = value;
}

// -------------------------------------------------------------------

// PrtScanCharge

// optional string guid = 1;
inline bool PrtScanCharge::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrtScanCharge::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrtScanCharge::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrtScanCharge::clear_guid() {
  if (guid_ != &::google::protobuf::internal::kEmptyString) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& PrtScanCharge::guid() const {
  return *guid_;
}
inline void PrtScanCharge::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
}
inline void PrtScanCharge::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
}
inline void PrtScanCharge::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtScanCharge::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  return guid_;
}
inline ::std::string* PrtScanCharge::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 prt_id = 2;
inline bool PrtScanCharge::has_prt_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrtScanCharge::set_has_prt_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrtScanCharge::clear_has_prt_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrtScanCharge::clear_prt_id() {
  prt_id_ = 0;
  clear_has_prt_id();
}
inline ::google::protobuf::int32 PrtScanCharge::prt_id() const {
  return prt_id_;
}
inline void PrtScanCharge::set_prt_id(::google::protobuf::int32 value) {
  set_has_prt_id();
  prt_id_ = value;
}

// optional int32 user_id = 3;
inline bool PrtScanCharge::has_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrtScanCharge::set_has_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrtScanCharge::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrtScanCharge::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 PrtScanCharge::user_id() const {
  return user_id_;
}
inline void PrtScanCharge::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional .isafetec.JOB_PRICE_TYPE price_type = 4;
inline bool PrtScanCharge::has_price_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrtScanCharge::set_has_price_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrtScanCharge::clear_has_price_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrtScanCharge::clear_price_type() {
  price_type_ = 0;
  clear_has_price_type();
}
inline isafetec::JOB_PRICE_TYPE PrtScanCharge::price_type() const {
  return static_cast< isafetec::JOB_PRICE_TYPE >(price_type_);
}
inline void PrtScanCharge::set_price_type(isafetec::JOB_PRICE_TYPE value) {
  GOOGLE_DCHECK(isafetec::JOB_PRICE_TYPE_IsValid(value));
  set_has_price_type();
  price_type_ = value;
}

// optional double price = 5;
inline bool PrtScanCharge::has_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PrtScanCharge::set_has_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PrtScanCharge::clear_has_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PrtScanCharge::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline double PrtScanCharge::price() const {
  return price_;
}
inline void PrtScanCharge::set_price(double value) {
  set_has_price();
  price_ = value;
}

// optional int32 size = 7;
inline bool PrtScanCharge::has_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PrtScanCharge::set_has_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PrtScanCharge::clear_has_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PrtScanCharge::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 PrtScanCharge::size() const {
  return size_;
}
inline void PrtScanCharge::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
}

// optional int32 color = 8;
inline bool PrtScanCharge::has_color() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PrtScanCharge::set_has_color() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PrtScanCharge::clear_has_color() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PrtScanCharge::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::google::protobuf::int32 PrtScanCharge::color() const {
  return color_;
}
inline void PrtScanCharge::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
}

// optional string path = 9;
inline bool PrtScanCharge::has_path() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PrtScanCharge::set_has_path() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PrtScanCharge::clear_has_path() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PrtScanCharge::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& PrtScanCharge::path() const {
  return *path_;
}
inline void PrtScanCharge::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void PrtScanCharge::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void PrtScanCharge::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtScanCharge::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* PrtScanCharge::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string dir = 10;
inline bool PrtScanCharge::has_dir() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PrtScanCharge::set_has_dir() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PrtScanCharge::clear_has_dir() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PrtScanCharge::clear_dir() {
  if (dir_ != &::google::protobuf::internal::kEmptyString) {
    dir_->clear();
  }
  clear_has_dir();
}
inline const ::std::string& PrtScanCharge::dir() const {
  return *dir_;
}
inline void PrtScanCharge::set_dir(const ::std::string& value) {
  set_has_dir();
  if (dir_ == &::google::protobuf::internal::kEmptyString) {
    dir_ = new ::std::string;
  }
  dir_->assign(value);
}
inline void PrtScanCharge::set_dir(const char* value) {
  set_has_dir();
  if (dir_ == &::google::protobuf::internal::kEmptyString) {
    dir_ = new ::std::string;
  }
  dir_->assign(value);
}
inline void PrtScanCharge::set_dir(const char* value, size_t size) {
  set_has_dir();
  if (dir_ == &::google::protobuf::internal::kEmptyString) {
    dir_ = new ::std::string;
  }
  dir_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtScanCharge::mutable_dir() {
  set_has_dir();
  if (dir_ == &::google::protobuf::internal::kEmptyString) {
    dir_ = new ::std::string;
  }
  return dir_;
}
inline ::std::string* PrtScanCharge::release_dir() {
  clear_has_dir();
  if (dir_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dir_;
    dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string http_dir = 14;
inline bool PrtScanCharge::has_http_dir() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PrtScanCharge::set_has_http_dir() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PrtScanCharge::clear_has_http_dir() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PrtScanCharge::clear_http_dir() {
  if (http_dir_ != &::google::protobuf::internal::kEmptyString) {
    http_dir_->clear();
  }
  clear_has_http_dir();
}
inline const ::std::string& PrtScanCharge::http_dir() const {
  return *http_dir_;
}
inline void PrtScanCharge::set_http_dir(const ::std::string& value) {
  set_has_http_dir();
  if (http_dir_ == &::google::protobuf::internal::kEmptyString) {
    http_dir_ = new ::std::string;
  }
  http_dir_->assign(value);
}
inline void PrtScanCharge::set_http_dir(const char* value) {
  set_has_http_dir();
  if (http_dir_ == &::google::protobuf::internal::kEmptyString) {
    http_dir_ = new ::std::string;
  }
  http_dir_->assign(value);
}
inline void PrtScanCharge::set_http_dir(const char* value, size_t size) {
  set_has_http_dir();
  if (http_dir_ == &::google::protobuf::internal::kEmptyString) {
    http_dir_ = new ::std::string;
  }
  http_dir_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtScanCharge::mutable_http_dir() {
  set_has_http_dir();
  if (http_dir_ == &::google::protobuf::internal::kEmptyString) {
    http_dir_ = new ::std::string;
  }
  return http_dir_;
}
inline ::std::string* PrtScanCharge::release_http_dir() {
  clear_has_http_dir();
  if (http_dir_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = http_dir_;
    http_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional double time = 11;
inline bool PrtScanCharge::has_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PrtScanCharge::set_has_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PrtScanCharge::clear_has_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PrtScanCharge::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline double PrtScanCharge::time() const {
  return time_;
}
inline void PrtScanCharge::set_time(double value) {
  set_has_time();
  time_ = value;
}

// optional double should_spend = 12;
inline bool PrtScanCharge::has_should_spend() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PrtScanCharge::set_has_should_spend() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PrtScanCharge::clear_has_should_spend() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PrtScanCharge::clear_should_spend() {
  should_spend_ = 0;
  clear_has_should_spend();
}
inline double PrtScanCharge::should_spend() const {
  return should_spend_;
}
inline void PrtScanCharge::set_should_spend(double value) {
  set_has_should_spend();
  should_spend_ = value;
}

// optional double real_spend = 13;
inline bool PrtScanCharge::has_real_spend() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PrtScanCharge::set_has_real_spend() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PrtScanCharge::clear_has_real_spend() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PrtScanCharge::clear_real_spend() {
  real_spend_ = 0;
  clear_has_real_spend();
}
inline double PrtScanCharge::real_spend() const {
  return real_spend_;
}
inline void PrtScanCharge::set_real_spend(double value) {
  set_has_real_spend();
  real_spend_ = value;
}

// optional .isafetec.RechargeFromCard card = 15;
inline bool PrtScanCharge::has_card() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PrtScanCharge::set_has_card() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PrtScanCharge::clear_has_card() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PrtScanCharge::clear_card() {
  if (card_ != NULL) card_->::isafetec::RechargeFromCard::Clear();
  clear_has_card();
}
inline const ::isafetec::RechargeFromCard& PrtScanCharge::card() const {
  return card_ != NULL ? *card_ : *default_instance_->card_;
}
inline ::isafetec::RechargeFromCard* PrtScanCharge::mutable_card() {
  set_has_card();
  if (card_ == NULL) card_ = new ::isafetec::RechargeFromCard;
  return card_;
}
inline ::isafetec::RechargeFromCard* PrtScanCharge::release_card() {
  clear_has_card();
  ::isafetec::RechargeFromCard* temp = card_;
  card_ = NULL;
  return temp;
}

// optional .isafetec.RechargeFromCardErr err = 16;
inline bool PrtScanCharge::has_err() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PrtScanCharge::set_has_err() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PrtScanCharge::clear_has_err() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PrtScanCharge::clear_err() {
  if (err_ != NULL) err_->::isafetec::RechargeFromCardErr::Clear();
  clear_has_err();
}
inline const ::isafetec::RechargeFromCardErr& PrtScanCharge::err() const {
  return err_ != NULL ? *err_ : *default_instance_->err_;
}
inline ::isafetec::RechargeFromCardErr* PrtScanCharge::mutable_err() {
  set_has_err();
  if (err_ == NULL) err_ = new ::isafetec::RechargeFromCardErr;
  return err_;
}
inline ::isafetec::RechargeFromCardErr* PrtScanCharge::release_err() {
  clear_has_err();
  ::isafetec::RechargeFromCardErr* temp = err_;
  err_ = NULL;
  return temp;
}

// optional string seed = 17;
inline bool PrtScanCharge::has_seed() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PrtScanCharge::set_has_seed() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PrtScanCharge::clear_has_seed() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PrtScanCharge::clear_seed() {
  if (seed_ != &::google::protobuf::internal::kEmptyString) {
    seed_->clear();
  }
  clear_has_seed();
}
inline const ::std::string& PrtScanCharge::seed() const {
  return *seed_;
}
inline void PrtScanCharge::set_seed(const ::std::string& value) {
  set_has_seed();
  if (seed_ == &::google::protobuf::internal::kEmptyString) {
    seed_ = new ::std::string;
  }
  seed_->assign(value);
}
inline void PrtScanCharge::set_seed(const char* value) {
  set_has_seed();
  if (seed_ == &::google::protobuf::internal::kEmptyString) {
    seed_ = new ::std::string;
  }
  seed_->assign(value);
}
inline void PrtScanCharge::set_seed(const char* value, size_t size) {
  set_has_seed();
  if (seed_ == &::google::protobuf::internal::kEmptyString) {
    seed_ = new ::std::string;
  }
  seed_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtScanCharge::mutable_seed() {
  set_has_seed();
  if (seed_ == &::google::protobuf::internal::kEmptyString) {
    seed_ = new ::std::string;
  }
  return seed_;
}
inline ::std::string* PrtScanCharge::release_seed() {
  clear_has_seed();
  if (seed_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = seed_;
    seed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 job_id = 18;
inline bool PrtScanCharge::has_job_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PrtScanCharge::set_has_job_id() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PrtScanCharge::clear_has_job_id() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PrtScanCharge::clear_job_id() {
  job_id_ = 0;
  clear_has_job_id();
}
inline ::google::protobuf::int32 PrtScanCharge::job_id() const {
  return job_id_;
}
inline void PrtScanCharge::set_job_id(::google::protobuf::int32 value) {
  set_has_job_id();
  job_id_ = value;
}

// optional int32 page_count = 19;
inline bool PrtScanCharge::has_page_count() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PrtScanCharge::set_has_page_count() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PrtScanCharge::clear_has_page_count() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PrtScanCharge::clear_page_count() {
  page_count_ = 0;
  clear_has_page_count();
}
inline ::google::protobuf::int32 PrtScanCharge::page_count() const {
  return page_count_;
}
inline void PrtScanCharge::set_page_count(::google::protobuf::int32 value) {
  set_has_page_count();
  page_count_ = value;
}

// optional .isafetec.ScanChargeType charge_type = 20;
inline bool PrtScanCharge::has_charge_type() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PrtScanCharge::set_has_charge_type() {
  _has_bits_[0] |= 0x00040000u;
}
inline void PrtScanCharge::clear_has_charge_type() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void PrtScanCharge::clear_charge_type() {
  charge_type_ = 0;
  clear_has_charge_type();
}
inline isafetec::ScanChargeType PrtScanCharge::charge_type() const {
  return static_cast< isafetec::ScanChargeType >(charge_type_);
}
inline void PrtScanCharge::set_charge_type(isafetec::ScanChargeType value) {
  GOOGLE_DCHECK(isafetec::ScanChargeType_IsValid(value));
  set_has_charge_type();
  charge_type_ = value;
}

// -------------------------------------------------------------------

// PrtStationCharge

// optional string guid = 1;
inline bool PrtStationCharge::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrtStationCharge::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrtStationCharge::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrtStationCharge::clear_guid() {
  if (guid_ != &::google::protobuf::internal::kEmptyString) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& PrtStationCharge::guid() const {
  return *guid_;
}
inline void PrtStationCharge::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
}
inline void PrtStationCharge::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
}
inline void PrtStationCharge::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtStationCharge::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  return guid_;
}
inline ::std::string* PrtStationCharge::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 job_id = 2;
inline bool PrtStationCharge::has_job_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrtStationCharge::set_has_job_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrtStationCharge::clear_has_job_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrtStationCharge::clear_job_id() {
  job_id_ = 0;
  clear_has_job_id();
}
inline ::google::protobuf::int32 PrtStationCharge::job_id() const {
  return job_id_;
}
inline void PrtStationCharge::set_job_id(::google::protobuf::int32 value) {
  set_has_job_id();
  job_id_ = value;
}

// optional int32 prt_id = 3;
inline bool PrtStationCharge::has_prt_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrtStationCharge::set_has_prt_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrtStationCharge::clear_has_prt_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrtStationCharge::clear_prt_id() {
  prt_id_ = 0;
  clear_has_prt_id();
}
inline ::google::protobuf::int32 PrtStationCharge::prt_id() const {
  return prt_id_;
}
inline void PrtStationCharge::set_prt_id(::google::protobuf::int32 value) {
  set_has_prt_id();
  prt_id_ = value;
}

// optional int32 user_id = 4;
inline bool PrtStationCharge::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrtStationCharge::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrtStationCharge::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrtStationCharge::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 PrtStationCharge::user_id() const {
  return user_id_;
}
inline void PrtStationCharge::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional int32 color = 5;
inline bool PrtStationCharge::has_color() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PrtStationCharge::set_has_color() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PrtStationCharge::clear_has_color() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PrtStationCharge::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::google::protobuf::int32 PrtStationCharge::color() const {
  return color_;
}
inline void PrtStationCharge::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
}

// optional string page_type = 6;
inline bool PrtStationCharge::has_page_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PrtStationCharge::set_has_page_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PrtStationCharge::clear_has_page_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PrtStationCharge::clear_page_type() {
  if (page_type_ != &::google::protobuf::internal::kEmptyString) {
    page_type_->clear();
  }
  clear_has_page_type();
}
inline const ::std::string& PrtStationCharge::page_type() const {
  return *page_type_;
}
inline void PrtStationCharge::set_page_type(const ::std::string& value) {
  set_has_page_type();
  if (page_type_ == &::google::protobuf::internal::kEmptyString) {
    page_type_ = new ::std::string;
  }
  page_type_->assign(value);
}
inline void PrtStationCharge::set_page_type(const char* value) {
  set_has_page_type();
  if (page_type_ == &::google::protobuf::internal::kEmptyString) {
    page_type_ = new ::std::string;
  }
  page_type_->assign(value);
}
inline void PrtStationCharge::set_page_type(const char* value, size_t size) {
  set_has_page_type();
  if (page_type_ == &::google::protobuf::internal::kEmptyString) {
    page_type_ = new ::std::string;
  }
  page_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtStationCharge::mutable_page_type() {
  set_has_page_type();
  if (page_type_ == &::google::protobuf::internal::kEmptyString) {
    page_type_ = new ::std::string;
  }
  return page_type_;
}
inline ::std::string* PrtStationCharge::release_page_type() {
  clear_has_page_type();
  if (page_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = page_type_;
    page_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .isafetec.JOB_PRICE_TYPE price_type = 7;
inline bool PrtStationCharge::has_price_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PrtStationCharge::set_has_price_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PrtStationCharge::clear_has_price_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PrtStationCharge::clear_price_type() {
  price_type_ = 0;
  clear_has_price_type();
}
inline isafetec::JOB_PRICE_TYPE PrtStationCharge::price_type() const {
  return static_cast< isafetec::JOB_PRICE_TYPE >(price_type_);
}
inline void PrtStationCharge::set_price_type(isafetec::JOB_PRICE_TYPE value) {
  GOOGLE_DCHECK(isafetec::JOB_PRICE_TYPE_IsValid(value));
  set_has_price_type();
  price_type_ = value;
}

// optional double price = 8;
inline bool PrtStationCharge::has_price() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PrtStationCharge::set_has_price() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PrtStationCharge::clear_has_price() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PrtStationCharge::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline double PrtStationCharge::price() const {
  return price_;
}
inline void PrtStationCharge::set_price(double value) {
  set_has_price();
  price_ = value;
}

// optional int32 total_page_count = 9;
inline bool PrtStationCharge::has_total_page_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PrtStationCharge::set_has_total_page_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PrtStationCharge::clear_has_total_page_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PrtStationCharge::clear_total_page_count() {
  total_page_count_ = 0;
  clear_has_total_page_count();
}
inline ::google::protobuf::int32 PrtStationCharge::total_page_count() const {
  return total_page_count_;
}
inline void PrtStationCharge::set_total_page_count(::google::protobuf::int32 value) {
  set_has_total_page_count();
  total_page_count_ = value;
}

// optional int32 printed_page_count = 10;
inline bool PrtStationCharge::has_printed_page_count() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PrtStationCharge::set_has_printed_page_count() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PrtStationCharge::clear_has_printed_page_count() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PrtStationCharge::clear_printed_page_count() {
  printed_page_count_ = 0;
  clear_has_printed_page_count();
}
inline ::google::protobuf::int32 PrtStationCharge::printed_page_count() const {
  return printed_page_count_;
}
inline void PrtStationCharge::set_printed_page_count(::google::protobuf::int32 value) {
  set_has_printed_page_count();
  printed_page_count_ = value;
}

// optional int32 printed_copies = 11;
inline bool PrtStationCharge::has_printed_copies() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PrtStationCharge::set_has_printed_copies() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PrtStationCharge::clear_has_printed_copies() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PrtStationCharge::clear_printed_copies() {
  printed_copies_ = 0;
  clear_has_printed_copies();
}
inline ::google::protobuf::int32 PrtStationCharge::printed_copies() const {
  return printed_copies_;
}
inline void PrtStationCharge::set_printed_copies(::google::protobuf::int32 value) {
  set_has_printed_copies();
  printed_copies_ = value;
}

// optional int32 printed_from = 12;
inline bool PrtStationCharge::has_printed_from() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PrtStationCharge::set_has_printed_from() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PrtStationCharge::clear_has_printed_from() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PrtStationCharge::clear_printed_from() {
  printed_from_ = 0;
  clear_has_printed_from();
}
inline ::google::protobuf::int32 PrtStationCharge::printed_from() const {
  return printed_from_;
}
inline void PrtStationCharge::set_printed_from(::google::protobuf::int32 value) {
  set_has_printed_from();
  printed_from_ = value;
}

// optional int32 printed_to = 13;
inline bool PrtStationCharge::has_printed_to() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PrtStationCharge::set_has_printed_to() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PrtStationCharge::clear_has_printed_to() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PrtStationCharge::clear_printed_to() {
  printed_to_ = 0;
  clear_has_printed_to();
}
inline ::google::protobuf::int32 PrtStationCharge::printed_to() const {
  return printed_to_;
}
inline void PrtStationCharge::set_printed_to(::google::protobuf::int32 value) {
  set_has_printed_to();
  printed_to_ = value;
}

// optional double should_spend = 14;
inline bool PrtStationCharge::has_should_spend() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PrtStationCharge::set_has_should_spend() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PrtStationCharge::clear_has_should_spend() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PrtStationCharge::clear_should_spend() {
  should_spend_ = 0;
  clear_has_should_spend();
}
inline double PrtStationCharge::should_spend() const {
  return should_spend_;
}
inline void PrtStationCharge::set_should_spend(double value) {
  set_has_should_spend();
  should_spend_ = value;
}

// optional double real_spend = 15;
inline bool PrtStationCharge::has_real_spend() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PrtStationCharge::set_has_real_spend() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PrtStationCharge::clear_has_real_spend() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PrtStationCharge::clear_real_spend() {
  real_spend_ = 0;
  clear_has_real_spend();
}
inline double PrtStationCharge::real_spend() const {
  return real_spend_;
}
inline void PrtStationCharge::set_real_spend(double value) {
  set_has_real_spend();
  real_spend_ = value;
}

// optional double printed_time = 16;
inline bool PrtStationCharge::has_printed_time() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PrtStationCharge::set_has_printed_time() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PrtStationCharge::clear_has_printed_time() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PrtStationCharge::clear_printed_time() {
  printed_time_ = 0;
  clear_has_printed_time();
}
inline double PrtStationCharge::printed_time() const {
  return printed_time_;
}
inline void PrtStationCharge::set_printed_time(double value) {
  set_has_printed_time();
  printed_time_ = value;
}

// optional int32 project_id = 17;
inline bool PrtStationCharge::has_project_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PrtStationCharge::set_has_project_id() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PrtStationCharge::clear_has_project_id() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PrtStationCharge::clear_project_id() {
  project_id_ = 0;
  clear_has_project_id();
}
inline ::google::protobuf::int32 PrtStationCharge::project_id() const {
  return project_id_;
}
inline void PrtStationCharge::set_project_id(::google::protobuf::int32 value) {
  set_has_project_id();
  project_id_ = value;
}

// optional string project_name = 18;
inline bool PrtStationCharge::has_project_name() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PrtStationCharge::set_has_project_name() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PrtStationCharge::clear_has_project_name() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PrtStationCharge::clear_project_name() {
  if (project_name_ != &::google::protobuf::internal::kEmptyString) {
    project_name_->clear();
  }
  clear_has_project_name();
}
inline const ::std::string& PrtStationCharge::project_name() const {
  return *project_name_;
}
inline void PrtStationCharge::set_project_name(const ::std::string& value) {
  set_has_project_name();
  if (project_name_ == &::google::protobuf::internal::kEmptyString) {
    project_name_ = new ::std::string;
  }
  project_name_->assign(value);
}
inline void PrtStationCharge::set_project_name(const char* value) {
  set_has_project_name();
  if (project_name_ == &::google::protobuf::internal::kEmptyString) {
    project_name_ = new ::std::string;
  }
  project_name_->assign(value);
}
inline void PrtStationCharge::set_project_name(const char* value, size_t size) {
  set_has_project_name();
  if (project_name_ == &::google::protobuf::internal::kEmptyString) {
    project_name_ = new ::std::string;
  }
  project_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtStationCharge::mutable_project_name() {
  set_has_project_name();
  if (project_name_ == &::google::protobuf::internal::kEmptyString) {
    project_name_ = new ::std::string;
  }
  return project_name_;
}
inline ::std::string* PrtStationCharge::release_project_name() {
  clear_has_project_name();
  if (project_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = project_name_;
    project_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .isafetec.PRT_REQ_JOB_BY job_req_by = 19;
inline bool PrtStationCharge::has_job_req_by() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PrtStationCharge::set_has_job_req_by() {
  _has_bits_[0] |= 0x00040000u;
}
inline void PrtStationCharge::clear_has_job_req_by() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void PrtStationCharge::clear_job_req_by() {
  job_req_by_ = 0;
  clear_has_job_req_by();
}
inline isafetec::PRT_REQ_JOB_BY PrtStationCharge::job_req_by() const {
  return static_cast< isafetec::PRT_REQ_JOB_BY >(job_req_by_);
}
inline void PrtStationCharge::set_job_req_by(isafetec::PRT_REQ_JOB_BY value) {
  GOOGLE_DCHECK(isafetec::PRT_REQ_JOB_BY_IsValid(value));
  set_has_job_req_by();
  job_req_by_ = value;
}

// optional string seed = 20;
inline bool PrtStationCharge::has_seed() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void PrtStationCharge::set_has_seed() {
  _has_bits_[0] |= 0x00080000u;
}
inline void PrtStationCharge::clear_has_seed() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void PrtStationCharge::clear_seed() {
  if (seed_ != &::google::protobuf::internal::kEmptyString) {
    seed_->clear();
  }
  clear_has_seed();
}
inline const ::std::string& PrtStationCharge::seed() const {
  return *seed_;
}
inline void PrtStationCharge::set_seed(const ::std::string& value) {
  set_has_seed();
  if (seed_ == &::google::protobuf::internal::kEmptyString) {
    seed_ = new ::std::string;
  }
  seed_->assign(value);
}
inline void PrtStationCharge::set_seed(const char* value) {
  set_has_seed();
  if (seed_ == &::google::protobuf::internal::kEmptyString) {
    seed_ = new ::std::string;
  }
  seed_->assign(value);
}
inline void PrtStationCharge::set_seed(const char* value, size_t size) {
  set_has_seed();
  if (seed_ == &::google::protobuf::internal::kEmptyString) {
    seed_ = new ::std::string;
  }
  seed_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtStationCharge::mutable_seed() {
  set_has_seed();
  if (seed_ == &::google::protobuf::internal::kEmptyString) {
    seed_ = new ::std::string;
  }
  return seed_;
}
inline ::std::string* PrtStationCharge::release_seed() {
  clear_has_seed();
  if (seed_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = seed_;
    seed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PrtStationChargeOnEveryPage

// optional string guid = 1;
inline bool PrtStationChargeOnEveryPage::has_guid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrtStationChargeOnEveryPage::set_has_guid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrtStationChargeOnEveryPage::clear_has_guid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrtStationChargeOnEveryPage::clear_guid() {
  if (guid_ != &::google::protobuf::internal::kEmptyString) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& PrtStationChargeOnEveryPage::guid() const {
  return *guid_;
}
inline void PrtStationChargeOnEveryPage::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
}
inline void PrtStationChargeOnEveryPage::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
}
inline void PrtStationChargeOnEveryPage::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtStationChargeOnEveryPage::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  return guid_;
}
inline ::std::string* PrtStationChargeOnEveryPage::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 printed_page_count = 2;
inline bool PrtStationChargeOnEveryPage::has_printed_page_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrtStationChargeOnEveryPage::set_has_printed_page_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrtStationChargeOnEveryPage::clear_has_printed_page_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrtStationChargeOnEveryPage::clear_printed_page_count() {
  printed_page_count_ = 0;
  clear_has_printed_page_count();
}
inline ::google::protobuf::int32 PrtStationChargeOnEveryPage::printed_page_count() const {
  return printed_page_count_;
}
inline void PrtStationChargeOnEveryPage::set_printed_page_count(::google::protobuf::int32 value) {
  set_has_printed_page_count();
  printed_page_count_ = value;
}

// optional double real_spend = 3;
inline bool PrtStationChargeOnEveryPage::has_real_spend() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrtStationChargeOnEveryPage::set_has_real_spend() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrtStationChargeOnEveryPage::clear_has_real_spend() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrtStationChargeOnEveryPage::clear_real_spend() {
  real_spend_ = 0;
  clear_has_real_spend();
}
inline double PrtStationChargeOnEveryPage::real_spend() const {
  return real_spend_;
}
inline void PrtStationChargeOnEveryPage::set_real_spend(double value) {
  set_has_real_spend();
  real_spend_ = value;
}

// optional int32 all_printed = 4;
inline bool PrtStationChargeOnEveryPage::has_all_printed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrtStationChargeOnEveryPage::set_has_all_printed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrtStationChargeOnEveryPage::clear_has_all_printed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrtStationChargeOnEveryPage::clear_all_printed() {
  all_printed_ = 0;
  clear_has_all_printed();
}
inline ::google::protobuf::int32 PrtStationChargeOnEveryPage::all_printed() const {
  return all_printed_;
}
inline void PrtStationChargeOnEveryPage::set_all_printed(::google::protobuf::int32 value) {
  set_has_all_printed();
  all_printed_ = value;
}

// optional int32 user_id = 5;
inline bool PrtStationChargeOnEveryPage::has_user_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PrtStationChargeOnEveryPage::set_has_user_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PrtStationChargeOnEveryPage::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PrtStationChargeOnEveryPage::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 PrtStationChargeOnEveryPage::user_id() const {
  return user_id_;
}
inline void PrtStationChargeOnEveryPage::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional .isafetec.PRT_REQ_JOB_BY job_req_by = 6;
inline bool PrtStationChargeOnEveryPage::has_job_req_by() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PrtStationChargeOnEveryPage::set_has_job_req_by() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PrtStationChargeOnEveryPage::clear_has_job_req_by() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PrtStationChargeOnEveryPage::clear_job_req_by() {
  job_req_by_ = 0;
  clear_has_job_req_by();
}
inline isafetec::PRT_REQ_JOB_BY PrtStationChargeOnEveryPage::job_req_by() const {
  return static_cast< isafetec::PRT_REQ_JOB_BY >(job_req_by_);
}
inline void PrtStationChargeOnEveryPage::set_job_req_by(isafetec::PRT_REQ_JOB_BY value) {
  GOOGLE_DCHECK(isafetec::PRT_REQ_JOB_BY_IsValid(value));
  set_has_job_req_by();
  job_req_by_ = value;
}

// optional int32 job_id = 7;
inline bool PrtStationChargeOnEveryPage::has_job_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PrtStationChargeOnEveryPage::set_has_job_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PrtStationChargeOnEveryPage::clear_has_job_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PrtStationChargeOnEveryPage::clear_job_id() {
  job_id_ = 0;
  clear_has_job_id();
}
inline ::google::protobuf::int32 PrtStationChargeOnEveryPage::job_id() const {
  return job_id_;
}
inline void PrtStationChargeOnEveryPage::set_job_id(::google::protobuf::int32 value) {
  set_has_job_id();
  job_id_ = value;
}

// optional .isafetec.RechargeFromCard card = 15;
inline bool PrtStationChargeOnEveryPage::has_card() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PrtStationChargeOnEveryPage::set_has_card() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PrtStationChargeOnEveryPage::clear_has_card() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PrtStationChargeOnEveryPage::clear_card() {
  if (card_ != NULL) card_->::isafetec::RechargeFromCard::Clear();
  clear_has_card();
}
inline const ::isafetec::RechargeFromCard& PrtStationChargeOnEveryPage::card() const {
  return card_ != NULL ? *card_ : *default_instance_->card_;
}
inline ::isafetec::RechargeFromCard* PrtStationChargeOnEveryPage::mutable_card() {
  set_has_card();
  if (card_ == NULL) card_ = new ::isafetec::RechargeFromCard;
  return card_;
}
inline ::isafetec::RechargeFromCard* PrtStationChargeOnEveryPage::release_card() {
  clear_has_card();
  ::isafetec::RechargeFromCard* temp = card_;
  card_ = NULL;
  return temp;
}

// optional .isafetec.RechargeFromCardErr err = 16;
inline bool PrtStationChargeOnEveryPage::has_err() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PrtStationChargeOnEveryPage::set_has_err() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PrtStationChargeOnEveryPage::clear_has_err() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PrtStationChargeOnEveryPage::clear_err() {
  if (err_ != NULL) err_->::isafetec::RechargeFromCardErr::Clear();
  clear_has_err();
}
inline const ::isafetec::RechargeFromCardErr& PrtStationChargeOnEveryPage::err() const {
  return err_ != NULL ? *err_ : *default_instance_->err_;
}
inline ::isafetec::RechargeFromCardErr* PrtStationChargeOnEveryPage::mutable_err() {
  set_has_err();
  if (err_ == NULL) err_ = new ::isafetec::RechargeFromCardErr;
  return err_;
}
inline ::isafetec::RechargeFromCardErr* PrtStationChargeOnEveryPage::release_err() {
  clear_has_err();
  ::isafetec::RechargeFromCardErr* temp = err_;
  err_ = NULL;
  return temp;
}

// optional string seed = 17;
inline bool PrtStationChargeOnEveryPage::has_seed() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PrtStationChargeOnEveryPage::set_has_seed() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PrtStationChargeOnEveryPage::clear_has_seed() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PrtStationChargeOnEveryPage::clear_seed() {
  if (seed_ != &::google::protobuf::internal::kEmptyString) {
    seed_->clear();
  }
  clear_has_seed();
}
inline const ::std::string& PrtStationChargeOnEveryPage::seed() const {
  return *seed_;
}
inline void PrtStationChargeOnEveryPage::set_seed(const ::std::string& value) {
  set_has_seed();
  if (seed_ == &::google::protobuf::internal::kEmptyString) {
    seed_ = new ::std::string;
  }
  seed_->assign(value);
}
inline void PrtStationChargeOnEveryPage::set_seed(const char* value) {
  set_has_seed();
  if (seed_ == &::google::protobuf::internal::kEmptyString) {
    seed_ = new ::std::string;
  }
  seed_->assign(value);
}
inline void PrtStationChargeOnEveryPage::set_seed(const char* value, size_t size) {
  set_has_seed();
  if (seed_ == &::google::protobuf::internal::kEmptyString) {
    seed_ = new ::std::string;
  }
  seed_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtStationChargeOnEveryPage::mutable_seed() {
  set_has_seed();
  if (seed_ == &::google::protobuf::internal::kEmptyString) {
    seed_ = new ::std::string;
  }
  return seed_;
}
inline ::std::string* PrtStationChargeOnEveryPage::release_seed() {
  clear_has_seed();
  if (seed_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = seed_;
    seed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PrtStationAlarm

// optional int32 prt_id = 1;
inline bool PrtStationAlarm::has_prt_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrtStationAlarm::set_has_prt_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrtStationAlarm::clear_has_prt_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrtStationAlarm::clear_prt_id() {
  prt_id_ = 0;
  clear_has_prt_id();
}
inline ::google::protobuf::int32 PrtStationAlarm::prt_id() const {
  return prt_id_;
}
inline void PrtStationAlarm::set_prt_id(::google::protobuf::int32 value) {
  set_has_prt_id();
  prt_id_ = value;
}

// optional string type = 2;
inline bool PrtStationAlarm::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrtStationAlarm::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrtStationAlarm::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrtStationAlarm::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& PrtStationAlarm::type() const {
  return *type_;
}
inline void PrtStationAlarm::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void PrtStationAlarm::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void PrtStationAlarm::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtStationAlarm::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* PrtStationAlarm::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string subject = 3;
inline bool PrtStationAlarm::has_subject() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrtStationAlarm::set_has_subject() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrtStationAlarm::clear_has_subject() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrtStationAlarm::clear_subject() {
  if (subject_ != &::google::protobuf::internal::kEmptyString) {
    subject_->clear();
  }
  clear_has_subject();
}
inline const ::std::string& PrtStationAlarm::subject() const {
  return *subject_;
}
inline void PrtStationAlarm::set_subject(const ::std::string& value) {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::kEmptyString) {
    subject_ = new ::std::string;
  }
  subject_->assign(value);
}
inline void PrtStationAlarm::set_subject(const char* value) {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::kEmptyString) {
    subject_ = new ::std::string;
  }
  subject_->assign(value);
}
inline void PrtStationAlarm::set_subject(const char* value, size_t size) {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::kEmptyString) {
    subject_ = new ::std::string;
  }
  subject_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtStationAlarm::mutable_subject() {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::kEmptyString) {
    subject_ = new ::std::string;
  }
  return subject_;
}
inline ::std::string* PrtStationAlarm::release_subject() {
  clear_has_subject();
  if (subject_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = subject_;
    subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string content = 4;
inline bool PrtStationAlarm::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrtStationAlarm::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrtStationAlarm::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrtStationAlarm::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& PrtStationAlarm::content() const {
  return *content_;
}
inline void PrtStationAlarm::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void PrtStationAlarm::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void PrtStationAlarm::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtStationAlarm::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* PrtStationAlarm::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PrtChargeToolLogon

// optional int32 id = 1;
inline bool PrtChargeToolLogon::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrtChargeToolLogon::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrtChargeToolLogon::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrtChargeToolLogon::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PrtChargeToolLogon::id() const {
  return id_;
}
inline void PrtChargeToolLogon::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool PrtChargeToolLogon::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrtChargeToolLogon::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrtChargeToolLogon::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrtChargeToolLogon::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PrtChargeToolLogon::name() const {
  return *name_;
}
inline void PrtChargeToolLogon::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PrtChargeToolLogon::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PrtChargeToolLogon::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtChargeToolLogon::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PrtChargeToolLogon::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string pwd = 3;
inline bool PrtChargeToolLogon::has_pwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrtChargeToolLogon::set_has_pwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrtChargeToolLogon::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrtChargeToolLogon::clear_pwd() {
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    pwd_->clear();
  }
  clear_has_pwd();
}
inline const ::std::string& PrtChargeToolLogon::pwd() const {
  return *pwd_;
}
inline void PrtChargeToolLogon::set_pwd(const ::std::string& value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
}
inline void PrtChargeToolLogon::set_pwd(const char* value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
}
inline void PrtChargeToolLogon::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtChargeToolLogon::mutable_pwd() {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  return pwd_;
}
inline ::std::string* PrtChargeToolLogon::release_pwd() {
  clear_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pwd_;
    pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PrtChargeToolCheckResult

// optional int32 id = 1;
inline bool PrtChargeToolCheckResult::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrtChargeToolCheckResult::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrtChargeToolCheckResult::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrtChargeToolCheckResult::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PrtChargeToolCheckResult::id() const {
  return id_;
}
inline void PrtChargeToolCheckResult::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool PrtChargeToolCheckResult::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrtChargeToolCheckResult::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrtChargeToolCheckResult::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrtChargeToolCheckResult::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PrtChargeToolCheckResult::name() const {
  return *name_;
}
inline void PrtChargeToolCheckResult::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PrtChargeToolCheckResult::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PrtChargeToolCheckResult::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtChargeToolCheckResult::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PrtChargeToolCheckResult::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string pwd = 3;
inline bool PrtChargeToolCheckResult::has_pwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrtChargeToolCheckResult::set_has_pwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrtChargeToolCheckResult::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrtChargeToolCheckResult::clear_pwd() {
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    pwd_->clear();
  }
  clear_has_pwd();
}
inline const ::std::string& PrtChargeToolCheckResult::pwd() const {
  return *pwd_;
}
inline void PrtChargeToolCheckResult::set_pwd(const ::std::string& value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
}
inline void PrtChargeToolCheckResult::set_pwd(const char* value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
}
inline void PrtChargeToolCheckResult::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtChargeToolCheckResult::mutable_pwd() {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  return pwd_;
}
inline ::std::string* PrtChargeToolCheckResult::release_pwd() {
  clear_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pwd_;
    pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PrtChargeToolOPLog

// optional int32 admin_id = 1;
inline bool PrtChargeToolOPLog::has_admin_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrtChargeToolOPLog::set_has_admin_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrtChargeToolOPLog::clear_has_admin_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrtChargeToolOPLog::clear_admin_id() {
  admin_id_ = 0;
  clear_has_admin_id();
}
inline ::google::protobuf::int32 PrtChargeToolOPLog::admin_id() const {
  return admin_id_;
}
inline void PrtChargeToolOPLog::set_admin_id(::google::protobuf::int32 value) {
  set_has_admin_id();
  admin_id_ = value;
}

// optional string admin_name = 2;
inline bool PrtChargeToolOPLog::has_admin_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrtChargeToolOPLog::set_has_admin_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrtChargeToolOPLog::clear_has_admin_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrtChargeToolOPLog::clear_admin_name() {
  if (admin_name_ != &::google::protobuf::internal::kEmptyString) {
    admin_name_->clear();
  }
  clear_has_admin_name();
}
inline const ::std::string& PrtChargeToolOPLog::admin_name() const {
  return *admin_name_;
}
inline void PrtChargeToolOPLog::set_admin_name(const ::std::string& value) {
  set_has_admin_name();
  if (admin_name_ == &::google::protobuf::internal::kEmptyString) {
    admin_name_ = new ::std::string;
  }
  admin_name_->assign(value);
}
inline void PrtChargeToolOPLog::set_admin_name(const char* value) {
  set_has_admin_name();
  if (admin_name_ == &::google::protobuf::internal::kEmptyString) {
    admin_name_ = new ::std::string;
  }
  admin_name_->assign(value);
}
inline void PrtChargeToolOPLog::set_admin_name(const char* value, size_t size) {
  set_has_admin_name();
  if (admin_name_ == &::google::protobuf::internal::kEmptyString) {
    admin_name_ = new ::std::string;
  }
  admin_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtChargeToolOPLog::mutable_admin_name() {
  set_has_admin_name();
  if (admin_name_ == &::google::protobuf::internal::kEmptyString) {
    admin_name_ = new ::std::string;
  }
  return admin_name_;
}
inline ::std::string* PrtChargeToolOPLog::release_admin_name() {
  clear_has_admin_name();
  if (admin_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = admin_name_;
    admin_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 op_type = 3;
inline bool PrtChargeToolOPLog::has_op_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrtChargeToolOPLog::set_has_op_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrtChargeToolOPLog::clear_has_op_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrtChargeToolOPLog::clear_op_type() {
  op_type_ = 0;
  clear_has_op_type();
}
inline ::google::protobuf::int32 PrtChargeToolOPLog::op_type() const {
  return op_type_;
}
inline void PrtChargeToolOPLog::set_op_type(::google::protobuf::int32 value) {
  set_has_op_type();
  op_type_ = value;
}

// optional double amount = 4;
inline bool PrtChargeToolOPLog::has_amount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrtChargeToolOPLog::set_has_amount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrtChargeToolOPLog::clear_has_amount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrtChargeToolOPLog::clear_amount() {
  amount_ = 0;
  clear_has_amount();
}
inline double PrtChargeToolOPLog::amount() const {
  return amount_;
}
inline void PrtChargeToolOPLog::set_amount(double value) {
  set_has_amount();
  amount_ = value;
}

// optional double specail_money = 5;
inline bool PrtChargeToolOPLog::has_specail_money() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PrtChargeToolOPLog::set_has_specail_money() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PrtChargeToolOPLog::clear_has_specail_money() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PrtChargeToolOPLog::clear_specail_money() {
  specail_money_ = 0;
  clear_has_specail_money();
}
inline double PrtChargeToolOPLog::specail_money() const {
  return specail_money_;
}
inline void PrtChargeToolOPLog::set_specail_money(double value) {
  set_has_specail_money();
  specail_money_ = value;
}

// optional string card_no = 6;
inline bool PrtChargeToolOPLog::has_card_no() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PrtChargeToolOPLog::set_has_card_no() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PrtChargeToolOPLog::clear_has_card_no() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PrtChargeToolOPLog::clear_card_no() {
  if (card_no_ != &::google::protobuf::internal::kEmptyString) {
    card_no_->clear();
  }
  clear_has_card_no();
}
inline const ::std::string& PrtChargeToolOPLog::card_no() const {
  return *card_no_;
}
inline void PrtChargeToolOPLog::set_card_no(const ::std::string& value) {
  set_has_card_no();
  if (card_no_ == &::google::protobuf::internal::kEmptyString) {
    card_no_ = new ::std::string;
  }
  card_no_->assign(value);
}
inline void PrtChargeToolOPLog::set_card_no(const char* value) {
  set_has_card_no();
  if (card_no_ == &::google::protobuf::internal::kEmptyString) {
    card_no_ = new ::std::string;
  }
  card_no_->assign(value);
}
inline void PrtChargeToolOPLog::set_card_no(const char* value, size_t size) {
  set_has_card_no();
  if (card_no_ == &::google::protobuf::internal::kEmptyString) {
    card_no_ = new ::std::string;
  }
  card_no_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtChargeToolOPLog::mutable_card_no() {
  set_has_card_no();
  if (card_no_ == &::google::protobuf::internal::kEmptyString) {
    card_no_ = new ::std::string;
  }
  return card_no_;
}
inline ::std::string* PrtChargeToolOPLog::release_card_no() {
  clear_has_card_no();
  if (card_no_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = card_no_;
    card_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string name = 7;
inline bool PrtChargeToolOPLog::has_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PrtChargeToolOPLog::set_has_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PrtChargeToolOPLog::clear_has_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PrtChargeToolOPLog::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PrtChargeToolOPLog::name() const {
  return *name_;
}
inline void PrtChargeToolOPLog::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PrtChargeToolOPLog::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PrtChargeToolOPLog::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtChargeToolOPLog::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PrtChargeToolOPLog::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PrtUserSelfChargeOPLog

// optional int32 user_id = 1;
inline bool PrtUserSelfChargeOPLog::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrtUserSelfChargeOPLog::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrtUserSelfChargeOPLog::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrtUserSelfChargeOPLog::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 PrtUserSelfChargeOPLog::user_id() const {
  return user_id_;
}
inline void PrtUserSelfChargeOPLog::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional string user_name = 2;
inline bool PrtUserSelfChargeOPLog::has_user_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrtUserSelfChargeOPLog::set_has_user_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrtUserSelfChargeOPLog::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrtUserSelfChargeOPLog::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& PrtUserSelfChargeOPLog::user_name() const {
  return *user_name_;
}
inline void PrtUserSelfChargeOPLog::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void PrtUserSelfChargeOPLog::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void PrtUserSelfChargeOPLog::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtUserSelfChargeOPLog::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* PrtUserSelfChargeOPLog::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 prt_id = 3;
inline bool PrtUserSelfChargeOPLog::has_prt_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrtUserSelfChargeOPLog::set_has_prt_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrtUserSelfChargeOPLog::clear_has_prt_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrtUserSelfChargeOPLog::clear_prt_id() {
  prt_id_ = 0;
  clear_has_prt_id();
}
inline ::google::protobuf::int32 PrtUserSelfChargeOPLog::prt_id() const {
  return prt_id_;
}
inline void PrtUserSelfChargeOPLog::set_prt_id(::google::protobuf::int32 value) {
  set_has_prt_id();
  prt_id_ = value;
}

// optional int32 op_for = 4;
inline bool PrtUserSelfChargeOPLog::has_op_for() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrtUserSelfChargeOPLog::set_has_op_for() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrtUserSelfChargeOPLog::clear_has_op_for() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrtUserSelfChargeOPLog::clear_op_for() {
  op_for_ = 0;
  clear_has_op_for();
}
inline ::google::protobuf::int32 PrtUserSelfChargeOPLog::op_for() const {
  return op_for_;
}
inline void PrtUserSelfChargeOPLog::set_op_for(::google::protobuf::int32 value) {
  set_has_op_for();
  op_for_ = value;
}

// optional int32 reserve1 = 5;
inline bool PrtUserSelfChargeOPLog::has_reserve1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PrtUserSelfChargeOPLog::set_has_reserve1() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PrtUserSelfChargeOPLog::clear_has_reserve1() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PrtUserSelfChargeOPLog::clear_reserve1() {
  reserve1_ = 0;
  clear_has_reserve1();
}
inline ::google::protobuf::int32 PrtUserSelfChargeOPLog::reserve1() const {
  return reserve1_;
}
inline void PrtUserSelfChargeOPLog::set_reserve1(::google::protobuf::int32 value) {
  set_has_reserve1();
  reserve1_ = value;
}

// optional double amount = 6;
inline bool PrtUserSelfChargeOPLog::has_amount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PrtUserSelfChargeOPLog::set_has_amount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PrtUserSelfChargeOPLog::clear_has_amount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PrtUserSelfChargeOPLog::clear_amount() {
  amount_ = 0;
  clear_has_amount();
}
inline double PrtUserSelfChargeOPLog::amount() const {
  return amount_;
}
inline void PrtUserSelfChargeOPLog::set_amount(double value) {
  set_has_amount();
  amount_ = value;
}

// optional double specail_money = 7;
inline bool PrtUserSelfChargeOPLog::has_specail_money() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PrtUserSelfChargeOPLog::set_has_specail_money() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PrtUserSelfChargeOPLog::clear_has_specail_money() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PrtUserSelfChargeOPLog::clear_specail_money() {
  specail_money_ = 0;
  clear_has_specail_money();
}
inline double PrtUserSelfChargeOPLog::specail_money() const {
  return specail_money_;
}
inline void PrtUserSelfChargeOPLog::set_specail_money(double value) {
  set_has_specail_money();
  specail_money_ = value;
}

// optional string card_no = 8;
inline bool PrtUserSelfChargeOPLog::has_card_no() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PrtUserSelfChargeOPLog::set_has_card_no() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PrtUserSelfChargeOPLog::clear_has_card_no() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PrtUserSelfChargeOPLog::clear_card_no() {
  if (card_no_ != &::google::protobuf::internal::kEmptyString) {
    card_no_->clear();
  }
  clear_has_card_no();
}
inline const ::std::string& PrtUserSelfChargeOPLog::card_no() const {
  return *card_no_;
}
inline void PrtUserSelfChargeOPLog::set_card_no(const ::std::string& value) {
  set_has_card_no();
  if (card_no_ == &::google::protobuf::internal::kEmptyString) {
    card_no_ = new ::std::string;
  }
  card_no_->assign(value);
}
inline void PrtUserSelfChargeOPLog::set_card_no(const char* value) {
  set_has_card_no();
  if (card_no_ == &::google::protobuf::internal::kEmptyString) {
    card_no_ = new ::std::string;
  }
  card_no_->assign(value);
}
inline void PrtUserSelfChargeOPLog::set_card_no(const char* value, size_t size) {
  set_has_card_no();
  if (card_no_ == &::google::protobuf::internal::kEmptyString) {
    card_no_ = new ::std::string;
  }
  card_no_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtUserSelfChargeOPLog::mutable_card_no() {
  set_has_card_no();
  if (card_no_ == &::google::protobuf::internal::kEmptyString) {
    card_no_ = new ::std::string;
  }
  return card_no_;
}
inline ::std::string* PrtUserSelfChargeOPLog::release_card_no() {
  clear_has_card_no();
  if (card_no_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = card_no_;
    card_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string guid = 9;
inline bool PrtUserSelfChargeOPLog::has_guid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PrtUserSelfChargeOPLog::set_has_guid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PrtUserSelfChargeOPLog::clear_has_guid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PrtUserSelfChargeOPLog::clear_guid() {
  if (guid_ != &::google::protobuf::internal::kEmptyString) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& PrtUserSelfChargeOPLog::guid() const {
  return *guid_;
}
inline void PrtUserSelfChargeOPLog::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
}
inline void PrtUserSelfChargeOPLog::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
}
inline void PrtUserSelfChargeOPLog::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtUserSelfChargeOPLog::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  return guid_;
}
inline ::std::string* PrtUserSelfChargeOPLog::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional double time = 10;
inline bool PrtUserSelfChargeOPLog::has_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PrtUserSelfChargeOPLog::set_has_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PrtUserSelfChargeOPLog::clear_has_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PrtUserSelfChargeOPLog::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline double PrtUserSelfChargeOPLog::time() const {
  return time_;
}
inline void PrtUserSelfChargeOPLog::set_time(double value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// PrtUserSelfChargeOpLogACK

// optional int32 user_id = 1;
inline bool PrtUserSelfChargeOpLogACK::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrtUserSelfChargeOpLogACK::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrtUserSelfChargeOpLogACK::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrtUserSelfChargeOpLogACK::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 PrtUserSelfChargeOpLogACK::user_id() const {
  return user_id_;
}
inline void PrtUserSelfChargeOpLogACK::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional int32 prt_id = 2;
inline bool PrtUserSelfChargeOpLogACK::has_prt_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrtUserSelfChargeOpLogACK::set_has_prt_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrtUserSelfChargeOpLogACK::clear_has_prt_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrtUserSelfChargeOpLogACK::clear_prt_id() {
  prt_id_ = 0;
  clear_has_prt_id();
}
inline ::google::protobuf::int32 PrtUserSelfChargeOpLogACK::prt_id() const {
  return prt_id_;
}
inline void PrtUserSelfChargeOpLogACK::set_prt_id(::google::protobuf::int32 value) {
  set_has_prt_id();
  prt_id_ = value;
}

// optional int32 res_code = 3;
inline bool PrtUserSelfChargeOpLogACK::has_res_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrtUserSelfChargeOpLogACK::set_has_res_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrtUserSelfChargeOpLogACK::clear_has_res_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrtUserSelfChargeOpLogACK::clear_res_code() {
  res_code_ = 0;
  clear_has_res_code();
}
inline ::google::protobuf::int32 PrtUserSelfChargeOpLogACK::res_code() const {
  return res_code_;
}
inline void PrtUserSelfChargeOpLogACK::set_res_code(::google::protobuf::int32 value) {
  set_has_res_code();
  res_code_ = value;
}

// optional int32 op_for = 4;
inline bool PrtUserSelfChargeOpLogACK::has_op_for() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrtUserSelfChargeOpLogACK::set_has_op_for() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrtUserSelfChargeOpLogACK::clear_has_op_for() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrtUserSelfChargeOpLogACK::clear_op_for() {
  op_for_ = 0;
  clear_has_op_for();
}
inline ::google::protobuf::int32 PrtUserSelfChargeOpLogACK::op_for() const {
  return op_for_;
}
inline void PrtUserSelfChargeOpLogACK::set_op_for(::google::protobuf::int32 value) {
  set_has_op_for();
  op_for_ = value;
}

// optional .isafetec.PrtStationCheckUserResult res = 5;
inline bool PrtUserSelfChargeOpLogACK::has_res() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PrtUserSelfChargeOpLogACK::set_has_res() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PrtUserSelfChargeOpLogACK::clear_has_res() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PrtUserSelfChargeOpLogACK::clear_res() {
  if (res_ != NULL) res_->::isafetec::PrtStationCheckUserResult::Clear();
  clear_has_res();
}
inline const ::isafetec::PrtStationCheckUserResult& PrtUserSelfChargeOpLogACK::res() const {
  return res_ != NULL ? *res_ : *default_instance_->res_;
}
inline ::isafetec::PrtStationCheckUserResult* PrtUserSelfChargeOpLogACK::mutable_res() {
  set_has_res();
  if (res_ == NULL) res_ = new ::isafetec::PrtStationCheckUserResult;
  return res_;
}
inline ::isafetec::PrtStationCheckUserResult* PrtUserSelfChargeOpLogACK::release_res() {
  clear_has_res();
  ::isafetec::PrtStationCheckUserResult* temp = res_;
  res_ = NULL;
  return temp;
}

// optional string guid = 6;
inline bool PrtUserSelfChargeOpLogACK::has_guid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PrtUserSelfChargeOpLogACK::set_has_guid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PrtUserSelfChargeOpLogACK::clear_has_guid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PrtUserSelfChargeOpLogACK::clear_guid() {
  if (guid_ != &::google::protobuf::internal::kEmptyString) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& PrtUserSelfChargeOpLogACK::guid() const {
  return *guid_;
}
inline void PrtUserSelfChargeOpLogACK::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
}
inline void PrtUserSelfChargeOpLogACK::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
}
inline void PrtUserSelfChargeOpLogACK::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtUserSelfChargeOpLogACK::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    guid_ = new ::std::string;
  }
  return guid_;
}
inline ::std::string* PrtUserSelfChargeOpLogACK::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional double time = 7;
inline bool PrtUserSelfChargeOpLogACK::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PrtUserSelfChargeOpLogACK::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PrtUserSelfChargeOpLogACK::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PrtUserSelfChargeOpLogACK::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline double PrtUserSelfChargeOpLogACK::time() const {
  return time_;
}
inline void PrtUserSelfChargeOpLogACK::set_time(double value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// PrtAdminInfo

// optional int32 id = 1;
inline bool PrtAdminInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrtAdminInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrtAdminInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrtAdminInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PrtAdminInfo::id() const {
  return id_;
}
inline void PrtAdminInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool PrtAdminInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrtAdminInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrtAdminInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrtAdminInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PrtAdminInfo::name() const {
  return *name_;
}
inline void PrtAdminInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PrtAdminInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PrtAdminInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtAdminInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PrtAdminInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string realname = 3;
inline bool PrtAdminInfo::has_realname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrtAdminInfo::set_has_realname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrtAdminInfo::clear_has_realname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrtAdminInfo::clear_realname() {
  if (realname_ != &::google::protobuf::internal::kEmptyString) {
    realname_->clear();
  }
  clear_has_realname();
}
inline const ::std::string& PrtAdminInfo::realname() const {
  return *realname_;
}
inline void PrtAdminInfo::set_realname(const ::std::string& value) {
  set_has_realname();
  if (realname_ == &::google::protobuf::internal::kEmptyString) {
    realname_ = new ::std::string;
  }
  realname_->assign(value);
}
inline void PrtAdminInfo::set_realname(const char* value) {
  set_has_realname();
  if (realname_ == &::google::protobuf::internal::kEmptyString) {
    realname_ = new ::std::string;
  }
  realname_->assign(value);
}
inline void PrtAdminInfo::set_realname(const char* value, size_t size) {
  set_has_realname();
  if (realname_ == &::google::protobuf::internal::kEmptyString) {
    realname_ = new ::std::string;
  }
  realname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtAdminInfo::mutable_realname() {
  set_has_realname();
  if (realname_ == &::google::protobuf::internal::kEmptyString) {
    realname_ = new ::std::string;
  }
  return realname_;
}
inline ::std::string* PrtAdminInfo::release_realname() {
  clear_has_realname();
  if (realname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = realname_;
    realname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PrtAdminInfoList

// repeated .isafetec.PrtAdminInfo list = 1;
inline int PrtAdminInfoList::list_size() const {
  return list_.size();
}
inline void PrtAdminInfoList::clear_list() {
  list_.Clear();
}
inline const ::isafetec::PrtAdminInfo& PrtAdminInfoList::list(int index) const {
  return list_.Get(index);
}
inline ::isafetec::PrtAdminInfo* PrtAdminInfoList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::isafetec::PrtAdminInfo* PrtAdminInfoList::list_ReleaseAt(int index) {
  return list_.ReleaseAt(index);
}
inline void PrtAdminInfoList::list_RemoveAt(int index) {
  list_.RemoveAt(index);
}
inline ::isafetec::PrtAdminInfo* PrtAdminInfoList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::isafetec::PrtAdminInfo >&
PrtAdminInfoList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::isafetec::PrtAdminInfo >*
PrtAdminInfoList::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// PrintDocumentInfo

// optional int32 equip_id = 1;
inline bool PrintDocumentInfo::has_equip_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrintDocumentInfo::set_has_equip_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrintDocumentInfo::clear_has_equip_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrintDocumentInfo::clear_equip_id() {
  equip_id_ = 0;
  clear_has_equip_id();
}
inline ::google::protobuf::int32 PrintDocumentInfo::equip_id() const {
  return equip_id_;
}
inline void PrintDocumentInfo::set_equip_id(::google::protobuf::int32 value) {
  set_has_equip_id();
  equip_id_ = value;
}

// optional string equip_host = 2;
inline bool PrintDocumentInfo::has_equip_host() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrintDocumentInfo::set_has_equip_host() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrintDocumentInfo::clear_has_equip_host() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrintDocumentInfo::clear_equip_host() {
  if (equip_host_ != &::google::protobuf::internal::kEmptyString) {
    equip_host_->clear();
  }
  clear_has_equip_host();
}
inline const ::std::string& PrintDocumentInfo::equip_host() const {
  return *equip_host_;
}
inline void PrintDocumentInfo::set_equip_host(const ::std::string& value) {
  set_has_equip_host();
  if (equip_host_ == &::google::protobuf::internal::kEmptyString) {
    equip_host_ = new ::std::string;
  }
  equip_host_->assign(value);
}
inline void PrintDocumentInfo::set_equip_host(const char* value) {
  set_has_equip_host();
  if (equip_host_ == &::google::protobuf::internal::kEmptyString) {
    equip_host_ = new ::std::string;
  }
  equip_host_->assign(value);
}
inline void PrintDocumentInfo::set_equip_host(const char* value, size_t size) {
  set_has_equip_host();
  if (equip_host_ == &::google::protobuf::internal::kEmptyString) {
    equip_host_ = new ::std::string;
  }
  equip_host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrintDocumentInfo::mutable_equip_host() {
  set_has_equip_host();
  if (equip_host_ == &::google::protobuf::internal::kEmptyString) {
    equip_host_ = new ::std::string;
  }
  return equip_host_;
}
inline ::std::string* PrintDocumentInfo::release_equip_host() {
  clear_has_equip_host();
  if (equip_host_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = equip_host_;
    equip_host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string win_user = 3;
inline bool PrintDocumentInfo::has_win_user() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrintDocumentInfo::set_has_win_user() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrintDocumentInfo::clear_has_win_user() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrintDocumentInfo::clear_win_user() {
  if (win_user_ != &::google::protobuf::internal::kEmptyString) {
    win_user_->clear();
  }
  clear_has_win_user();
}
inline const ::std::string& PrintDocumentInfo::win_user() const {
  return *win_user_;
}
inline void PrintDocumentInfo::set_win_user(const ::std::string& value) {
  set_has_win_user();
  if (win_user_ == &::google::protobuf::internal::kEmptyString) {
    win_user_ = new ::std::string;
  }
  win_user_->assign(value);
}
inline void PrintDocumentInfo::set_win_user(const char* value) {
  set_has_win_user();
  if (win_user_ == &::google::protobuf::internal::kEmptyString) {
    win_user_ = new ::std::string;
  }
  win_user_->assign(value);
}
inline void PrintDocumentInfo::set_win_user(const char* value, size_t size) {
  set_has_win_user();
  if (win_user_ == &::google::protobuf::internal::kEmptyString) {
    win_user_ = new ::std::string;
  }
  win_user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrintDocumentInfo::mutable_win_user() {
  set_has_win_user();
  if (win_user_ == &::google::protobuf::internal::kEmptyString) {
    win_user_ = new ::std::string;
  }
  return win_user_;
}
inline ::std::string* PrintDocumentInfo::release_win_user() {
  clear_has_win_user();
  if (win_user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = win_user_;
    win_user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 user_id = 4;
inline bool PrintDocumentInfo::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrintDocumentInfo::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrintDocumentInfo::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrintDocumentInfo::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 PrintDocumentInfo::user_id() const {
  return user_id_;
}
inline void PrintDocumentInfo::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional int32 id = 5;
inline bool PrintDocumentInfo::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PrintDocumentInfo::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PrintDocumentInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PrintDocumentInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PrintDocumentInfo::id() const {
  return id_;
}
inline void PrintDocumentInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string doc_name = 6;
inline bool PrintDocumentInfo::has_doc_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PrintDocumentInfo::set_has_doc_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PrintDocumentInfo::clear_has_doc_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PrintDocumentInfo::clear_doc_name() {
  if (doc_name_ != &::google::protobuf::internal::kEmptyString) {
    doc_name_->clear();
  }
  clear_has_doc_name();
}
inline const ::std::string& PrintDocumentInfo::doc_name() const {
  return *doc_name_;
}
inline void PrintDocumentInfo::set_doc_name(const ::std::string& value) {
  set_has_doc_name();
  if (doc_name_ == &::google::protobuf::internal::kEmptyString) {
    doc_name_ = new ::std::string;
  }
  doc_name_->assign(value);
}
inline void PrintDocumentInfo::set_doc_name(const char* value) {
  set_has_doc_name();
  if (doc_name_ == &::google::protobuf::internal::kEmptyString) {
    doc_name_ = new ::std::string;
  }
  doc_name_->assign(value);
}
inline void PrintDocumentInfo::set_doc_name(const char* value, size_t size) {
  set_has_doc_name();
  if (doc_name_ == &::google::protobuf::internal::kEmptyString) {
    doc_name_ = new ::std::string;
  }
  doc_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrintDocumentInfo::mutable_doc_name() {
  set_has_doc_name();
  if (doc_name_ == &::google::protobuf::internal::kEmptyString) {
    doc_name_ = new ::std::string;
  }
  return doc_name_;
}
inline ::std::string* PrintDocumentInfo::release_doc_name() {
  clear_has_doc_name();
  if (doc_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = doc_name_;
    doc_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string printer_name = 7;
inline bool PrintDocumentInfo::has_printer_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PrintDocumentInfo::set_has_printer_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PrintDocumentInfo::clear_has_printer_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PrintDocumentInfo::clear_printer_name() {
  if (printer_name_ != &::google::protobuf::internal::kEmptyString) {
    printer_name_->clear();
  }
  clear_has_printer_name();
}
inline const ::std::string& PrintDocumentInfo::printer_name() const {
  return *printer_name_;
}
inline void PrintDocumentInfo::set_printer_name(const ::std::string& value) {
  set_has_printer_name();
  if (printer_name_ == &::google::protobuf::internal::kEmptyString) {
    printer_name_ = new ::std::string;
  }
  printer_name_->assign(value);
}
inline void PrintDocumentInfo::set_printer_name(const char* value) {
  set_has_printer_name();
  if (printer_name_ == &::google::protobuf::internal::kEmptyString) {
    printer_name_ = new ::std::string;
  }
  printer_name_->assign(value);
}
inline void PrintDocumentInfo::set_printer_name(const char* value, size_t size) {
  set_has_printer_name();
  if (printer_name_ == &::google::protobuf::internal::kEmptyString) {
    printer_name_ = new ::std::string;
  }
  printer_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrintDocumentInfo::mutable_printer_name() {
  set_has_printer_name();
  if (printer_name_ == &::google::protobuf::internal::kEmptyString) {
    printer_name_ = new ::std::string;
  }
  return printer_name_;
}
inline ::std::string* PrintDocumentInfo::release_printer_name() {
  clear_has_printer_name();
  if (printer_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = printer_name_;
    printer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional double time = 8;
inline bool PrintDocumentInfo::has_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PrintDocumentInfo::set_has_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PrintDocumentInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PrintDocumentInfo::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline double PrintDocumentInfo::time() const {
  return time_;
}
inline void PrintDocumentInfo::set_time(double value) {
  set_has_time();
  time_ = value;
}

// optional int32 doc_size = 9;
inline bool PrintDocumentInfo::has_doc_size() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PrintDocumentInfo::set_has_doc_size() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PrintDocumentInfo::clear_has_doc_size() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PrintDocumentInfo::clear_doc_size() {
  doc_size_ = 0;
  clear_has_doc_size();
}
inline ::google::protobuf::int32 PrintDocumentInfo::doc_size() const {
  return doc_size_;
}
inline void PrintDocumentInfo::set_doc_size(::google::protobuf::int32 value) {
  set_has_doc_size();
  doc_size_ = value;
}

// optional int32 zip_size = 10;
inline bool PrintDocumentInfo::has_zip_size() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PrintDocumentInfo::set_has_zip_size() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PrintDocumentInfo::clear_has_zip_size() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PrintDocumentInfo::clear_zip_size() {
  zip_size_ = 0;
  clear_has_zip_size();
}
inline ::google::protobuf::int32 PrintDocumentInfo::zip_size() const {
  return zip_size_;
}
inline void PrintDocumentInfo::set_zip_size(::google::protobuf::int32 value) {
  set_has_zip_size();
  zip_size_ = value;
}

// optional string path = 11;
inline bool PrintDocumentInfo::has_path() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PrintDocumentInfo::set_has_path() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PrintDocumentInfo::clear_has_path() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PrintDocumentInfo::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& PrintDocumentInfo::path() const {
  return *path_;
}
inline void PrintDocumentInfo::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void PrintDocumentInfo::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void PrintDocumentInfo::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrintDocumentInfo::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* PrintDocumentInfo::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string name = 12;
inline bool PrintDocumentInfo::has_name() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PrintDocumentInfo::set_has_name() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PrintDocumentInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PrintDocumentInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PrintDocumentInfo::name() const {
  return *name_;
}
inline void PrintDocumentInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PrintDocumentInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PrintDocumentInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrintDocumentInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PrintDocumentInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string orig_path = 13;
inline bool PrintDocumentInfo::has_orig_path() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PrintDocumentInfo::set_has_orig_path() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PrintDocumentInfo::clear_has_orig_path() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PrintDocumentInfo::clear_orig_path() {
  if (orig_path_ != &::google::protobuf::internal::kEmptyString) {
    orig_path_->clear();
  }
  clear_has_orig_path();
}
inline const ::std::string& PrintDocumentInfo::orig_path() const {
  return *orig_path_;
}
inline void PrintDocumentInfo::set_orig_path(const ::std::string& value) {
  set_has_orig_path();
  if (orig_path_ == &::google::protobuf::internal::kEmptyString) {
    orig_path_ = new ::std::string;
  }
  orig_path_->assign(value);
}
inline void PrintDocumentInfo::set_orig_path(const char* value) {
  set_has_orig_path();
  if (orig_path_ == &::google::protobuf::internal::kEmptyString) {
    orig_path_ = new ::std::string;
  }
  orig_path_->assign(value);
}
inline void PrintDocumentInfo::set_orig_path(const char* value, size_t size) {
  set_has_orig_path();
  if (orig_path_ == &::google::protobuf::internal::kEmptyString) {
    orig_path_ = new ::std::string;
  }
  orig_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrintDocumentInfo::mutable_orig_path() {
  set_has_orig_path();
  if (orig_path_ == &::google::protobuf::internal::kEmptyString) {
    orig_path_ = new ::std::string;
  }
  return orig_path_;
}
inline ::std::string* PrintDocumentInfo::release_orig_path() {
  clear_has_orig_path();
  if (orig_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = orig_path_;
    orig_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// FtpConfigInfo

// optional string ip = 1;
inline bool FtpConfigInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FtpConfigInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FtpConfigInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FtpConfigInfo::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& FtpConfigInfo::ip() const {
  return *ip_;
}
inline void FtpConfigInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void FtpConfigInfo::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void FtpConfigInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FtpConfigInfo::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* FtpConfigInfo::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string port = 2;
inline bool FtpConfigInfo::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FtpConfigInfo::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FtpConfigInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FtpConfigInfo::clear_port() {
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    port_->clear();
  }
  clear_has_port();
}
inline const ::std::string& FtpConfigInfo::port() const {
  return *port_;
}
inline void FtpConfigInfo::set_port(const ::std::string& value) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(value);
}
inline void FtpConfigInfo::set_port(const char* value) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(value);
}
inline void FtpConfigInfo::set_port(const char* value, size_t size) {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  port_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FtpConfigInfo::mutable_port() {
  set_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    port_ = new ::std::string;
  }
  return port_;
}
inline ::std::string* FtpConfigInfo::release_port() {
  clear_has_port();
  if (port_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = port_;
    port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string disk_path = 3;
inline bool FtpConfigInfo::has_disk_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FtpConfigInfo::set_has_disk_path() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FtpConfigInfo::clear_has_disk_path() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FtpConfigInfo::clear_disk_path() {
  if (disk_path_ != &::google::protobuf::internal::kEmptyString) {
    disk_path_->clear();
  }
  clear_has_disk_path();
}
inline const ::std::string& FtpConfigInfo::disk_path() const {
  return *disk_path_;
}
inline void FtpConfigInfo::set_disk_path(const ::std::string& value) {
  set_has_disk_path();
  if (disk_path_ == &::google::protobuf::internal::kEmptyString) {
    disk_path_ = new ::std::string;
  }
  disk_path_->assign(value);
}
inline void FtpConfigInfo::set_disk_path(const char* value) {
  set_has_disk_path();
  if (disk_path_ == &::google::protobuf::internal::kEmptyString) {
    disk_path_ = new ::std::string;
  }
  disk_path_->assign(value);
}
inline void FtpConfigInfo::set_disk_path(const char* value, size_t size) {
  set_has_disk_path();
  if (disk_path_ == &::google::protobuf::internal::kEmptyString) {
    disk_path_ = new ::std::string;
  }
  disk_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FtpConfigInfo::mutable_disk_path() {
  set_has_disk_path();
  if (disk_path_ == &::google::protobuf::internal::kEmptyString) {
    disk_path_ = new ::std::string;
  }
  return disk_path_;
}
inline ::std::string* FtpConfigInfo::release_disk_path() {
  clear_has_disk_path();
  if (disk_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = disk_path_;
    disk_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string dir = 4;
inline bool FtpConfigInfo::has_dir() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FtpConfigInfo::set_has_dir() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FtpConfigInfo::clear_has_dir() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FtpConfigInfo::clear_dir() {
  if (dir_ != &::google::protobuf::internal::kEmptyString) {
    dir_->clear();
  }
  clear_has_dir();
}
inline const ::std::string& FtpConfigInfo::dir() const {
  return *dir_;
}
inline void FtpConfigInfo::set_dir(const ::std::string& value) {
  set_has_dir();
  if (dir_ == &::google::protobuf::internal::kEmptyString) {
    dir_ = new ::std::string;
  }
  dir_->assign(value);
}
inline void FtpConfigInfo::set_dir(const char* value) {
  set_has_dir();
  if (dir_ == &::google::protobuf::internal::kEmptyString) {
    dir_ = new ::std::string;
  }
  dir_->assign(value);
}
inline void FtpConfigInfo::set_dir(const char* value, size_t size) {
  set_has_dir();
  if (dir_ == &::google::protobuf::internal::kEmptyString) {
    dir_ = new ::std::string;
  }
  dir_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FtpConfigInfo::mutable_dir() {
  set_has_dir();
  if (dir_ == &::google::protobuf::internal::kEmptyString) {
    dir_ = new ::std::string;
  }
  return dir_;
}
inline ::std::string* FtpConfigInfo::release_dir() {
  clear_has_dir();
  if (dir_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dir_;
    dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string user = 5;
inline bool FtpConfigInfo::has_user() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FtpConfigInfo::set_has_user() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FtpConfigInfo::clear_has_user() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FtpConfigInfo::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& FtpConfigInfo::user() const {
  return *user_;
}
inline void FtpConfigInfo::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void FtpConfigInfo::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void FtpConfigInfo::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FtpConfigInfo::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* FtpConfigInfo::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string pwd = 6;
inline bool FtpConfigInfo::has_pwd() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FtpConfigInfo::set_has_pwd() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FtpConfigInfo::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FtpConfigInfo::clear_pwd() {
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    pwd_->clear();
  }
  clear_has_pwd();
}
inline const ::std::string& FtpConfigInfo::pwd() const {
  return *pwd_;
}
inline void FtpConfigInfo::set_pwd(const ::std::string& value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
}
inline void FtpConfigInfo::set_pwd(const char* value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
}
inline void FtpConfigInfo::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FtpConfigInfo::mutable_pwd() {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  return pwd_;
}
inline ::std::string* FtpConfigInfo::release_pwd() {
  clear_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pwd_;
    pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CFuncPolicy

// optional int32 UserID = 1;
inline bool CFuncPolicy::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CFuncPolicy::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CFuncPolicy::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CFuncPolicy::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 CFuncPolicy::userid() const {
  return userid_;
}
inline void CFuncPolicy::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional int32 PrtID = 2;
inline bool CFuncPolicy::has_prtid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CFuncPolicy::set_has_prtid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CFuncPolicy::clear_has_prtid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CFuncPolicy::clear_prtid() {
  prtid_ = 0;
  clear_has_prtid();
}
inline ::google::protobuf::int32 CFuncPolicy::prtid() const {
  return prtid_;
}
inline void CFuncPolicy::set_prtid(::google::protobuf::int32 value) {
  set_has_prtid();
  prtid_ = value;
}

// optional int32 PrintPolicyMask = 3;
inline bool CFuncPolicy::has_printpolicymask() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CFuncPolicy::set_has_printpolicymask() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CFuncPolicy::clear_has_printpolicymask() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CFuncPolicy::clear_printpolicymask() {
  printpolicymask_ = 0;
  clear_has_printpolicymask();
}
inline ::google::protobuf::int32 CFuncPolicy::printpolicymask() const {
  return printpolicymask_;
}
inline void CFuncPolicy::set_printpolicymask(::google::protobuf::int32 value) {
  set_has_printpolicymask();
  printpolicymask_ = value;
}

// optional int32 CopyPolicyMask = 4;
inline bool CFuncPolicy::has_copypolicymask() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CFuncPolicy::set_has_copypolicymask() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CFuncPolicy::clear_has_copypolicymask() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CFuncPolicy::clear_copypolicymask() {
  copypolicymask_ = 0;
  clear_has_copypolicymask();
}
inline ::google::protobuf::int32 CFuncPolicy::copypolicymask() const {
  return copypolicymask_;
}
inline void CFuncPolicy::set_copypolicymask(::google::protobuf::int32 value) {
  set_has_copypolicymask();
  copypolicymask_ = value;
}

// optional int32 ScanPolicyMask = 5;
inline bool CFuncPolicy::has_scanpolicymask() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CFuncPolicy::set_has_scanpolicymask() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CFuncPolicy::clear_has_scanpolicymask() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CFuncPolicy::clear_scanpolicymask() {
  scanpolicymask_ = 0;
  clear_has_scanpolicymask();
}
inline ::google::protobuf::int32 CFuncPolicy::scanpolicymask() const {
  return scanpolicymask_;
}
inline void CFuncPolicy::set_scanpolicymask(::google::protobuf::int32 value) {
  set_has_scanpolicymask();
  scanpolicymask_ = value;
}

// optional int32 FaxPolicyMask = 6;
inline bool CFuncPolicy::has_faxpolicymask() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CFuncPolicy::set_has_faxpolicymask() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CFuncPolicy::clear_has_faxpolicymask() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CFuncPolicy::clear_faxpolicymask() {
  faxpolicymask_ = 0;
  clear_has_faxpolicymask();
}
inline ::google::protobuf::int32 CFuncPolicy::faxpolicymask() const {
  return faxpolicymask_;
}
inline void CFuncPolicy::set_faxpolicymask(::google::protobuf::int32 value) {
  set_has_faxpolicymask();
  faxpolicymask_ = value;
}

// -------------------------------------------------------------------

// PrtCenterSvr_UserPrintReq

// optional int32 prt_id = 1;
inline bool PrtCenterSvr_UserPrintReq::has_prt_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrtCenterSvr_UserPrintReq::set_has_prt_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrtCenterSvr_UserPrintReq::clear_has_prt_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrtCenterSvr_UserPrintReq::clear_prt_id() {
  prt_id_ = 0;
  clear_has_prt_id();
}
inline ::google::protobuf::int32 PrtCenterSvr_UserPrintReq::prt_id() const {
  return prt_id_;
}
inline void PrtCenterSvr_UserPrintReq::set_prt_id(::google::protobuf::int32 value) {
  set_has_prt_id();
  prt_id_ = value;
}

// optional string prt_name = 2;
inline bool PrtCenterSvr_UserPrintReq::has_prt_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrtCenterSvr_UserPrintReq::set_has_prt_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrtCenterSvr_UserPrintReq::clear_has_prt_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrtCenterSvr_UserPrintReq::clear_prt_name() {
  if (prt_name_ != &::google::protobuf::internal::kEmptyString) {
    prt_name_->clear();
  }
  clear_has_prt_name();
}
inline const ::std::string& PrtCenterSvr_UserPrintReq::prt_name() const {
  return *prt_name_;
}
inline void PrtCenterSvr_UserPrintReq::set_prt_name(const ::std::string& value) {
  set_has_prt_name();
  if (prt_name_ == &::google::protobuf::internal::kEmptyString) {
    prt_name_ = new ::std::string;
  }
  prt_name_->assign(value);
}
inline void PrtCenterSvr_UserPrintReq::set_prt_name(const char* value) {
  set_has_prt_name();
  if (prt_name_ == &::google::protobuf::internal::kEmptyString) {
    prt_name_ = new ::std::string;
  }
  prt_name_->assign(value);
}
inline void PrtCenterSvr_UserPrintReq::set_prt_name(const char* value, size_t size) {
  set_has_prt_name();
  if (prt_name_ == &::google::protobuf::internal::kEmptyString) {
    prt_name_ = new ::std::string;
  }
  prt_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtCenterSvr_UserPrintReq::mutable_prt_name() {
  set_has_prt_name();
  if (prt_name_ == &::google::protobuf::internal::kEmptyString) {
    prt_name_ = new ::std::string;
  }
  return prt_name_;
}
inline ::std::string* PrtCenterSvr_UserPrintReq::release_prt_name() {
  clear_has_prt_name();
  if (prt_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = prt_name_;
    prt_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string user_name = 3;
inline bool PrtCenterSvr_UserPrintReq::has_user_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrtCenterSvr_UserPrintReq::set_has_user_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrtCenterSvr_UserPrintReq::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrtCenterSvr_UserPrintReq::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& PrtCenterSvr_UserPrintReq::user_name() const {
  return *user_name_;
}
inline void PrtCenterSvr_UserPrintReq::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void PrtCenterSvr_UserPrintReq::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void PrtCenterSvr_UserPrintReq::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtCenterSvr_UserPrintReq::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* PrtCenterSvr_UserPrintReq::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string doc_name = 4;
inline bool PrtCenterSvr_UserPrintReq::has_doc_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrtCenterSvr_UserPrintReq::set_has_doc_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrtCenterSvr_UserPrintReq::clear_has_doc_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrtCenterSvr_UserPrintReq::clear_doc_name() {
  if (doc_name_ != &::google::protobuf::internal::kEmptyString) {
    doc_name_->clear();
  }
  clear_has_doc_name();
}
inline const ::std::string& PrtCenterSvr_UserPrintReq::doc_name() const {
  return *doc_name_;
}
inline void PrtCenterSvr_UserPrintReq::set_doc_name(const ::std::string& value) {
  set_has_doc_name();
  if (doc_name_ == &::google::protobuf::internal::kEmptyString) {
    doc_name_ = new ::std::string;
  }
  doc_name_->assign(value);
}
inline void PrtCenterSvr_UserPrintReq::set_doc_name(const char* value) {
  set_has_doc_name();
  if (doc_name_ == &::google::protobuf::internal::kEmptyString) {
    doc_name_ = new ::std::string;
  }
  doc_name_->assign(value);
}
inline void PrtCenterSvr_UserPrintReq::set_doc_name(const char* value, size_t size) {
  set_has_doc_name();
  if (doc_name_ == &::google::protobuf::internal::kEmptyString) {
    doc_name_ = new ::std::string;
  }
  doc_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtCenterSvr_UserPrintReq::mutable_doc_name() {
  set_has_doc_name();
  if (doc_name_ == &::google::protobuf::internal::kEmptyString) {
    doc_name_ = new ::std::string;
  }
  return doc_name_;
}
inline ::std::string* PrtCenterSvr_UserPrintReq::release_doc_name() {
  clear_has_doc_name();
  if (doc_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = doc_name_;
    doc_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 doc_id = 5;
inline bool PrtCenterSvr_UserPrintReq::has_doc_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PrtCenterSvr_UserPrintReq::set_has_doc_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PrtCenterSvr_UserPrintReq::clear_has_doc_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PrtCenterSvr_UserPrintReq::clear_doc_id() {
  doc_id_ = 0;
  clear_has_doc_id();
}
inline ::google::protobuf::int32 PrtCenterSvr_UserPrintReq::doc_id() const {
  return doc_id_;
}
inline void PrtCenterSvr_UserPrintReq::set_doc_id(::google::protobuf::int32 value) {
  set_has_doc_id();
  doc_id_ = value;
}

// optional string page_type = 6;
inline bool PrtCenterSvr_UserPrintReq::has_page_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PrtCenterSvr_UserPrintReq::set_has_page_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PrtCenterSvr_UserPrintReq::clear_has_page_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PrtCenterSvr_UserPrintReq::clear_page_type() {
  if (page_type_ != &::google::protobuf::internal::kEmptyString) {
    page_type_->clear();
  }
  clear_has_page_type();
}
inline const ::std::string& PrtCenterSvr_UserPrintReq::page_type() const {
  return *page_type_;
}
inline void PrtCenterSvr_UserPrintReq::set_page_type(const ::std::string& value) {
  set_has_page_type();
  if (page_type_ == &::google::protobuf::internal::kEmptyString) {
    page_type_ = new ::std::string;
  }
  page_type_->assign(value);
}
inline void PrtCenterSvr_UserPrintReq::set_page_type(const char* value) {
  set_has_page_type();
  if (page_type_ == &::google::protobuf::internal::kEmptyString) {
    page_type_ = new ::std::string;
  }
  page_type_->assign(value);
}
inline void PrtCenterSvr_UserPrintReq::set_page_type(const char* value, size_t size) {
  set_has_page_type();
  if (page_type_ == &::google::protobuf::internal::kEmptyString) {
    page_type_ = new ::std::string;
  }
  page_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtCenterSvr_UserPrintReq::mutable_page_type() {
  set_has_page_type();
  if (page_type_ == &::google::protobuf::internal::kEmptyString) {
    page_type_ = new ::std::string;
  }
  return page_type_;
}
inline ::std::string* PrtCenterSvr_UserPrintReq::release_page_type() {
  clear_has_page_type();
  if (page_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = page_type_;
    page_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 page_count = 7;
inline bool PrtCenterSvr_UserPrintReq::has_page_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PrtCenterSvr_UserPrintReq::set_has_page_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PrtCenterSvr_UserPrintReq::clear_has_page_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PrtCenterSvr_UserPrintReq::clear_page_count() {
  page_count_ = 0;
  clear_has_page_count();
}
inline ::google::protobuf::int32 PrtCenterSvr_UserPrintReq::page_count() const {
  return page_count_;
}
inline void PrtCenterSvr_UserPrintReq::set_page_count(::google::protobuf::int32 value) {
  set_has_page_count();
  page_count_ = value;
}

// optional int32 color = 8;
inline bool PrtCenterSvr_UserPrintReq::has_color() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PrtCenterSvr_UserPrintReq::set_has_color() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PrtCenterSvr_UserPrintReq::clear_has_color() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PrtCenterSvr_UserPrintReq::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::google::protobuf::int32 PrtCenterSvr_UserPrintReq::color() const {
  return color_;
}
inline void PrtCenterSvr_UserPrintReq::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
}

// optional int32 job_size = 9;
inline bool PrtCenterSvr_UserPrintReq::has_job_size() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PrtCenterSvr_UserPrintReq::set_has_job_size() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PrtCenterSvr_UserPrintReq::clear_has_job_size() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PrtCenterSvr_UserPrintReq::clear_job_size() {
  job_size_ = 0;
  clear_has_job_size();
}
inline ::google::protobuf::int32 PrtCenterSvr_UserPrintReq::job_size() const {
  return job_size_;
}
inline void PrtCenterSvr_UserPrintReq::set_job_size(::google::protobuf::int32 value) {
  set_has_job_size();
  job_size_ = value;
}

// optional int32 job_id_SqlLite = 10;
inline bool PrtCenterSvr_UserPrintReq::has_job_id_sqllite() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PrtCenterSvr_UserPrintReq::set_has_job_id_sqllite() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PrtCenterSvr_UserPrintReq::clear_has_job_id_sqllite() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PrtCenterSvr_UserPrintReq::clear_job_id_sqllite() {
  job_id_sqllite_ = 0;
  clear_has_job_id_sqllite();
}
inline ::google::protobuf::int32 PrtCenterSvr_UserPrintReq::job_id_sqllite() const {
  return job_id_sqllite_;
}
inline void PrtCenterSvr_UserPrintReq::set_job_id_sqllite(::google::protobuf::int32 value) {
  set_has_job_id_sqllite();
  job_id_sqllite_ = value;
}

// optional int32 jobid_ji2 = 11;
inline bool PrtCenterSvr_UserPrintReq::has_jobid_ji2() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PrtCenterSvr_UserPrintReq::set_has_jobid_ji2() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PrtCenterSvr_UserPrintReq::clear_has_jobid_ji2() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PrtCenterSvr_UserPrintReq::clear_jobid_ji2() {
  jobid_ji2_ = 0;
  clear_has_jobid_ji2();
}
inline ::google::protobuf::int32 PrtCenterSvr_UserPrintReq::jobid_ji2() const {
  return jobid_ji2_;
}
inline void PrtCenterSvr_UserPrintReq::set_jobid_ji2(::google::protobuf::int32 value) {
  set_has_jobid_ji2();
  jobid_ji2_ = value;
}

// optional string printername = 12;
inline bool PrtCenterSvr_UserPrintReq::has_printername() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PrtCenterSvr_UserPrintReq::set_has_printername() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PrtCenterSvr_UserPrintReq::clear_has_printername() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PrtCenterSvr_UserPrintReq::clear_printername() {
  if (printername_ != &::google::protobuf::internal::kEmptyString) {
    printername_->clear();
  }
  clear_has_printername();
}
inline const ::std::string& PrtCenterSvr_UserPrintReq::printername() const {
  return *printername_;
}
inline void PrtCenterSvr_UserPrintReq::set_printername(const ::std::string& value) {
  set_has_printername();
  if (printername_ == &::google::protobuf::internal::kEmptyString) {
    printername_ = new ::std::string;
  }
  printername_->assign(value);
}
inline void PrtCenterSvr_UserPrintReq::set_printername(const char* value) {
  set_has_printername();
  if (printername_ == &::google::protobuf::internal::kEmptyString) {
    printername_ = new ::std::string;
  }
  printername_->assign(value);
}
inline void PrtCenterSvr_UserPrintReq::set_printername(const char* value, size_t size) {
  set_has_printername();
  if (printername_ == &::google::protobuf::internal::kEmptyString) {
    printername_ = new ::std::string;
  }
  printername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtCenterSvr_UserPrintReq::mutable_printername() {
  set_has_printername();
  if (printername_ == &::google::protobuf::internal::kEmptyString) {
    printername_ = new ::std::string;
  }
  return printername_;
}
inline ::std::string* PrtCenterSvr_UserPrintReq::release_printername() {
  clear_has_printername();
  if (printername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = printername_;
    printername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string machinename = 13;
inline bool PrtCenterSvr_UserPrintReq::has_machinename() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PrtCenterSvr_UserPrintReq::set_has_machinename() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PrtCenterSvr_UserPrintReq::clear_has_machinename() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PrtCenterSvr_UserPrintReq::clear_machinename() {
  if (machinename_ != &::google::protobuf::internal::kEmptyString) {
    machinename_->clear();
  }
  clear_has_machinename();
}
inline const ::std::string& PrtCenterSvr_UserPrintReq::machinename() const {
  return *machinename_;
}
inline void PrtCenterSvr_UserPrintReq::set_machinename(const ::std::string& value) {
  set_has_machinename();
  if (machinename_ == &::google::protobuf::internal::kEmptyString) {
    machinename_ = new ::std::string;
  }
  machinename_->assign(value);
}
inline void PrtCenterSvr_UserPrintReq::set_machinename(const char* value) {
  set_has_machinename();
  if (machinename_ == &::google::protobuf::internal::kEmptyString) {
    machinename_ = new ::std::string;
  }
  machinename_->assign(value);
}
inline void PrtCenterSvr_UserPrintReq::set_machinename(const char* value, size_t size) {
  set_has_machinename();
  if (machinename_ == &::google::protobuf::internal::kEmptyString) {
    machinename_ = new ::std::string;
  }
  machinename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtCenterSvr_UserPrintReq::mutable_machinename() {
  set_has_machinename();
  if (machinename_ == &::google::protobuf::internal::kEmptyString) {
    machinename_ = new ::std::string;
  }
  return machinename_;
}
inline ::std::string* PrtCenterSvr_UserPrintReq::release_machinename() {
  clear_has_machinename();
  if (machinename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = machinename_;
    machinename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string username = 14;
inline bool PrtCenterSvr_UserPrintReq::has_username() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PrtCenterSvr_UserPrintReq::set_has_username() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PrtCenterSvr_UserPrintReq::clear_has_username() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PrtCenterSvr_UserPrintReq::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& PrtCenterSvr_UserPrintReq::username() const {
  return *username_;
}
inline void PrtCenterSvr_UserPrintReq::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void PrtCenterSvr_UserPrintReq::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void PrtCenterSvr_UserPrintReq::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtCenterSvr_UserPrintReq::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* PrtCenterSvr_UserPrintReq::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string doucment = 15;
inline bool PrtCenterSvr_UserPrintReq::has_doucment() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PrtCenterSvr_UserPrintReq::set_has_doucment() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PrtCenterSvr_UserPrintReq::clear_has_doucment() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PrtCenterSvr_UserPrintReq::clear_doucment() {
  if (doucment_ != &::google::protobuf::internal::kEmptyString) {
    doucment_->clear();
  }
  clear_has_doucment();
}
inline const ::std::string& PrtCenterSvr_UserPrintReq::doucment() const {
  return *doucment_;
}
inline void PrtCenterSvr_UserPrintReq::set_doucment(const ::std::string& value) {
  set_has_doucment();
  if (doucment_ == &::google::protobuf::internal::kEmptyString) {
    doucment_ = new ::std::string;
  }
  doucment_->assign(value);
}
inline void PrtCenterSvr_UserPrintReq::set_doucment(const char* value) {
  set_has_doucment();
  if (doucment_ == &::google::protobuf::internal::kEmptyString) {
    doucment_ = new ::std::string;
  }
  doucment_->assign(value);
}
inline void PrtCenterSvr_UserPrintReq::set_doucment(const char* value, size_t size) {
  set_has_doucment();
  if (doucment_ == &::google::protobuf::internal::kEmptyString) {
    doucment_ = new ::std::string;
  }
  doucment_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtCenterSvr_UserPrintReq::mutable_doucment() {
  set_has_doucment();
  if (doucment_ == &::google::protobuf::internal::kEmptyString) {
    doucment_ = new ::std::string;
  }
  return doucment_;
}
inline ::std::string* PrtCenterSvr_UserPrintReq::release_doucment() {
  clear_has_doucment();
  if (doucment_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = doucment_;
    doucment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string notifyname = 16;
inline bool PrtCenterSvr_UserPrintReq::has_notifyname() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PrtCenterSvr_UserPrintReq::set_has_notifyname() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PrtCenterSvr_UserPrintReq::clear_has_notifyname() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PrtCenterSvr_UserPrintReq::clear_notifyname() {
  if (notifyname_ != &::google::protobuf::internal::kEmptyString) {
    notifyname_->clear();
  }
  clear_has_notifyname();
}
inline const ::std::string& PrtCenterSvr_UserPrintReq::notifyname() const {
  return *notifyname_;
}
inline void PrtCenterSvr_UserPrintReq::set_notifyname(const ::std::string& value) {
  set_has_notifyname();
  if (notifyname_ == &::google::protobuf::internal::kEmptyString) {
    notifyname_ = new ::std::string;
  }
  notifyname_->assign(value);
}
inline void PrtCenterSvr_UserPrintReq::set_notifyname(const char* value) {
  set_has_notifyname();
  if (notifyname_ == &::google::protobuf::internal::kEmptyString) {
    notifyname_ = new ::std::string;
  }
  notifyname_->assign(value);
}
inline void PrtCenterSvr_UserPrintReq::set_notifyname(const char* value, size_t size) {
  set_has_notifyname();
  if (notifyname_ == &::google::protobuf::internal::kEmptyString) {
    notifyname_ = new ::std::string;
  }
  notifyname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtCenterSvr_UserPrintReq::mutable_notifyname() {
  set_has_notifyname();
  if (notifyname_ == &::google::protobuf::internal::kEmptyString) {
    notifyname_ = new ::std::string;
  }
  return notifyname_;
}
inline ::std::string* PrtCenterSvr_UserPrintReq::release_notifyname() {
  clear_has_notifyname();
  if (notifyname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = notifyname_;
    notifyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string datatype = 17;
inline bool PrtCenterSvr_UserPrintReq::has_datatype() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PrtCenterSvr_UserPrintReq::set_has_datatype() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PrtCenterSvr_UserPrintReq::clear_has_datatype() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PrtCenterSvr_UserPrintReq::clear_datatype() {
  if (datatype_ != &::google::protobuf::internal::kEmptyString) {
    datatype_->clear();
  }
  clear_has_datatype();
}
inline const ::std::string& PrtCenterSvr_UserPrintReq::datatype() const {
  return *datatype_;
}
inline void PrtCenterSvr_UserPrintReq::set_datatype(const ::std::string& value) {
  set_has_datatype();
  if (datatype_ == &::google::protobuf::internal::kEmptyString) {
    datatype_ = new ::std::string;
  }
  datatype_->assign(value);
}
inline void PrtCenterSvr_UserPrintReq::set_datatype(const char* value) {
  set_has_datatype();
  if (datatype_ == &::google::protobuf::internal::kEmptyString) {
    datatype_ = new ::std::string;
  }
  datatype_->assign(value);
}
inline void PrtCenterSvr_UserPrintReq::set_datatype(const char* value, size_t size) {
  set_has_datatype();
  if (datatype_ == &::google::protobuf::internal::kEmptyString) {
    datatype_ = new ::std::string;
  }
  datatype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtCenterSvr_UserPrintReq::mutable_datatype() {
  set_has_datatype();
  if (datatype_ == &::google::protobuf::internal::kEmptyString) {
    datatype_ = new ::std::string;
  }
  return datatype_;
}
inline ::std::string* PrtCenterSvr_UserPrintReq::release_datatype() {
  clear_has_datatype();
  if (datatype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = datatype_;
    datatype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string paramenters = 18;
inline bool PrtCenterSvr_UserPrintReq::has_paramenters() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PrtCenterSvr_UserPrintReq::set_has_paramenters() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PrtCenterSvr_UserPrintReq::clear_has_paramenters() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PrtCenterSvr_UserPrintReq::clear_paramenters() {
  if (paramenters_ != &::google::protobuf::internal::kEmptyString) {
    paramenters_->clear();
  }
  clear_has_paramenters();
}
inline const ::std::string& PrtCenterSvr_UserPrintReq::paramenters() const {
  return *paramenters_;
}
inline void PrtCenterSvr_UserPrintReq::set_paramenters(const ::std::string& value) {
  set_has_paramenters();
  if (paramenters_ == &::google::protobuf::internal::kEmptyString) {
    paramenters_ = new ::std::string;
  }
  paramenters_->assign(value);
}
inline void PrtCenterSvr_UserPrintReq::set_paramenters(const char* value) {
  set_has_paramenters();
  if (paramenters_ == &::google::protobuf::internal::kEmptyString) {
    paramenters_ = new ::std::string;
  }
  paramenters_->assign(value);
}
inline void PrtCenterSvr_UserPrintReq::set_paramenters(const char* value, size_t size) {
  set_has_paramenters();
  if (paramenters_ == &::google::protobuf::internal::kEmptyString) {
    paramenters_ = new ::std::string;
  }
  paramenters_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtCenterSvr_UserPrintReq::mutable_paramenters() {
  set_has_paramenters();
  if (paramenters_ == &::google::protobuf::internal::kEmptyString) {
    paramenters_ = new ::std::string;
  }
  return paramenters_;
}
inline ::std::string* PrtCenterSvr_UserPrintReq::release_paramenters() {
  clear_has_paramenters();
  if (paramenters_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = paramenters_;
    paramenters_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string driver_name = 19;
inline bool PrtCenterSvr_UserPrintReq::has_driver_name() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PrtCenterSvr_UserPrintReq::set_has_driver_name() {
  _has_bits_[0] |= 0x00040000u;
}
inline void PrtCenterSvr_UserPrintReq::clear_has_driver_name() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void PrtCenterSvr_UserPrintReq::clear_driver_name() {
  if (driver_name_ != &::google::protobuf::internal::kEmptyString) {
    driver_name_->clear();
  }
  clear_has_driver_name();
}
inline const ::std::string& PrtCenterSvr_UserPrintReq::driver_name() const {
  return *driver_name_;
}
inline void PrtCenterSvr_UserPrintReq::set_driver_name(const ::std::string& value) {
  set_has_driver_name();
  if (driver_name_ == &::google::protobuf::internal::kEmptyString) {
    driver_name_ = new ::std::string;
  }
  driver_name_->assign(value);
}
inline void PrtCenterSvr_UserPrintReq::set_driver_name(const char* value) {
  set_has_driver_name();
  if (driver_name_ == &::google::protobuf::internal::kEmptyString) {
    driver_name_ = new ::std::string;
  }
  driver_name_->assign(value);
}
inline void PrtCenterSvr_UserPrintReq::set_driver_name(const char* value, size_t size) {
  set_has_driver_name();
  if (driver_name_ == &::google::protobuf::internal::kEmptyString) {
    driver_name_ = new ::std::string;
  }
  driver_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtCenterSvr_UserPrintReq::mutable_driver_name() {
  set_has_driver_name();
  if (driver_name_ == &::google::protobuf::internal::kEmptyString) {
    driver_name_ = new ::std::string;
  }
  return driver_name_;
}
inline ::std::string* PrtCenterSvr_UserPrintReq::release_driver_name() {
  clear_has_driver_name();
  if (driver_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = driver_name_;
    driver_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 device_mode = 20;
inline bool PrtCenterSvr_UserPrintReq::has_device_mode() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void PrtCenterSvr_UserPrintReq::set_has_device_mode() {
  _has_bits_[0] |= 0x00080000u;
}
inline void PrtCenterSvr_UserPrintReq::clear_has_device_mode() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void PrtCenterSvr_UserPrintReq::clear_device_mode() {
  device_mode_ = 0;
  clear_has_device_mode();
}
inline ::google::protobuf::int32 PrtCenterSvr_UserPrintReq::device_mode() const {
  return device_mode_;
}
inline void PrtCenterSvr_UserPrintReq::set_device_mode(::google::protobuf::int32 value) {
  set_has_device_mode();
  device_mode_ = value;
}

// optional string pstatus = 21;
inline bool PrtCenterSvr_UserPrintReq::has_pstatus() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void PrtCenterSvr_UserPrintReq::set_has_pstatus() {
  _has_bits_[0] |= 0x00100000u;
}
inline void PrtCenterSvr_UserPrintReq::clear_has_pstatus() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void PrtCenterSvr_UserPrintReq::clear_pstatus() {
  if (pstatus_ != &::google::protobuf::internal::kEmptyString) {
    pstatus_->clear();
  }
  clear_has_pstatus();
}
inline const ::std::string& PrtCenterSvr_UserPrintReq::pstatus() const {
  return *pstatus_;
}
inline void PrtCenterSvr_UserPrintReq::set_pstatus(const ::std::string& value) {
  set_has_pstatus();
  if (pstatus_ == &::google::protobuf::internal::kEmptyString) {
    pstatus_ = new ::std::string;
  }
  pstatus_->assign(value);
}
inline void PrtCenterSvr_UserPrintReq::set_pstatus(const char* value) {
  set_has_pstatus();
  if (pstatus_ == &::google::protobuf::internal::kEmptyString) {
    pstatus_ = new ::std::string;
  }
  pstatus_->assign(value);
}
inline void PrtCenterSvr_UserPrintReq::set_pstatus(const char* value, size_t size) {
  set_has_pstatus();
  if (pstatus_ == &::google::protobuf::internal::kEmptyString) {
    pstatus_ = new ::std::string;
  }
  pstatus_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtCenterSvr_UserPrintReq::mutable_pstatus() {
  set_has_pstatus();
  if (pstatus_ == &::google::protobuf::internal::kEmptyString) {
    pstatus_ = new ::std::string;
  }
  return pstatus_;
}
inline ::std::string* PrtCenterSvr_UserPrintReq::release_pstatus() {
  clear_has_pstatus();
  if (pstatus_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pstatus_;
    pstatus_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 status = 22;
inline bool PrtCenterSvr_UserPrintReq::has_status() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void PrtCenterSvr_UserPrintReq::set_has_status() {
  _has_bits_[0] |= 0x00200000u;
}
inline void PrtCenterSvr_UserPrintReq::clear_has_status() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void PrtCenterSvr_UserPrintReq::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 PrtCenterSvr_UserPrintReq::status() const {
  return status_;
}
inline void PrtCenterSvr_UserPrintReq::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional int32 priority = 23;
inline bool PrtCenterSvr_UserPrintReq::has_priority() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void PrtCenterSvr_UserPrintReq::set_has_priority() {
  _has_bits_[0] |= 0x00400000u;
}
inline void PrtCenterSvr_UserPrintReq::clear_has_priority() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void PrtCenterSvr_UserPrintReq::clear_priority() {
  priority_ = 0;
  clear_has_priority();
}
inline ::google::protobuf::int32 PrtCenterSvr_UserPrintReq::priority() const {
  return priority_;
}
inline void PrtCenterSvr_UserPrintReq::set_priority(::google::protobuf::int32 value) {
  set_has_priority();
  priority_ = value;
}

// optional int32 position = 24;
inline bool PrtCenterSvr_UserPrintReq::has_position() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void PrtCenterSvr_UserPrintReq::set_has_position() {
  _has_bits_[0] |= 0x00800000u;
}
inline void PrtCenterSvr_UserPrintReq::clear_has_position() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void PrtCenterSvr_UserPrintReq::clear_position() {
  position_ = 0;
  clear_has_position();
}
inline ::google::protobuf::int32 PrtCenterSvr_UserPrintReq::position() const {
  return position_;
}
inline void PrtCenterSvr_UserPrintReq::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
}

// optional int32 starttime = 25;
inline bool PrtCenterSvr_UserPrintReq::has_starttime() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void PrtCenterSvr_UserPrintReq::set_has_starttime() {
  _has_bits_[0] |= 0x01000000u;
}
inline void PrtCenterSvr_UserPrintReq::clear_has_starttime() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void PrtCenterSvr_UserPrintReq::clear_starttime() {
  starttime_ = 0;
  clear_has_starttime();
}
inline ::google::protobuf::int32 PrtCenterSvr_UserPrintReq::starttime() const {
  return starttime_;
}
inline void PrtCenterSvr_UserPrintReq::set_starttime(::google::protobuf::int32 value) {
  set_has_starttime();
  starttime_ = value;
}

// optional int32 untiltime = 26;
inline bool PrtCenterSvr_UserPrintReq::has_untiltime() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void PrtCenterSvr_UserPrintReq::set_has_untiltime() {
  _has_bits_[0] |= 0x02000000u;
}
inline void PrtCenterSvr_UserPrintReq::clear_has_untiltime() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void PrtCenterSvr_UserPrintReq::clear_untiltime() {
  untiltime_ = 0;
  clear_has_untiltime();
}
inline ::google::protobuf::int32 PrtCenterSvr_UserPrintReq::untiltime() const {
  return untiltime_;
}
inline void PrtCenterSvr_UserPrintReq::set_untiltime(::google::protobuf::int32 value) {
  set_has_untiltime();
  untiltime_ = value;
}

// optional int32 totalpages = 27;
inline bool PrtCenterSvr_UserPrintReq::has_totalpages() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void PrtCenterSvr_UserPrintReq::set_has_totalpages() {
  _has_bits_[0] |= 0x04000000u;
}
inline void PrtCenterSvr_UserPrintReq::clear_has_totalpages() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void PrtCenterSvr_UserPrintReq::clear_totalpages() {
  totalpages_ = 0;
  clear_has_totalpages();
}
inline ::google::protobuf::int32 PrtCenterSvr_UserPrintReq::totalpages() const {
  return totalpages_;
}
inline void PrtCenterSvr_UserPrintReq::set_totalpages(::google::protobuf::int32 value) {
  set_has_totalpages();
  totalpages_ = value;
}

// optional int32 size = 28;
inline bool PrtCenterSvr_UserPrintReq::has_size() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void PrtCenterSvr_UserPrintReq::set_has_size() {
  _has_bits_[0] |= 0x08000000u;
}
inline void PrtCenterSvr_UserPrintReq::clear_has_size() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void PrtCenterSvr_UserPrintReq::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 PrtCenterSvr_UserPrintReq::size() const {
  return size_;
}
inline void PrtCenterSvr_UserPrintReq::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
}

// optional string submitted = 29;
inline bool PrtCenterSvr_UserPrintReq::has_submitted() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void PrtCenterSvr_UserPrintReq::set_has_submitted() {
  _has_bits_[0] |= 0x10000000u;
}
inline void PrtCenterSvr_UserPrintReq::clear_has_submitted() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void PrtCenterSvr_UserPrintReq::clear_submitted() {
  if (submitted_ != &::google::protobuf::internal::kEmptyString) {
    submitted_->clear();
  }
  clear_has_submitted();
}
inline const ::std::string& PrtCenterSvr_UserPrintReq::submitted() const {
  return *submitted_;
}
inline void PrtCenterSvr_UserPrintReq::set_submitted(const ::std::string& value) {
  set_has_submitted();
  if (submitted_ == &::google::protobuf::internal::kEmptyString) {
    submitted_ = new ::std::string;
  }
  submitted_->assign(value);
}
inline void PrtCenterSvr_UserPrintReq::set_submitted(const char* value) {
  set_has_submitted();
  if (submitted_ == &::google::protobuf::internal::kEmptyString) {
    submitted_ = new ::std::string;
  }
  submitted_->assign(value);
}
inline void PrtCenterSvr_UserPrintReq::set_submitted(const char* value, size_t size) {
  set_has_submitted();
  if (submitted_ == &::google::protobuf::internal::kEmptyString) {
    submitted_ = new ::std::string;
  }
  submitted_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtCenterSvr_UserPrintReq::mutable_submitted() {
  set_has_submitted();
  if (submitted_ == &::google::protobuf::internal::kEmptyString) {
    submitted_ = new ::std::string;
  }
  return submitted_;
}
inline ::std::string* PrtCenterSvr_UserPrintReq::release_submitted() {
  clear_has_submitted();
  if (submitted_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = submitted_;
    submitted_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 time = 30;
inline bool PrtCenterSvr_UserPrintReq::has_time() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void PrtCenterSvr_UserPrintReq::set_has_time() {
  _has_bits_[0] |= 0x20000000u;
}
inline void PrtCenterSvr_UserPrintReq::clear_has_time() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void PrtCenterSvr_UserPrintReq::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 PrtCenterSvr_UserPrintReq::time() const {
  return time_;
}
inline void PrtCenterSvr_UserPrintReq::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// optional int32 pagesprinted = 31;
inline bool PrtCenterSvr_UserPrintReq::has_pagesprinted() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void PrtCenterSvr_UserPrintReq::set_has_pagesprinted() {
  _has_bits_[0] |= 0x40000000u;
}
inline void PrtCenterSvr_UserPrintReq::clear_has_pagesprinted() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void PrtCenterSvr_UserPrintReq::clear_pagesprinted() {
  pagesprinted_ = 0;
  clear_has_pagesprinted();
}
inline ::google::protobuf::int32 PrtCenterSvr_UserPrintReq::pagesprinted() const {
  return pagesprinted_;
}
inline void PrtCenterSvr_UserPrintReq::set_pagesprinted(::google::protobuf::int32 value) {
  set_has_pagesprinted();
  pagesprinted_ = value;
}

// optional string spl_path = 32;
inline bool PrtCenterSvr_UserPrintReq::has_spl_path() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void PrtCenterSvr_UserPrintReq::set_has_spl_path() {
  _has_bits_[0] |= 0x80000000u;
}
inline void PrtCenterSvr_UserPrintReq::clear_has_spl_path() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void PrtCenterSvr_UserPrintReq::clear_spl_path() {
  if (spl_path_ != &::google::protobuf::internal::kEmptyString) {
    spl_path_->clear();
  }
  clear_has_spl_path();
}
inline const ::std::string& PrtCenterSvr_UserPrintReq::spl_path() const {
  return *spl_path_;
}
inline void PrtCenterSvr_UserPrintReq::set_spl_path(const ::std::string& value) {
  set_has_spl_path();
  if (spl_path_ == &::google::protobuf::internal::kEmptyString) {
    spl_path_ = new ::std::string;
  }
  spl_path_->assign(value);
}
inline void PrtCenterSvr_UserPrintReq::set_spl_path(const char* value) {
  set_has_spl_path();
  if (spl_path_ == &::google::protobuf::internal::kEmptyString) {
    spl_path_ = new ::std::string;
  }
  spl_path_->assign(value);
}
inline void PrtCenterSvr_UserPrintReq::set_spl_path(const char* value, size_t size) {
  set_has_spl_path();
  if (spl_path_ == &::google::protobuf::internal::kEmptyString) {
    spl_path_ = new ::std::string;
  }
  spl_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtCenterSvr_UserPrintReq::mutable_spl_path() {
  set_has_spl_path();
  if (spl_path_ == &::google::protobuf::internal::kEmptyString) {
    spl_path_ = new ::std::string;
  }
  return spl_path_;
}
inline ::std::string* PrtCenterSvr_UserPrintReq::release_spl_path() {
  clear_has_spl_path();
  if (spl_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = spl_path_;
    spl_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 ret_user_id = 33;
inline bool PrtCenterSvr_UserPrintReq::has_ret_user_id() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void PrtCenterSvr_UserPrintReq::set_has_ret_user_id() {
  _has_bits_[1] |= 0x00000001u;
}
inline void PrtCenterSvr_UserPrintReq::clear_has_ret_user_id() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void PrtCenterSvr_UserPrintReq::clear_ret_user_id() {
  ret_user_id_ = 0;
  clear_has_ret_user_id();
}
inline ::google::protobuf::int32 PrtCenterSvr_UserPrintReq::ret_user_id() const {
  return ret_user_id_;
}
inline void PrtCenterSvr_UserPrintReq::set_ret_user_id(::google::protobuf::int32 value) {
  set_has_ret_user_id();
  ret_user_id_ = value;
}

// optional int32 ret_ack_type = 34;
inline bool PrtCenterSvr_UserPrintReq::has_ret_ack_type() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void PrtCenterSvr_UserPrintReq::set_has_ret_ack_type() {
  _has_bits_[1] |= 0x00000002u;
}
inline void PrtCenterSvr_UserPrintReq::clear_has_ret_ack_type() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void PrtCenterSvr_UserPrintReq::clear_ret_ack_type() {
  ret_ack_type_ = 0;
  clear_has_ret_ack_type();
}
inline ::google::protobuf::int32 PrtCenterSvr_UserPrintReq::ret_ack_type() const {
  return ret_ack_type_;
}
inline void PrtCenterSvr_UserPrintReq::set_ret_ack_type(::google::protobuf::int32 value) {
  set_has_ret_ack_type();
  ret_ack_type_ = value;
}

// optional int32 paper_size = 50;
inline bool PrtCenterSvr_UserPrintReq::has_paper_size() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void PrtCenterSvr_UserPrintReq::set_has_paper_size() {
  _has_bits_[1] |= 0x00000004u;
}
inline void PrtCenterSvr_UserPrintReq::clear_has_paper_size() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void PrtCenterSvr_UserPrintReq::clear_paper_size() {
  paper_size_ = 0;
  clear_has_paper_size();
}
inline ::google::protobuf::int32 PrtCenterSvr_UserPrintReq::paper_size() const {
  return paper_size_;
}
inline void PrtCenterSvr_UserPrintReq::set_paper_size(::google::protobuf::int32 value) {
  set_has_paper_size();
  paper_size_ = value;
}

// optional int32 dm_copies = 51;
inline bool PrtCenterSvr_UserPrintReq::has_dm_copies() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void PrtCenterSvr_UserPrintReq::set_has_dm_copies() {
  _has_bits_[1] |= 0x00000008u;
}
inline void PrtCenterSvr_UserPrintReq::clear_has_dm_copies() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void PrtCenterSvr_UserPrintReq::clear_dm_copies() {
  dm_copies_ = 0;
  clear_has_dm_copies();
}
inline ::google::protobuf::int32 PrtCenterSvr_UserPrintReq::dm_copies() const {
  return dm_copies_;
}
inline void PrtCenterSvr_UserPrintReq::set_dm_copies(::google::protobuf::int32 value) {
  set_has_dm_copies();
  dm_copies_ = value;
}

// optional int32 dm_Orientation = 52;
inline bool PrtCenterSvr_UserPrintReq::has_dm_orientation() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void PrtCenterSvr_UserPrintReq::set_has_dm_orientation() {
  _has_bits_[1] |= 0x00000010u;
}
inline void PrtCenterSvr_UserPrintReq::clear_has_dm_orientation() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void PrtCenterSvr_UserPrintReq::clear_dm_orientation() {
  dm_orientation_ = 0;
  clear_has_dm_orientation();
}
inline ::google::protobuf::int32 PrtCenterSvr_UserPrintReq::dm_orientation() const {
  return dm_orientation_;
}
inline void PrtCenterSvr_UserPrintReq::set_dm_orientation(::google::protobuf::int32 value) {
  set_has_dm_orientation();
  dm_orientation_ = value;
}

// optional int32 double_print = 53;
inline bool PrtCenterSvr_UserPrintReq::has_double_print() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void PrtCenterSvr_UserPrintReq::set_has_double_print() {
  _has_bits_[1] |= 0x00000020u;
}
inline void PrtCenterSvr_UserPrintReq::clear_has_double_print() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void PrtCenterSvr_UserPrintReq::clear_double_print() {
  double_print_ = 0;
  clear_has_double_print();
}
inline ::google::protobuf::int32 PrtCenterSvr_UserPrintReq::double_print() const {
  return double_print_;
}
inline void PrtCenterSvr_UserPrintReq::set_double_print(::google::protobuf::int32 value) {
  set_has_double_print();
  double_print_ = value;
}

// optional double submit_time = 54;
inline bool PrtCenterSvr_UserPrintReq::has_submit_time() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void PrtCenterSvr_UserPrintReq::set_has_submit_time() {
  _has_bits_[1] |= 0x00000040u;
}
inline void PrtCenterSvr_UserPrintReq::clear_has_submit_time() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void PrtCenterSvr_UserPrintReq::clear_submit_time() {
  submit_time_ = 0;
  clear_has_submit_time();
}
inline double PrtCenterSvr_UserPrintReq::submit_time() const {
  return submit_time_;
}
inline void PrtCenterSvr_UserPrintReq::set_submit_time(double value) {
  set_has_submit_time();
  submit_time_ = value;
}

// -------------------------------------------------------------------

// AdjustPrintCountInfo

// optional int32 userid = 1;
inline bool AdjustPrintCountInfo::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdjustPrintCountInfo::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdjustPrintCountInfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdjustPrintCountInfo::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 AdjustPrintCountInfo::userid() const {
  return userid_;
}
inline void AdjustPrintCountInfo::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional int32 accountid = 2;
inline bool AdjustPrintCountInfo::has_accountid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AdjustPrintCountInfo::set_has_accountid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AdjustPrintCountInfo::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AdjustPrintCountInfo::clear_accountid() {
  accountid_ = 0;
  clear_has_accountid();
}
inline ::google::protobuf::int32 AdjustPrintCountInfo::accountid() const {
  return accountid_;
}
inline void AdjustPrintCountInfo::set_accountid(::google::protobuf::int32 value) {
  set_has_accountid();
  accountid_ = value;
}

// optional int32 shouldprintedcount = 3;
inline bool AdjustPrintCountInfo::has_shouldprintedcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AdjustPrintCountInfo::set_has_shouldprintedcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AdjustPrintCountInfo::clear_has_shouldprintedcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AdjustPrintCountInfo::clear_shouldprintedcount() {
  shouldprintedcount_ = 0;
  clear_has_shouldprintedcount();
}
inline ::google::protobuf::int32 AdjustPrintCountInfo::shouldprintedcount() const {
  return shouldprintedcount_;
}
inline void AdjustPrintCountInfo::set_shouldprintedcount(::google::protobuf::int32 value) {
  set_has_shouldprintedcount();
  shouldprintedcount_ = value;
}

// optional int32 printedcount = 4;
inline bool AdjustPrintCountInfo::has_printedcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AdjustPrintCountInfo::set_has_printedcount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AdjustPrintCountInfo::clear_has_printedcount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AdjustPrintCountInfo::clear_printedcount() {
  printedcount_ = 0;
  clear_has_printedcount();
}
inline ::google::protobuf::int32 AdjustPrintCountInfo::printedcount() const {
  return printedcount_;
}
inline void AdjustPrintCountInfo::set_printedcount(::google::protobuf::int32 value) {
  set_has_printedcount();
  printedcount_ = value;
}

// optional int32 printerid = 5;
inline bool AdjustPrintCountInfo::has_printerid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AdjustPrintCountInfo::set_has_printerid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AdjustPrintCountInfo::clear_has_printerid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AdjustPrintCountInfo::clear_printerid() {
  printerid_ = 0;
  clear_has_printerid();
}
inline ::google::protobuf::int32 AdjustPrintCountInfo::printerid() const {
  return printerid_;
}
inline void AdjustPrintCountInfo::set_printerid(::google::protobuf::int32 value) {
  set_has_printerid();
  printerid_ = value;
}

// optional .isafetec.PrtSationReqPrintJob oriprintjob = 6;
inline bool AdjustPrintCountInfo::has_oriprintjob() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AdjustPrintCountInfo::set_has_oriprintjob() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AdjustPrintCountInfo::clear_has_oriprintjob() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AdjustPrintCountInfo::clear_oriprintjob() {
  if (oriprintjob_ != NULL) oriprintjob_->::isafetec::PrtSationReqPrintJob::Clear();
  clear_has_oriprintjob();
}
inline const ::isafetec::PrtSationReqPrintJob& AdjustPrintCountInfo::oriprintjob() const {
  return oriprintjob_ != NULL ? *oriprintjob_ : *default_instance_->oriprintjob_;
}
inline ::isafetec::PrtSationReqPrintJob* AdjustPrintCountInfo::mutable_oriprintjob() {
  set_has_oriprintjob();
  if (oriprintjob_ == NULL) oriprintjob_ = new ::isafetec::PrtSationReqPrintJob;
  return oriprintjob_;
}
inline ::isafetec::PrtSationReqPrintJob* AdjustPrintCountInfo::release_oriprintjob() {
  clear_has_oriprintjob();
  ::isafetec::PrtSationReqPrintJob* temp = oriprintjob_;
  oriprintjob_ = NULL;
  return temp;
}

// optional double shouldspend = 7;
inline bool AdjustPrintCountInfo::has_shouldspend() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AdjustPrintCountInfo::set_has_shouldspend() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AdjustPrintCountInfo::clear_has_shouldspend() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AdjustPrintCountInfo::clear_shouldspend() {
  shouldspend_ = 0;
  clear_has_shouldspend();
}
inline double AdjustPrintCountInfo::shouldspend() const {
  return shouldspend_;
}
inline void AdjustPrintCountInfo::set_shouldspend(double value) {
  set_has_shouldspend();
  shouldspend_ = value;
}

// optional double printedspend = 8;
inline bool AdjustPrintCountInfo::has_printedspend() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AdjustPrintCountInfo::set_has_printedspend() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AdjustPrintCountInfo::clear_has_printedspend() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AdjustPrintCountInfo::clear_printedspend() {
  printedspend_ = 0;
  clear_has_printedspend();
}
inline double AdjustPrintCountInfo::printedspend() const {
  return printedspend_;
}
inline void AdjustPrintCountInfo::set_printedspend(double value) {
  set_has_printedspend();
  printedspend_ = value;
}

// optional int32 jobid = 9;
inline bool AdjustPrintCountInfo::has_jobid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AdjustPrintCountInfo::set_has_jobid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AdjustPrintCountInfo::clear_has_jobid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AdjustPrintCountInfo::clear_jobid() {
  jobid_ = 0;
  clear_has_jobid();
}
inline ::google::protobuf::int32 AdjustPrintCountInfo::jobid() const {
  return jobid_;
}
inline void AdjustPrintCountInfo::set_jobid(::google::protobuf::int32 value) {
  set_has_jobid();
  jobid_ = value;
}

// -------------------------------------------------------------------

// ScanToMailAddrList

// optional int32 userid = 1;
inline bool ScanToMailAddrList::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScanToMailAddrList::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScanToMailAddrList::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScanToMailAddrList::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 ScanToMailAddrList::userid() const {
  return userid_;
}
inline void ScanToMailAddrList::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// repeated string mailaddress = 2;
inline int ScanToMailAddrList::mailaddress_size() const {
  return mailaddress_.size();
}
inline void ScanToMailAddrList::clear_mailaddress() {
  mailaddress_.Clear();
}
inline const ::std::string& ScanToMailAddrList::mailaddress(int index) const {
  return mailaddress_.Get(index);
}
inline ::std::string* ScanToMailAddrList::mutable_mailaddress(int index) {
  return mailaddress_.Mutable(index);
}
inline void ScanToMailAddrList::set_mailaddress(int index, const ::std::string& value) {
  mailaddress_.Mutable(index)->assign(value);
}
inline void ScanToMailAddrList::set_mailaddress(int index, const char* value) {
  mailaddress_.Mutable(index)->assign(value);
}
inline void ScanToMailAddrList::set_mailaddress(int index, const char* value, size_t size) {
  mailaddress_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ScanToMailAddrList::add_mailaddress() {
  return mailaddress_.Add();
}
inline void ScanToMailAddrList::add_mailaddress(const ::std::string& value) {
  mailaddress_.Add()->assign(value);
}
inline void ScanToMailAddrList::add_mailaddress(const char* value) {
  mailaddress_.Add()->assign(value);
}
inline void ScanToMailAddrList::add_mailaddress(const char* value, size_t size) {
  mailaddress_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ScanToMailAddrList::mailaddress() const {
  return mailaddress_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ScanToMailAddrList::mutable_mailaddress() {
  return &mailaddress_;
}

// -------------------------------------------------------------------

// PrtTranscriptIToolLogon

// optional int32 id = 1;
inline bool PrtTranscriptIToolLogon::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrtTranscriptIToolLogon::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrtTranscriptIToolLogon::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrtTranscriptIToolLogon::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PrtTranscriptIToolLogon::id() const {
  return id_;
}
inline void PrtTranscriptIToolLogon::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool PrtTranscriptIToolLogon::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrtTranscriptIToolLogon::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrtTranscriptIToolLogon::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrtTranscriptIToolLogon::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PrtTranscriptIToolLogon::name() const {
  return *name_;
}
inline void PrtTranscriptIToolLogon::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PrtTranscriptIToolLogon::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PrtTranscriptIToolLogon::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtTranscriptIToolLogon::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PrtTranscriptIToolLogon::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string pwd = 3;
inline bool PrtTranscriptIToolLogon::has_pwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrtTranscriptIToolLogon::set_has_pwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrtTranscriptIToolLogon::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrtTranscriptIToolLogon::clear_pwd() {
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    pwd_->clear();
  }
  clear_has_pwd();
}
inline const ::std::string& PrtTranscriptIToolLogon::pwd() const {
  return *pwd_;
}
inline void PrtTranscriptIToolLogon::set_pwd(const ::std::string& value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
}
inline void PrtTranscriptIToolLogon::set_pwd(const char* value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
}
inline void PrtTranscriptIToolLogon::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtTranscriptIToolLogon::mutable_pwd() {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  return pwd_;
}
inline ::std::string* PrtTranscriptIToolLogon::release_pwd() {
  clear_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pwd_;
    pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PrtTranscriptIToolCheckResult

// optional int32 id = 1;
inline bool PrtTranscriptIToolCheckResult::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrtTranscriptIToolCheckResult::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrtTranscriptIToolCheckResult::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrtTranscriptIToolCheckResult::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PrtTranscriptIToolCheckResult::id() const {
  return id_;
}
inline void PrtTranscriptIToolCheckResult::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool PrtTranscriptIToolCheckResult::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrtTranscriptIToolCheckResult::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrtTranscriptIToolCheckResult::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrtTranscriptIToolCheckResult::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PrtTranscriptIToolCheckResult::name() const {
  return *name_;
}
inline void PrtTranscriptIToolCheckResult::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PrtTranscriptIToolCheckResult::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PrtTranscriptIToolCheckResult::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtTranscriptIToolCheckResult::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PrtTranscriptIToolCheckResult::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string pwd = 3;
inline bool PrtTranscriptIToolCheckResult::has_pwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrtTranscriptIToolCheckResult::set_has_pwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrtTranscriptIToolCheckResult::clear_has_pwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrtTranscriptIToolCheckResult::clear_pwd() {
  if (pwd_ != &::google::protobuf::internal::kEmptyString) {
    pwd_->clear();
  }
  clear_has_pwd();
}
inline const ::std::string& PrtTranscriptIToolCheckResult::pwd() const {
  return *pwd_;
}
inline void PrtTranscriptIToolCheckResult::set_pwd(const ::std::string& value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
}
inline void PrtTranscriptIToolCheckResult::set_pwd(const char* value) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(value);
}
inline void PrtTranscriptIToolCheckResult::set_pwd(const char* value, size_t size) {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  pwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtTranscriptIToolCheckResult::mutable_pwd() {
  set_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    pwd_ = new ::std::string;
  }
  return pwd_;
}
inline ::std::string* PrtTranscriptIToolCheckResult::release_pwd() {
  clear_has_pwd();
  if (pwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pwd_;
    pwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PrtDbConfigInfo

// optional int32 DbType = 1;
inline bool PrtDbConfigInfo::has_dbtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrtDbConfigInfo::set_has_dbtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrtDbConfigInfo::clear_has_dbtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrtDbConfigInfo::clear_dbtype() {
  dbtype_ = 0;
  clear_has_dbtype();
}
inline ::google::protobuf::int32 PrtDbConfigInfo::dbtype() const {
  return dbtype_;
}
inline void PrtDbConfigInfo::set_dbtype(::google::protobuf::int32 value) {
  set_has_dbtype();
  dbtype_ = value;
}

// optional string DbIp = 2;
inline bool PrtDbConfigInfo::has_dbip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrtDbConfigInfo::set_has_dbip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrtDbConfigInfo::clear_has_dbip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrtDbConfigInfo::clear_dbip() {
  if (dbip_ != &::google::protobuf::internal::kEmptyString) {
    dbip_->clear();
  }
  clear_has_dbip();
}
inline const ::std::string& PrtDbConfigInfo::dbip() const {
  return *dbip_;
}
inline void PrtDbConfigInfo::set_dbip(const ::std::string& value) {
  set_has_dbip();
  if (dbip_ == &::google::protobuf::internal::kEmptyString) {
    dbip_ = new ::std::string;
  }
  dbip_->assign(value);
}
inline void PrtDbConfigInfo::set_dbip(const char* value) {
  set_has_dbip();
  if (dbip_ == &::google::protobuf::internal::kEmptyString) {
    dbip_ = new ::std::string;
  }
  dbip_->assign(value);
}
inline void PrtDbConfigInfo::set_dbip(const char* value, size_t size) {
  set_has_dbip();
  if (dbip_ == &::google::protobuf::internal::kEmptyString) {
    dbip_ = new ::std::string;
  }
  dbip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtDbConfigInfo::mutable_dbip() {
  set_has_dbip();
  if (dbip_ == &::google::protobuf::internal::kEmptyString) {
    dbip_ = new ::std::string;
  }
  return dbip_;
}
inline ::std::string* PrtDbConfigInfo::release_dbip() {
  clear_has_dbip();
  if (dbip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dbip_;
    dbip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string DbPort = 3;
inline bool PrtDbConfigInfo::has_dbport() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrtDbConfigInfo::set_has_dbport() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrtDbConfigInfo::clear_has_dbport() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrtDbConfigInfo::clear_dbport() {
  if (dbport_ != &::google::protobuf::internal::kEmptyString) {
    dbport_->clear();
  }
  clear_has_dbport();
}
inline const ::std::string& PrtDbConfigInfo::dbport() const {
  return *dbport_;
}
inline void PrtDbConfigInfo::set_dbport(const ::std::string& value) {
  set_has_dbport();
  if (dbport_ == &::google::protobuf::internal::kEmptyString) {
    dbport_ = new ::std::string;
  }
  dbport_->assign(value);
}
inline void PrtDbConfigInfo::set_dbport(const char* value) {
  set_has_dbport();
  if (dbport_ == &::google::protobuf::internal::kEmptyString) {
    dbport_ = new ::std::string;
  }
  dbport_->assign(value);
}
inline void PrtDbConfigInfo::set_dbport(const char* value, size_t size) {
  set_has_dbport();
  if (dbport_ == &::google::protobuf::internal::kEmptyString) {
    dbport_ = new ::std::string;
  }
  dbport_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtDbConfigInfo::mutable_dbport() {
  set_has_dbport();
  if (dbport_ == &::google::protobuf::internal::kEmptyString) {
    dbport_ = new ::std::string;
  }
  return dbport_;
}
inline ::std::string* PrtDbConfigInfo::release_dbport() {
  clear_has_dbport();
  if (dbport_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dbport_;
    dbport_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string DbName = 4;
inline bool PrtDbConfigInfo::has_dbname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrtDbConfigInfo::set_has_dbname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrtDbConfigInfo::clear_has_dbname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrtDbConfigInfo::clear_dbname() {
  if (dbname_ != &::google::protobuf::internal::kEmptyString) {
    dbname_->clear();
  }
  clear_has_dbname();
}
inline const ::std::string& PrtDbConfigInfo::dbname() const {
  return *dbname_;
}
inline void PrtDbConfigInfo::set_dbname(const ::std::string& value) {
  set_has_dbname();
  if (dbname_ == &::google::protobuf::internal::kEmptyString) {
    dbname_ = new ::std::string;
  }
  dbname_->assign(value);
}
inline void PrtDbConfigInfo::set_dbname(const char* value) {
  set_has_dbname();
  if (dbname_ == &::google::protobuf::internal::kEmptyString) {
    dbname_ = new ::std::string;
  }
  dbname_->assign(value);
}
inline void PrtDbConfigInfo::set_dbname(const char* value, size_t size) {
  set_has_dbname();
  if (dbname_ == &::google::protobuf::internal::kEmptyString) {
    dbname_ = new ::std::string;
  }
  dbname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtDbConfigInfo::mutable_dbname() {
  set_has_dbname();
  if (dbname_ == &::google::protobuf::internal::kEmptyString) {
    dbname_ = new ::std::string;
  }
  return dbname_;
}
inline ::std::string* PrtDbConfigInfo::release_dbname() {
  clear_has_dbname();
  if (dbname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dbname_;
    dbname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string DbUser = 5;
inline bool PrtDbConfigInfo::has_dbuser() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PrtDbConfigInfo::set_has_dbuser() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PrtDbConfigInfo::clear_has_dbuser() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PrtDbConfigInfo::clear_dbuser() {
  if (dbuser_ != &::google::protobuf::internal::kEmptyString) {
    dbuser_->clear();
  }
  clear_has_dbuser();
}
inline const ::std::string& PrtDbConfigInfo::dbuser() const {
  return *dbuser_;
}
inline void PrtDbConfigInfo::set_dbuser(const ::std::string& value) {
  set_has_dbuser();
  if (dbuser_ == &::google::protobuf::internal::kEmptyString) {
    dbuser_ = new ::std::string;
  }
  dbuser_->assign(value);
}
inline void PrtDbConfigInfo::set_dbuser(const char* value) {
  set_has_dbuser();
  if (dbuser_ == &::google::protobuf::internal::kEmptyString) {
    dbuser_ = new ::std::string;
  }
  dbuser_->assign(value);
}
inline void PrtDbConfigInfo::set_dbuser(const char* value, size_t size) {
  set_has_dbuser();
  if (dbuser_ == &::google::protobuf::internal::kEmptyString) {
    dbuser_ = new ::std::string;
  }
  dbuser_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtDbConfigInfo::mutable_dbuser() {
  set_has_dbuser();
  if (dbuser_ == &::google::protobuf::internal::kEmptyString) {
    dbuser_ = new ::std::string;
  }
  return dbuser_;
}
inline ::std::string* PrtDbConfigInfo::release_dbuser() {
  clear_has_dbuser();
  if (dbuser_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dbuser_;
    dbuser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string DbPwd = 6;
inline bool PrtDbConfigInfo::has_dbpwd() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PrtDbConfigInfo::set_has_dbpwd() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PrtDbConfigInfo::clear_has_dbpwd() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PrtDbConfigInfo::clear_dbpwd() {
  if (dbpwd_ != &::google::protobuf::internal::kEmptyString) {
    dbpwd_->clear();
  }
  clear_has_dbpwd();
}
inline const ::std::string& PrtDbConfigInfo::dbpwd() const {
  return *dbpwd_;
}
inline void PrtDbConfigInfo::set_dbpwd(const ::std::string& value) {
  set_has_dbpwd();
  if (dbpwd_ == &::google::protobuf::internal::kEmptyString) {
    dbpwd_ = new ::std::string;
  }
  dbpwd_->assign(value);
}
inline void PrtDbConfigInfo::set_dbpwd(const char* value) {
  set_has_dbpwd();
  if (dbpwd_ == &::google::protobuf::internal::kEmptyString) {
    dbpwd_ = new ::std::string;
  }
  dbpwd_->assign(value);
}
inline void PrtDbConfigInfo::set_dbpwd(const char* value, size_t size) {
  set_has_dbpwd();
  if (dbpwd_ == &::google::protobuf::internal::kEmptyString) {
    dbpwd_ = new ::std::string;
  }
  dbpwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtDbConfigInfo::mutable_dbpwd() {
  set_has_dbpwd();
  if (dbpwd_ == &::google::protobuf::internal::kEmptyString) {
    dbpwd_ = new ::std::string;
  }
  return dbpwd_;
}
inline ::std::string* PrtDbConfigInfo::release_dbpwd() {
  clear_has_dbpwd();
  if (dbpwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dbpwd_;
    dbpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ReqChargePrintTicket

// optional string account_name = 1;
inline bool ReqChargePrintTicket::has_account_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqChargePrintTicket::set_has_account_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqChargePrintTicket::clear_has_account_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqChargePrintTicket::clear_account_name() {
  if (account_name_ != &::google::protobuf::internal::kEmptyString) {
    account_name_->clear();
  }
  clear_has_account_name();
}
inline const ::std::string& ReqChargePrintTicket::account_name() const {
  return *account_name_;
}
inline void ReqChargePrintTicket::set_account_name(const ::std::string& value) {
  set_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    account_name_ = new ::std::string;
  }
  account_name_->assign(value);
}
inline void ReqChargePrintTicket::set_account_name(const char* value) {
  set_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    account_name_ = new ::std::string;
  }
  account_name_->assign(value);
}
inline void ReqChargePrintTicket::set_account_name(const char* value, size_t size) {
  set_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    account_name_ = new ::std::string;
  }
  account_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqChargePrintTicket::mutable_account_name() {
  set_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    account_name_ = new ::std::string;
  }
  return account_name_;
}
inline ::std::string* ReqChargePrintTicket::release_account_name() {
  clear_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_name_;
    account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string real_name = 2;
inline bool ReqChargePrintTicket::has_real_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqChargePrintTicket::set_has_real_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqChargePrintTicket::clear_has_real_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqChargePrintTicket::clear_real_name() {
  if (real_name_ != &::google::protobuf::internal::kEmptyString) {
    real_name_->clear();
  }
  clear_has_real_name();
}
inline const ::std::string& ReqChargePrintTicket::real_name() const {
  return *real_name_;
}
inline void ReqChargePrintTicket::set_real_name(const ::std::string& value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::kEmptyString) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
}
inline void ReqChargePrintTicket::set_real_name(const char* value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::kEmptyString) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
}
inline void ReqChargePrintTicket::set_real_name(const char* value, size_t size) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::kEmptyString) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqChargePrintTicket::mutable_real_name() {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::kEmptyString) {
    real_name_ = new ::std::string;
  }
  return real_name_;
}
inline ::std::string* ReqChargePrintTicket::release_real_name() {
  clear_has_real_name();
  if (real_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = real_name_;
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string card_no = 3;
inline bool ReqChargePrintTicket::has_card_no() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqChargePrintTicket::set_has_card_no() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqChargePrintTicket::clear_has_card_no() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqChargePrintTicket::clear_card_no() {
  if (card_no_ != &::google::protobuf::internal::kEmptyString) {
    card_no_->clear();
  }
  clear_has_card_no();
}
inline const ::std::string& ReqChargePrintTicket::card_no() const {
  return *card_no_;
}
inline void ReqChargePrintTicket::set_card_no(const ::std::string& value) {
  set_has_card_no();
  if (card_no_ == &::google::protobuf::internal::kEmptyString) {
    card_no_ = new ::std::string;
  }
  card_no_->assign(value);
}
inline void ReqChargePrintTicket::set_card_no(const char* value) {
  set_has_card_no();
  if (card_no_ == &::google::protobuf::internal::kEmptyString) {
    card_no_ = new ::std::string;
  }
  card_no_->assign(value);
}
inline void ReqChargePrintTicket::set_card_no(const char* value, size_t size) {
  set_has_card_no();
  if (card_no_ == &::google::protobuf::internal::kEmptyString) {
    card_no_ = new ::std::string;
  }
  card_no_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqChargePrintTicket::mutable_card_no() {
  set_has_card_no();
  if (card_no_ == &::google::protobuf::internal::kEmptyString) {
    card_no_ = new ::std::string;
  }
  return card_no_;
}
inline ::std::string* ReqChargePrintTicket::release_card_no() {
  clear_has_card_no();
  if (card_no_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = card_no_;
    card_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ChargePrintTicket

// optional int32 user_id = 1;
inline bool ChargePrintTicket::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChargePrintTicket::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChargePrintTicket::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChargePrintTicket::clear_user_id() {
  user_id_ = 0;
  clear_has_user_id();
}
inline ::google::protobuf::int32 ChargePrintTicket::user_id() const {
  return user_id_;
}
inline void ChargePrintTicket::set_user_id(::google::protobuf::int32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional int32 account_id = 2;
inline bool ChargePrintTicket::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChargePrintTicket::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChargePrintTicket::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChargePrintTicket::clear_account_id() {
  account_id_ = 0;
  clear_has_account_id();
}
inline ::google::protobuf::int32 ChargePrintTicket::account_id() const {
  return account_id_;
}
inline void ChargePrintTicket::set_account_id(::google::protobuf::int32 value) {
  set_has_account_id();
  account_id_ = value;
}

// optional double left_money = 3;
inline bool ChargePrintTicket::has_left_money() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChargePrintTicket::set_has_left_money() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChargePrintTicket::clear_has_left_money() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChargePrintTicket::clear_left_money() {
  left_money_ = 0;
  clear_has_left_money();
}
inline double ChargePrintTicket::left_money() const {
  return left_money_;
}
inline void ChargePrintTicket::set_left_money(double value) {
  set_has_left_money();
  left_money_ = value;
}

// optional double special_left_money = 4;
inline bool ChargePrintTicket::has_special_left_money() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChargePrintTicket::set_has_special_left_money() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChargePrintTicket::clear_has_special_left_money() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChargePrintTicket::clear_special_left_money() {
  special_left_money_ = 0;
  clear_has_special_left_money();
}
inline double ChargePrintTicket::special_left_money() const {
  return special_left_money_;
}
inline void ChargePrintTicket::set_special_left_money(double value) {
  set_has_special_left_money();
  special_left_money_ = value;
}

// optional string account_name = 5;
inline bool ChargePrintTicket::has_account_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChargePrintTicket::set_has_account_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChargePrintTicket::clear_has_account_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChargePrintTicket::clear_account_name() {
  if (account_name_ != &::google::protobuf::internal::kEmptyString) {
    account_name_->clear();
  }
  clear_has_account_name();
}
inline const ::std::string& ChargePrintTicket::account_name() const {
  return *account_name_;
}
inline void ChargePrintTicket::set_account_name(const ::std::string& value) {
  set_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    account_name_ = new ::std::string;
  }
  account_name_->assign(value);
}
inline void ChargePrintTicket::set_account_name(const char* value) {
  set_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    account_name_ = new ::std::string;
  }
  account_name_->assign(value);
}
inline void ChargePrintTicket::set_account_name(const char* value, size_t size) {
  set_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    account_name_ = new ::std::string;
  }
  account_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChargePrintTicket::mutable_account_name() {
  set_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    account_name_ = new ::std::string;
  }
  return account_name_;
}
inline ::std::string* ChargePrintTicket::release_account_name() {
  clear_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_name_;
    account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string real_name = 6;
inline bool ChargePrintTicket::has_real_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChargePrintTicket::set_has_real_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChargePrintTicket::clear_has_real_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChargePrintTicket::clear_real_name() {
  if (real_name_ != &::google::protobuf::internal::kEmptyString) {
    real_name_->clear();
  }
  clear_has_real_name();
}
inline const ::std::string& ChargePrintTicket::real_name() const {
  return *real_name_;
}
inline void ChargePrintTicket::set_real_name(const ::std::string& value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::kEmptyString) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
}
inline void ChargePrintTicket::set_real_name(const char* value) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::kEmptyString) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(value);
}
inline void ChargePrintTicket::set_real_name(const char* value, size_t size) {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::kEmptyString) {
    real_name_ = new ::std::string;
  }
  real_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChargePrintTicket::mutable_real_name() {
  set_has_real_name();
  if (real_name_ == &::google::protobuf::internal::kEmptyString) {
    real_name_ = new ::std::string;
  }
  return real_name_;
}
inline ::std::string* ChargePrintTicket::release_real_name() {
  clear_has_real_name();
  if (real_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = real_name_;
    real_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string card_no = 7;
inline bool ChargePrintTicket::has_card_no() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChargePrintTicket::set_has_card_no() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChargePrintTicket::clear_has_card_no() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChargePrintTicket::clear_card_no() {
  if (card_no_ != &::google::protobuf::internal::kEmptyString) {
    card_no_->clear();
  }
  clear_has_card_no();
}
inline const ::std::string& ChargePrintTicket::card_no() const {
  return *card_no_;
}
inline void ChargePrintTicket::set_card_no(const ::std::string& value) {
  set_has_card_no();
  if (card_no_ == &::google::protobuf::internal::kEmptyString) {
    card_no_ = new ::std::string;
  }
  card_no_->assign(value);
}
inline void ChargePrintTicket::set_card_no(const char* value) {
  set_has_card_no();
  if (card_no_ == &::google::protobuf::internal::kEmptyString) {
    card_no_ = new ::std::string;
  }
  card_no_->assign(value);
}
inline void ChargePrintTicket::set_card_no(const char* value, size_t size) {
  set_has_card_no();
  if (card_no_ == &::google::protobuf::internal::kEmptyString) {
    card_no_ = new ::std::string;
  }
  card_no_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChargePrintTicket::mutable_card_no() {
  set_has_card_no();
  if (card_no_ == &::google::protobuf::internal::kEmptyString) {
    card_no_ = new ::std::string;
  }
  return card_no_;
}
inline ::std::string* ChargePrintTicket::release_card_no() {
  clear_has_card_no();
  if (card_no_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = card_no_;
    card_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 print_count_A4 = 8;
inline bool ChargePrintTicket::has_print_count_a4() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChargePrintTicket::set_has_print_count_a4() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ChargePrintTicket::clear_has_print_count_a4() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ChargePrintTicket::clear_print_count_a4() {
  print_count_a4_ = 0;
  clear_has_print_count_a4();
}
inline ::google::protobuf::int32 ChargePrintTicket::print_count_a4() const {
  return print_count_a4_;
}
inline void ChargePrintTicket::set_print_count_a4(::google::protobuf::int32 value) {
  set_has_print_count_a4();
  print_count_a4_ = value;
}

// optional int32 print_count_A3 = 9;
inline bool ChargePrintTicket::has_print_count_a3() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ChargePrintTicket::set_has_print_count_a3() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ChargePrintTicket::clear_has_print_count_a3() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ChargePrintTicket::clear_print_count_a3() {
  print_count_a3_ = 0;
  clear_has_print_count_a3();
}
inline ::google::protobuf::int32 ChargePrintTicket::print_count_a3() const {
  return print_count_a3_;
}
inline void ChargePrintTicket::set_print_count_a3(::google::protobuf::int32 value) {
  set_has_print_count_a3();
  print_count_a3_ = value;
}

// optional double print_price_A4 = 10;
inline bool ChargePrintTicket::has_print_price_a4() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ChargePrintTicket::set_has_print_price_a4() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ChargePrintTicket::clear_has_print_price_a4() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ChargePrintTicket::clear_print_price_a4() {
  print_price_a4_ = 0;
  clear_has_print_price_a4();
}
inline double ChargePrintTicket::print_price_a4() const {
  return print_price_a4_;
}
inline void ChargePrintTicket::set_print_price_a4(double value) {
  set_has_print_price_a4();
  print_price_a4_ = value;
}

// optional double print_price_A3 = 11;
inline bool ChargePrintTicket::has_print_price_a3() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ChargePrintTicket::set_has_print_price_a3() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ChargePrintTicket::clear_has_print_price_a3() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ChargePrintTicket::clear_print_price_a3() {
  print_price_a3_ = 0;
  clear_has_print_price_a3();
}
inline double ChargePrintTicket::print_price_a3() const {
  return print_price_a3_;
}
inline void ChargePrintTicket::set_print_price_a3(double value) {
  set_has_print_price_a3();
  print_price_a3_ = value;
}

// optional double print_spend = 12;
inline bool ChargePrintTicket::has_print_spend() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ChargePrintTicket::set_has_print_spend() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ChargePrintTicket::clear_has_print_spend() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ChargePrintTicket::clear_print_spend() {
  print_spend_ = 0;
  clear_has_print_spend();
}
inline double ChargePrintTicket::print_spend() const {
  return print_spend_;
}
inline void ChargePrintTicket::set_print_spend(double value) {
  set_has_print_spend();
  print_spend_ = value;
}

// optional int32 copy_count_A4 = 13;
inline bool ChargePrintTicket::has_copy_count_a4() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ChargePrintTicket::set_has_copy_count_a4() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ChargePrintTicket::clear_has_copy_count_a4() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ChargePrintTicket::clear_copy_count_a4() {
  copy_count_a4_ = 0;
  clear_has_copy_count_a4();
}
inline ::google::protobuf::int32 ChargePrintTicket::copy_count_a4() const {
  return copy_count_a4_;
}
inline void ChargePrintTicket::set_copy_count_a4(::google::protobuf::int32 value) {
  set_has_copy_count_a4();
  copy_count_a4_ = value;
}

// optional int32 copy_count_A3 = 14;
inline bool ChargePrintTicket::has_copy_count_a3() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ChargePrintTicket::set_has_copy_count_a3() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ChargePrintTicket::clear_has_copy_count_a3() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ChargePrintTicket::clear_copy_count_a3() {
  copy_count_a3_ = 0;
  clear_has_copy_count_a3();
}
inline ::google::protobuf::int32 ChargePrintTicket::copy_count_a3() const {
  return copy_count_a3_;
}
inline void ChargePrintTicket::set_copy_count_a3(::google::protobuf::int32 value) {
  set_has_copy_count_a3();
  copy_count_a3_ = value;
}

// optional double copy_price_A4 = 15;
inline bool ChargePrintTicket::has_copy_price_a4() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ChargePrintTicket::set_has_copy_price_a4() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ChargePrintTicket::clear_has_copy_price_a4() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ChargePrintTicket::clear_copy_price_a4() {
  copy_price_a4_ = 0;
  clear_has_copy_price_a4();
}
inline double ChargePrintTicket::copy_price_a4() const {
  return copy_price_a4_;
}
inline void ChargePrintTicket::set_copy_price_a4(double value) {
  set_has_copy_price_a4();
  copy_price_a4_ = value;
}

// optional double copy_price_A3 = 16;
inline bool ChargePrintTicket::has_copy_price_a3() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ChargePrintTicket::set_has_copy_price_a3() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ChargePrintTicket::clear_has_copy_price_a3() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ChargePrintTicket::clear_copy_price_a3() {
  copy_price_a3_ = 0;
  clear_has_copy_price_a3();
}
inline double ChargePrintTicket::copy_price_a3() const {
  return copy_price_a3_;
}
inline void ChargePrintTicket::set_copy_price_a3(double value) {
  set_has_copy_price_a3();
  copy_price_a3_ = value;
}

// optional double copy_spend = 17;
inline bool ChargePrintTicket::has_copy_spend() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ChargePrintTicket::set_has_copy_spend() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ChargePrintTicket::clear_has_copy_spend() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ChargePrintTicket::clear_copy_spend() {
  copy_spend_ = 0;
  clear_has_copy_spend();
}
inline double ChargePrintTicket::copy_spend() const {
  return copy_spend_;
}
inline void ChargePrintTicket::set_copy_spend(double value) {
  set_has_copy_spend();
  copy_spend_ = value;
}

// optional int32 scan_unit = 18;
inline bool ChargePrintTicket::has_scan_unit() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ChargePrintTicket::set_has_scan_unit() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ChargePrintTicket::clear_has_scan_unit() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ChargePrintTicket::clear_scan_unit() {
  scan_unit_ = 0;
  clear_has_scan_unit();
}
inline ::google::protobuf::int32 ChargePrintTicket::scan_unit() const {
  return scan_unit_;
}
inline void ChargePrintTicket::set_scan_unit(::google::protobuf::int32 value) {
  set_has_scan_unit();
  scan_unit_ = value;
}

// optional int32 scan_count = 19;
inline bool ChargePrintTicket::has_scan_count() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ChargePrintTicket::set_has_scan_count() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ChargePrintTicket::clear_has_scan_count() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ChargePrintTicket::clear_scan_count() {
  scan_count_ = 0;
  clear_has_scan_count();
}
inline ::google::protobuf::int32 ChargePrintTicket::scan_count() const {
  return scan_count_;
}
inline void ChargePrintTicket::set_scan_count(::google::protobuf::int32 value) {
  set_has_scan_count();
  scan_count_ = value;
}

// optional double scan_size = 20;
inline bool ChargePrintTicket::has_scan_size() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ChargePrintTicket::set_has_scan_size() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ChargePrintTicket::clear_has_scan_size() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ChargePrintTicket::clear_scan_size() {
  scan_size_ = 0;
  clear_has_scan_size();
}
inline double ChargePrintTicket::scan_size() const {
  return scan_size_;
}
inline void ChargePrintTicket::set_scan_size(double value) {
  set_has_scan_size();
  scan_size_ = value;
}

// optional double scan_price = 21;
inline bool ChargePrintTicket::has_scan_price() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ChargePrintTicket::set_has_scan_price() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ChargePrintTicket::clear_has_scan_price() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ChargePrintTicket::clear_scan_price() {
  scan_price_ = 0;
  clear_has_scan_price();
}
inline double ChargePrintTicket::scan_price() const {
  return scan_price_;
}
inline void ChargePrintTicket::set_scan_price(double value) {
  set_has_scan_price();
  scan_price_ = value;
}

// optional double scan_spend = 22;
inline bool ChargePrintTicket::has_scan_spend() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ChargePrintTicket::set_has_scan_spend() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ChargePrintTicket::clear_has_scan_spend() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ChargePrintTicket::clear_scan_spend() {
  scan_spend_ = 0;
  clear_has_scan_spend();
}
inline double ChargePrintTicket::scan_spend() const {
  return scan_spend_;
}
inline void ChargePrintTicket::set_scan_spend(double value) {
  set_has_scan_spend();
  scan_spend_ = value;
}

// optional int32 fax_count = 23;
inline bool ChargePrintTicket::has_fax_count() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ChargePrintTicket::set_has_fax_count() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ChargePrintTicket::clear_has_fax_count() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ChargePrintTicket::clear_fax_count() {
  fax_count_ = 0;
  clear_has_fax_count();
}
inline ::google::protobuf::int32 ChargePrintTicket::fax_count() const {
  return fax_count_;
}
inline void ChargePrintTicket::set_fax_count(::google::protobuf::int32 value) {
  set_has_fax_count();
  fax_count_ = value;
}

// optional double fax_price = 24;
inline bool ChargePrintTicket::has_fax_price() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ChargePrintTicket::set_has_fax_price() {
  _has_bits_[0] |= 0x00800000u;
}
inline void ChargePrintTicket::clear_has_fax_price() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void ChargePrintTicket::clear_fax_price() {
  fax_price_ = 0;
  clear_has_fax_price();
}
inline double ChargePrintTicket::fax_price() const {
  return fax_price_;
}
inline void ChargePrintTicket::set_fax_price(double value) {
  set_has_fax_price();
  fax_price_ = value;
}

// optional double fax_spend = 25;
inline bool ChargePrintTicket::has_fax_spend() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void ChargePrintTicket::set_has_fax_spend() {
  _has_bits_[0] |= 0x01000000u;
}
inline void ChargePrintTicket::clear_has_fax_spend() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void ChargePrintTicket::clear_fax_spend() {
  fax_spend_ = 0;
  clear_has_fax_spend();
}
inline double ChargePrintTicket::fax_spend() const {
  return fax_spend_;
}
inline void ChargePrintTicket::set_fax_spend(double value) {
  set_has_fax_spend();
  fax_spend_ = value;
}

// optional double cash_pledge = 26;
inline bool ChargePrintTicket::has_cash_pledge() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void ChargePrintTicket::set_has_cash_pledge() {
  _has_bits_[0] |= 0x02000000u;
}
inline void ChargePrintTicket::clear_has_cash_pledge() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void ChargePrintTicket::clear_cash_pledge() {
  cash_pledge_ = 0;
  clear_has_cash_pledge();
}
inline double ChargePrintTicket::cash_pledge() const {
  return cash_pledge_;
}
inline void ChargePrintTicket::set_cash_pledge(double value) {
  set_has_cash_pledge();
  cash_pledge_ = value;
}

// optional double cash_back = 27;
inline bool ChargePrintTicket::has_cash_back() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void ChargePrintTicket::set_has_cash_back() {
  _has_bits_[0] |= 0x04000000u;
}
inline void ChargePrintTicket::clear_has_cash_back() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void ChargePrintTicket::clear_cash_back() {
  cash_back_ = 0;
  clear_has_cash_back();
}
inline double ChargePrintTicket::cash_back() const {
  return cash_back_;
}
inline void ChargePrintTicket::set_cash_back(double value) {
  set_has_cash_back();
  cash_back_ = value;
}

// optional string other_info = 28;
inline bool ChargePrintTicket::has_other_info() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void ChargePrintTicket::set_has_other_info() {
  _has_bits_[0] |= 0x08000000u;
}
inline void ChargePrintTicket::clear_has_other_info() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void ChargePrintTicket::clear_other_info() {
  if (other_info_ != &::google::protobuf::internal::kEmptyString) {
    other_info_->clear();
  }
  clear_has_other_info();
}
inline const ::std::string& ChargePrintTicket::other_info() const {
  return *other_info_;
}
inline void ChargePrintTicket::set_other_info(const ::std::string& value) {
  set_has_other_info();
  if (other_info_ == &::google::protobuf::internal::kEmptyString) {
    other_info_ = new ::std::string;
  }
  other_info_->assign(value);
}
inline void ChargePrintTicket::set_other_info(const char* value) {
  set_has_other_info();
  if (other_info_ == &::google::protobuf::internal::kEmptyString) {
    other_info_ = new ::std::string;
  }
  other_info_->assign(value);
}
inline void ChargePrintTicket::set_other_info(const char* value, size_t size) {
  set_has_other_info();
  if (other_info_ == &::google::protobuf::internal::kEmptyString) {
    other_info_ = new ::std::string;
  }
  other_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChargePrintTicket::mutable_other_info() {
  set_has_other_info();
  if (other_info_ == &::google::protobuf::internal::kEmptyString) {
    other_info_ = new ::std::string;
  }
  return other_info_;
}
inline ::std::string* ChargePrintTicket::release_other_info() {
  clear_has_other_info();
  if (other_info_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = other_info_;
    other_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional double before_money = 29;
inline bool ChargePrintTicket::has_before_money() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void ChargePrintTicket::set_has_before_money() {
  _has_bits_[0] |= 0x10000000u;
}
inline void ChargePrintTicket::clear_has_before_money() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void ChargePrintTicket::clear_before_money() {
  before_money_ = 0;
  clear_has_before_money();
}
inline double ChargePrintTicket::before_money() const {
  return before_money_;
}
inline void ChargePrintTicket::set_before_money(double value) {
  set_has_before_money();
  before_money_ = value;
}

// optional double after_money = 30;
inline bool ChargePrintTicket::has_after_money() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void ChargePrintTicket::set_has_after_money() {
  _has_bits_[0] |= 0x20000000u;
}
inline void ChargePrintTicket::clear_has_after_money() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void ChargePrintTicket::clear_after_money() {
  after_money_ = 0;
  clear_has_after_money();
}
inline double ChargePrintTicket::after_money() const {
  return after_money_;
}
inline void ChargePrintTicket::set_after_money(double value) {
  set_has_after_money();
  after_money_ = value;
}

// optional string purchase_date = 31;
inline bool ChargePrintTicket::has_purchase_date() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void ChargePrintTicket::set_has_purchase_date() {
  _has_bits_[0] |= 0x40000000u;
}
inline void ChargePrintTicket::clear_has_purchase_date() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void ChargePrintTicket::clear_purchase_date() {
  if (purchase_date_ != &::google::protobuf::internal::kEmptyString) {
    purchase_date_->clear();
  }
  clear_has_purchase_date();
}
inline const ::std::string& ChargePrintTicket::purchase_date() const {
  return *purchase_date_;
}
inline void ChargePrintTicket::set_purchase_date(const ::std::string& value) {
  set_has_purchase_date();
  if (purchase_date_ == &::google::protobuf::internal::kEmptyString) {
    purchase_date_ = new ::std::string;
  }
  purchase_date_->assign(value);
}
inline void ChargePrintTicket::set_purchase_date(const char* value) {
  set_has_purchase_date();
  if (purchase_date_ == &::google::protobuf::internal::kEmptyString) {
    purchase_date_ = new ::std::string;
  }
  purchase_date_->assign(value);
}
inline void ChargePrintTicket::set_purchase_date(const char* value, size_t size) {
  set_has_purchase_date();
  if (purchase_date_ == &::google::protobuf::internal::kEmptyString) {
    purchase_date_ = new ::std::string;
  }
  purchase_date_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChargePrintTicket::mutable_purchase_date() {
  set_has_purchase_date();
  if (purchase_date_ == &::google::protobuf::internal::kEmptyString) {
    purchase_date_ = new ::std::string;
  }
  return purchase_date_;
}
inline ::std::string* ChargePrintTicket::release_purchase_date() {
  clear_has_purchase_date();
  if (purchase_date_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = purchase_date_;
    purchase_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string termID = 32;
inline bool ChargePrintTicket::has_termid() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void ChargePrintTicket::set_has_termid() {
  _has_bits_[0] |= 0x80000000u;
}
inline void ChargePrintTicket::clear_has_termid() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void ChargePrintTicket::clear_termid() {
  if (termid_ != &::google::protobuf::internal::kEmptyString) {
    termid_->clear();
  }
  clear_has_termid();
}
inline const ::std::string& ChargePrintTicket::termid() const {
  return *termid_;
}
inline void ChargePrintTicket::set_termid(const ::std::string& value) {
  set_has_termid();
  if (termid_ == &::google::protobuf::internal::kEmptyString) {
    termid_ = new ::std::string;
  }
  termid_->assign(value);
}
inline void ChargePrintTicket::set_termid(const char* value) {
  set_has_termid();
  if (termid_ == &::google::protobuf::internal::kEmptyString) {
    termid_ = new ::std::string;
  }
  termid_->assign(value);
}
inline void ChargePrintTicket::set_termid(const char* value, size_t size) {
  set_has_termid();
  if (termid_ == &::google::protobuf::internal::kEmptyString) {
    termid_ = new ::std::string;
  }
  termid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChargePrintTicket::mutable_termid() {
  set_has_termid();
  if (termid_ == &::google::protobuf::internal::kEmptyString) {
    termid_ = new ::std::string;
  }
  return termid_;
}
inline ::std::string* ChargePrintTicket::release_termid() {
  clear_has_termid();
  if (termid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = termid_;
    termid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string verification_code = 33;
inline bool ChargePrintTicket::has_verification_code() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void ChargePrintTicket::set_has_verification_code() {
  _has_bits_[1] |= 0x00000001u;
}
inline void ChargePrintTicket::clear_has_verification_code() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void ChargePrintTicket::clear_verification_code() {
  if (verification_code_ != &::google::protobuf::internal::kEmptyString) {
    verification_code_->clear();
  }
  clear_has_verification_code();
}
inline const ::std::string& ChargePrintTicket::verification_code() const {
  return *verification_code_;
}
inline void ChargePrintTicket::set_verification_code(const ::std::string& value) {
  set_has_verification_code();
  if (verification_code_ == &::google::protobuf::internal::kEmptyString) {
    verification_code_ = new ::std::string;
  }
  verification_code_->assign(value);
}
inline void ChargePrintTicket::set_verification_code(const char* value) {
  set_has_verification_code();
  if (verification_code_ == &::google::protobuf::internal::kEmptyString) {
    verification_code_ = new ::std::string;
  }
  verification_code_->assign(value);
}
inline void ChargePrintTicket::set_verification_code(const char* value, size_t size) {
  set_has_verification_code();
  if (verification_code_ == &::google::protobuf::internal::kEmptyString) {
    verification_code_ = new ::std::string;
  }
  verification_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChargePrintTicket::mutable_verification_code() {
  set_has_verification_code();
  if (verification_code_ == &::google::protobuf::internal::kEmptyString) {
    verification_code_ = new ::std::string;
  }
  return verification_code_;
}
inline ::std::string* ChargePrintTicket::release_verification_code() {
  clear_has_verification_code();
  if (verification_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = verification_code_;
    verification_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 ticket_printed_times = 34;
inline bool ChargePrintTicket::has_ticket_printed_times() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void ChargePrintTicket::set_has_ticket_printed_times() {
  _has_bits_[1] |= 0x00000002u;
}
inline void ChargePrintTicket::clear_has_ticket_printed_times() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void ChargePrintTicket::clear_ticket_printed_times() {
  ticket_printed_times_ = 0;
  clear_has_ticket_printed_times();
}
inline ::google::protobuf::int32 ChargePrintTicket::ticket_printed_times() const {
  return ticket_printed_times_;
}
inline void ChargePrintTicket::set_ticket_printed_times(::google::protobuf::int32 value) {
  set_has_ticket_printed_times();
  ticket_printed_times_ = value;
}

// optional int32 ticket_log_id = 35;
inline bool ChargePrintTicket::has_ticket_log_id() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void ChargePrintTicket::set_has_ticket_log_id() {
  _has_bits_[1] |= 0x00000004u;
}
inline void ChargePrintTicket::clear_has_ticket_log_id() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void ChargePrintTicket::clear_ticket_log_id() {
  ticket_log_id_ = 0;
  clear_has_ticket_log_id();
}
inline ::google::protobuf::int32 ChargePrintTicket::ticket_log_id() const {
  return ticket_log_id_;
}
inline void ChargePrintTicket::set_ticket_log_id(::google::protobuf::int32 value) {
  set_has_ticket_log_id();
  ticket_log_id_ = value;
}

// -------------------------------------------------------------------

// PrintLimitPolicy

// optional .isafetec.JOB_TYPE job_type = 1;
inline bool PrintLimitPolicy::has_job_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrintLimitPolicy::set_has_job_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrintLimitPolicy::clear_has_job_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrintLimitPolicy::clear_job_type() {
  job_type_ = 0;
  clear_has_job_type();
}
inline isafetec::JOB_TYPE PrintLimitPolicy::job_type() const {
  return static_cast< isafetec::JOB_TYPE >(job_type_);
}
inline void PrintLimitPolicy::set_job_type(isafetec::JOB_TYPE value) {
  GOOGLE_DCHECK(isafetec::JOB_TYPE_IsValid(value));
  set_has_job_type();
  job_type_ = value;
}

// optional .isafetec.JOB_LIMIT_TYPE job_limit_type = 2;
inline bool PrintLimitPolicy::has_job_limit_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrintLimitPolicy::set_has_job_limit_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrintLimitPolicy::clear_has_job_limit_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrintLimitPolicy::clear_job_limit_type() {
  job_limit_type_ = 0;
  clear_has_job_limit_type();
}
inline isafetec::JOB_LIMIT_TYPE PrintLimitPolicy::job_limit_type() const {
  return static_cast< isafetec::JOB_LIMIT_TYPE >(job_limit_type_);
}
inline void PrintLimitPolicy::set_job_limit_type(isafetec::JOB_LIMIT_TYPE value) {
  GOOGLE_DCHECK(isafetec::JOB_LIMIT_TYPE_IsValid(value));
  set_has_job_limit_type();
  job_limit_type_ = value;
}

// optional .isafetec.JOB_LIMIT_PERIOD_TYPE job_limit_period_type = 3;
inline bool PrintLimitPolicy::has_job_limit_period_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrintLimitPolicy::set_has_job_limit_period_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrintLimitPolicy::clear_has_job_limit_period_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrintLimitPolicy::clear_job_limit_period_type() {
  job_limit_period_type_ = 0;
  clear_has_job_limit_period_type();
}
inline isafetec::JOB_LIMIT_PERIOD_TYPE PrintLimitPolicy::job_limit_period_type() const {
  return static_cast< isafetec::JOB_LIMIT_PERIOD_TYPE >(job_limit_period_type_);
}
inline void PrintLimitPolicy::set_job_limit_period_type(isafetec::JOB_LIMIT_PERIOD_TYPE value) {
  GOOGLE_DCHECK(isafetec::JOB_LIMIT_PERIOD_TYPE_IsValid(value));
  set_has_job_limit_period_type();
  job_limit_period_type_ = value;
}

// optional int32 state = 4;
inline bool PrintLimitPolicy::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrintLimitPolicy::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrintLimitPolicy::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrintLimitPolicy::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 PrintLimitPolicy::state() const {
  return state_;
}
inline void PrintLimitPolicy::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 LimitPage = 5;
inline bool PrintLimitPolicy::has_limitpage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PrintLimitPolicy::set_has_limitpage() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PrintLimitPolicy::clear_has_limitpage() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PrintLimitPolicy::clear_limitpage() {
  limitpage_ = 0;
  clear_has_limitpage();
}
inline ::google::protobuf::int32 PrintLimitPolicy::limitpage() const {
  return limitpage_;
}
inline void PrintLimitPolicy::set_limitpage(::google::protobuf::int32 value) {
  set_has_limitpage();
  limitpage_ = value;
}

// optional int32 HaveOpPage = 6;
inline bool PrintLimitPolicy::has_haveoppage() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PrintLimitPolicy::set_has_haveoppage() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PrintLimitPolicy::clear_has_haveoppage() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PrintLimitPolicy::clear_haveoppage() {
  haveoppage_ = 0;
  clear_has_haveoppage();
}
inline ::google::protobuf::int32 PrintLimitPolicy::haveoppage() const {
  return haveoppage_;
}
inline void PrintLimitPolicy::set_haveoppage(::google::protobuf::int32 value) {
  set_has_haveoppage();
  haveoppage_ = value;
}

// -------------------------------------------------------------------

// CopyLimitPolicy

// optional .isafetec.JOB_TYPE job_type = 1;
inline bool CopyLimitPolicy::has_job_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CopyLimitPolicy::set_has_job_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CopyLimitPolicy::clear_has_job_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CopyLimitPolicy::clear_job_type() {
  job_type_ = 0;
  clear_has_job_type();
}
inline isafetec::JOB_TYPE CopyLimitPolicy::job_type() const {
  return static_cast< isafetec::JOB_TYPE >(job_type_);
}
inline void CopyLimitPolicy::set_job_type(isafetec::JOB_TYPE value) {
  GOOGLE_DCHECK(isafetec::JOB_TYPE_IsValid(value));
  set_has_job_type();
  job_type_ = value;
}

// optional .isafetec.JOB_LIMIT_TYPE job_limit_type = 2;
inline bool CopyLimitPolicy::has_job_limit_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CopyLimitPolicy::set_has_job_limit_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CopyLimitPolicy::clear_has_job_limit_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CopyLimitPolicy::clear_job_limit_type() {
  job_limit_type_ = 0;
  clear_has_job_limit_type();
}
inline isafetec::JOB_LIMIT_TYPE CopyLimitPolicy::job_limit_type() const {
  return static_cast< isafetec::JOB_LIMIT_TYPE >(job_limit_type_);
}
inline void CopyLimitPolicy::set_job_limit_type(isafetec::JOB_LIMIT_TYPE value) {
  GOOGLE_DCHECK(isafetec::JOB_LIMIT_TYPE_IsValid(value));
  set_has_job_limit_type();
  job_limit_type_ = value;
}

// optional .isafetec.JOB_LIMIT_PERIOD_TYPE job_limit_period_type = 3;
inline bool CopyLimitPolicy::has_job_limit_period_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CopyLimitPolicy::set_has_job_limit_period_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CopyLimitPolicy::clear_has_job_limit_period_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CopyLimitPolicy::clear_job_limit_period_type() {
  job_limit_period_type_ = 0;
  clear_has_job_limit_period_type();
}
inline isafetec::JOB_LIMIT_PERIOD_TYPE CopyLimitPolicy::job_limit_period_type() const {
  return static_cast< isafetec::JOB_LIMIT_PERIOD_TYPE >(job_limit_period_type_);
}
inline void CopyLimitPolicy::set_job_limit_period_type(isafetec::JOB_LIMIT_PERIOD_TYPE value) {
  GOOGLE_DCHECK(isafetec::JOB_LIMIT_PERIOD_TYPE_IsValid(value));
  set_has_job_limit_period_type();
  job_limit_period_type_ = value;
}

// optional int32 state = 4;
inline bool CopyLimitPolicy::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CopyLimitPolicy::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CopyLimitPolicy::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CopyLimitPolicy::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 CopyLimitPolicy::state() const {
  return state_;
}
inline void CopyLimitPolicy::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 LimitPage = 5;
inline bool CopyLimitPolicy::has_limitpage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CopyLimitPolicy::set_has_limitpage() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CopyLimitPolicy::clear_has_limitpage() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CopyLimitPolicy::clear_limitpage() {
  limitpage_ = 0;
  clear_has_limitpage();
}
inline ::google::protobuf::int32 CopyLimitPolicy::limitpage() const {
  return limitpage_;
}
inline void CopyLimitPolicy::set_limitpage(::google::protobuf::int32 value) {
  set_has_limitpage();
  limitpage_ = value;
}

// optional int32 HaveOpPage = 6;
inline bool CopyLimitPolicy::has_haveoppage() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CopyLimitPolicy::set_has_haveoppage() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CopyLimitPolicy::clear_has_haveoppage() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CopyLimitPolicy::clear_haveoppage() {
  haveoppage_ = 0;
  clear_has_haveoppage();
}
inline ::google::protobuf::int32 CopyLimitPolicy::haveoppage() const {
  return haveoppage_;
}
inline void CopyLimitPolicy::set_haveoppage(::google::protobuf::int32 value) {
  set_has_haveoppage();
  haveoppage_ = value;
}

// -------------------------------------------------------------------

// ScanLimitPolicy

// optional .isafetec.JOB_TYPE job_type = 1;
inline bool ScanLimitPolicy::has_job_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScanLimitPolicy::set_has_job_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScanLimitPolicy::clear_has_job_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScanLimitPolicy::clear_job_type() {
  job_type_ = 0;
  clear_has_job_type();
}
inline isafetec::JOB_TYPE ScanLimitPolicy::job_type() const {
  return static_cast< isafetec::JOB_TYPE >(job_type_);
}
inline void ScanLimitPolicy::set_job_type(isafetec::JOB_TYPE value) {
  GOOGLE_DCHECK(isafetec::JOB_TYPE_IsValid(value));
  set_has_job_type();
  job_type_ = value;
}

// optional .isafetec.JOB_LIMIT_TYPE job_limit_type = 2;
inline bool ScanLimitPolicy::has_job_limit_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScanLimitPolicy::set_has_job_limit_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScanLimitPolicy::clear_has_job_limit_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScanLimitPolicy::clear_job_limit_type() {
  job_limit_type_ = 0;
  clear_has_job_limit_type();
}
inline isafetec::JOB_LIMIT_TYPE ScanLimitPolicy::job_limit_type() const {
  return static_cast< isafetec::JOB_LIMIT_TYPE >(job_limit_type_);
}
inline void ScanLimitPolicy::set_job_limit_type(isafetec::JOB_LIMIT_TYPE value) {
  GOOGLE_DCHECK(isafetec::JOB_LIMIT_TYPE_IsValid(value));
  set_has_job_limit_type();
  job_limit_type_ = value;
}

// optional .isafetec.JOB_LIMIT_PERIOD_TYPE job_limit_period_type = 3;
inline bool ScanLimitPolicy::has_job_limit_period_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScanLimitPolicy::set_has_job_limit_period_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ScanLimitPolicy::clear_has_job_limit_period_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ScanLimitPolicy::clear_job_limit_period_type() {
  job_limit_period_type_ = 0;
  clear_has_job_limit_period_type();
}
inline isafetec::JOB_LIMIT_PERIOD_TYPE ScanLimitPolicy::job_limit_period_type() const {
  return static_cast< isafetec::JOB_LIMIT_PERIOD_TYPE >(job_limit_period_type_);
}
inline void ScanLimitPolicy::set_job_limit_period_type(isafetec::JOB_LIMIT_PERIOD_TYPE value) {
  GOOGLE_DCHECK(isafetec::JOB_LIMIT_PERIOD_TYPE_IsValid(value));
  set_has_job_limit_period_type();
  job_limit_period_type_ = value;
}

// optional int32 state = 4;
inline bool ScanLimitPolicy::has_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ScanLimitPolicy::set_has_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ScanLimitPolicy::clear_has_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ScanLimitPolicy::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 ScanLimitPolicy::state() const {
  return state_;
}
inline void ScanLimitPolicy::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 LimitPage = 5;
inline bool ScanLimitPolicy::has_limitpage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ScanLimitPolicy::set_has_limitpage() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ScanLimitPolicy::clear_has_limitpage() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ScanLimitPolicy::clear_limitpage() {
  limitpage_ = 0;
  clear_has_limitpage();
}
inline ::google::protobuf::int32 ScanLimitPolicy::limitpage() const {
  return limitpage_;
}
inline void ScanLimitPolicy::set_limitpage(::google::protobuf::int32 value) {
  set_has_limitpage();
  limitpage_ = value;
}

// optional int32 HaveOpPage = 6;
inline bool ScanLimitPolicy::has_haveoppage() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ScanLimitPolicy::set_has_haveoppage() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ScanLimitPolicy::clear_has_haveoppage() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ScanLimitPolicy::clear_haveoppage() {
  haveoppage_ = 0;
  clear_has_haveoppage();
}
inline ::google::protobuf::int32 ScanLimitPolicy::haveoppage() const {
  return haveoppage_;
}
inline void ScanLimitPolicy::set_haveoppage(::google::protobuf::int32 value) {
  set_has_haveoppage();
  haveoppage_ = value;
}

// -------------------------------------------------------------------

// PrinterMeterLog

// required int32 PrintId = 1;
inline bool PrinterMeterLog::has_printid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrinterMeterLog::set_has_printid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrinterMeterLog::clear_has_printid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrinterMeterLog::clear_printid() {
  printid_ = 0;
  clear_has_printid();
}
inline ::google::protobuf::int32 PrinterMeterLog::printid() const {
  return printid_;
}
inline void PrinterMeterLog::set_printid(::google::protobuf::int32 value) {
  set_has_printid();
  printid_ = value;
}

// optional double RecordPrintMeterTime = 2;
inline bool PrinterMeterLog::has_recordprintmetertime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrinterMeterLog::set_has_recordprintmetertime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrinterMeterLog::clear_has_recordprintmetertime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrinterMeterLog::clear_recordprintmetertime() {
  recordprintmetertime_ = 0;
  clear_has_recordprintmetertime();
}
inline double PrinterMeterLog::recordprintmetertime() const {
  return recordprintmetertime_;
}
inline void PrinterMeterLog::set_recordprintmetertime(double value) {
  set_has_recordprintmetertime();
  recordprintmetertime_ = value;
}

// optional int32 OpAdminId = 3;
inline bool PrinterMeterLog::has_opadminid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrinterMeterLog::set_has_opadminid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrinterMeterLog::clear_has_opadminid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrinterMeterLog::clear_opadminid() {
  opadminid_ = 0;
  clear_has_opadminid();
}
inline ::google::protobuf::int32 PrinterMeterLog::opadminid() const {
  return opadminid_;
}
inline void PrinterMeterLog::set_opadminid(::google::protobuf::int32 value) {
  set_has_opadminid();
  opadminid_ = value;
}

// optional int32 A4PrintTotalPage = 4;
inline bool PrinterMeterLog::has_a4printtotalpage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrinterMeterLog::set_has_a4printtotalpage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrinterMeterLog::clear_has_a4printtotalpage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrinterMeterLog::clear_a4printtotalpage() {
  a4printtotalpage_ = 0;
  clear_has_a4printtotalpage();
}
inline ::google::protobuf::int32 PrinterMeterLog::a4printtotalpage() const {
  return a4printtotalpage_;
}
inline void PrinterMeterLog::set_a4printtotalpage(::google::protobuf::int32 value) {
  set_has_a4printtotalpage();
  a4printtotalpage_ = value;
}

// optional int32 A4PrintColorPage = 5;
inline bool PrinterMeterLog::has_a4printcolorpage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PrinterMeterLog::set_has_a4printcolorpage() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PrinterMeterLog::clear_has_a4printcolorpage() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PrinterMeterLog::clear_a4printcolorpage() {
  a4printcolorpage_ = 0;
  clear_has_a4printcolorpage();
}
inline ::google::protobuf::int32 PrinterMeterLog::a4printcolorpage() const {
  return a4printcolorpage_;
}
inline void PrinterMeterLog::set_a4printcolorpage(::google::protobuf::int32 value) {
  set_has_a4printcolorpage();
  a4printcolorpage_ = value;
}

// optional int32 A4PrintHBPage = 6;
inline bool PrinterMeterLog::has_a4printhbpage() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PrinterMeterLog::set_has_a4printhbpage() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PrinterMeterLog::clear_has_a4printhbpage() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PrinterMeterLog::clear_a4printhbpage() {
  a4printhbpage_ = 0;
  clear_has_a4printhbpage();
}
inline ::google::protobuf::int32 PrinterMeterLog::a4printhbpage() const {
  return a4printhbpage_;
}
inline void PrinterMeterLog::set_a4printhbpage(::google::protobuf::int32 value) {
  set_has_a4printhbpage();
  a4printhbpage_ = value;
}

// optional int32 A3PrintTotalPage = 7;
inline bool PrinterMeterLog::has_a3printtotalpage() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PrinterMeterLog::set_has_a3printtotalpage() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PrinterMeterLog::clear_has_a3printtotalpage() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PrinterMeterLog::clear_a3printtotalpage() {
  a3printtotalpage_ = 0;
  clear_has_a3printtotalpage();
}
inline ::google::protobuf::int32 PrinterMeterLog::a3printtotalpage() const {
  return a3printtotalpage_;
}
inline void PrinterMeterLog::set_a3printtotalpage(::google::protobuf::int32 value) {
  set_has_a3printtotalpage();
  a3printtotalpage_ = value;
}

// optional int32 A3PrintColorPage = 8;
inline bool PrinterMeterLog::has_a3printcolorpage() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PrinterMeterLog::set_has_a3printcolorpage() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PrinterMeterLog::clear_has_a3printcolorpage() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PrinterMeterLog::clear_a3printcolorpage() {
  a3printcolorpage_ = 0;
  clear_has_a3printcolorpage();
}
inline ::google::protobuf::int32 PrinterMeterLog::a3printcolorpage() const {
  return a3printcolorpage_;
}
inline void PrinterMeterLog::set_a3printcolorpage(::google::protobuf::int32 value) {
  set_has_a3printcolorpage();
  a3printcolorpage_ = value;
}

// optional int32 A3PrintHBPage = 9;
inline bool PrinterMeterLog::has_a3printhbpage() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PrinterMeterLog::set_has_a3printhbpage() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PrinterMeterLog::clear_has_a3printhbpage() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PrinterMeterLog::clear_a3printhbpage() {
  a3printhbpage_ = 0;
  clear_has_a3printhbpage();
}
inline ::google::protobuf::int32 PrinterMeterLog::a3printhbpage() const {
  return a3printhbpage_;
}
inline void PrinterMeterLog::set_a3printhbpage(::google::protobuf::int32 value) {
  set_has_a3printhbpage();
  a3printhbpage_ = value;
}

// optional int32 OtherPrintTotalPage = 10;
inline bool PrinterMeterLog::has_otherprinttotalpage() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PrinterMeterLog::set_has_otherprinttotalpage() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PrinterMeterLog::clear_has_otherprinttotalpage() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PrinterMeterLog::clear_otherprinttotalpage() {
  otherprinttotalpage_ = 0;
  clear_has_otherprinttotalpage();
}
inline ::google::protobuf::int32 PrinterMeterLog::otherprinttotalpage() const {
  return otherprinttotalpage_;
}
inline void PrinterMeterLog::set_otherprinttotalpage(::google::protobuf::int32 value) {
  set_has_otherprinttotalpage();
  otherprinttotalpage_ = value;
}

// optional int32 OtherPrintColorPage = 11;
inline bool PrinterMeterLog::has_otherprintcolorpage() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PrinterMeterLog::set_has_otherprintcolorpage() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PrinterMeterLog::clear_has_otherprintcolorpage() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PrinterMeterLog::clear_otherprintcolorpage() {
  otherprintcolorpage_ = 0;
  clear_has_otherprintcolorpage();
}
inline ::google::protobuf::int32 PrinterMeterLog::otherprintcolorpage() const {
  return otherprintcolorpage_;
}
inline void PrinterMeterLog::set_otherprintcolorpage(::google::protobuf::int32 value) {
  set_has_otherprintcolorpage();
  otherprintcolorpage_ = value;
}

// optional int32 OtherPrintHBPage = 12;
inline bool PrinterMeterLog::has_otherprinthbpage() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PrinterMeterLog::set_has_otherprinthbpage() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PrinterMeterLog::clear_has_otherprinthbpage() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PrinterMeterLog::clear_otherprinthbpage() {
  otherprinthbpage_ = 0;
  clear_has_otherprinthbpage();
}
inline ::google::protobuf::int32 PrinterMeterLog::otherprinthbpage() const {
  return otherprinthbpage_;
}
inline void PrinterMeterLog::set_otherprinthbpage(::google::protobuf::int32 value) {
  set_has_otherprinthbpage();
  otherprinthbpage_ = value;
}

// optional int32 A4CopyTotalPage = 13;
inline bool PrinterMeterLog::has_a4copytotalpage() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PrinterMeterLog::set_has_a4copytotalpage() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PrinterMeterLog::clear_has_a4copytotalpage() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PrinterMeterLog::clear_a4copytotalpage() {
  a4copytotalpage_ = 0;
  clear_has_a4copytotalpage();
}
inline ::google::protobuf::int32 PrinterMeterLog::a4copytotalpage() const {
  return a4copytotalpage_;
}
inline void PrinterMeterLog::set_a4copytotalpage(::google::protobuf::int32 value) {
  set_has_a4copytotalpage();
  a4copytotalpage_ = value;
}

// optional int32 A4CopyColorPage = 14;
inline bool PrinterMeterLog::has_a4copycolorpage() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PrinterMeterLog::set_has_a4copycolorpage() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PrinterMeterLog::clear_has_a4copycolorpage() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PrinterMeterLog::clear_a4copycolorpage() {
  a4copycolorpage_ = 0;
  clear_has_a4copycolorpage();
}
inline ::google::protobuf::int32 PrinterMeterLog::a4copycolorpage() const {
  return a4copycolorpage_;
}
inline void PrinterMeterLog::set_a4copycolorpage(::google::protobuf::int32 value) {
  set_has_a4copycolorpage();
  a4copycolorpage_ = value;
}

// optional int32 A4CopyHBPage = 15;
inline bool PrinterMeterLog::has_a4copyhbpage() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PrinterMeterLog::set_has_a4copyhbpage() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PrinterMeterLog::clear_has_a4copyhbpage() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PrinterMeterLog::clear_a4copyhbpage() {
  a4copyhbpage_ = 0;
  clear_has_a4copyhbpage();
}
inline ::google::protobuf::int32 PrinterMeterLog::a4copyhbpage() const {
  return a4copyhbpage_;
}
inline void PrinterMeterLog::set_a4copyhbpage(::google::protobuf::int32 value) {
  set_has_a4copyhbpage();
  a4copyhbpage_ = value;
}

// optional int32 A3CopyTotalPage = 16;
inline bool PrinterMeterLog::has_a3copytotalpage() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PrinterMeterLog::set_has_a3copytotalpage() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PrinterMeterLog::clear_has_a3copytotalpage() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PrinterMeterLog::clear_a3copytotalpage() {
  a3copytotalpage_ = 0;
  clear_has_a3copytotalpage();
}
inline ::google::protobuf::int32 PrinterMeterLog::a3copytotalpage() const {
  return a3copytotalpage_;
}
inline void PrinterMeterLog::set_a3copytotalpage(::google::protobuf::int32 value) {
  set_has_a3copytotalpage();
  a3copytotalpage_ = value;
}

// optional int32 A3CopyColorPage = 17;
inline bool PrinterMeterLog::has_a3copycolorpage() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PrinterMeterLog::set_has_a3copycolorpage() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PrinterMeterLog::clear_has_a3copycolorpage() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PrinterMeterLog::clear_a3copycolorpage() {
  a3copycolorpage_ = 0;
  clear_has_a3copycolorpage();
}
inline ::google::protobuf::int32 PrinterMeterLog::a3copycolorpage() const {
  return a3copycolorpage_;
}
inline void PrinterMeterLog::set_a3copycolorpage(::google::protobuf::int32 value) {
  set_has_a3copycolorpage();
  a3copycolorpage_ = value;
}

// optional int32 A3CopyHBPage = 18;
inline bool PrinterMeterLog::has_a3copyhbpage() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PrinterMeterLog::set_has_a3copyhbpage() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PrinterMeterLog::clear_has_a3copyhbpage() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PrinterMeterLog::clear_a3copyhbpage() {
  a3copyhbpage_ = 0;
  clear_has_a3copyhbpage();
}
inline ::google::protobuf::int32 PrinterMeterLog::a3copyhbpage() const {
  return a3copyhbpage_;
}
inline void PrinterMeterLog::set_a3copyhbpage(::google::protobuf::int32 value) {
  set_has_a3copyhbpage();
  a3copyhbpage_ = value;
}

// optional int32 OtherCopyTotalPage = 19;
inline bool PrinterMeterLog::has_othercopytotalpage() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PrinterMeterLog::set_has_othercopytotalpage() {
  _has_bits_[0] |= 0x00040000u;
}
inline void PrinterMeterLog::clear_has_othercopytotalpage() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void PrinterMeterLog::clear_othercopytotalpage() {
  othercopytotalpage_ = 0;
  clear_has_othercopytotalpage();
}
inline ::google::protobuf::int32 PrinterMeterLog::othercopytotalpage() const {
  return othercopytotalpage_;
}
inline void PrinterMeterLog::set_othercopytotalpage(::google::protobuf::int32 value) {
  set_has_othercopytotalpage();
  othercopytotalpage_ = value;
}

// optional int32 OtherCopyColorPage = 20;
inline bool PrinterMeterLog::has_othercopycolorpage() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void PrinterMeterLog::set_has_othercopycolorpage() {
  _has_bits_[0] |= 0x00080000u;
}
inline void PrinterMeterLog::clear_has_othercopycolorpage() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void PrinterMeterLog::clear_othercopycolorpage() {
  othercopycolorpage_ = 0;
  clear_has_othercopycolorpage();
}
inline ::google::protobuf::int32 PrinterMeterLog::othercopycolorpage() const {
  return othercopycolorpage_;
}
inline void PrinterMeterLog::set_othercopycolorpage(::google::protobuf::int32 value) {
  set_has_othercopycolorpage();
  othercopycolorpage_ = value;
}

// optional int32 OtherCopyHBPage = 21;
inline bool PrinterMeterLog::has_othercopyhbpage() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void PrinterMeterLog::set_has_othercopyhbpage() {
  _has_bits_[0] |= 0x00100000u;
}
inline void PrinterMeterLog::clear_has_othercopyhbpage() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void PrinterMeterLog::clear_othercopyhbpage() {
  othercopyhbpage_ = 0;
  clear_has_othercopyhbpage();
}
inline ::google::protobuf::int32 PrinterMeterLog::othercopyhbpage() const {
  return othercopyhbpage_;
}
inline void PrinterMeterLog::set_othercopyhbpage(::google::protobuf::int32 value) {
  set_has_othercopyhbpage();
  othercopyhbpage_ = value;
}

// optional int32 ScanTotalPage = 22;
inline bool PrinterMeterLog::has_scantotalpage() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void PrinterMeterLog::set_has_scantotalpage() {
  _has_bits_[0] |= 0x00200000u;
}
inline void PrinterMeterLog::clear_has_scantotalpage() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void PrinterMeterLog::clear_scantotalpage() {
  scantotalpage_ = 0;
  clear_has_scantotalpage();
}
inline ::google::protobuf::int32 PrinterMeterLog::scantotalpage() const {
  return scantotalpage_;
}
inline void PrinterMeterLog::set_scantotalpage(::google::protobuf::int32 value) {
  set_has_scantotalpage();
  scantotalpage_ = value;
}

// optional int32 ScanBigColorPage = 23;
inline bool PrinterMeterLog::has_scanbigcolorpage() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void PrinterMeterLog::set_has_scanbigcolorpage() {
  _has_bits_[0] |= 0x00400000u;
}
inline void PrinterMeterLog::clear_has_scanbigcolorpage() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void PrinterMeterLog::clear_scanbigcolorpage() {
  scanbigcolorpage_ = 0;
  clear_has_scanbigcolorpage();
}
inline ::google::protobuf::int32 PrinterMeterLog::scanbigcolorpage() const {
  return scanbigcolorpage_;
}
inline void PrinterMeterLog::set_scanbigcolorpage(::google::protobuf::int32 value) {
  set_has_scanbigcolorpage();
  scanbigcolorpage_ = value;
}

// optional int32 ScanBigHBPage = 24;
inline bool PrinterMeterLog::has_scanbighbpage() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void PrinterMeterLog::set_has_scanbighbpage() {
  _has_bits_[0] |= 0x00800000u;
}
inline void PrinterMeterLog::clear_has_scanbighbpage() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void PrinterMeterLog::clear_scanbighbpage() {
  scanbighbpage_ = 0;
  clear_has_scanbighbpage();
}
inline ::google::protobuf::int32 PrinterMeterLog::scanbighbpage() const {
  return scanbighbpage_;
}
inline void PrinterMeterLog::set_scanbighbpage(::google::protobuf::int32 value) {
  set_has_scanbighbpage();
  scanbighbpage_ = value;
}

// optional int32 ScanSmallColorPage = 25;
inline bool PrinterMeterLog::has_scansmallcolorpage() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void PrinterMeterLog::set_has_scansmallcolorpage() {
  _has_bits_[0] |= 0x01000000u;
}
inline void PrinterMeterLog::clear_has_scansmallcolorpage() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void PrinterMeterLog::clear_scansmallcolorpage() {
  scansmallcolorpage_ = 0;
  clear_has_scansmallcolorpage();
}
inline ::google::protobuf::int32 PrinterMeterLog::scansmallcolorpage() const {
  return scansmallcolorpage_;
}
inline void PrinterMeterLog::set_scansmallcolorpage(::google::protobuf::int32 value) {
  set_has_scansmallcolorpage();
  scansmallcolorpage_ = value;
}

// optional int32 ScanSmallHBPage = 26;
inline bool PrinterMeterLog::has_scansmallhbpage() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void PrinterMeterLog::set_has_scansmallhbpage() {
  _has_bits_[0] |= 0x02000000u;
}
inline void PrinterMeterLog::clear_has_scansmallhbpage() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void PrinterMeterLog::clear_scansmallhbpage() {
  scansmallhbpage_ = 0;
  clear_has_scansmallhbpage();
}
inline ::google::protobuf::int32 PrinterMeterLog::scansmallhbpage() const {
  return scansmallhbpage_;
}
inline void PrinterMeterLog::set_scansmallhbpage(::google::protobuf::int32 value) {
  set_has_scansmallhbpage();
  scansmallhbpage_ = value;
}

// optional int32 A4FaxTotalPage = 27;
inline bool PrinterMeterLog::has_a4faxtotalpage() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void PrinterMeterLog::set_has_a4faxtotalpage() {
  _has_bits_[0] |= 0x04000000u;
}
inline void PrinterMeterLog::clear_has_a4faxtotalpage() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void PrinterMeterLog::clear_a4faxtotalpage() {
  a4faxtotalpage_ = 0;
  clear_has_a4faxtotalpage();
}
inline ::google::protobuf::int32 PrinterMeterLog::a4faxtotalpage() const {
  return a4faxtotalpage_;
}
inline void PrinterMeterLog::set_a4faxtotalpage(::google::protobuf::int32 value) {
  set_has_a4faxtotalpage();
  a4faxtotalpage_ = value;
}

// optional int32 A4FaxColorPage = 28;
inline bool PrinterMeterLog::has_a4faxcolorpage() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void PrinterMeterLog::set_has_a4faxcolorpage() {
  _has_bits_[0] |= 0x08000000u;
}
inline void PrinterMeterLog::clear_has_a4faxcolorpage() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void PrinterMeterLog::clear_a4faxcolorpage() {
  a4faxcolorpage_ = 0;
  clear_has_a4faxcolorpage();
}
inline ::google::protobuf::int32 PrinterMeterLog::a4faxcolorpage() const {
  return a4faxcolorpage_;
}
inline void PrinterMeterLog::set_a4faxcolorpage(::google::protobuf::int32 value) {
  set_has_a4faxcolorpage();
  a4faxcolorpage_ = value;
}

// optional int32 A4FaxHBPage = 29;
inline bool PrinterMeterLog::has_a4faxhbpage() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void PrinterMeterLog::set_has_a4faxhbpage() {
  _has_bits_[0] |= 0x10000000u;
}
inline void PrinterMeterLog::clear_has_a4faxhbpage() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void PrinterMeterLog::clear_a4faxhbpage() {
  a4faxhbpage_ = 0;
  clear_has_a4faxhbpage();
}
inline ::google::protobuf::int32 PrinterMeterLog::a4faxhbpage() const {
  return a4faxhbpage_;
}
inline void PrinterMeterLog::set_a4faxhbpage(::google::protobuf::int32 value) {
  set_has_a4faxhbpage();
  a4faxhbpage_ = value;
}

// optional int32 A3FaxTotalPage = 30;
inline bool PrinterMeterLog::has_a3faxtotalpage() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void PrinterMeterLog::set_has_a3faxtotalpage() {
  _has_bits_[0] |= 0x20000000u;
}
inline void PrinterMeterLog::clear_has_a3faxtotalpage() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void PrinterMeterLog::clear_a3faxtotalpage() {
  a3faxtotalpage_ = 0;
  clear_has_a3faxtotalpage();
}
inline ::google::protobuf::int32 PrinterMeterLog::a3faxtotalpage() const {
  return a3faxtotalpage_;
}
inline void PrinterMeterLog::set_a3faxtotalpage(::google::protobuf::int32 value) {
  set_has_a3faxtotalpage();
  a3faxtotalpage_ = value;
}

// optional int32 A3FaxColorPage = 31;
inline bool PrinterMeterLog::has_a3faxcolorpage() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void PrinterMeterLog::set_has_a3faxcolorpage() {
  _has_bits_[0] |= 0x40000000u;
}
inline void PrinterMeterLog::clear_has_a3faxcolorpage() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void PrinterMeterLog::clear_a3faxcolorpage() {
  a3faxcolorpage_ = 0;
  clear_has_a3faxcolorpage();
}
inline ::google::protobuf::int32 PrinterMeterLog::a3faxcolorpage() const {
  return a3faxcolorpage_;
}
inline void PrinterMeterLog::set_a3faxcolorpage(::google::protobuf::int32 value) {
  set_has_a3faxcolorpage();
  a3faxcolorpage_ = value;
}

// optional int32 A3FaxHBPage = 32;
inline bool PrinterMeterLog::has_a3faxhbpage() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void PrinterMeterLog::set_has_a3faxhbpage() {
  _has_bits_[0] |= 0x80000000u;
}
inline void PrinterMeterLog::clear_has_a3faxhbpage() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void PrinterMeterLog::clear_a3faxhbpage() {
  a3faxhbpage_ = 0;
  clear_has_a3faxhbpage();
}
inline ::google::protobuf::int32 PrinterMeterLog::a3faxhbpage() const {
  return a3faxhbpage_;
}
inline void PrinterMeterLog::set_a3faxhbpage(::google::protobuf::int32 value) {
  set_has_a3faxhbpage();
  a3faxhbpage_ = value;
}

// optional int32 OtherFaxTotalPage = 33;
inline bool PrinterMeterLog::has_otherfaxtotalpage() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void PrinterMeterLog::set_has_otherfaxtotalpage() {
  _has_bits_[1] |= 0x00000001u;
}
inline void PrinterMeterLog::clear_has_otherfaxtotalpage() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void PrinterMeterLog::clear_otherfaxtotalpage() {
  otherfaxtotalpage_ = 0;
  clear_has_otherfaxtotalpage();
}
inline ::google::protobuf::int32 PrinterMeterLog::otherfaxtotalpage() const {
  return otherfaxtotalpage_;
}
inline void PrinterMeterLog::set_otherfaxtotalpage(::google::protobuf::int32 value) {
  set_has_otherfaxtotalpage();
  otherfaxtotalpage_ = value;
}

// optional int32 OtherFaxColorPage = 34;
inline bool PrinterMeterLog::has_otherfaxcolorpage() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void PrinterMeterLog::set_has_otherfaxcolorpage() {
  _has_bits_[1] |= 0x00000002u;
}
inline void PrinterMeterLog::clear_has_otherfaxcolorpage() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void PrinterMeterLog::clear_otherfaxcolorpage() {
  otherfaxcolorpage_ = 0;
  clear_has_otherfaxcolorpage();
}
inline ::google::protobuf::int32 PrinterMeterLog::otherfaxcolorpage() const {
  return otherfaxcolorpage_;
}
inline void PrinterMeterLog::set_otherfaxcolorpage(::google::protobuf::int32 value) {
  set_has_otherfaxcolorpage();
  otherfaxcolorpage_ = value;
}

// optional int32 OtherFaxHBPage = 35;
inline bool PrinterMeterLog::has_otherfaxhbpage() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void PrinterMeterLog::set_has_otherfaxhbpage() {
  _has_bits_[1] |= 0x00000004u;
}
inline void PrinterMeterLog::clear_has_otherfaxhbpage() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void PrinterMeterLog::clear_otherfaxhbpage() {
  otherfaxhbpage_ = 0;
  clear_has_otherfaxhbpage();
}
inline ::google::protobuf::int32 PrinterMeterLog::otherfaxhbpage() const {
  return otherfaxhbpage_;
}
inline void PrinterMeterLog::set_otherfaxhbpage(::google::protobuf::int32 value) {
  set_has_otherfaxhbpage();
  otherfaxhbpage_ = value;
}

// optional int32 OtherOpTotalPage = 36;
inline bool PrinterMeterLog::has_otheroptotalpage() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void PrinterMeterLog::set_has_otheroptotalpage() {
  _has_bits_[1] |= 0x00000008u;
}
inline void PrinterMeterLog::clear_has_otheroptotalpage() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void PrinterMeterLog::clear_otheroptotalpage() {
  otheroptotalpage_ = 0;
  clear_has_otheroptotalpage();
}
inline ::google::protobuf::int32 PrinterMeterLog::otheroptotalpage() const {
  return otheroptotalpage_;
}
inline void PrinterMeterLog::set_otheroptotalpage(::google::protobuf::int32 value) {
  set_has_otheroptotalpage();
  otheroptotalpage_ = value;
}

// optional int32 OtherOpColorPage = 37;
inline bool PrinterMeterLog::has_otheropcolorpage() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void PrinterMeterLog::set_has_otheropcolorpage() {
  _has_bits_[1] |= 0x00000010u;
}
inline void PrinterMeterLog::clear_has_otheropcolorpage() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void PrinterMeterLog::clear_otheropcolorpage() {
  otheropcolorpage_ = 0;
  clear_has_otheropcolorpage();
}
inline ::google::protobuf::int32 PrinterMeterLog::otheropcolorpage() const {
  return otheropcolorpage_;
}
inline void PrinterMeterLog::set_otheropcolorpage(::google::protobuf::int32 value) {
  set_has_otheropcolorpage();
  otheropcolorpage_ = value;
}

// optional int32 OtherOpHBPage = 38;
inline bool PrinterMeterLog::has_otherophbpage() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void PrinterMeterLog::set_has_otherophbpage() {
  _has_bits_[1] |= 0x00000020u;
}
inline void PrinterMeterLog::clear_has_otherophbpage() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void PrinterMeterLog::clear_otherophbpage() {
  otherophbpage_ = 0;
  clear_has_otherophbpage();
}
inline ::google::protobuf::int32 PrinterMeterLog::otherophbpage() const {
  return otherophbpage_;
}
inline void PrinterMeterLog::set_otherophbpage(::google::protobuf::int32 value) {
  set_has_otherophbpage();
  otherophbpage_ = value;
}

// -------------------------------------------------------------------

// PrinterShareInfo

// optional int32 id = 1;
inline bool PrinterShareInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrinterShareInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrinterShareInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrinterShareInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PrinterShareInfo::id() const {
  return id_;
}
inline void PrinterShareInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string pc_ip_addr = 2;
inline bool PrinterShareInfo::has_pc_ip_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrinterShareInfo::set_has_pc_ip_addr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrinterShareInfo::clear_has_pc_ip_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrinterShareInfo::clear_pc_ip_addr() {
  if (pc_ip_addr_ != &::google::protobuf::internal::kEmptyString) {
    pc_ip_addr_->clear();
  }
  clear_has_pc_ip_addr();
}
inline const ::std::string& PrinterShareInfo::pc_ip_addr() const {
  return *pc_ip_addr_;
}
inline void PrinterShareInfo::set_pc_ip_addr(const ::std::string& value) {
  set_has_pc_ip_addr();
  if (pc_ip_addr_ == &::google::protobuf::internal::kEmptyString) {
    pc_ip_addr_ = new ::std::string;
  }
  pc_ip_addr_->assign(value);
}
inline void PrinterShareInfo::set_pc_ip_addr(const char* value) {
  set_has_pc_ip_addr();
  if (pc_ip_addr_ == &::google::protobuf::internal::kEmptyString) {
    pc_ip_addr_ = new ::std::string;
  }
  pc_ip_addr_->assign(value);
}
inline void PrinterShareInfo::set_pc_ip_addr(const char* value, size_t size) {
  set_has_pc_ip_addr();
  if (pc_ip_addr_ == &::google::protobuf::internal::kEmptyString) {
    pc_ip_addr_ = new ::std::string;
  }
  pc_ip_addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrinterShareInfo::mutable_pc_ip_addr() {
  set_has_pc_ip_addr();
  if (pc_ip_addr_ == &::google::protobuf::internal::kEmptyString) {
    pc_ip_addr_ = new ::std::string;
  }
  return pc_ip_addr_;
}
inline ::std::string* PrinterShareInfo::release_pc_ip_addr() {
  clear_has_pc_ip_addr();
  if (pc_ip_addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pc_ip_addr_;
    pc_ip_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string printer_name = 3;
inline bool PrinterShareInfo::has_printer_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrinterShareInfo::set_has_printer_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrinterShareInfo::clear_has_printer_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrinterShareInfo::clear_printer_name() {
  if (printer_name_ != &::google::protobuf::internal::kEmptyString) {
    printer_name_->clear();
  }
  clear_has_printer_name();
}
inline const ::std::string& PrinterShareInfo::printer_name() const {
  return *printer_name_;
}
inline void PrinterShareInfo::set_printer_name(const ::std::string& value) {
  set_has_printer_name();
  if (printer_name_ == &::google::protobuf::internal::kEmptyString) {
    printer_name_ = new ::std::string;
  }
  printer_name_->assign(value);
}
inline void PrinterShareInfo::set_printer_name(const char* value) {
  set_has_printer_name();
  if (printer_name_ == &::google::protobuf::internal::kEmptyString) {
    printer_name_ = new ::std::string;
  }
  printer_name_->assign(value);
}
inline void PrinterShareInfo::set_printer_name(const char* value, size_t size) {
  set_has_printer_name();
  if (printer_name_ == &::google::protobuf::internal::kEmptyString) {
    printer_name_ = new ::std::string;
  }
  printer_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrinterShareInfo::mutable_printer_name() {
  set_has_printer_name();
  if (printer_name_ == &::google::protobuf::internal::kEmptyString) {
    printer_name_ = new ::std::string;
  }
  return printer_name_;
}
inline ::std::string* PrinterShareInfo::release_printer_name() {
  clear_has_printer_name();
  if (printer_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = printer_name_;
    printer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string print_share_name = 4;
inline bool PrinterShareInfo::has_print_share_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrinterShareInfo::set_has_print_share_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrinterShareInfo::clear_has_print_share_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrinterShareInfo::clear_print_share_name() {
  if (print_share_name_ != &::google::protobuf::internal::kEmptyString) {
    print_share_name_->clear();
  }
  clear_has_print_share_name();
}
inline const ::std::string& PrinterShareInfo::print_share_name() const {
  return *print_share_name_;
}
inline void PrinterShareInfo::set_print_share_name(const ::std::string& value) {
  set_has_print_share_name();
  if (print_share_name_ == &::google::protobuf::internal::kEmptyString) {
    print_share_name_ = new ::std::string;
  }
  print_share_name_->assign(value);
}
inline void PrinterShareInfo::set_print_share_name(const char* value) {
  set_has_print_share_name();
  if (print_share_name_ == &::google::protobuf::internal::kEmptyString) {
    print_share_name_ = new ::std::string;
  }
  print_share_name_->assign(value);
}
inline void PrinterShareInfo::set_print_share_name(const char* value, size_t size) {
  set_has_print_share_name();
  if (print_share_name_ == &::google::protobuf::internal::kEmptyString) {
    print_share_name_ = new ::std::string;
  }
  print_share_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrinterShareInfo::mutable_print_share_name() {
  set_has_print_share_name();
  if (print_share_name_ == &::google::protobuf::internal::kEmptyString) {
    print_share_name_ = new ::std::string;
  }
  return print_share_name_;
}
inline ::std::string* PrinterShareInfo::release_print_share_name() {
  clear_has_print_share_name();
  if (print_share_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = print_share_name_;
    print_share_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string printer_ip = 5;
inline bool PrinterShareInfo::has_printer_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PrinterShareInfo::set_has_printer_ip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PrinterShareInfo::clear_has_printer_ip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PrinterShareInfo::clear_printer_ip() {
  if (printer_ip_ != &::google::protobuf::internal::kEmptyString) {
    printer_ip_->clear();
  }
  clear_has_printer_ip();
}
inline const ::std::string& PrinterShareInfo::printer_ip() const {
  return *printer_ip_;
}
inline void PrinterShareInfo::set_printer_ip(const ::std::string& value) {
  set_has_printer_ip();
  if (printer_ip_ == &::google::protobuf::internal::kEmptyString) {
    printer_ip_ = new ::std::string;
  }
  printer_ip_->assign(value);
}
inline void PrinterShareInfo::set_printer_ip(const char* value) {
  set_has_printer_ip();
  if (printer_ip_ == &::google::protobuf::internal::kEmptyString) {
    printer_ip_ = new ::std::string;
  }
  printer_ip_->assign(value);
}
inline void PrinterShareInfo::set_printer_ip(const char* value, size_t size) {
  set_has_printer_ip();
  if (printer_ip_ == &::google::protobuf::internal::kEmptyString) {
    printer_ip_ = new ::std::string;
  }
  printer_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrinterShareInfo::mutable_printer_ip() {
  set_has_printer_ip();
  if (printer_ip_ == &::google::protobuf::internal::kEmptyString) {
    printer_ip_ = new ::std::string;
  }
  return printer_ip_;
}
inline ::std::string* PrinterShareInfo::release_printer_ip() {
  clear_has_printer_ip();
  if (printer_ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = printer_ip_;
    printer_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string printer_dpi = 6;
inline bool PrinterShareInfo::has_printer_dpi() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PrinterShareInfo::set_has_printer_dpi() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PrinterShareInfo::clear_has_printer_dpi() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PrinterShareInfo::clear_printer_dpi() {
  if (printer_dpi_ != &::google::protobuf::internal::kEmptyString) {
    printer_dpi_->clear();
  }
  clear_has_printer_dpi();
}
inline const ::std::string& PrinterShareInfo::printer_dpi() const {
  return *printer_dpi_;
}
inline void PrinterShareInfo::set_printer_dpi(const ::std::string& value) {
  set_has_printer_dpi();
  if (printer_dpi_ == &::google::protobuf::internal::kEmptyString) {
    printer_dpi_ = new ::std::string;
  }
  printer_dpi_->assign(value);
}
inline void PrinterShareInfo::set_printer_dpi(const char* value) {
  set_has_printer_dpi();
  if (printer_dpi_ == &::google::protobuf::internal::kEmptyString) {
    printer_dpi_ = new ::std::string;
  }
  printer_dpi_->assign(value);
}
inline void PrinterShareInfo::set_printer_dpi(const char* value, size_t size) {
  set_has_printer_dpi();
  if (printer_dpi_ == &::google::protobuf::internal::kEmptyString) {
    printer_dpi_ = new ::std::string;
  }
  printer_dpi_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrinterShareInfo::mutable_printer_dpi() {
  set_has_printer_dpi();
  if (printer_dpi_ == &::google::protobuf::internal::kEmptyString) {
    printer_dpi_ = new ::std::string;
  }
  return printer_dpi_;
}
inline ::std::string* PrinterShareInfo::release_printer_dpi() {
  clear_has_printer_dpi();
  if (printer_dpi_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = printer_dpi_;
    printer_dpi_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string printer_speed = 7;
inline bool PrinterShareInfo::has_printer_speed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PrinterShareInfo::set_has_printer_speed() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PrinterShareInfo::clear_has_printer_speed() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PrinterShareInfo::clear_printer_speed() {
  if (printer_speed_ != &::google::protobuf::internal::kEmptyString) {
    printer_speed_->clear();
  }
  clear_has_printer_speed();
}
inline const ::std::string& PrinterShareInfo::printer_speed() const {
  return *printer_speed_;
}
inline void PrinterShareInfo::set_printer_speed(const ::std::string& value) {
  set_has_printer_speed();
  if (printer_speed_ == &::google::protobuf::internal::kEmptyString) {
    printer_speed_ = new ::std::string;
  }
  printer_speed_->assign(value);
}
inline void PrinterShareInfo::set_printer_speed(const char* value) {
  set_has_printer_speed();
  if (printer_speed_ == &::google::protobuf::internal::kEmptyString) {
    printer_speed_ = new ::std::string;
  }
  printer_speed_->assign(value);
}
inline void PrinterShareInfo::set_printer_speed(const char* value, size_t size) {
  set_has_printer_speed();
  if (printer_speed_ == &::google::protobuf::internal::kEmptyString) {
    printer_speed_ = new ::std::string;
  }
  printer_speed_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrinterShareInfo::mutable_printer_speed() {
  set_has_printer_speed();
  if (printer_speed_ == &::google::protobuf::internal::kEmptyString) {
    printer_speed_ = new ::std::string;
  }
  return printer_speed_;
}
inline ::std::string* PrinterShareInfo::release_printer_speed() {
  clear_has_printer_speed();
  if (printer_speed_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = printer_speed_;
    printer_speed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional double begin_time = 8;
inline bool PrinterShareInfo::has_begin_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PrinterShareInfo::set_has_begin_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PrinterShareInfo::clear_has_begin_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PrinterShareInfo::clear_begin_time() {
  begin_time_ = 0;
  clear_has_begin_time();
}
inline double PrinterShareInfo::begin_time() const {
  return begin_time_;
}
inline void PrinterShareInfo::set_begin_time(double value) {
  set_has_begin_time();
  begin_time_ = value;
}

// optional double end_time = 9;
inline bool PrinterShareInfo::has_end_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PrinterShareInfo::set_has_end_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PrinterShareInfo::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PrinterShareInfo::clear_end_time() {
  end_time_ = 0;
  clear_has_end_time();
}
inline double PrinterShareInfo::end_time() const {
  return end_time_;
}
inline void PrinterShareInfo::set_end_time(double value) {
  set_has_end_time();
  end_time_ = value;
}

// optional int32 support_duplex = 10;
inline bool PrinterShareInfo::has_support_duplex() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PrinterShareInfo::set_has_support_duplex() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PrinterShareInfo::clear_has_support_duplex() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PrinterShareInfo::clear_support_duplex() {
  support_duplex_ = 0;
  clear_has_support_duplex();
}
inline ::google::protobuf::int32 PrinterShareInfo::support_duplex() const {
  return support_duplex_;
}
inline void PrinterShareInfo::set_support_duplex(::google::protobuf::int32 value) {
  set_has_support_duplex();
  support_duplex_ = value;
}

// optional int32 support_color = 11;
inline bool PrinterShareInfo::has_support_color() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PrinterShareInfo::set_has_support_color() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PrinterShareInfo::clear_has_support_color() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PrinterShareInfo::clear_support_color() {
  support_color_ = 0;
  clear_has_support_color();
}
inline ::google::protobuf::int32 PrinterShareInfo::support_color() const {
  return support_color_;
}
inline void PrinterShareInfo::set_support_color(::google::protobuf::int32 value) {
  set_has_support_color();
  support_color_ = value;
}

// optional string pc_addr = 12;
inline bool PrinterShareInfo::has_pc_addr() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PrinterShareInfo::set_has_pc_addr() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PrinterShareInfo::clear_has_pc_addr() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PrinterShareInfo::clear_pc_addr() {
  if (pc_addr_ != &::google::protobuf::internal::kEmptyString) {
    pc_addr_->clear();
  }
  clear_has_pc_addr();
}
inline const ::std::string& PrinterShareInfo::pc_addr() const {
  return *pc_addr_;
}
inline void PrinterShareInfo::set_pc_addr(const ::std::string& value) {
  set_has_pc_addr();
  if (pc_addr_ == &::google::protobuf::internal::kEmptyString) {
    pc_addr_ = new ::std::string;
  }
  pc_addr_->assign(value);
}
inline void PrinterShareInfo::set_pc_addr(const char* value) {
  set_has_pc_addr();
  if (pc_addr_ == &::google::protobuf::internal::kEmptyString) {
    pc_addr_ = new ::std::string;
  }
  pc_addr_->assign(value);
}
inline void PrinterShareInfo::set_pc_addr(const char* value, size_t size) {
  set_has_pc_addr();
  if (pc_addr_ == &::google::protobuf::internal::kEmptyString) {
    pc_addr_ = new ::std::string;
  }
  pc_addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrinterShareInfo::mutable_pc_addr() {
  set_has_pc_addr();
  if (pc_addr_ == &::google::protobuf::internal::kEmptyString) {
    pc_addr_ = new ::std::string;
  }
  return pc_addr_;
}
inline ::std::string* PrinterShareInfo::release_pc_addr() {
  clear_has_pc_addr();
  if (pc_addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pc_addr_;
    pc_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string pc_host = 13;
inline bool PrinterShareInfo::has_pc_host() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PrinterShareInfo::set_has_pc_host() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PrinterShareInfo::clear_has_pc_host() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PrinterShareInfo::clear_pc_host() {
  if (pc_host_ != &::google::protobuf::internal::kEmptyString) {
    pc_host_->clear();
  }
  clear_has_pc_host();
}
inline const ::std::string& PrinterShareInfo::pc_host() const {
  return *pc_host_;
}
inline void PrinterShareInfo::set_pc_host(const ::std::string& value) {
  set_has_pc_host();
  if (pc_host_ == &::google::protobuf::internal::kEmptyString) {
    pc_host_ = new ::std::string;
  }
  pc_host_->assign(value);
}
inline void PrinterShareInfo::set_pc_host(const char* value) {
  set_has_pc_host();
  if (pc_host_ == &::google::protobuf::internal::kEmptyString) {
    pc_host_ = new ::std::string;
  }
  pc_host_->assign(value);
}
inline void PrinterShareInfo::set_pc_host(const char* value, size_t size) {
  set_has_pc_host();
  if (pc_host_ == &::google::protobuf::internal::kEmptyString) {
    pc_host_ = new ::std::string;
  }
  pc_host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrinterShareInfo::mutable_pc_host() {
  set_has_pc_host();
  if (pc_host_ == &::google::protobuf::internal::kEmptyString) {
    pc_host_ = new ::std::string;
  }
  return pc_host_;
}
inline ::std::string* PrinterShareInfo::release_pc_host() {
  clear_has_pc_host();
  if (pc_host_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pc_host_;
    pc_host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string pc_mac_addr = 14;
inline bool PrinterShareInfo::has_pc_mac_addr() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PrinterShareInfo::set_has_pc_mac_addr() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PrinterShareInfo::clear_has_pc_mac_addr() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PrinterShareInfo::clear_pc_mac_addr() {
  if (pc_mac_addr_ != &::google::protobuf::internal::kEmptyString) {
    pc_mac_addr_->clear();
  }
  clear_has_pc_mac_addr();
}
inline const ::std::string& PrinterShareInfo::pc_mac_addr() const {
  return *pc_mac_addr_;
}
inline void PrinterShareInfo::set_pc_mac_addr(const ::std::string& value) {
  set_has_pc_mac_addr();
  if (pc_mac_addr_ == &::google::protobuf::internal::kEmptyString) {
    pc_mac_addr_ = new ::std::string;
  }
  pc_mac_addr_->assign(value);
}
inline void PrinterShareInfo::set_pc_mac_addr(const char* value) {
  set_has_pc_mac_addr();
  if (pc_mac_addr_ == &::google::protobuf::internal::kEmptyString) {
    pc_mac_addr_ = new ::std::string;
  }
  pc_mac_addr_->assign(value);
}
inline void PrinterShareInfo::set_pc_mac_addr(const char* value, size_t size) {
  set_has_pc_mac_addr();
  if (pc_mac_addr_ == &::google::protobuf::internal::kEmptyString) {
    pc_mac_addr_ = new ::std::string;
  }
  pc_mac_addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrinterShareInfo::mutable_pc_mac_addr() {
  set_has_pc_mac_addr();
  if (pc_mac_addr_ == &::google::protobuf::internal::kEmptyString) {
    pc_mac_addr_ = new ::std::string;
  }
  return pc_mac_addr_;
}
inline ::std::string* PrinterShareInfo::release_pc_mac_addr() {
  clear_has_pc_mac_addr();
  if (pc_mac_addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pc_mac_addr_;
    pc_mac_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string pc_disknum = 15;
inline bool PrinterShareInfo::has_pc_disknum() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PrinterShareInfo::set_has_pc_disknum() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PrinterShareInfo::clear_has_pc_disknum() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PrinterShareInfo::clear_pc_disknum() {
  if (pc_disknum_ != &::google::protobuf::internal::kEmptyString) {
    pc_disknum_->clear();
  }
  clear_has_pc_disknum();
}
inline const ::std::string& PrinterShareInfo::pc_disknum() const {
  return *pc_disknum_;
}
inline void PrinterShareInfo::set_pc_disknum(const ::std::string& value) {
  set_has_pc_disknum();
  if (pc_disknum_ == &::google::protobuf::internal::kEmptyString) {
    pc_disknum_ = new ::std::string;
  }
  pc_disknum_->assign(value);
}
inline void PrinterShareInfo::set_pc_disknum(const char* value) {
  set_has_pc_disknum();
  if (pc_disknum_ == &::google::protobuf::internal::kEmptyString) {
    pc_disknum_ = new ::std::string;
  }
  pc_disknum_->assign(value);
}
inline void PrinterShareInfo::set_pc_disknum(const char* value, size_t size) {
  set_has_pc_disknum();
  if (pc_disknum_ == &::google::protobuf::internal::kEmptyString) {
    pc_disknum_ = new ::std::string;
  }
  pc_disknum_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrinterShareInfo::mutable_pc_disknum() {
  set_has_pc_disknum();
  if (pc_disknum_ == &::google::protobuf::internal::kEmptyString) {
    pc_disknum_ = new ::std::string;
  }
  return pc_disknum_;
}
inline ::std::string* PrinterShareInfo::release_pc_disknum() {
  clear_has_pc_disknum();
  if (pc_disknum_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pc_disknum_;
    pc_disknum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string print_state = 16;
inline bool PrinterShareInfo::has_print_state() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PrinterShareInfo::set_has_print_state() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PrinterShareInfo::clear_has_print_state() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PrinterShareInfo::clear_print_state() {
  if (print_state_ != &::google::protobuf::internal::kEmptyString) {
    print_state_->clear();
  }
  clear_has_print_state();
}
inline const ::std::string& PrinterShareInfo::print_state() const {
  return *print_state_;
}
inline void PrinterShareInfo::set_print_state(const ::std::string& value) {
  set_has_print_state();
  if (print_state_ == &::google::protobuf::internal::kEmptyString) {
    print_state_ = new ::std::string;
  }
  print_state_->assign(value);
}
inline void PrinterShareInfo::set_print_state(const char* value) {
  set_has_print_state();
  if (print_state_ == &::google::protobuf::internal::kEmptyString) {
    print_state_ = new ::std::string;
  }
  print_state_->assign(value);
}
inline void PrinterShareInfo::set_print_state(const char* value, size_t size) {
  set_has_print_state();
  if (print_state_ == &::google::protobuf::internal::kEmptyString) {
    print_state_ = new ::std::string;
  }
  print_state_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrinterShareInfo::mutable_print_state() {
  set_has_print_state();
  if (print_state_ == &::google::protobuf::internal::kEmptyString) {
    print_state_ = new ::std::string;
  }
  return print_state_;
}
inline ::std::string* PrinterShareInfo::release_print_state() {
  clear_has_print_state();
  if (print_state_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = print_state_;
    print_state_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string tel = 17;
inline bool PrinterShareInfo::has_tel() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PrinterShareInfo::set_has_tel() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PrinterShareInfo::clear_has_tel() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PrinterShareInfo::clear_tel() {
  if (tel_ != &::google::protobuf::internal::kEmptyString) {
    tel_->clear();
  }
  clear_has_tel();
}
inline const ::std::string& PrinterShareInfo::tel() const {
  return *tel_;
}
inline void PrinterShareInfo::set_tel(const ::std::string& value) {
  set_has_tel();
  if (tel_ == &::google::protobuf::internal::kEmptyString) {
    tel_ = new ::std::string;
  }
  tel_->assign(value);
}
inline void PrinterShareInfo::set_tel(const char* value) {
  set_has_tel();
  if (tel_ == &::google::protobuf::internal::kEmptyString) {
    tel_ = new ::std::string;
  }
  tel_->assign(value);
}
inline void PrinterShareInfo::set_tel(const char* value, size_t size) {
  set_has_tel();
  if (tel_ == &::google::protobuf::internal::kEmptyString) {
    tel_ = new ::std::string;
  }
  tel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrinterShareInfo::mutable_tel() {
  set_has_tel();
  if (tel_ == &::google::protobuf::internal::kEmptyString) {
    tel_ = new ::std::string;
  }
  return tel_;
}
inline ::std::string* PrinterShareInfo::release_tel() {
  clear_has_tel();
  if (tel_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tel_;
    tel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string email = 18;
inline bool PrinterShareInfo::has_email() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PrinterShareInfo::set_has_email() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PrinterShareInfo::clear_has_email() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PrinterShareInfo::clear_email() {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& PrinterShareInfo::email() const {
  return *email_;
}
inline void PrinterShareInfo::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void PrinterShareInfo::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void PrinterShareInfo::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrinterShareInfo::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  return email_;
}
inline ::std::string* PrinterShareInfo::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string comment = 19;
inline bool PrinterShareInfo::has_comment() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PrinterShareInfo::set_has_comment() {
  _has_bits_[0] |= 0x00040000u;
}
inline void PrinterShareInfo::clear_has_comment() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void PrinterShareInfo::clear_comment() {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& PrinterShareInfo::comment() const {
  return *comment_;
}
inline void PrinterShareInfo::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void PrinterShareInfo::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void PrinterShareInfo::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrinterShareInfo::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  return comment_;
}
inline ::std::string* PrinterShareInfo::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace isafetec

// @@protoc_insertion_point(global_scope)
