// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "thirdpaymessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace isafetec {

namespace {

const ::google::protobuf::Descriptor* LoginQrcodeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginQrcodeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginQrcodeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginQrcodeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipUserOnlineInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipUserOnlineInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ThirdPartLoginEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThirdPartLoginEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommonResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommonResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtStationOrderInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtStationOrderInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrtStationOrderHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrtStationOrderHeader_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_thirdpaymessage_2eproto() {
  protobuf_AddDesc_thirdpaymessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "thirdpaymessage.proto");
  GOOGLE_CHECK(file != NULL);
  LoginQrcodeRequest_descriptor_ = file->message_type(0);
  static const int LoginQrcodeRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginQrcodeRequest, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginQrcodeRequest, qrtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginQrcodeRequest, time_stamp_),
  };
  LoginQrcodeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginQrcodeRequest_descriptor_,
      LoginQrcodeRequest::default_instance_,
      LoginQrcodeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginQrcodeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginQrcodeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginQrcodeRequest));
  LoginQrcodeResponse_descriptor_ = file->message_type(1);
  static const int LoginQrcodeResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginQrcodeResponse, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginQrcodeResponse, qrtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginQrcodeResponse, time_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginQrcodeResponse, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginQrcodeResponse, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginQrcodeResponse, qrstring_),
  };
  LoginQrcodeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginQrcodeResponse_descriptor_,
      LoginQrcodeResponse::default_instance_,
      LoginQrcodeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginQrcodeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginQrcodeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginQrcodeResponse));
  EquipUserOnlineInfo_descriptor_ = file->message_type(2);
  static const int EquipUserOnlineInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUserOnlineInfo, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUserOnlineInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUserOnlineInfo, login_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUserOnlineInfo, update_time_),
  };
  EquipUserOnlineInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipUserOnlineInfo_descriptor_,
      EquipUserOnlineInfo::default_instance_,
      EquipUserOnlineInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUserOnlineInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipUserOnlineInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipUserOnlineInfo));
  ThirdPartLoginEquip_descriptor_ = file->message_type(3);
  static const int ThirdPartLoginEquip_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThirdPartLoginEquip, equipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThirdPartLoginEquip, accountno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThirdPartLoginEquip, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThirdPartLoginEquip, login_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThirdPartLoginEquip, session_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThirdPartLoginEquip, result_),
  };
  ThirdPartLoginEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ThirdPartLoginEquip_descriptor_,
      ThirdPartLoginEquip::default_instance_,
      ThirdPartLoginEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThirdPartLoginEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThirdPartLoginEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ThirdPartLoginEquip));
  CommonResult_descriptor_ = file->message_type(4);
  static const int CommonResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonResult, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonResult, errmsg_),
  };
  CommonResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommonResult_descriptor_,
      CommonResult::default_instance_,
      CommonResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommonResult));
  PrtStationOrderInfo_descriptor_ = file->message_type(5);
  static const int PrtStationOrderInfo_offsets_[29] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationOrderInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationOrderInfo, orderno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationOrderInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationOrderInfo, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationOrderInfo, accountname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationOrderInfo, realname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationOrderInfo, prtid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationOrderInfo, spendmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationOrderInfo, paytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationOrderInfo, payaccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationOrderInfo, paycompany_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationOrderInfo, paymoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationOrderInfo, payredpacket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationOrderInfo, paypreferential_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationOrderInfo, jobtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationOrderInfo, jobidlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationOrderInfo, totalpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationOrderInfo, realpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationOrderInfo, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationOrderInfo, copies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationOrderInfo, createon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationOrderInfo, paytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationOrderInfo, paystate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationOrderInfo, jobopstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationOrderInfo, jobcompletetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationOrderInfo, jobcompletenotifytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationOrderInfo, paymenturl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationOrderInfo, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationOrderInfo, orgid_),
  };
  PrtStationOrderInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtStationOrderInfo_descriptor_,
      PrtStationOrderInfo::default_instance_,
      PrtStationOrderInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationOrderInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationOrderInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtStationOrderInfo));
  PrtStationOrderHeader_descriptor_ = file->message_type(6);
  static const int PrtStationOrderHeader_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationOrderHeader, serflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationOrderHeader, equipid_),
  };
  PrtStationOrderHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrtStationOrderHeader_descriptor_,
      PrtStationOrderHeader::default_instance_,
      PrtStationOrderHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationOrderHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrtStationOrderHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrtStationOrderHeader));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_thirdpaymessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginQrcodeRequest_descriptor_, &LoginQrcodeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginQrcodeResponse_descriptor_, &LoginQrcodeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipUserOnlineInfo_descriptor_, &EquipUserOnlineInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ThirdPartLoginEquip_descriptor_, &ThirdPartLoginEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommonResult_descriptor_, &CommonResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtStationOrderInfo_descriptor_, &PrtStationOrderInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrtStationOrderHeader_descriptor_, &PrtStationOrderHeader::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_thirdpaymessage_2eproto() {
  delete LoginQrcodeRequest::default_instance_;
  delete LoginQrcodeRequest_reflection_;
  delete LoginQrcodeResponse::default_instance_;
  delete LoginQrcodeResponse_reflection_;
  delete EquipUserOnlineInfo::default_instance_;
  delete EquipUserOnlineInfo_reflection_;
  delete ThirdPartLoginEquip::default_instance_;
  delete ThirdPartLoginEquip_reflection_;
  delete CommonResult::default_instance_;
  delete CommonResult_reflection_;
  delete PrtStationOrderInfo::default_instance_;
  delete PrtStationOrderInfo_reflection_;
  delete PrtStationOrderHeader::default_instance_;
  delete PrtStationOrderHeader_reflection_;
}

void protobuf_AddDesc_thirdpaymessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::isafetec::protobuf_AddDesc_mobile_2eproto();
  ::isafetec::protobuf_AddDesc_printermessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025thirdpaymessage.proto\022\010isafetec\032\014mobil"
    "e.proto\032\024printermessage.proto\"I\n\022LoginQr"
    "codeRequest\022\017\n\007equipid\030\001 \002(\005\022\016\n\006qrtype\030\002"
    " \001(\005\022\022\n\ntime_stamp\030\003 \001(\r\"}\n\023LoginQrcodeR"
    "esponse\022\017\n\007equipid\030\001 \002(\005\022\016\n\006qrtype\030\002 \001(\005"
    "\022\022\n\ntime_stamp\030\003 \001(\r\022\017\n\007errcode\030\004 \001(\005\022\016\n"
    "\006errmsg\030\005 \001(\t\022\020\n\010qrstring\030\006 \001(\t\"_\n\023Equip"
    "UserOnlineInfo\022\017\n\007equipid\030\001 \002(\005\022\016\n\006useri"
    "d\030\002 \002(\005\022\022\n\nlogin_type\030\003 \001(\005\022\023\n\013update_ti"
    "me\030\004 \001(\t\"\231\001\n\023ThirdPartLoginEquip\022\017\n\007equi"
    "pid\030\001 \002(\005\022\021\n\taccountno\030\002 \002(\t\022\016\n\006userid\030\003"
    " \001(\005\022\022\n\nlogin_type\030\004 \001(\005\022\022\n\nsession_id\030\005"
    " \001(\t\022&\n\006result\030\006 \001(\0132\026.isafetec.CommonRe"
    "sult\"/\n\014CommonResult\022\017\n\007errcode\030\001 \001(\005\022\016\n"
    "\006errmsg\030\002 \001(\t\"\213\005\n\023PrtStationOrderInfo\022\n\n"
    "\002id\030\001 \001(\005\022\017\n\007OrderNo\030\002 \001(\t\022\016\n\006UserId\030\003 \002"
    "(\005\022\021\n\tAccountId\030\004 \002(\005\022\023\n\013AccountName\030\005 \001"
    "(\t\022\020\n\010RealName\030\006 \001(\t\022\r\n\005PrtId\030\007 \002(\005\022\022\n\nS"
    "pendMoney\030\010 \002(\005\022#\n\007PayType\030\t \001(\0162\022.isafe"
    "tec.Pay_Type\022\022\n\nPayAccount\030\n \001(\t\022\022\n\nPayC"
    "ompany\030\013 \001(\t\022\020\n\010PayMoney\030\014 \001(\005\022\024\n\014PayRed"
    "Packet\030\r \001(\005\022\027\n\017PayPreferential\030\016 \001(\005\022#\n"
    "\007JobType\030\017 \001(\0162\022.isafetec.JOB_TYPE\022\021\n\tJo"
    "bIdList\030\020 \003(\005\022\021\n\tTotalPage\030\021 \001(\005\022\020\n\010Real"
    "Page\030\022 \001(\005\022\r\n\005Color\030\023 \001(\005\022\016\n\006Copies\030\024 \001("
    "\005\022\020\n\010CreateOn\030\025 \001(\001\022\017\n\007PayTime\030\026 \001(\001\022%\n\010"
    "PayState\030\027 \001(\0162\023.isafetec.Pay_State\022*\n\nJ"
    "obOpState\030\030 \001(\0162\026.isafetec.Job_Op_State\022"
    "\027\n\017JobCompleteTime\030\031 \001(\001\022\035\n\025JobCompleteN"
    "otifyTime\030\032 \001(\001\022\022\n\nPaymentUrl\030\033 \001(\t\022\017\n\007c"
    "omment\030\034 \001(\t\022\r\n\005OrgID\030\035 \001(\005\"9\n\025PrtStatio"
    "nOrderHeader\022\017\n\007SerFlag\030\001 \001(\005\022\017\n\007Equipid"
    "\030\002 \001(\005", 1286);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "thirdpaymessage.proto", &protobuf_RegisterTypes);
  LoginQrcodeRequest::default_instance_ = new LoginQrcodeRequest();
  LoginQrcodeResponse::default_instance_ = new LoginQrcodeResponse();
  EquipUserOnlineInfo::default_instance_ = new EquipUserOnlineInfo();
  ThirdPartLoginEquip::default_instance_ = new ThirdPartLoginEquip();
  CommonResult::default_instance_ = new CommonResult();
  PrtStationOrderInfo::default_instance_ = new PrtStationOrderInfo();
  PrtStationOrderHeader::default_instance_ = new PrtStationOrderHeader();
  LoginQrcodeRequest::default_instance_->InitAsDefaultInstance();
  LoginQrcodeResponse::default_instance_->InitAsDefaultInstance();
  EquipUserOnlineInfo::default_instance_->InitAsDefaultInstance();
  ThirdPartLoginEquip::default_instance_->InitAsDefaultInstance();
  CommonResult::default_instance_->InitAsDefaultInstance();
  PrtStationOrderInfo::default_instance_->InitAsDefaultInstance();
  PrtStationOrderHeader::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_thirdpaymessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_thirdpaymessage_2eproto {
  StaticDescriptorInitializer_thirdpaymessage_2eproto() {
    protobuf_AddDesc_thirdpaymessage_2eproto();
  }
} static_descriptor_initializer_thirdpaymessage_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int LoginQrcodeRequest::kEquipidFieldNumber;
const int LoginQrcodeRequest::kQrtypeFieldNumber;
const int LoginQrcodeRequest::kTimeStampFieldNumber;
#endif  // !_MSC_VER

LoginQrcodeRequest::LoginQrcodeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginQrcodeRequest::InitAsDefaultInstance() {
}

LoginQrcodeRequest::LoginQrcodeRequest(const LoginQrcodeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginQrcodeRequest::SharedCtor() {
  _cached_size_ = 0;
  equipid_ = 0;
  qrtype_ = 0;
  time_stamp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginQrcodeRequest::~LoginQrcodeRequest() {
  SharedDtor();
}

void LoginQrcodeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginQrcodeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginQrcodeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginQrcodeRequest_descriptor_;
}

const LoginQrcodeRequest& LoginQrcodeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_thirdpaymessage_2eproto();  return *default_instance_;
}

LoginQrcodeRequest* LoginQrcodeRequest::default_instance_ = NULL;

LoginQrcodeRequest* LoginQrcodeRequest::New() const {
  return new LoginQrcodeRequest;
}

void LoginQrcodeRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equipid_ = 0;
    qrtype_ = 0;
    time_stamp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginQrcodeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 equipid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equipid_)));
          set_has_equipid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_qrtype;
        break;
      }
      
      // optional int32 qrtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qrtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qrtype_)));
          set_has_qrtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time_stamp;
        break;
      }
      
      // optional uint32 time_stamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginQrcodeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 equipid = 1;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->equipid(), output);
  }
  
  // optional int32 qrtype = 2;
  if (has_qrtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->qrtype(), output);
  }
  
  // optional uint32 time_stamp = 3;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_stamp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginQrcodeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 equipid = 1;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->equipid(), target);
  }
  
  // optional int32 qrtype = 2;
  if (has_qrtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->qrtype(), target);
  }
  
  // optional uint32 time_stamp = 3;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_stamp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginQrcodeRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 equipid = 1;
    if (has_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equipid());
    }
    
    // optional int32 qrtype = 2;
    if (has_qrtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qrtype());
    }
    
    // optional uint32 time_stamp = 3;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_stamp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginQrcodeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginQrcodeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginQrcodeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginQrcodeRequest::MergeFrom(const LoginQrcodeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equipid()) {
      set_equipid(from.equipid());
    }
    if (from.has_qrtype()) {
      set_qrtype(from.qrtype());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginQrcodeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginQrcodeRequest::CopyFrom(const LoginQrcodeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginQrcodeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void LoginQrcodeRequest::Swap(LoginQrcodeRequest* other) {
  if (other != this) {
    std::swap(equipid_, other->equipid_);
    std::swap(qrtype_, other->qrtype_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginQrcodeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginQrcodeRequest_descriptor_;
  metadata.reflection = LoginQrcodeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginQrcodeResponse::kEquipidFieldNumber;
const int LoginQrcodeResponse::kQrtypeFieldNumber;
const int LoginQrcodeResponse::kTimeStampFieldNumber;
const int LoginQrcodeResponse::kErrcodeFieldNumber;
const int LoginQrcodeResponse::kErrmsgFieldNumber;
const int LoginQrcodeResponse::kQrstringFieldNumber;
#endif  // !_MSC_VER

LoginQrcodeResponse::LoginQrcodeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginQrcodeResponse::InitAsDefaultInstance() {
}

LoginQrcodeResponse::LoginQrcodeResponse(const LoginQrcodeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginQrcodeResponse::SharedCtor() {
  _cached_size_ = 0;
  equipid_ = 0;
  qrtype_ = 0;
  time_stamp_ = 0u;
  errcode_ = 0;
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  qrstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginQrcodeResponse::~LoginQrcodeResponse() {
  SharedDtor();
}

void LoginQrcodeResponse::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::kEmptyString) {
    delete errmsg_;
  }
  if (qrstring_ != &::google::protobuf::internal::kEmptyString) {
    delete qrstring_;
  }
  if (this != default_instance_) {
  }
}

void LoginQrcodeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginQrcodeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginQrcodeResponse_descriptor_;
}

const LoginQrcodeResponse& LoginQrcodeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_thirdpaymessage_2eproto();  return *default_instance_;
}

LoginQrcodeResponse* LoginQrcodeResponse::default_instance_ = NULL;

LoginQrcodeResponse* LoginQrcodeResponse::New() const {
  return new LoginQrcodeResponse;
}

void LoginQrcodeResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equipid_ = 0;
    qrtype_ = 0;
    time_stamp_ = 0u;
    errcode_ = 0;
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::kEmptyString) {
        errmsg_->clear();
      }
    }
    if (has_qrstring()) {
      if (qrstring_ != &::google::protobuf::internal::kEmptyString) {
        qrstring_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginQrcodeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 equipid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equipid_)));
          set_has_equipid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_qrtype;
        break;
      }
      
      // optional int32 qrtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qrtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qrtype_)));
          set_has_qrtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time_stamp;
        break;
      }
      
      // optional uint32 time_stamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_stamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_stamp_)));
          set_has_time_stamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_errcode;
        break;
      }
      
      // optional int32 errcode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_errmsg;
        break;
      }
      
      // optional string errmsg = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_qrstring;
        break;
      }
      
      // optional string qrstring = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qrstring:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qrstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->qrstring().data(), this->qrstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginQrcodeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 equipid = 1;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->equipid(), output);
  }
  
  // optional int32 qrtype = 2;
  if (has_qrtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->qrtype(), output);
  }
  
  // optional uint32 time_stamp = 3;
  if (has_time_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_stamp(), output);
  }
  
  // optional int32 errcode = 4;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->errcode(), output);
  }
  
  // optional string errmsg = 5;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->errmsg(), output);
  }
  
  // optional string qrstring = 6;
  if (has_qrstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qrstring().data(), this->qrstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->qrstring(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginQrcodeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 equipid = 1;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->equipid(), target);
  }
  
  // optional int32 qrtype = 2;
  if (has_qrtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->qrtype(), target);
  }
  
  // optional uint32 time_stamp = 3;
  if (has_time_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_stamp(), target);
  }
  
  // optional int32 errcode = 4;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->errcode(), target);
  }
  
  // optional string errmsg = 5;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->errmsg(), target);
  }
  
  // optional string qrstring = 6;
  if (has_qrstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->qrstring().data(), this->qrstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->qrstring(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginQrcodeResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 equipid = 1;
    if (has_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equipid());
    }
    
    // optional int32 qrtype = 2;
    if (has_qrtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qrtype());
    }
    
    // optional uint32 time_stamp = 3;
    if (has_time_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_stamp());
    }
    
    // optional int32 errcode = 4;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errcode());
    }
    
    // optional string errmsg = 5;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }
    
    // optional string qrstring = 6;
    if (has_qrstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qrstring());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginQrcodeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginQrcodeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginQrcodeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginQrcodeResponse::MergeFrom(const LoginQrcodeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equipid()) {
      set_equipid(from.equipid());
    }
    if (from.has_qrtype()) {
      set_qrtype(from.qrtype());
    }
    if (from.has_time_stamp()) {
      set_time_stamp(from.time_stamp());
    }
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
    if (from.has_qrstring()) {
      set_qrstring(from.qrstring());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginQrcodeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginQrcodeResponse::CopyFrom(const LoginQrcodeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginQrcodeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void LoginQrcodeResponse::Swap(LoginQrcodeResponse* other) {
  if (other != this) {
    std::swap(equipid_, other->equipid_);
    std::swap(qrtype_, other->qrtype_);
    std::swap(time_stamp_, other->time_stamp_);
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(qrstring_, other->qrstring_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginQrcodeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginQrcodeResponse_descriptor_;
  metadata.reflection = LoginQrcodeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipUserOnlineInfo::kEquipidFieldNumber;
const int EquipUserOnlineInfo::kUseridFieldNumber;
const int EquipUserOnlineInfo::kLoginTypeFieldNumber;
const int EquipUserOnlineInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

EquipUserOnlineInfo::EquipUserOnlineInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipUserOnlineInfo::InitAsDefaultInstance() {
}

EquipUserOnlineInfo::EquipUserOnlineInfo(const EquipUserOnlineInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipUserOnlineInfo::SharedCtor() {
  _cached_size_ = 0;
  equipid_ = 0;
  userid_ = 0;
  login_type_ = 0;
  update_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipUserOnlineInfo::~EquipUserOnlineInfo() {
  SharedDtor();
}

void EquipUserOnlineInfo::SharedDtor() {
  if (update_time_ != &::google::protobuf::internal::kEmptyString) {
    delete update_time_;
  }
  if (this != default_instance_) {
  }
}

void EquipUserOnlineInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipUserOnlineInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipUserOnlineInfo_descriptor_;
}

const EquipUserOnlineInfo& EquipUserOnlineInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_thirdpaymessage_2eproto();  return *default_instance_;
}

EquipUserOnlineInfo* EquipUserOnlineInfo::default_instance_ = NULL;

EquipUserOnlineInfo* EquipUserOnlineInfo::New() const {
  return new EquipUserOnlineInfo;
}

void EquipUserOnlineInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equipid_ = 0;
    userid_ = 0;
    login_type_ = 0;
    if (has_update_time()) {
      if (update_time_ != &::google::protobuf::internal::kEmptyString) {
        update_time_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipUserOnlineInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 equipid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equipid_)));
          set_has_equipid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }
      
      // required int32 userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_login_type;
        break;
      }
      
      // optional int32 login_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &login_type_)));
          set_has_login_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_update_time;
        break;
      }
      
      // optional string update_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_update_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->update_time().data(), this->update_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipUserOnlineInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 equipid = 1;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->equipid(), output);
  }
  
  // required int32 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }
  
  // optional int32 login_type = 3;
  if (has_login_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->login_type(), output);
  }
  
  // optional string update_time = 4;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->update_time().data(), this->update_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->update_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipUserOnlineInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 equipid = 1;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->equipid(), target);
  }
  
  // required int32 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }
  
  // optional int32 login_type = 3;
  if (has_login_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->login_type(), target);
  }
  
  // optional string update_time = 4;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->update_time().data(), this->update_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->update_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipUserOnlineInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 equipid = 1;
    if (has_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equipid());
    }
    
    // required int32 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }
    
    // optional int32 login_type = 3;
    if (has_login_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->login_type());
    }
    
    // optional string update_time = 4;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->update_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipUserOnlineInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipUserOnlineInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipUserOnlineInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipUserOnlineInfo::MergeFrom(const EquipUserOnlineInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equipid()) {
      set_equipid(from.equipid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_login_type()) {
      set_login_type(from.login_type());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipUserOnlineInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipUserOnlineInfo::CopyFrom(const EquipUserOnlineInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipUserOnlineInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void EquipUserOnlineInfo::Swap(EquipUserOnlineInfo* other) {
  if (other != this) {
    std::swap(equipid_, other->equipid_);
    std::swap(userid_, other->userid_);
    std::swap(login_type_, other->login_type_);
    std::swap(update_time_, other->update_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipUserOnlineInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipUserOnlineInfo_descriptor_;
  metadata.reflection = EquipUserOnlineInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ThirdPartLoginEquip::kEquipidFieldNumber;
const int ThirdPartLoginEquip::kAccountnoFieldNumber;
const int ThirdPartLoginEquip::kUseridFieldNumber;
const int ThirdPartLoginEquip::kLoginTypeFieldNumber;
const int ThirdPartLoginEquip::kSessionIdFieldNumber;
const int ThirdPartLoginEquip::kResultFieldNumber;
#endif  // !_MSC_VER

ThirdPartLoginEquip::ThirdPartLoginEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ThirdPartLoginEquip::InitAsDefaultInstance() {
  result_ = const_cast< ::isafetec::CommonResult*>(&::isafetec::CommonResult::default_instance());
}

ThirdPartLoginEquip::ThirdPartLoginEquip(const ThirdPartLoginEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ThirdPartLoginEquip::SharedCtor() {
  _cached_size_ = 0;
  equipid_ = 0;
  accountno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = 0;
  login_type_ = 0;
  session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThirdPartLoginEquip::~ThirdPartLoginEquip() {
  SharedDtor();
}

void ThirdPartLoginEquip::SharedDtor() {
  if (accountno_ != &::google::protobuf::internal::kEmptyString) {
    delete accountno_;
  }
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    delete session_id_;
  }
  if (this != default_instance_) {
    delete result_;
  }
}

void ThirdPartLoginEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThirdPartLoginEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThirdPartLoginEquip_descriptor_;
}

const ThirdPartLoginEquip& ThirdPartLoginEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_thirdpaymessage_2eproto();  return *default_instance_;
}

ThirdPartLoginEquip* ThirdPartLoginEquip::default_instance_ = NULL;

ThirdPartLoginEquip* ThirdPartLoginEquip::New() const {
  return new ThirdPartLoginEquip;
}

void ThirdPartLoginEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equipid_ = 0;
    if (has_accountno()) {
      if (accountno_ != &::google::protobuf::internal::kEmptyString) {
        accountno_->clear();
      }
    }
    userid_ = 0;
    login_type_ = 0;
    if (has_session_id()) {
      if (session_id_ != &::google::protobuf::internal::kEmptyString) {
        session_id_->clear();
      }
    }
    if (has_result()) {
      if (result_ != NULL) result_->::isafetec::CommonResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThirdPartLoginEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 equipid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equipid_)));
          set_has_equipid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_accountno;
        break;
      }
      
      // required string accountno = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accountno:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountno().data(), this->accountno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_userid;
        break;
      }
      
      // optional int32 userid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_login_type;
        break;
      }
      
      // optional int32 login_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &login_type_)));
          set_has_login_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_session_id;
        break;
      }
      
      // optional string session_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_id().data(), this->session_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_result;
        break;
      }
      
      // optional .isafetec.CommonResult result = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ThirdPartLoginEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 equipid = 1;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->equipid(), output);
  }
  
  // required string accountno = 2;
  if (has_accountno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountno().data(), this->accountno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->accountno(), output);
  }
  
  // optional int32 userid = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->userid(), output);
  }
  
  // optional int32 login_type = 4;
  if (has_login_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->login_type(), output);
  }
  
  // optional string session_id = 5;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->session_id(), output);
  }
  
  // optional .isafetec.CommonResult result = 6;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ThirdPartLoginEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 equipid = 1;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->equipid(), target);
  }
  
  // required string accountno = 2;
  if (has_accountno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountno().data(), this->accountno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->accountno(), target);
  }
  
  // optional int32 userid = 3;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->userid(), target);
  }
  
  // optional int32 login_type = 4;
  if (has_login_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->login_type(), target);
  }
  
  // optional string session_id = 5;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_id().data(), this->session_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->session_id(), target);
  }
  
  // optional .isafetec.CommonResult result = 6;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ThirdPartLoginEquip::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 equipid = 1;
    if (has_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equipid());
    }
    
    // required string accountno = 2;
    if (has_accountno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountno());
    }
    
    // optional int32 userid = 3;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }
    
    // optional int32 login_type = 4;
    if (has_login_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->login_type());
    }
    
    // optional string session_id = 5;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_id());
    }
    
    // optional .isafetec.CommonResult result = 6;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThirdPartLoginEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ThirdPartLoginEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ThirdPartLoginEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ThirdPartLoginEquip::MergeFrom(const ThirdPartLoginEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equipid()) {
      set_equipid(from.equipid());
    }
    if (from.has_accountno()) {
      set_accountno(from.accountno());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_login_type()) {
      set_login_type(from.login_type());
    }
    if (from.has_session_id()) {
      set_session_id(from.session_id());
    }
    if (from.has_result()) {
      mutable_result()->::isafetec::CommonResult::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThirdPartLoginEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThirdPartLoginEquip::CopyFrom(const ThirdPartLoginEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThirdPartLoginEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ThirdPartLoginEquip::Swap(ThirdPartLoginEquip* other) {
  if (other != this) {
    std::swap(equipid_, other->equipid_);
    std::swap(accountno_, other->accountno_);
    std::swap(userid_, other->userid_);
    std::swap(login_type_, other->login_type_);
    std::swap(session_id_, other->session_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ThirdPartLoginEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThirdPartLoginEquip_descriptor_;
  metadata.reflection = ThirdPartLoginEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommonResult::kErrcodeFieldNumber;
const int CommonResult::kErrmsgFieldNumber;
#endif  // !_MSC_VER

CommonResult::CommonResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommonResult::InitAsDefaultInstance() {
}

CommonResult::CommonResult(const CommonResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommonResult::SharedCtor() {
  _cached_size_ = 0;
  errcode_ = 0;
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommonResult::~CommonResult() {
  SharedDtor();
}

void CommonResult::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::kEmptyString) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void CommonResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonResult_descriptor_;
}

const CommonResult& CommonResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_thirdpaymessage_2eproto();  return *default_instance_;
}

CommonResult* CommonResult::default_instance_ = NULL;

CommonResult* CommonResult::New() const {
  return new CommonResult;
}

void CommonResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errcode_ = 0;
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::kEmptyString) {
        errmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommonResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 errcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }
      
      // optional string errmsg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommonResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 errcode = 1;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errcode(), output);
  }
  
  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->errmsg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommonResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 errcode = 1;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errcode(), target);
  }
  
  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommonResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 errcode = 1;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errcode());
    }
    
    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommonResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommonResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommonResult::MergeFrom(const CommonResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommonResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonResult::CopyFrom(const CommonResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonResult::IsInitialized() const {
  
  return true;
}

void CommonResult::Swap(CommonResult* other) {
  if (other != this) {
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommonResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommonResult_descriptor_;
  metadata.reflection = CommonResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtStationOrderInfo::kIdFieldNumber;
const int PrtStationOrderInfo::kOrderNoFieldNumber;
const int PrtStationOrderInfo::kUserIdFieldNumber;
const int PrtStationOrderInfo::kAccountIdFieldNumber;
const int PrtStationOrderInfo::kAccountNameFieldNumber;
const int PrtStationOrderInfo::kRealNameFieldNumber;
const int PrtStationOrderInfo::kPrtIdFieldNumber;
const int PrtStationOrderInfo::kSpendMoneyFieldNumber;
const int PrtStationOrderInfo::kPayTypeFieldNumber;
const int PrtStationOrderInfo::kPayAccountFieldNumber;
const int PrtStationOrderInfo::kPayCompanyFieldNumber;
const int PrtStationOrderInfo::kPayMoneyFieldNumber;
const int PrtStationOrderInfo::kPayRedPacketFieldNumber;
const int PrtStationOrderInfo::kPayPreferentialFieldNumber;
const int PrtStationOrderInfo::kJobTypeFieldNumber;
const int PrtStationOrderInfo::kJobIdListFieldNumber;
const int PrtStationOrderInfo::kTotalPageFieldNumber;
const int PrtStationOrderInfo::kRealPageFieldNumber;
const int PrtStationOrderInfo::kColorFieldNumber;
const int PrtStationOrderInfo::kCopiesFieldNumber;
const int PrtStationOrderInfo::kCreateOnFieldNumber;
const int PrtStationOrderInfo::kPayTimeFieldNumber;
const int PrtStationOrderInfo::kPayStateFieldNumber;
const int PrtStationOrderInfo::kJobOpStateFieldNumber;
const int PrtStationOrderInfo::kJobCompleteTimeFieldNumber;
const int PrtStationOrderInfo::kJobCompleteNotifyTimeFieldNumber;
const int PrtStationOrderInfo::kPaymentUrlFieldNumber;
const int PrtStationOrderInfo::kCommentFieldNumber;
const int PrtStationOrderInfo::kOrgIDFieldNumber;
#endif  // !_MSC_VER

PrtStationOrderInfo::PrtStationOrderInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrtStationOrderInfo::InitAsDefaultInstance() {
}

PrtStationOrderInfo::PrtStationOrderInfo(const PrtStationOrderInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrtStationOrderInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  orderno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = 0;
  accountid_ = 0;
  accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  realname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prtid_ = 0;
  spendmoney_ = 0;
  paytype_ = 0;
  payaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  paycompany_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  paymoney_ = 0;
  payredpacket_ = 0;
  paypreferential_ = 0;
  jobtype_ = 0;
  totalpage_ = 0;
  realpage_ = 0;
  color_ = 0;
  copies_ = 0;
  createon_ = 0;
  paytime_ = 0;
  paystate_ = 0;
  jobopstate_ = 0;
  jobcompletetime_ = 0;
  jobcompletenotifytime_ = 0;
  paymenturl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orgid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtStationOrderInfo::~PrtStationOrderInfo() {
  SharedDtor();
}

void PrtStationOrderInfo::SharedDtor() {
  if (orderno_ != &::google::protobuf::internal::kEmptyString) {
    delete orderno_;
  }
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (realname_ != &::google::protobuf::internal::kEmptyString) {
    delete realname_;
  }
  if (payaccount_ != &::google::protobuf::internal::kEmptyString) {
    delete payaccount_;
  }
  if (paycompany_ != &::google::protobuf::internal::kEmptyString) {
    delete paycompany_;
  }
  if (paymenturl_ != &::google::protobuf::internal::kEmptyString) {
    delete paymenturl_;
  }
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (this != default_instance_) {
  }
}

void PrtStationOrderInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtStationOrderInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtStationOrderInfo_descriptor_;
}

const PrtStationOrderInfo& PrtStationOrderInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_thirdpaymessage_2eproto();  return *default_instance_;
}

PrtStationOrderInfo* PrtStationOrderInfo::default_instance_ = NULL;

PrtStationOrderInfo* PrtStationOrderInfo::New() const {
  return new PrtStationOrderInfo;
}

void PrtStationOrderInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_orderno()) {
      if (orderno_ != &::google::protobuf::internal::kEmptyString) {
        orderno_->clear();
      }
    }
    userid_ = 0;
    accountid_ = 0;
    if (has_accountname()) {
      if (accountname_ != &::google::protobuf::internal::kEmptyString) {
        accountname_->clear();
      }
    }
    if (has_realname()) {
      if (realname_ != &::google::protobuf::internal::kEmptyString) {
        realname_->clear();
      }
    }
    prtid_ = 0;
    spendmoney_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    paytype_ = 0;
    if (has_payaccount()) {
      if (payaccount_ != &::google::protobuf::internal::kEmptyString) {
        payaccount_->clear();
      }
    }
    if (has_paycompany()) {
      if (paycompany_ != &::google::protobuf::internal::kEmptyString) {
        paycompany_->clear();
      }
    }
    paymoney_ = 0;
    payredpacket_ = 0;
    paypreferential_ = 0;
    jobtype_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    totalpage_ = 0;
    realpage_ = 0;
    color_ = 0;
    copies_ = 0;
    createon_ = 0;
    paytime_ = 0;
    paystate_ = 0;
    jobopstate_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    jobcompletetime_ = 0;
    jobcompletenotifytime_ = 0;
    if (has_paymenturl()) {
      if (paymenturl_ != &::google::protobuf::internal::kEmptyString) {
        paymenturl_->clear();
      }
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
    orgid_ = 0;
  }
  jobidlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtStationOrderInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_OrderNo;
        break;
      }
      
      // optional string OrderNo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OrderNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderno().data(), this->orderno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_UserId;
        break;
      }
      
      // required int32 UserId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UserId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_AccountId;
        break;
      }
      
      // required int32 AccountId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AccountId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_AccountName;
        break;
      }
      
      // optional string AccountName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AccountName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accountname().data(), this->accountname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_RealName;
        break;
      }
      
      // optional string RealName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RealName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_realname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->realname().data(), this->realname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_PrtId;
        break;
      }
      
      // required int32 PrtId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PrtId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prtid_)));
          set_has_prtid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_SpendMoney;
        break;
      }
      
      // required int32 SpendMoney = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SpendMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spendmoney_)));
          set_has_spendmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_PayType;
        break;
      }
      
      // optional .isafetec.Pay_Type PayType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PayType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::Pay_Type_IsValid(value)) {
            set_paytype(static_cast< isafetec::Pay_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_PayAccount;
        break;
      }
      
      // optional string PayAccount = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PayAccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_payaccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->payaccount().data(), this->payaccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_PayCompany;
        break;
      }
      
      // optional string PayCompany = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PayCompany:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_paycompany()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->paycompany().data(), this->paycompany().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_PayMoney;
        break;
      }
      
      // optional int32 PayMoney = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PayMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paymoney_)));
          set_has_paymoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_PayRedPacket;
        break;
      }
      
      // optional int32 PayRedPacket = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PayRedPacket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &payredpacket_)));
          set_has_payredpacket();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_PayPreferential;
        break;
      }
      
      // optional int32 PayPreferential = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PayPreferential:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paypreferential_)));
          set_has_paypreferential();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_JobType;
        break;
      }
      
      // optional .isafetec.JOB_TYPE JobType = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_JobType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::JOB_TYPE_IsValid(value)) {
            set_jobtype(static_cast< isafetec::JOB_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_JobIdList;
        break;
      }
      
      // repeated int32 JobIdList = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_JobIdList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 128, input, this->mutable_jobidlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_jobidlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_JobIdList;
        if (input->ExpectTag(136)) goto parse_TotalPage;
        break;
      }
      
      // optional int32 TotalPage = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TotalPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalpage_)));
          set_has_totalpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_RealPage;
        break;
      }
      
      // optional int32 RealPage = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RealPage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &realpage_)));
          set_has_realpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_Color;
        break;
      }
      
      // optional int32 Color = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_Copies;
        break;
      }
      
      // optional int32 Copies = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Copies:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &copies_)));
          set_has_copies();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_CreateOn;
        break;
      }
      
      // optional double CreateOn = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CreateOn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &createon_)));
          set_has_createon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_PayTime;
        break;
      }
      
      // optional double PayTime = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &paytime_)));
          set_has_paytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_PayState;
        break;
      }
      
      // optional .isafetec.Pay_State PayState = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PayState:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::Pay_State_IsValid(value)) {
            set_paystate(static_cast< isafetec::Pay_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(23, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_JobOpState;
        break;
      }
      
      // optional .isafetec.Job_Op_State JobOpState = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_JobOpState:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (isafetec::Job_Op_State_IsValid(value)) {
            set_jobopstate(static_cast< isafetec::Job_Op_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(24, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(201)) goto parse_JobCompleteTime;
        break;
      }
      
      // optional double JobCompleteTime = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_JobCompleteTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jobcompletetime_)));
          set_has_jobcompletetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(209)) goto parse_JobCompleteNotifyTime;
        break;
      }
      
      // optional double JobCompleteNotifyTime = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_JobCompleteNotifyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jobcompletenotifytime_)));
          set_has_jobcompletenotifytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_PaymentUrl;
        break;
      }
      
      // optional string PaymentUrl = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PaymentUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_paymenturl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->paymenturl().data(), this->paymenturl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_comment;
        break;
      }
      
      // optional string comment = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_OrgID;
        break;
      }
      
      // optional int32 OrgID = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OrgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orgid_)));
          set_has_orgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrtStationOrderInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }
  
  // optional string OrderNo = 2;
  if (has_orderno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderno().data(), this->orderno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->orderno(), output);
  }
  
  // required int32 UserId = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->userid(), output);
  }
  
  // required int32 AccountId = 4;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->accountid(), output);
  }
  
  // optional string AccountName = 5;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->accountname(), output);
  }
  
  // optional string RealName = 6;
  if (has_realname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->realname().data(), this->realname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->realname(), output);
  }
  
  // required int32 PrtId = 7;
  if (has_prtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->prtid(), output);
  }
  
  // required int32 SpendMoney = 8;
  if (has_spendmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->spendmoney(), output);
  }
  
  // optional .isafetec.Pay_Type PayType = 9;
  if (has_paytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->paytype(), output);
  }
  
  // optional string PayAccount = 10;
  if (has_payaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->payaccount().data(), this->payaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->payaccount(), output);
  }
  
  // optional string PayCompany = 11;
  if (has_paycompany()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paycompany().data(), this->paycompany().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->paycompany(), output);
  }
  
  // optional int32 PayMoney = 12;
  if (has_paymoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->paymoney(), output);
  }
  
  // optional int32 PayRedPacket = 13;
  if (has_payredpacket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->payredpacket(), output);
  }
  
  // optional int32 PayPreferential = 14;
  if (has_paypreferential()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->paypreferential(), output);
  }
  
  // optional .isafetec.JOB_TYPE JobType = 15;
  if (has_jobtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->jobtype(), output);
  }
  
  // repeated int32 JobIdList = 16;
  for (int i = 0; i < this->jobidlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      16, this->jobidlist(i), output);
  }
  
  // optional int32 TotalPage = 17;
  if (has_totalpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->totalpage(), output);
  }
  
  // optional int32 RealPage = 18;
  if (has_realpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->realpage(), output);
  }
  
  // optional int32 Color = 19;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->color(), output);
  }
  
  // optional int32 Copies = 20;
  if (has_copies()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->copies(), output);
  }
  
  // optional double CreateOn = 21;
  if (has_createon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->createon(), output);
  }
  
  // optional double PayTime = 22;
  if (has_paytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->paytime(), output);
  }
  
  // optional .isafetec.Pay_State PayState = 23;
  if (has_paystate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->paystate(), output);
  }
  
  // optional .isafetec.Job_Op_State JobOpState = 24;
  if (has_jobopstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      24, this->jobopstate(), output);
  }
  
  // optional double JobCompleteTime = 25;
  if (has_jobcompletetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->jobcompletetime(), output);
  }
  
  // optional double JobCompleteNotifyTime = 26;
  if (has_jobcompletenotifytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->jobcompletenotifytime(), output);
  }
  
  // optional string PaymentUrl = 27;
  if (has_paymenturl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paymenturl().data(), this->paymenturl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->paymenturl(), output);
  }
  
  // optional string comment = 28;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->comment(), output);
  }
  
  // optional int32 OrgID = 29;
  if (has_orgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->orgid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrtStationOrderInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }
  
  // optional string OrderNo = 2;
  if (has_orderno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderno().data(), this->orderno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->orderno(), target);
  }
  
  // required int32 UserId = 3;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->userid(), target);
  }
  
  // required int32 AccountId = 4;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->accountid(), target);
  }
  
  // optional string AccountName = 5;
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accountname().data(), this->accountname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->accountname(), target);
  }
  
  // optional string RealName = 6;
  if (has_realname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->realname().data(), this->realname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->realname(), target);
  }
  
  // required int32 PrtId = 7;
  if (has_prtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->prtid(), target);
  }
  
  // required int32 SpendMoney = 8;
  if (has_spendmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->spendmoney(), target);
  }
  
  // optional .isafetec.Pay_Type PayType = 9;
  if (has_paytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->paytype(), target);
  }
  
  // optional string PayAccount = 10;
  if (has_payaccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->payaccount().data(), this->payaccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->payaccount(), target);
  }
  
  // optional string PayCompany = 11;
  if (has_paycompany()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paycompany().data(), this->paycompany().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->paycompany(), target);
  }
  
  // optional int32 PayMoney = 12;
  if (has_paymoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->paymoney(), target);
  }
  
  // optional int32 PayRedPacket = 13;
  if (has_payredpacket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->payredpacket(), target);
  }
  
  // optional int32 PayPreferential = 14;
  if (has_paypreferential()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->paypreferential(), target);
  }
  
  // optional .isafetec.JOB_TYPE JobType = 15;
  if (has_jobtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->jobtype(), target);
  }
  
  // repeated int32 JobIdList = 16;
  for (int i = 0; i < this->jobidlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(16, this->jobidlist(i), target);
  }
  
  // optional int32 TotalPage = 17;
  if (has_totalpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->totalpage(), target);
  }
  
  // optional int32 RealPage = 18;
  if (has_realpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->realpage(), target);
  }
  
  // optional int32 Color = 19;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->color(), target);
  }
  
  // optional int32 Copies = 20;
  if (has_copies()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->copies(), target);
  }
  
  // optional double CreateOn = 21;
  if (has_createon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->createon(), target);
  }
  
  // optional double PayTime = 22;
  if (has_paytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->paytime(), target);
  }
  
  // optional .isafetec.Pay_State PayState = 23;
  if (has_paystate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      23, this->paystate(), target);
  }
  
  // optional .isafetec.Job_Op_State JobOpState = 24;
  if (has_jobopstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      24, this->jobopstate(), target);
  }
  
  // optional double JobCompleteTime = 25;
  if (has_jobcompletetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->jobcompletetime(), target);
  }
  
  // optional double JobCompleteNotifyTime = 26;
  if (has_jobcompletenotifytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->jobcompletenotifytime(), target);
  }
  
  // optional string PaymentUrl = 27;
  if (has_paymenturl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paymenturl().data(), this->paymenturl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->paymenturl(), target);
  }
  
  // optional string comment = 28;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->comment(), target);
  }
  
  // optional int32 OrgID = 29;
  if (has_orgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->orgid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrtStationOrderInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string OrderNo = 2;
    if (has_orderno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderno());
    }
    
    // required int32 UserId = 3;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }
    
    // required int32 AccountId = 4;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accountid());
    }
    
    // optional string AccountName = 5;
    if (has_accountname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accountname());
    }
    
    // optional string RealName = 6;
    if (has_realname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->realname());
    }
    
    // required int32 PrtId = 7;
    if (has_prtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prtid());
    }
    
    // required int32 SpendMoney = 8;
    if (has_spendmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spendmoney());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .isafetec.Pay_Type PayType = 9;
    if (has_paytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->paytype());
    }
    
    // optional string PayAccount = 10;
    if (has_payaccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->payaccount());
    }
    
    // optional string PayCompany = 11;
    if (has_paycompany()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->paycompany());
    }
    
    // optional int32 PayMoney = 12;
    if (has_paymoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->paymoney());
    }
    
    // optional int32 PayRedPacket = 13;
    if (has_payredpacket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->payredpacket());
    }
    
    // optional int32 PayPreferential = 14;
    if (has_paypreferential()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->paypreferential());
    }
    
    // optional .isafetec.JOB_TYPE JobType = 15;
    if (has_jobtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->jobtype());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 TotalPage = 17;
    if (has_totalpage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalpage());
    }
    
    // optional int32 RealPage = 18;
    if (has_realpage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->realpage());
    }
    
    // optional int32 Color = 19;
    if (has_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }
    
    // optional int32 Copies = 20;
    if (has_copies()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->copies());
    }
    
    // optional double CreateOn = 21;
    if (has_createon()) {
      total_size += 2 + 8;
    }
    
    // optional double PayTime = 22;
    if (has_paytime()) {
      total_size += 2 + 8;
    }
    
    // optional .isafetec.Pay_State PayState = 23;
    if (has_paystate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->paystate());
    }
    
    // optional .isafetec.Job_Op_State JobOpState = 24;
    if (has_jobopstate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->jobopstate());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional double JobCompleteTime = 25;
    if (has_jobcompletetime()) {
      total_size += 2 + 8;
    }
    
    // optional double JobCompleteNotifyTime = 26;
    if (has_jobcompletenotifytime()) {
      total_size += 2 + 8;
    }
    
    // optional string PaymentUrl = 27;
    if (has_paymenturl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->paymenturl());
    }
    
    // optional string comment = 28;
    if (has_comment()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }
    
    // optional int32 OrgID = 29;
    if (has_orgid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orgid());
    }
    
  }
  // repeated int32 JobIdList = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->jobidlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->jobidlist(i));
    }
    total_size += 2 * this->jobidlist_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtStationOrderInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtStationOrderInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtStationOrderInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtStationOrderInfo::MergeFrom(const PrtStationOrderInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  jobidlist_.MergeFrom(from.jobidlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_orderno()) {
      set_orderno(from.orderno());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_accountname()) {
      set_accountname(from.accountname());
    }
    if (from.has_realname()) {
      set_realname(from.realname());
    }
    if (from.has_prtid()) {
      set_prtid(from.prtid());
    }
    if (from.has_spendmoney()) {
      set_spendmoney(from.spendmoney());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_paytype()) {
      set_paytype(from.paytype());
    }
    if (from.has_payaccount()) {
      set_payaccount(from.payaccount());
    }
    if (from.has_paycompany()) {
      set_paycompany(from.paycompany());
    }
    if (from.has_paymoney()) {
      set_paymoney(from.paymoney());
    }
    if (from.has_payredpacket()) {
      set_payredpacket(from.payredpacket());
    }
    if (from.has_paypreferential()) {
      set_paypreferential(from.paypreferential());
    }
    if (from.has_jobtype()) {
      set_jobtype(from.jobtype());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_totalpage()) {
      set_totalpage(from.totalpage());
    }
    if (from.has_realpage()) {
      set_realpage(from.realpage());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_copies()) {
      set_copies(from.copies());
    }
    if (from.has_createon()) {
      set_createon(from.createon());
    }
    if (from.has_paytime()) {
      set_paytime(from.paytime());
    }
    if (from.has_paystate()) {
      set_paystate(from.paystate());
    }
    if (from.has_jobopstate()) {
      set_jobopstate(from.jobopstate());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_jobcompletetime()) {
      set_jobcompletetime(from.jobcompletetime());
    }
    if (from.has_jobcompletenotifytime()) {
      set_jobcompletenotifytime(from.jobcompletenotifytime());
    }
    if (from.has_paymenturl()) {
      set_paymenturl(from.paymenturl());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
    if (from.has_orgid()) {
      set_orgid(from.orgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtStationOrderInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtStationOrderInfo::CopyFrom(const PrtStationOrderInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtStationOrderInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000cc) != 0x000000cc) return false;
  
  return true;
}

void PrtStationOrderInfo::Swap(PrtStationOrderInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(orderno_, other->orderno_);
    std::swap(userid_, other->userid_);
    std::swap(accountid_, other->accountid_);
    std::swap(accountname_, other->accountname_);
    std::swap(realname_, other->realname_);
    std::swap(prtid_, other->prtid_);
    std::swap(spendmoney_, other->spendmoney_);
    std::swap(paytype_, other->paytype_);
    std::swap(payaccount_, other->payaccount_);
    std::swap(paycompany_, other->paycompany_);
    std::swap(paymoney_, other->paymoney_);
    std::swap(payredpacket_, other->payredpacket_);
    std::swap(paypreferential_, other->paypreferential_);
    std::swap(jobtype_, other->jobtype_);
    jobidlist_.Swap(&other->jobidlist_);
    std::swap(totalpage_, other->totalpage_);
    std::swap(realpage_, other->realpage_);
    std::swap(color_, other->color_);
    std::swap(copies_, other->copies_);
    std::swap(createon_, other->createon_);
    std::swap(paytime_, other->paytime_);
    std::swap(paystate_, other->paystate_);
    std::swap(jobopstate_, other->jobopstate_);
    std::swap(jobcompletetime_, other->jobcompletetime_);
    std::swap(jobcompletenotifytime_, other->jobcompletenotifytime_);
    std::swap(paymenturl_, other->paymenturl_);
    std::swap(comment_, other->comment_);
    std::swap(orgid_, other->orgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtStationOrderInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtStationOrderInfo_descriptor_;
  metadata.reflection = PrtStationOrderInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrtStationOrderHeader::kSerFlagFieldNumber;
const int PrtStationOrderHeader::kEquipidFieldNumber;
#endif  // !_MSC_VER

PrtStationOrderHeader::PrtStationOrderHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrtStationOrderHeader::InitAsDefaultInstance() {
}

PrtStationOrderHeader::PrtStationOrderHeader(const PrtStationOrderHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrtStationOrderHeader::SharedCtor() {
  _cached_size_ = 0;
  serflag_ = 0;
  equipid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrtStationOrderHeader::~PrtStationOrderHeader() {
  SharedDtor();
}

void PrtStationOrderHeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrtStationOrderHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrtStationOrderHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrtStationOrderHeader_descriptor_;
}

const PrtStationOrderHeader& PrtStationOrderHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_thirdpaymessage_2eproto();  return *default_instance_;
}

PrtStationOrderHeader* PrtStationOrderHeader::default_instance_ = NULL;

PrtStationOrderHeader* PrtStationOrderHeader::New() const {
  return new PrtStationOrderHeader;
}

void PrtStationOrderHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serflag_ = 0;
    equipid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrtStationOrderHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 SerFlag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serflag_)));
          set_has_serflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Equipid;
        break;
      }
      
      // optional int32 Equipid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Equipid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equipid_)));
          set_has_equipid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrtStationOrderHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 SerFlag = 1;
  if (has_serflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serflag(), output);
  }
  
  // optional int32 Equipid = 2;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->equipid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrtStationOrderHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 SerFlag = 1;
  if (has_serflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serflag(), target);
  }
  
  // optional int32 Equipid = 2;
  if (has_equipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->equipid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrtStationOrderHeader::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 SerFlag = 1;
    if (has_serflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serflag());
    }
    
    // optional int32 Equipid = 2;
    if (has_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equipid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrtStationOrderHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrtStationOrderHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrtStationOrderHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrtStationOrderHeader::MergeFrom(const PrtStationOrderHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serflag()) {
      set_serflag(from.serflag());
    }
    if (from.has_equipid()) {
      set_equipid(from.equipid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrtStationOrderHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrtStationOrderHeader::CopyFrom(const PrtStationOrderHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrtStationOrderHeader::IsInitialized() const {
  
  return true;
}

void PrtStationOrderHeader::Swap(PrtStationOrderHeader* other) {
  if (other != this) {
    std::swap(serflag_, other->serflag_);
    std::swap(equipid_, other->equipid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrtStationOrderHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrtStationOrderHeader_descriptor_;
  metadata.reflection = PrtStationOrderHeader_reflection_;
  return metadata;
}

// LoginQrcodeRequest

// required int32 equipid = 1;
inline bool LoginQrcodeRequest::has_equipid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginQrcodeRequest::set_has_equipid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginQrcodeRequest::clear_has_equipid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginQrcodeRequest::clear_equipid() {
  equipid_ = 0;
  clear_has_equipid();
}
inline ::google::protobuf::int32 LoginQrcodeRequest::equipid() const {
  return equipid_;
}
inline void LoginQrcodeRequest::set_equipid(::google::protobuf::int32 value) {
  set_has_equipid();
  equipid_ = value;
}

// optional int32 qrtype = 2;
inline bool LoginQrcodeRequest::has_qrtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginQrcodeRequest::set_has_qrtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginQrcodeRequest::clear_has_qrtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginQrcodeRequest::clear_qrtype() {
  qrtype_ = 0;
  clear_has_qrtype();
}
inline ::google::protobuf::int32 LoginQrcodeRequest::qrtype() const {
  return qrtype_;
}
inline void LoginQrcodeRequest::set_qrtype(::google::protobuf::int32 value) {
  set_has_qrtype();
  qrtype_ = value;
}

// optional uint32 time_stamp = 3;
inline bool LoginQrcodeRequest::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginQrcodeRequest::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginQrcodeRequest::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginQrcodeRequest::clear_time_stamp() {
  time_stamp_ = 0u;
  clear_has_time_stamp();
}
inline ::google::protobuf::uint32 LoginQrcodeRequest::time_stamp() const {
  return time_stamp_;
}
inline void LoginQrcodeRequest::set_time_stamp(::google::protobuf::uint32 value) {
  set_has_time_stamp();
  time_stamp_ = value;
}

// -------------------------------------------------------------------

// LoginQrcodeResponse

// required int32 equipid = 1;
inline bool LoginQrcodeResponse::has_equipid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginQrcodeResponse::set_has_equipid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginQrcodeResponse::clear_has_equipid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginQrcodeResponse::clear_equipid() {
  equipid_ = 0;
  clear_has_equipid();
}
inline ::google::protobuf::int32 LoginQrcodeResponse::equipid() const {
  return equipid_;
}
inline void LoginQrcodeResponse::set_equipid(::google::protobuf::int32 value) {
  set_has_equipid();
  equipid_ = value;
}

// optional int32 qrtype = 2;
inline bool LoginQrcodeResponse::has_qrtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginQrcodeResponse::set_has_qrtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginQrcodeResponse::clear_has_qrtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginQrcodeResponse::clear_qrtype() {
  qrtype_ = 0;
  clear_has_qrtype();
}
inline ::google::protobuf::int32 LoginQrcodeResponse::qrtype() const {
  return qrtype_;
}
inline void LoginQrcodeResponse::set_qrtype(::google::protobuf::int32 value) {
  set_has_qrtype();
  qrtype_ = value;
}

// optional uint32 time_stamp = 3;
inline bool LoginQrcodeResponse::has_time_stamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginQrcodeResponse::set_has_time_stamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginQrcodeResponse::clear_has_time_stamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginQrcodeResponse::clear_time_stamp() {
  time_stamp_ = 0u;
  clear_has_time_stamp();
}
inline ::google::protobuf::uint32 LoginQrcodeResponse::time_stamp() const {
  return time_stamp_;
}
inline void LoginQrcodeResponse::set_time_stamp(::google::protobuf::uint32 value) {
  set_has_time_stamp();
  time_stamp_ = value;
}

// optional int32 errcode = 4;
inline bool LoginQrcodeResponse::has_errcode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LoginQrcodeResponse::set_has_errcode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LoginQrcodeResponse::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LoginQrcodeResponse::clear_errcode() {
  errcode_ = 0;
  clear_has_errcode();
}
inline ::google::protobuf::int32 LoginQrcodeResponse::errcode() const {
  return errcode_;
}
inline void LoginQrcodeResponse::set_errcode(::google::protobuf::int32 value) {
  set_has_errcode();
  errcode_ = value;
}

// optional string errmsg = 5;
inline bool LoginQrcodeResponse::has_errmsg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LoginQrcodeResponse::set_has_errmsg() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LoginQrcodeResponse::clear_has_errmsg() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LoginQrcodeResponse::clear_errmsg() {
  if (errmsg_ != &::google::protobuf::internal::kEmptyString) {
    errmsg_->clear();
  }
  clear_has_errmsg();
}
inline const ::std::string& LoginQrcodeResponse::errmsg() const {
  return *errmsg_;
}
inline void LoginQrcodeResponse::set_errmsg(const ::std::string& value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::kEmptyString) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
}
inline void LoginQrcodeResponse::set_errmsg(const char* value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::kEmptyString) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
}
inline void LoginQrcodeResponse::set_errmsg(const char* value, size_t size) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::kEmptyString) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginQrcodeResponse::mutable_errmsg() {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::kEmptyString) {
    errmsg_ = new ::std::string;
  }
  return errmsg_;
}
inline ::std::string* LoginQrcodeResponse::release_errmsg() {
  clear_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = errmsg_;
    errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string qrstring = 6;
inline bool LoginQrcodeResponse::has_qrstring() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LoginQrcodeResponse::set_has_qrstring() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LoginQrcodeResponse::clear_has_qrstring() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LoginQrcodeResponse::clear_qrstring() {
  if (qrstring_ != &::google::protobuf::internal::kEmptyString) {
    qrstring_->clear();
  }
  clear_has_qrstring();
}
inline const ::std::string& LoginQrcodeResponse::qrstring() const {
  return *qrstring_;
}
inline void LoginQrcodeResponse::set_qrstring(const ::std::string& value) {
  set_has_qrstring();
  if (qrstring_ == &::google::protobuf::internal::kEmptyString) {
    qrstring_ = new ::std::string;
  }
  qrstring_->assign(value);
}
inline void LoginQrcodeResponse::set_qrstring(const char* value) {
  set_has_qrstring();
  if (qrstring_ == &::google::protobuf::internal::kEmptyString) {
    qrstring_ = new ::std::string;
  }
  qrstring_->assign(value);
}
inline void LoginQrcodeResponse::set_qrstring(const char* value, size_t size) {
  set_has_qrstring();
  if (qrstring_ == &::google::protobuf::internal::kEmptyString) {
    qrstring_ = new ::std::string;
  }
  qrstring_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginQrcodeResponse::mutable_qrstring() {
  set_has_qrstring();
  if (qrstring_ == &::google::protobuf::internal::kEmptyString) {
    qrstring_ = new ::std::string;
  }
  return qrstring_;
}
inline ::std::string* LoginQrcodeResponse::release_qrstring() {
  clear_has_qrstring();
  if (qrstring_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = qrstring_;
    qrstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// EquipUserOnlineInfo

// required int32 equipid = 1;
inline bool EquipUserOnlineInfo::has_equipid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipUserOnlineInfo::set_has_equipid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipUserOnlineInfo::clear_has_equipid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipUserOnlineInfo::clear_equipid() {
  equipid_ = 0;
  clear_has_equipid();
}
inline ::google::protobuf::int32 EquipUserOnlineInfo::equipid() const {
  return equipid_;
}
inline void EquipUserOnlineInfo::set_equipid(::google::protobuf::int32 value) {
  set_has_equipid();
  equipid_ = value;
}

// required int32 userid = 2;
inline bool EquipUserOnlineInfo::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipUserOnlineInfo::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipUserOnlineInfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipUserOnlineInfo::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 EquipUserOnlineInfo::userid() const {
  return userid_;
}
inline void EquipUserOnlineInfo::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional int32 login_type = 3;
inline bool EquipUserOnlineInfo::has_login_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EquipUserOnlineInfo::set_has_login_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EquipUserOnlineInfo::clear_has_login_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EquipUserOnlineInfo::clear_login_type() {
  login_type_ = 0;
  clear_has_login_type();
}
inline ::google::protobuf::int32 EquipUserOnlineInfo::login_type() const {
  return login_type_;
}
inline void EquipUserOnlineInfo::set_login_type(::google::protobuf::int32 value) {
  set_has_login_type();
  login_type_ = value;
}

// optional string update_time = 4;
inline bool EquipUserOnlineInfo::has_update_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EquipUserOnlineInfo::set_has_update_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EquipUserOnlineInfo::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EquipUserOnlineInfo::clear_update_time() {
  if (update_time_ != &::google::protobuf::internal::kEmptyString) {
    update_time_->clear();
  }
  clear_has_update_time();
}
inline const ::std::string& EquipUserOnlineInfo::update_time() const {
  return *update_time_;
}
inline void EquipUserOnlineInfo::set_update_time(const ::std::string& value) {
  set_has_update_time();
  if (update_time_ == &::google::protobuf::internal::kEmptyString) {
    update_time_ = new ::std::string;
  }
  update_time_->assign(value);
}
inline void EquipUserOnlineInfo::set_update_time(const char* value) {
  set_has_update_time();
  if (update_time_ == &::google::protobuf::internal::kEmptyString) {
    update_time_ = new ::std::string;
  }
  update_time_->assign(value);
}
inline void EquipUserOnlineInfo::set_update_time(const char* value, size_t size) {
  set_has_update_time();
  if (update_time_ == &::google::protobuf::internal::kEmptyString) {
    update_time_ = new ::std::string;
  }
  update_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EquipUserOnlineInfo::mutable_update_time() {
  set_has_update_time();
  if (update_time_ == &::google::protobuf::internal::kEmptyString) {
    update_time_ = new ::std::string;
  }
  return update_time_;
}
inline ::std::string* EquipUserOnlineInfo::release_update_time() {
  clear_has_update_time();
  if (update_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = update_time_;
    update_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ThirdPartLoginEquip

// required int32 equipid = 1;
inline bool ThirdPartLoginEquip::has_equipid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ThirdPartLoginEquip::set_has_equipid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ThirdPartLoginEquip::clear_has_equipid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ThirdPartLoginEquip::clear_equipid() {
  equipid_ = 0;
  clear_has_equipid();
}
inline ::google::protobuf::int32 ThirdPartLoginEquip::equipid() const {
  return equipid_;
}
inline void ThirdPartLoginEquip::set_equipid(::google::protobuf::int32 value) {
  set_has_equipid();
  equipid_ = value;
}

// required string accountno = 2;
inline bool ThirdPartLoginEquip::has_accountno() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ThirdPartLoginEquip::set_has_accountno() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ThirdPartLoginEquip::clear_has_accountno() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ThirdPartLoginEquip::clear_accountno() {
  if (accountno_ != &::google::protobuf::internal::kEmptyString) {
    accountno_->clear();
  }
  clear_has_accountno();
}
inline const ::std::string& ThirdPartLoginEquip::accountno() const {
  return *accountno_;
}
inline void ThirdPartLoginEquip::set_accountno(const ::std::string& value) {
  set_has_accountno();
  if (accountno_ == &::google::protobuf::internal::kEmptyString) {
    accountno_ = new ::std::string;
  }
  accountno_->assign(value);
}
inline void ThirdPartLoginEquip::set_accountno(const char* value) {
  set_has_accountno();
  if (accountno_ == &::google::protobuf::internal::kEmptyString) {
    accountno_ = new ::std::string;
  }
  accountno_->assign(value);
}
inline void ThirdPartLoginEquip::set_accountno(const char* value, size_t size) {
  set_has_accountno();
  if (accountno_ == &::google::protobuf::internal::kEmptyString) {
    accountno_ = new ::std::string;
  }
  accountno_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ThirdPartLoginEquip::mutable_accountno() {
  set_has_accountno();
  if (accountno_ == &::google::protobuf::internal::kEmptyString) {
    accountno_ = new ::std::string;
  }
  return accountno_;
}
inline ::std::string* ThirdPartLoginEquip::release_accountno() {
  clear_has_accountno();
  if (accountno_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accountno_;
    accountno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 userid = 3;
inline bool ThirdPartLoginEquip::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ThirdPartLoginEquip::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ThirdPartLoginEquip::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ThirdPartLoginEquip::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 ThirdPartLoginEquip::userid() const {
  return userid_;
}
inline void ThirdPartLoginEquip::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// optional int32 login_type = 4;
inline bool ThirdPartLoginEquip::has_login_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ThirdPartLoginEquip::set_has_login_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ThirdPartLoginEquip::clear_has_login_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ThirdPartLoginEquip::clear_login_type() {
  login_type_ = 0;
  clear_has_login_type();
}
inline ::google::protobuf::int32 ThirdPartLoginEquip::login_type() const {
  return login_type_;
}
inline void ThirdPartLoginEquip::set_login_type(::google::protobuf::int32 value) {
  set_has_login_type();
  login_type_ = value;
}

// optional string session_id = 5;
inline bool ThirdPartLoginEquip::has_session_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ThirdPartLoginEquip::set_has_session_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ThirdPartLoginEquip::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ThirdPartLoginEquip::clear_session_id() {
  if (session_id_ != &::google::protobuf::internal::kEmptyString) {
    session_id_->clear();
  }
  clear_has_session_id();
}
inline const ::std::string& ThirdPartLoginEquip::session_id() const {
  return *session_id_;
}
inline void ThirdPartLoginEquip::set_session_id(const ::std::string& value) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(value);
}
inline void ThirdPartLoginEquip::set_session_id(const char* value) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(value);
}
inline void ThirdPartLoginEquip::set_session_id(const char* value, size_t size) {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  session_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ThirdPartLoginEquip::mutable_session_id() {
  set_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    session_id_ = new ::std::string;
  }
  return session_id_;
}
inline ::std::string* ThirdPartLoginEquip::release_session_id() {
  clear_has_session_id();
  if (session_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = session_id_;
    session_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .isafetec.CommonResult result = 6;
inline bool ThirdPartLoginEquip::has_result() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ThirdPartLoginEquip::set_has_result() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ThirdPartLoginEquip::clear_has_result() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ThirdPartLoginEquip::clear_result() {
  if (result_ != NULL) result_->::isafetec::CommonResult::Clear();
  clear_has_result();
}
inline const ::isafetec::CommonResult& ThirdPartLoginEquip::result() const {
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::isafetec::CommonResult* ThirdPartLoginEquip::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::isafetec::CommonResult;
  return result_;
}
inline ::isafetec::CommonResult* ThirdPartLoginEquip::release_result() {
  clear_has_result();
  ::isafetec::CommonResult* temp = result_;
  result_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// CommonResult

// optional int32 errcode = 1;
inline bool CommonResult::has_errcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommonResult::set_has_errcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommonResult::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommonResult::clear_errcode() {
  errcode_ = 0;
  clear_has_errcode();
}
inline ::google::protobuf::int32 CommonResult::errcode() const {
  return errcode_;
}
inline void CommonResult::set_errcode(::google::protobuf::int32 value) {
  set_has_errcode();
  errcode_ = value;
}

// optional string errmsg = 2;
inline bool CommonResult::has_errmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommonResult::set_has_errmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommonResult::clear_has_errmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommonResult::clear_errmsg() {
  if (errmsg_ != &::google::protobuf::internal::kEmptyString) {
    errmsg_->clear();
  }
  clear_has_errmsg();
}
inline const ::std::string& CommonResult::errmsg() const {
  return *errmsg_;
}
inline void CommonResult::set_errmsg(const ::std::string& value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::kEmptyString) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
}
inline void CommonResult::set_errmsg(const char* value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::kEmptyString) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
}
inline void CommonResult::set_errmsg(const char* value, size_t size) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::kEmptyString) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommonResult::mutable_errmsg() {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::kEmptyString) {
    errmsg_ = new ::std::string;
  }
  return errmsg_;
}
inline ::std::string* CommonResult::release_errmsg() {
  clear_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = errmsg_;
    errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PrtStationOrderInfo

// optional int32 id = 1;
inline bool PrtStationOrderInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrtStationOrderInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrtStationOrderInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrtStationOrderInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 PrtStationOrderInfo::id() const {
  return id_;
}
inline void PrtStationOrderInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string OrderNo = 2;
inline bool PrtStationOrderInfo::has_orderno() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrtStationOrderInfo::set_has_orderno() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrtStationOrderInfo::clear_has_orderno() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrtStationOrderInfo::clear_orderno() {
  if (orderno_ != &::google::protobuf::internal::kEmptyString) {
    orderno_->clear();
  }
  clear_has_orderno();
}
inline const ::std::string& PrtStationOrderInfo::orderno() const {
  return *orderno_;
}
inline void PrtStationOrderInfo::set_orderno(const ::std::string& value) {
  set_has_orderno();
  if (orderno_ == &::google::protobuf::internal::kEmptyString) {
    orderno_ = new ::std::string;
  }
  orderno_->assign(value);
}
inline void PrtStationOrderInfo::set_orderno(const char* value) {
  set_has_orderno();
  if (orderno_ == &::google::protobuf::internal::kEmptyString) {
    orderno_ = new ::std::string;
  }
  orderno_->assign(value);
}
inline void PrtStationOrderInfo::set_orderno(const char* value, size_t size) {
  set_has_orderno();
  if (orderno_ == &::google::protobuf::internal::kEmptyString) {
    orderno_ = new ::std::string;
  }
  orderno_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtStationOrderInfo::mutable_orderno() {
  set_has_orderno();
  if (orderno_ == &::google::protobuf::internal::kEmptyString) {
    orderno_ = new ::std::string;
  }
  return orderno_;
}
inline ::std::string* PrtStationOrderInfo::release_orderno() {
  clear_has_orderno();
  if (orderno_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = orderno_;
    orderno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 UserId = 3;
inline bool PrtStationOrderInfo::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrtStationOrderInfo::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrtStationOrderInfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrtStationOrderInfo::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 PrtStationOrderInfo::userid() const {
  return userid_;
}
inline void PrtStationOrderInfo::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// required int32 AccountId = 4;
inline bool PrtStationOrderInfo::has_accountid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrtStationOrderInfo::set_has_accountid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrtStationOrderInfo::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrtStationOrderInfo::clear_accountid() {
  accountid_ = 0;
  clear_has_accountid();
}
inline ::google::protobuf::int32 PrtStationOrderInfo::accountid() const {
  return accountid_;
}
inline void PrtStationOrderInfo::set_accountid(::google::protobuf::int32 value) {
  set_has_accountid();
  accountid_ = value;
}

// optional string AccountName = 5;
inline bool PrtStationOrderInfo::has_accountname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PrtStationOrderInfo::set_has_accountname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PrtStationOrderInfo::clear_has_accountname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PrtStationOrderInfo::clear_accountname() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    accountname_->clear();
  }
  clear_has_accountname();
}
inline const ::std::string& PrtStationOrderInfo::accountname() const {
  return *accountname_;
}
inline void PrtStationOrderInfo::set_accountname(const ::std::string& value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void PrtStationOrderInfo::set_accountname(const char* value) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(value);
}
inline void PrtStationOrderInfo::set_accountname(const char* value, size_t size) {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  accountname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtStationOrderInfo::mutable_accountname() {
  set_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    accountname_ = new ::std::string;
  }
  return accountname_;
}
inline ::std::string* PrtStationOrderInfo::release_accountname() {
  clear_has_accountname();
  if (accountname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accountname_;
    accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string RealName = 6;
inline bool PrtStationOrderInfo::has_realname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PrtStationOrderInfo::set_has_realname() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PrtStationOrderInfo::clear_has_realname() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PrtStationOrderInfo::clear_realname() {
  if (realname_ != &::google::protobuf::internal::kEmptyString) {
    realname_->clear();
  }
  clear_has_realname();
}
inline const ::std::string& PrtStationOrderInfo::realname() const {
  return *realname_;
}
inline void PrtStationOrderInfo::set_realname(const ::std::string& value) {
  set_has_realname();
  if (realname_ == &::google::protobuf::internal::kEmptyString) {
    realname_ = new ::std::string;
  }
  realname_->assign(value);
}
inline void PrtStationOrderInfo::set_realname(const char* value) {
  set_has_realname();
  if (realname_ == &::google::protobuf::internal::kEmptyString) {
    realname_ = new ::std::string;
  }
  realname_->assign(value);
}
inline void PrtStationOrderInfo::set_realname(const char* value, size_t size) {
  set_has_realname();
  if (realname_ == &::google::protobuf::internal::kEmptyString) {
    realname_ = new ::std::string;
  }
  realname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtStationOrderInfo::mutable_realname() {
  set_has_realname();
  if (realname_ == &::google::protobuf::internal::kEmptyString) {
    realname_ = new ::std::string;
  }
  return realname_;
}
inline ::std::string* PrtStationOrderInfo::release_realname() {
  clear_has_realname();
  if (realname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = realname_;
    realname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 PrtId = 7;
inline bool PrtStationOrderInfo::has_prtid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PrtStationOrderInfo::set_has_prtid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PrtStationOrderInfo::clear_has_prtid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PrtStationOrderInfo::clear_prtid() {
  prtid_ = 0;
  clear_has_prtid();
}
inline ::google::protobuf::int32 PrtStationOrderInfo::prtid() const {
  return prtid_;
}
inline void PrtStationOrderInfo::set_prtid(::google::protobuf::int32 value) {
  set_has_prtid();
  prtid_ = value;
}

// required int32 SpendMoney = 8;
inline bool PrtStationOrderInfo::has_spendmoney() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PrtStationOrderInfo::set_has_spendmoney() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PrtStationOrderInfo::clear_has_spendmoney() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PrtStationOrderInfo::clear_spendmoney() {
  spendmoney_ = 0;
  clear_has_spendmoney();
}
inline ::google::protobuf::int32 PrtStationOrderInfo::spendmoney() const {
  return spendmoney_;
}
inline void PrtStationOrderInfo::set_spendmoney(::google::protobuf::int32 value) {
  set_has_spendmoney();
  spendmoney_ = value;
}

// optional .isafetec.Pay_Type PayType = 9;
inline bool PrtStationOrderInfo::has_paytype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PrtStationOrderInfo::set_has_paytype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PrtStationOrderInfo::clear_has_paytype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PrtStationOrderInfo::clear_paytype() {
  paytype_ = 0;
  clear_has_paytype();
}
inline isafetec::Pay_Type PrtStationOrderInfo::paytype() const {
  return static_cast< isafetec::Pay_Type >(paytype_);
}
inline void PrtStationOrderInfo::set_paytype(isafetec::Pay_Type value) {
  GOOGLE_DCHECK(isafetec::Pay_Type_IsValid(value));
  set_has_paytype();
  paytype_ = value;
}

// optional string PayAccount = 10;
inline bool PrtStationOrderInfo::has_payaccount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PrtStationOrderInfo::set_has_payaccount() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PrtStationOrderInfo::clear_has_payaccount() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PrtStationOrderInfo::clear_payaccount() {
  if (payaccount_ != &::google::protobuf::internal::kEmptyString) {
    payaccount_->clear();
  }
  clear_has_payaccount();
}
inline const ::std::string& PrtStationOrderInfo::payaccount() const {
  return *payaccount_;
}
inline void PrtStationOrderInfo::set_payaccount(const ::std::string& value) {
  set_has_payaccount();
  if (payaccount_ == &::google::protobuf::internal::kEmptyString) {
    payaccount_ = new ::std::string;
  }
  payaccount_->assign(value);
}
inline void PrtStationOrderInfo::set_payaccount(const char* value) {
  set_has_payaccount();
  if (payaccount_ == &::google::protobuf::internal::kEmptyString) {
    payaccount_ = new ::std::string;
  }
  payaccount_->assign(value);
}
inline void PrtStationOrderInfo::set_payaccount(const char* value, size_t size) {
  set_has_payaccount();
  if (payaccount_ == &::google::protobuf::internal::kEmptyString) {
    payaccount_ = new ::std::string;
  }
  payaccount_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtStationOrderInfo::mutable_payaccount() {
  set_has_payaccount();
  if (payaccount_ == &::google::protobuf::internal::kEmptyString) {
    payaccount_ = new ::std::string;
  }
  return payaccount_;
}
inline ::std::string* PrtStationOrderInfo::release_payaccount() {
  clear_has_payaccount();
  if (payaccount_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = payaccount_;
    payaccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string PayCompany = 11;
inline bool PrtStationOrderInfo::has_paycompany() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PrtStationOrderInfo::set_has_paycompany() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PrtStationOrderInfo::clear_has_paycompany() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PrtStationOrderInfo::clear_paycompany() {
  if (paycompany_ != &::google::protobuf::internal::kEmptyString) {
    paycompany_->clear();
  }
  clear_has_paycompany();
}
inline const ::std::string& PrtStationOrderInfo::paycompany() const {
  return *paycompany_;
}
inline void PrtStationOrderInfo::set_paycompany(const ::std::string& value) {
  set_has_paycompany();
  if (paycompany_ == &::google::protobuf::internal::kEmptyString) {
    paycompany_ = new ::std::string;
  }
  paycompany_->assign(value);
}
inline void PrtStationOrderInfo::set_paycompany(const char* value) {
  set_has_paycompany();
  if (paycompany_ == &::google::protobuf::internal::kEmptyString) {
    paycompany_ = new ::std::string;
  }
  paycompany_->assign(value);
}
inline void PrtStationOrderInfo::set_paycompany(const char* value, size_t size) {
  set_has_paycompany();
  if (paycompany_ == &::google::protobuf::internal::kEmptyString) {
    paycompany_ = new ::std::string;
  }
  paycompany_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtStationOrderInfo::mutable_paycompany() {
  set_has_paycompany();
  if (paycompany_ == &::google::protobuf::internal::kEmptyString) {
    paycompany_ = new ::std::string;
  }
  return paycompany_;
}
inline ::std::string* PrtStationOrderInfo::release_paycompany() {
  clear_has_paycompany();
  if (paycompany_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = paycompany_;
    paycompany_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 PayMoney = 12;
inline bool PrtStationOrderInfo::has_paymoney() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PrtStationOrderInfo::set_has_paymoney() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PrtStationOrderInfo::clear_has_paymoney() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PrtStationOrderInfo::clear_paymoney() {
  paymoney_ = 0;
  clear_has_paymoney();
}
inline ::google::protobuf::int32 PrtStationOrderInfo::paymoney() const {
  return paymoney_;
}
inline void PrtStationOrderInfo::set_paymoney(::google::protobuf::int32 value) {
  set_has_paymoney();
  paymoney_ = value;
}

// optional int32 PayRedPacket = 13;
inline bool PrtStationOrderInfo::has_payredpacket() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PrtStationOrderInfo::set_has_payredpacket() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PrtStationOrderInfo::clear_has_payredpacket() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PrtStationOrderInfo::clear_payredpacket() {
  payredpacket_ = 0;
  clear_has_payredpacket();
}
inline ::google::protobuf::int32 PrtStationOrderInfo::payredpacket() const {
  return payredpacket_;
}
inline void PrtStationOrderInfo::set_payredpacket(::google::protobuf::int32 value) {
  set_has_payredpacket();
  payredpacket_ = value;
}

// optional int32 PayPreferential = 14;
inline bool PrtStationOrderInfo::has_paypreferential() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PrtStationOrderInfo::set_has_paypreferential() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PrtStationOrderInfo::clear_has_paypreferential() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PrtStationOrderInfo::clear_paypreferential() {
  paypreferential_ = 0;
  clear_has_paypreferential();
}
inline ::google::protobuf::int32 PrtStationOrderInfo::paypreferential() const {
  return paypreferential_;
}
inline void PrtStationOrderInfo::set_paypreferential(::google::protobuf::int32 value) {
  set_has_paypreferential();
  paypreferential_ = value;
}

// optional .isafetec.JOB_TYPE JobType = 15;
inline bool PrtStationOrderInfo::has_jobtype() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PrtStationOrderInfo::set_has_jobtype() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PrtStationOrderInfo::clear_has_jobtype() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PrtStationOrderInfo::clear_jobtype() {
  jobtype_ = 0;
  clear_has_jobtype();
}
inline isafetec::JOB_TYPE PrtStationOrderInfo::jobtype() const {
  return static_cast< isafetec::JOB_TYPE >(jobtype_);
}
inline void PrtStationOrderInfo::set_jobtype(isafetec::JOB_TYPE value) {
  GOOGLE_DCHECK(isafetec::JOB_TYPE_IsValid(value));
  set_has_jobtype();
  jobtype_ = value;
}

// repeated int32 JobIdList = 16;
inline int PrtStationOrderInfo::jobidlist_size() const {
  return jobidlist_.size();
}
inline void PrtStationOrderInfo::clear_jobidlist() {
  jobidlist_.Clear();
}
inline ::google::protobuf::int32 PrtStationOrderInfo::jobidlist(int index) const {
  return jobidlist_.Get(index);
}
inline void PrtStationOrderInfo::set_jobidlist(int index, ::google::protobuf::int32 value) {
  jobidlist_.Set(index, value);
}
inline void PrtStationOrderInfo::add_jobidlist(::google::protobuf::int32 value) {
  jobidlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PrtStationOrderInfo::jobidlist() const {
  return jobidlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PrtStationOrderInfo::mutable_jobidlist() {
  return &jobidlist_;
}

// optional int32 TotalPage = 17;
inline bool PrtStationOrderInfo::has_totalpage() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PrtStationOrderInfo::set_has_totalpage() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PrtStationOrderInfo::clear_has_totalpage() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PrtStationOrderInfo::clear_totalpage() {
  totalpage_ = 0;
  clear_has_totalpage();
}
inline ::google::protobuf::int32 PrtStationOrderInfo::totalpage() const {
  return totalpage_;
}
inline void PrtStationOrderInfo::set_totalpage(::google::protobuf::int32 value) {
  set_has_totalpage();
  totalpage_ = value;
}

// optional int32 RealPage = 18;
inline bool PrtStationOrderInfo::has_realpage() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PrtStationOrderInfo::set_has_realpage() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PrtStationOrderInfo::clear_has_realpage() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PrtStationOrderInfo::clear_realpage() {
  realpage_ = 0;
  clear_has_realpage();
}
inline ::google::protobuf::int32 PrtStationOrderInfo::realpage() const {
  return realpage_;
}
inline void PrtStationOrderInfo::set_realpage(::google::protobuf::int32 value) {
  set_has_realpage();
  realpage_ = value;
}

// optional int32 Color = 19;
inline bool PrtStationOrderInfo::has_color() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PrtStationOrderInfo::set_has_color() {
  _has_bits_[0] |= 0x00040000u;
}
inline void PrtStationOrderInfo::clear_has_color() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void PrtStationOrderInfo::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::google::protobuf::int32 PrtStationOrderInfo::color() const {
  return color_;
}
inline void PrtStationOrderInfo::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
}

// optional int32 Copies = 20;
inline bool PrtStationOrderInfo::has_copies() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void PrtStationOrderInfo::set_has_copies() {
  _has_bits_[0] |= 0x00080000u;
}
inline void PrtStationOrderInfo::clear_has_copies() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void PrtStationOrderInfo::clear_copies() {
  copies_ = 0;
  clear_has_copies();
}
inline ::google::protobuf::int32 PrtStationOrderInfo::copies() const {
  return copies_;
}
inline void PrtStationOrderInfo::set_copies(::google::protobuf::int32 value) {
  set_has_copies();
  copies_ = value;
}

// optional double CreateOn = 21;
inline bool PrtStationOrderInfo::has_createon() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void PrtStationOrderInfo::set_has_createon() {
  _has_bits_[0] |= 0x00100000u;
}
inline void PrtStationOrderInfo::clear_has_createon() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void PrtStationOrderInfo::clear_createon() {
  createon_ = 0;
  clear_has_createon();
}
inline double PrtStationOrderInfo::createon() const {
  return createon_;
}
inline void PrtStationOrderInfo::set_createon(double value) {
  set_has_createon();
  createon_ = value;
}

// optional double PayTime = 22;
inline bool PrtStationOrderInfo::has_paytime() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void PrtStationOrderInfo::set_has_paytime() {
  _has_bits_[0] |= 0x00200000u;
}
inline void PrtStationOrderInfo::clear_has_paytime() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void PrtStationOrderInfo::clear_paytime() {
  paytime_ = 0;
  clear_has_paytime();
}
inline double PrtStationOrderInfo::paytime() const {
  return paytime_;
}
inline void PrtStationOrderInfo::set_paytime(double value) {
  set_has_paytime();
  paytime_ = value;
}

// optional .isafetec.Pay_State PayState = 23;
inline bool PrtStationOrderInfo::has_paystate() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void PrtStationOrderInfo::set_has_paystate() {
  _has_bits_[0] |= 0x00400000u;
}
inline void PrtStationOrderInfo::clear_has_paystate() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void PrtStationOrderInfo::clear_paystate() {
  paystate_ = 0;
  clear_has_paystate();
}
inline isafetec::Pay_State PrtStationOrderInfo::paystate() const {
  return static_cast< isafetec::Pay_State >(paystate_);
}
inline void PrtStationOrderInfo::set_paystate(isafetec::Pay_State value) {
  GOOGLE_DCHECK(isafetec::Pay_State_IsValid(value));
  set_has_paystate();
  paystate_ = value;
}

// optional .isafetec.Job_Op_State JobOpState = 24;
inline bool PrtStationOrderInfo::has_jobopstate() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void PrtStationOrderInfo::set_has_jobopstate() {
  _has_bits_[0] |= 0x00800000u;
}
inline void PrtStationOrderInfo::clear_has_jobopstate() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void PrtStationOrderInfo::clear_jobopstate() {
  jobopstate_ = 0;
  clear_has_jobopstate();
}
inline isafetec::Job_Op_State PrtStationOrderInfo::jobopstate() const {
  return static_cast< isafetec::Job_Op_State >(jobopstate_);
}
inline void PrtStationOrderInfo::set_jobopstate(isafetec::Job_Op_State value) {
  GOOGLE_DCHECK(isafetec::Job_Op_State_IsValid(value));
  set_has_jobopstate();
  jobopstate_ = value;
}

// optional double JobCompleteTime = 25;
inline bool PrtStationOrderInfo::has_jobcompletetime() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void PrtStationOrderInfo::set_has_jobcompletetime() {
  _has_bits_[0] |= 0x01000000u;
}
inline void PrtStationOrderInfo::clear_has_jobcompletetime() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void PrtStationOrderInfo::clear_jobcompletetime() {
  jobcompletetime_ = 0;
  clear_has_jobcompletetime();
}
inline double PrtStationOrderInfo::jobcompletetime() const {
  return jobcompletetime_;
}
inline void PrtStationOrderInfo::set_jobcompletetime(double value) {
  set_has_jobcompletetime();
  jobcompletetime_ = value;
}

// optional double JobCompleteNotifyTime = 26;
inline bool PrtStationOrderInfo::has_jobcompletenotifytime() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void PrtStationOrderInfo::set_has_jobcompletenotifytime() {
  _has_bits_[0] |= 0x02000000u;
}
inline void PrtStationOrderInfo::clear_has_jobcompletenotifytime() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void PrtStationOrderInfo::clear_jobcompletenotifytime() {
  jobcompletenotifytime_ = 0;
  clear_has_jobcompletenotifytime();
}
inline double PrtStationOrderInfo::jobcompletenotifytime() const {
  return jobcompletenotifytime_;
}
inline void PrtStationOrderInfo::set_jobcompletenotifytime(double value) {
  set_has_jobcompletenotifytime();
  jobcompletenotifytime_ = value;
}

// optional string PaymentUrl = 27;
inline bool PrtStationOrderInfo::has_paymenturl() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void PrtStationOrderInfo::set_has_paymenturl() {
  _has_bits_[0] |= 0x04000000u;
}
inline void PrtStationOrderInfo::clear_has_paymenturl() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void PrtStationOrderInfo::clear_paymenturl() {
  if (paymenturl_ != &::google::protobuf::internal::kEmptyString) {
    paymenturl_->clear();
  }
  clear_has_paymenturl();
}
inline const ::std::string& PrtStationOrderInfo::paymenturl() const {
  return *paymenturl_;
}
inline void PrtStationOrderInfo::set_paymenturl(const ::std::string& value) {
  set_has_paymenturl();
  if (paymenturl_ == &::google::protobuf::internal::kEmptyString) {
    paymenturl_ = new ::std::string;
  }
  paymenturl_->assign(value);
}
inline void PrtStationOrderInfo::set_paymenturl(const char* value) {
  set_has_paymenturl();
  if (paymenturl_ == &::google::protobuf::internal::kEmptyString) {
    paymenturl_ = new ::std::string;
  }
  paymenturl_->assign(value);
}
inline void PrtStationOrderInfo::set_paymenturl(const char* value, size_t size) {
  set_has_paymenturl();
  if (paymenturl_ == &::google::protobuf::internal::kEmptyString) {
    paymenturl_ = new ::std::string;
  }
  paymenturl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtStationOrderInfo::mutable_paymenturl() {
  set_has_paymenturl();
  if (paymenturl_ == &::google::protobuf::internal::kEmptyString) {
    paymenturl_ = new ::std::string;
  }
  return paymenturl_;
}
inline ::std::string* PrtStationOrderInfo::release_paymenturl() {
  clear_has_paymenturl();
  if (paymenturl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = paymenturl_;
    paymenturl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string comment = 28;
inline bool PrtStationOrderInfo::has_comment() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void PrtStationOrderInfo::set_has_comment() {
  _has_bits_[0] |= 0x08000000u;
}
inline void PrtStationOrderInfo::clear_has_comment() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void PrtStationOrderInfo::clear_comment() {
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    comment_->clear();
  }
  clear_has_comment();
}
inline const ::std::string& PrtStationOrderInfo::comment() const {
  return *comment_;
}
inline void PrtStationOrderInfo::set_comment(const ::std::string& value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void PrtStationOrderInfo::set_comment(const char* value) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(value);
}
inline void PrtStationOrderInfo::set_comment(const char* value, size_t size) {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  comment_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrtStationOrderInfo::mutable_comment() {
  set_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    comment_ = new ::std::string;
  }
  return comment_;
}
inline ::std::string* PrtStationOrderInfo::release_comment() {
  clear_has_comment();
  if (comment_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = comment_;
    comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 OrgID = 29;
inline bool PrtStationOrderInfo::has_orgid() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void PrtStationOrderInfo::set_has_orgid() {
  _has_bits_[0] |= 0x10000000u;
}
inline void PrtStationOrderInfo::clear_has_orgid() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void PrtStationOrderInfo::clear_orgid() {
  orgid_ = 0;
  clear_has_orgid();
}
inline ::google::protobuf::int32 PrtStationOrderInfo::orgid() const {
  return orgid_;
}
inline void PrtStationOrderInfo::set_orgid(::google::protobuf::int32 value) {
  set_has_orgid();
  orgid_ = value;
}

// -------------------------------------------------------------------

// PrtStationOrderHeader

// optional int32 SerFlag = 1;
inline bool PrtStationOrderHeader::has_serflag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrtStationOrderHeader::set_has_serflag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrtStationOrderHeader::clear_has_serflag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrtStationOrderHeader::clear_serflag() {
  serflag_ = 0;
  clear_has_serflag();
}
inline ::google::protobuf::int32 PrtStationOrderHeader::serflag() const {
  return serflag_;
}
inline void PrtStationOrderHeader::set_serflag(::google::protobuf::int32 value) {
  set_has_serflag();
  serflag_ = value;
}

// optional int32 Equipid = 2;
inline bool PrtStationOrderHeader::has_equipid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrtStationOrderHeader::set_has_equipid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrtStationOrderHeader::clear_has_equipid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrtStationOrderHeader::clear_equipid() {
  equipid_ = 0;
  clear_has_equipid();
}
inline ::google::protobuf::int32 PrtStationOrderHeader::equipid() const {
  return equipid_;
}
inline void PrtStationOrderHeader::set_equipid(::google::protobuf::int32 value) {
  set_has_equipid();
  equipid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace isafetec

// @@protoc_insertion_point(global_scope)
